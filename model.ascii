node {
  name: "gyrx_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 450
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "gyry_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 450
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "gyrz_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 450
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "laccx_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 450
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "laccy_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 450
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "laccz_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 450
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "magx_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 450
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "magy_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 450
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "magz_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 450
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "pres_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 450
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6822651
    }
  }
}
node {
  name: "conv1d_1/random_uniform/sub"
  op: "Sub"
  input: "conv1d_1/random_uniform/max"
  input: "conv1d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/random_uniform/mul"
  op: "Mul"
  input: "conv1d_1/random_uniform/RandomUniform"
  input: "conv1d_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/random_uniform"
  op: "Add"
  input: "conv1d_1/random_uniform/mul"
  input: "conv1d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/kernel/Assign"
  op: "Assign"
  input: "conv1d_1/kernel"
  input: "conv1d_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/kernel/read"
  op: "Identity"
  input: "conv1d_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
}
node {
  name: "conv1d_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/bias/Assign"
  op: "Assign"
  input: "conv1d_1/bias"
  input: "conv1d_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/bias/read"
  op: "Identity"
  input: "conv1d_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims"
  op: "ExpandDims"
  input: "gyrx_input"
  input: "conv1d_1/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_1/kernel/read"
  input: "conv1d_1/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_1/convolution/ExpandDims"
  input: "conv1d_1/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_1/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/Reshape"
  op: "Reshape"
  input: "conv1d_1/bias/read"
  input: "conv1d_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/add"
  op: "Add"
  input: "conv1d_1/convolution/Squeeze"
  input: "conv1d_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/Relu"
  op: "Relu"
  input: "conv1d_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3552291
    }
  }
}
node {
  name: "conv1d_3/random_uniform/sub"
  op: "Sub"
  input: "conv1d_3/random_uniform/max"
  input: "conv1d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/random_uniform/mul"
  op: "Mul"
  input: "conv1d_3/random_uniform/RandomUniform"
  input: "conv1d_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/random_uniform"
  op: "Add"
  input: "conv1d_3/random_uniform/mul"
  input: "conv1d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/kernel/Assign"
  op: "Assign"
  input: "conv1d_3/kernel"
  input: "conv1d_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/kernel/read"
  op: "Identity"
  input: "conv1d_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
}
node {
  name: "conv1d_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/bias/Assign"
  op: "Assign"
  input: "conv1d_3/bias"
  input: "conv1d_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/bias/read"
  op: "Identity"
  input: "conv1d_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims"
  op: "ExpandDims"
  input: "gyry_input"
  input: "conv1d_3/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_3/kernel/read"
  input: "conv1d_3/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_3/convolution/ExpandDims"
  input: "conv1d_3/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_3/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_3/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/Reshape"
  op: "Reshape"
  input: "conv1d_3/bias/read"
  input: "conv1d_3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/add"
  op: "Add"
  input: "conv1d_3/convolution/Squeeze"
  input: "conv1d_3/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/Relu"
  op: "Relu"
  input: "conv1d_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_5/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_5/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_5/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_5/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_5/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2717421
    }
  }
}
node {
  name: "conv1d_5/random_uniform/sub"
  op: "Sub"
  input: "conv1d_5/random_uniform/max"
  input: "conv1d_5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_5/random_uniform/mul"
  op: "Mul"
  input: "conv1d_5/random_uniform/RandomUniform"
  input: "conv1d_5/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_5/random_uniform"
  op: "Add"
  input: "conv1d_5/random_uniform/mul"
  input: "conv1d_5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_5/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_5/kernel/Assign"
  op: "Assign"
  input: "conv1d_5/kernel"
  input: "conv1d_5/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_5/kernel/read"
  op: "Identity"
  input: "conv1d_5/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/kernel"
      }
    }
  }
}
node {
  name: "conv1d_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_5/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_5/bias/Assign"
  op: "Assign"
  input: "conv1d_5/bias"
  input: "conv1d_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_5/bias/read"
  op: "Identity"
  input: "conv1d_5/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/bias"
      }
    }
  }
}
node {
  name: "conv1d_5/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_5/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_5/convolution/ExpandDims"
  op: "ExpandDims"
  input: "gyrz_input"
  input: "conv1d_5/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_5/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_5/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_5/kernel/read"
  input: "conv1d_5/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_5/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_5/convolution/ExpandDims"
  input: "conv1d_5/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_5/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_5/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_5/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_5/Reshape"
  op: "Reshape"
  input: "conv1d_5/bias/read"
  input: "conv1d_5/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_5/add"
  op: "Add"
  input: "conv1d_5/convolution/Squeeze"
  input: "conv1d_5/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_5/Relu"
  op: "Relu"
  input: "conv1d_5/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_7/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_7/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_7/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_7/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_7/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9384332
    }
  }
}
node {
  name: "conv1d_7/random_uniform/sub"
  op: "Sub"
  input: "conv1d_7/random_uniform/max"
  input: "conv1d_7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_7/random_uniform/mul"
  op: "Mul"
  input: "conv1d_7/random_uniform/RandomUniform"
  input: "conv1d_7/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_7/random_uniform"
  op: "Add"
  input: "conv1d_7/random_uniform/mul"
  input: "conv1d_7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_7/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_7/kernel/Assign"
  op: "Assign"
  input: "conv1d_7/kernel"
  input: "conv1d_7/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_7/kernel/read"
  op: "Identity"
  input: "conv1d_7/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/kernel"
      }
    }
  }
}
node {
  name: "conv1d_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_7/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_7/bias/Assign"
  op: "Assign"
  input: "conv1d_7/bias"
  input: "conv1d_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_7/bias/read"
  op: "Identity"
  input: "conv1d_7/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/bias"
      }
    }
  }
}
node {
  name: "conv1d_7/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_7/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_7/convolution/ExpandDims"
  op: "ExpandDims"
  input: "laccx_input"
  input: "conv1d_7/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_7/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_7/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_7/kernel/read"
  input: "conv1d_7/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_7/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_7/convolution/ExpandDims"
  input: "conv1d_7/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_7/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_7/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_7/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_7/Reshape"
  op: "Reshape"
  input: "conv1d_7/bias/read"
  input: "conv1d_7/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_7/add"
  op: "Add"
  input: "conv1d_7/convolution/Squeeze"
  input: "conv1d_7/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_7/Relu"
  op: "Relu"
  input: "conv1d_7/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_9/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_9/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_9/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_9/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_9/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8528998
    }
  }
}
node {
  name: "conv1d_9/random_uniform/sub"
  op: "Sub"
  input: "conv1d_9/random_uniform/max"
  input: "conv1d_9/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_9/random_uniform/mul"
  op: "Mul"
  input: "conv1d_9/random_uniform/RandomUniform"
  input: "conv1d_9/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_9/random_uniform"
  op: "Add"
  input: "conv1d_9/random_uniform/mul"
  input: "conv1d_9/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_9/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_9/kernel/Assign"
  op: "Assign"
  input: "conv1d_9/kernel"
  input: "conv1d_9/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_9/kernel/read"
  op: "Identity"
  input: "conv1d_9/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/kernel"
      }
    }
  }
}
node {
  name: "conv1d_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_9/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_9/bias/Assign"
  op: "Assign"
  input: "conv1d_9/bias"
  input: "conv1d_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_9/bias/read"
  op: "Identity"
  input: "conv1d_9/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/bias"
      }
    }
  }
}
node {
  name: "conv1d_9/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_9/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_9/convolution/ExpandDims"
  op: "ExpandDims"
  input: "laccy_input"
  input: "conv1d_9/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_9/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_9/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_9/kernel/read"
  input: "conv1d_9/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_9/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_9/convolution/ExpandDims"
  input: "conv1d_9/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_9/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_9/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_9/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_9/Reshape"
  op: "Reshape"
  input: "conv1d_9/bias/read"
  input: "conv1d_9/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_9/add"
  op: "Add"
  input: "conv1d_9/convolution/Squeeze"
  input: "conv1d_9/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_9/Relu"
  op: "Relu"
  input: "conv1d_9/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_11/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_11/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_11/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_11/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_11/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8743828
    }
  }
}
node {
  name: "conv1d_11/random_uniform/sub"
  op: "Sub"
  input: "conv1d_11/random_uniform/max"
  input: "conv1d_11/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_11/random_uniform/mul"
  op: "Mul"
  input: "conv1d_11/random_uniform/RandomUniform"
  input: "conv1d_11/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_11/random_uniform"
  op: "Add"
  input: "conv1d_11/random_uniform/mul"
  input: "conv1d_11/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_11/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_11/kernel/Assign"
  op: "Assign"
  input: "conv1d_11/kernel"
  input: "conv1d_11/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_11/kernel/read"
  op: "Identity"
  input: "conv1d_11/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/kernel"
      }
    }
  }
}
node {
  name: "conv1d_11/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_11/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_11/bias/Assign"
  op: "Assign"
  input: "conv1d_11/bias"
  input: "conv1d_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_11/bias/read"
  op: "Identity"
  input: "conv1d_11/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/bias"
      }
    }
  }
}
node {
  name: "conv1d_11/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_11/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_11/convolution/ExpandDims"
  op: "ExpandDims"
  input: "laccz_input"
  input: "conv1d_11/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_11/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_11/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_11/kernel/read"
  input: "conv1d_11/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_11/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_11/convolution/ExpandDims"
  input: "conv1d_11/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_11/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_11/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_11/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_11/Reshape"
  op: "Reshape"
  input: "conv1d_11/bias/read"
  input: "conv1d_11/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_11/add"
  op: "Add"
  input: "conv1d_11/convolution/Squeeze"
  input: "conv1d_11/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_11/Relu"
  op: "Relu"
  input: "conv1d_11/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_13/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_13/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_13/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_13/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_13/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8424377
    }
  }
}
node {
  name: "conv1d_13/random_uniform/sub"
  op: "Sub"
  input: "conv1d_13/random_uniform/max"
  input: "conv1d_13/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_13/random_uniform/mul"
  op: "Mul"
  input: "conv1d_13/random_uniform/RandomUniform"
  input: "conv1d_13/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_13/random_uniform"
  op: "Add"
  input: "conv1d_13/random_uniform/mul"
  input: "conv1d_13/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_13/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_13/kernel/Assign"
  op: "Assign"
  input: "conv1d_13/kernel"
  input: "conv1d_13/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_13/kernel/read"
  op: "Identity"
  input: "conv1d_13/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/kernel"
      }
    }
  }
}
node {
  name: "conv1d_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_13/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_13/bias/Assign"
  op: "Assign"
  input: "conv1d_13/bias"
  input: "conv1d_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_13/bias/read"
  op: "Identity"
  input: "conv1d_13/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/bias"
      }
    }
  }
}
node {
  name: "conv1d_13/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_13/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_13/convolution/ExpandDims"
  op: "ExpandDims"
  input: "magx_input"
  input: "conv1d_13/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_13/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_13/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_13/kernel/read"
  input: "conv1d_13/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_13/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_13/convolution/ExpandDims"
  input: "conv1d_13/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_13/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_13/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_13/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_13/Reshape"
  op: "Reshape"
  input: "conv1d_13/bias/read"
  input: "conv1d_13/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_13/add"
  op: "Add"
  input: "conv1d_13/convolution/Squeeze"
  input: "conv1d_13/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_13/Relu"
  op: "Relu"
  input: "conv1d_13/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_15/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_15/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_15/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_15/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_15/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4758645
    }
  }
}
node {
  name: "conv1d_15/random_uniform/sub"
  op: "Sub"
  input: "conv1d_15/random_uniform/max"
  input: "conv1d_15/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_15/random_uniform/mul"
  op: "Mul"
  input: "conv1d_15/random_uniform/RandomUniform"
  input: "conv1d_15/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_15/random_uniform"
  op: "Add"
  input: "conv1d_15/random_uniform/mul"
  input: "conv1d_15/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_15/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_15/kernel/Assign"
  op: "Assign"
  input: "conv1d_15/kernel"
  input: "conv1d_15/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_15/kernel/read"
  op: "Identity"
  input: "conv1d_15/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/kernel"
      }
    }
  }
}
node {
  name: "conv1d_15/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_15/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_15/bias/Assign"
  op: "Assign"
  input: "conv1d_15/bias"
  input: "conv1d_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_15/bias/read"
  op: "Identity"
  input: "conv1d_15/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/bias"
      }
    }
  }
}
node {
  name: "conv1d_15/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_15/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_15/convolution/ExpandDims"
  op: "ExpandDims"
  input: "magy_input"
  input: "conv1d_15/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_15/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_15/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_15/kernel/read"
  input: "conv1d_15/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_15/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_15/convolution/ExpandDims"
  input: "conv1d_15/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_15/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_15/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_15/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_15/Reshape"
  op: "Reshape"
  input: "conv1d_15/bias/read"
  input: "conv1d_15/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_15/add"
  op: "Add"
  input: "conv1d_15/convolution/Squeeze"
  input: "conv1d_15/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_15/Relu"
  op: "Relu"
  input: "conv1d_15/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_17/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_17/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_17/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_17/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_17/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6169146
    }
  }
}
node {
  name: "conv1d_17/random_uniform/sub"
  op: "Sub"
  input: "conv1d_17/random_uniform/max"
  input: "conv1d_17/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_17/random_uniform/mul"
  op: "Mul"
  input: "conv1d_17/random_uniform/RandomUniform"
  input: "conv1d_17/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_17/random_uniform"
  op: "Add"
  input: "conv1d_17/random_uniform/mul"
  input: "conv1d_17/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_17/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_17/kernel/Assign"
  op: "Assign"
  input: "conv1d_17/kernel"
  input: "conv1d_17/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_17/kernel/read"
  op: "Identity"
  input: "conv1d_17/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/kernel"
      }
    }
  }
}
node {
  name: "conv1d_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_17/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_17/bias/Assign"
  op: "Assign"
  input: "conv1d_17/bias"
  input: "conv1d_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_17/bias/read"
  op: "Identity"
  input: "conv1d_17/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/bias"
      }
    }
  }
}
node {
  name: "conv1d_17/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_17/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_17/convolution/ExpandDims"
  op: "ExpandDims"
  input: "magz_input"
  input: "conv1d_17/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_17/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_17/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_17/kernel/read"
  input: "conv1d_17/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_17/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_17/convolution/ExpandDims"
  input: "conv1d_17/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_17/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_17/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_17/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_17/Reshape"
  op: "Reshape"
  input: "conv1d_17/bias/read"
  input: "conv1d_17/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_17/add"
  op: "Add"
  input: "conv1d_17/convolution/Squeeze"
  input: "conv1d_17/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_17/Relu"
  op: "Relu"
  input: "conv1d_17/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_1/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_1/Relu"
  input: "max_pooling1d_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_1/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_1/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_1/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_3/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_3/Relu"
  input: "max_pooling1d_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_3/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_3/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_5/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_5/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_5/Relu"
  input: "max_pooling1d_5/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_5/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_5/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_5/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_5/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_7/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_7/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_7/Relu"
  input: "max_pooling1d_7/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_7/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_7/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_7/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_7/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_9/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_9/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_9/Relu"
  input: "max_pooling1d_9/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_9/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_9/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_9/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_9/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_11/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_11/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_11/Relu"
  input: "max_pooling1d_11/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_11/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_11/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_11/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_11/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_13/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_13/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_13/Relu"
  input: "max_pooling1d_13/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_13/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_13/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_13/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_13/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_15/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_15/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_15/Relu"
  input: "max_pooling1d_15/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_15/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_15/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_15/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_15/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_17/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_17/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_17/Relu"
  input: "max_pooling1d_17/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_17/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_17/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_17/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_17/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_19/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_19/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_19/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17541159689426422
      }
    }
  }
}
node {
  name: "conv1d_19/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_19/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8522552
    }
  }
}
node {
  name: "conv1d_19/random_uniform/sub"
  op: "Sub"
  input: "conv1d_19/random_uniform/max"
  input: "conv1d_19/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_19/random_uniform/mul"
  op: "Mul"
  input: "conv1d_19/random_uniform/RandomUniform"
  input: "conv1d_19/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_19/random_uniform"
  op: "Add"
  input: "conv1d_19/random_uniform/mul"
  input: "conv1d_19/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_19/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_19/kernel/Assign"
  op: "Assign"
  input: "conv1d_19/kernel"
  input: "conv1d_19/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_19/kernel/read"
  op: "Identity"
  input: "conv1d_19/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/kernel"
      }
    }
  }
}
node {
  name: "conv1d_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_19/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_19/bias/Assign"
  op: "Assign"
  input: "conv1d_19/bias"
  input: "conv1d_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_19/bias/read"
  op: "Identity"
  input: "conv1d_19/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/bias"
      }
    }
  }
}
node {
  name: "conv1d_19/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_19/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_19/convolution/ExpandDims"
  op: "ExpandDims"
  input: "pres_input"
  input: "conv1d_19/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_19/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_19/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_19/kernel/read"
  input: "conv1d_19/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_19/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_19/convolution/ExpandDims"
  input: "conv1d_19/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_19/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_19/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_19/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_19/Reshape"
  op: "Reshape"
  input: "conv1d_19/bias/read"
  input: "conv1d_19/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_19/add"
  op: "Add"
  input: "conv1d_19/convolution/Squeeze"
  input: "conv1d_19/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_19/Relu"
  op: "Relu"
  input: "conv1d_19/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3466184
    }
  }
}
node {
  name: "conv1d_2/random_uniform/sub"
  op: "Sub"
  input: "conv1d_2/random_uniform/max"
  input: "conv1d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/random_uniform/mul"
  op: "Mul"
  input: "conv1d_2/random_uniform/RandomUniform"
  input: "conv1d_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/random_uniform"
  op: "Add"
  input: "conv1d_2/random_uniform/mul"
  input: "conv1d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/kernel/Assign"
  op: "Assign"
  input: "conv1d_2/kernel"
  input: "conv1d_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/kernel/read"
  op: "Identity"
  input: "conv1d_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
}
node {
  name: "conv1d_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/bias/Assign"
  op: "Assign"
  input: "conv1d_2/bias"
  input: "conv1d_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/bias/read"
  op: "Identity"
  input: "conv1d_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims"
  op: "ExpandDims"
  input: "max_pooling1d_1/Squeeze"
  input: "conv1d_2/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_2/kernel/read"
  input: "conv1d_2/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_2/convolution/ExpandDims"
  input: "conv1d_2/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_2/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_2/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/Reshape"
  op: "Reshape"
  input: "conv1d_2/bias/read"
  input: "conv1d_2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/add"
  op: "Add"
  input: "conv1d_2/convolution/Squeeze"
  input: "conv1d_2/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/Relu"
  op: "Relu"
  input: "conv1d_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_4/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1334575
    }
  }
}
node {
  name: "conv1d_4/random_uniform/sub"
  op: "Sub"
  input: "conv1d_4/random_uniform/max"
  input: "conv1d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/random_uniform/mul"
  op: "Mul"
  input: "conv1d_4/random_uniform/RandomUniform"
  input: "conv1d_4/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/random_uniform"
  op: "Add"
  input: "conv1d_4/random_uniform/mul"
  input: "conv1d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_4/kernel/Assign"
  op: "Assign"
  input: "conv1d_4/kernel"
  input: "conv1d_4/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/kernel/read"
  op: "Identity"
  input: "conv1d_4/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
}
node {
  name: "conv1d_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_4/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_4/bias/Assign"
  op: "Assign"
  input: "conv1d_4/bias"
  input: "conv1d_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/bias/read"
  op: "Identity"
  input: "conv1d_4/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims"
  op: "ExpandDims"
  input: "max_pooling1d_3/Squeeze"
  input: "conv1d_4/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_4/kernel/read"
  input: "conv1d_4/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_4/convolution/ExpandDims"
  input: "conv1d_4/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_4/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_4/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_4/Reshape"
  op: "Reshape"
  input: "conv1d_4/bias/read"
  input: "conv1d_4/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/add"
  op: "Add"
  input: "conv1d_4/convolution/Squeeze"
  input: "conv1d_4/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/Relu"
  op: "Relu"
  input: "conv1d_4/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_6/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_6/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_6/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_6/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_6/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9103718
    }
  }
}
node {
  name: "conv1d_6/random_uniform/sub"
  op: "Sub"
  input: "conv1d_6/random_uniform/max"
  input: "conv1d_6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_6/random_uniform/mul"
  op: "Mul"
  input: "conv1d_6/random_uniform/RandomUniform"
  input: "conv1d_6/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_6/random_uniform"
  op: "Add"
  input: "conv1d_6/random_uniform/mul"
  input: "conv1d_6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_6/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_6/kernel/Assign"
  op: "Assign"
  input: "conv1d_6/kernel"
  input: "conv1d_6/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_6/kernel/read"
  op: "Identity"
  input: "conv1d_6/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/kernel"
      }
    }
  }
}
node {
  name: "conv1d_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_6/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_6/bias/Assign"
  op: "Assign"
  input: "conv1d_6/bias"
  input: "conv1d_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_6/bias/read"
  op: "Identity"
  input: "conv1d_6/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/bias"
      }
    }
  }
}
node {
  name: "conv1d_6/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_6/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_6/convolution/ExpandDims"
  op: "ExpandDims"
  input: "max_pooling1d_5/Squeeze"
  input: "conv1d_6/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_6/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_6/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_6/kernel/read"
  input: "conv1d_6/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_6/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_6/convolution/ExpandDims"
  input: "conv1d_6/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_6/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_6/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_6/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_6/Reshape"
  op: "Reshape"
  input: "conv1d_6/bias/read"
  input: "conv1d_6/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_6/add"
  op: "Add"
  input: "conv1d_6/convolution/Squeeze"
  input: "conv1d_6/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_6/Relu"
  op: "Relu"
  input: "conv1d_6/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_8/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_8/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_8/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_8/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_8/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6755842
    }
  }
}
node {
  name: "conv1d_8/random_uniform/sub"
  op: "Sub"
  input: "conv1d_8/random_uniform/max"
  input: "conv1d_8/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_8/random_uniform/mul"
  op: "Mul"
  input: "conv1d_8/random_uniform/RandomUniform"
  input: "conv1d_8/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_8/random_uniform"
  op: "Add"
  input: "conv1d_8/random_uniform/mul"
  input: "conv1d_8/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_8/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_8/kernel/Assign"
  op: "Assign"
  input: "conv1d_8/kernel"
  input: "conv1d_8/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_8/kernel/read"
  op: "Identity"
  input: "conv1d_8/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/kernel"
      }
    }
  }
}
node {
  name: "conv1d_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_8/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_8/bias/Assign"
  op: "Assign"
  input: "conv1d_8/bias"
  input: "conv1d_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_8/bias/read"
  op: "Identity"
  input: "conv1d_8/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/bias"
      }
    }
  }
}
node {
  name: "conv1d_8/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_8/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_8/convolution/ExpandDims"
  op: "ExpandDims"
  input: "max_pooling1d_7/Squeeze"
  input: "conv1d_8/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_8/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_8/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_8/kernel/read"
  input: "conv1d_8/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_8/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_8/convolution/ExpandDims"
  input: "conv1d_8/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_8/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_8/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_8/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_8/Reshape"
  op: "Reshape"
  input: "conv1d_8/bias/read"
  input: "conv1d_8/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_8/add"
  op: "Add"
  input: "conv1d_8/convolution/Squeeze"
  input: "conv1d_8/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_8/Relu"
  op: "Relu"
  input: "conv1d_8/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_10/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_10/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_10/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_10/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_10/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4700853
    }
  }
}
node {
  name: "conv1d_10/random_uniform/sub"
  op: "Sub"
  input: "conv1d_10/random_uniform/max"
  input: "conv1d_10/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_10/random_uniform/mul"
  op: "Mul"
  input: "conv1d_10/random_uniform/RandomUniform"
  input: "conv1d_10/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_10/random_uniform"
  op: "Add"
  input: "conv1d_10/random_uniform/mul"
  input: "conv1d_10/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_10/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_10/kernel/Assign"
  op: "Assign"
  input: "conv1d_10/kernel"
  input: "conv1d_10/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_10/kernel/read"
  op: "Identity"
  input: "conv1d_10/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/kernel"
      }
    }
  }
}
node {
  name: "conv1d_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_10/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_10/bias/Assign"
  op: "Assign"
  input: "conv1d_10/bias"
  input: "conv1d_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_10/bias/read"
  op: "Identity"
  input: "conv1d_10/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/bias"
      }
    }
  }
}
node {
  name: "conv1d_10/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_10/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_10/convolution/ExpandDims"
  op: "ExpandDims"
  input: "max_pooling1d_9/Squeeze"
  input: "conv1d_10/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_10/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_10/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_10/kernel/read"
  input: "conv1d_10/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_10/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_10/convolution/ExpandDims"
  input: "conv1d_10/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_10/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_10/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_10/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_10/Reshape"
  op: "Reshape"
  input: "conv1d_10/bias/read"
  input: "conv1d_10/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_10/add"
  op: "Add"
  input: "conv1d_10/convolution/Squeeze"
  input: "conv1d_10/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_10/Relu"
  op: "Relu"
  input: "conv1d_10/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_12/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_12/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_12/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_12/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_12/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7009795
    }
  }
}
node {
  name: "conv1d_12/random_uniform/sub"
  op: "Sub"
  input: "conv1d_12/random_uniform/max"
  input: "conv1d_12/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_12/random_uniform/mul"
  op: "Mul"
  input: "conv1d_12/random_uniform/RandomUniform"
  input: "conv1d_12/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_12/random_uniform"
  op: "Add"
  input: "conv1d_12/random_uniform/mul"
  input: "conv1d_12/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_12/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_12/kernel/Assign"
  op: "Assign"
  input: "conv1d_12/kernel"
  input: "conv1d_12/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_12/kernel/read"
  op: "Identity"
  input: "conv1d_12/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/kernel"
      }
    }
  }
}
node {
  name: "conv1d_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_12/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_12/bias/Assign"
  op: "Assign"
  input: "conv1d_12/bias"
  input: "conv1d_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_12/bias/read"
  op: "Identity"
  input: "conv1d_12/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/bias"
      }
    }
  }
}
node {
  name: "conv1d_12/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_12/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_12/convolution/ExpandDims"
  op: "ExpandDims"
  input: "max_pooling1d_11/Squeeze"
  input: "conv1d_12/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_12/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_12/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_12/kernel/read"
  input: "conv1d_12/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_12/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_12/convolution/ExpandDims"
  input: "conv1d_12/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_12/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_12/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_12/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_12/Reshape"
  op: "Reshape"
  input: "conv1d_12/bias/read"
  input: "conv1d_12/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_12/add"
  op: "Add"
  input: "conv1d_12/convolution/Squeeze"
  input: "conv1d_12/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_12/Relu"
  op: "Relu"
  input: "conv1d_12/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_14/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_14/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_14/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_14/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_14/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 613933
    }
  }
}
node {
  name: "conv1d_14/random_uniform/sub"
  op: "Sub"
  input: "conv1d_14/random_uniform/max"
  input: "conv1d_14/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_14/random_uniform/mul"
  op: "Mul"
  input: "conv1d_14/random_uniform/RandomUniform"
  input: "conv1d_14/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_14/random_uniform"
  op: "Add"
  input: "conv1d_14/random_uniform/mul"
  input: "conv1d_14/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_14/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_14/kernel/Assign"
  op: "Assign"
  input: "conv1d_14/kernel"
  input: "conv1d_14/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_14/kernel/read"
  op: "Identity"
  input: "conv1d_14/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/kernel"
      }
    }
  }
}
node {
  name: "conv1d_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_14/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_14/bias/Assign"
  op: "Assign"
  input: "conv1d_14/bias"
  input: "conv1d_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_14/bias/read"
  op: "Identity"
  input: "conv1d_14/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/bias"
      }
    }
  }
}
node {
  name: "conv1d_14/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_14/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_14/convolution/ExpandDims"
  op: "ExpandDims"
  input: "max_pooling1d_13/Squeeze"
  input: "conv1d_14/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_14/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_14/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_14/kernel/read"
  input: "conv1d_14/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_14/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_14/convolution/ExpandDims"
  input: "conv1d_14/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_14/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_14/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_14/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_14/Reshape"
  op: "Reshape"
  input: "conv1d_14/bias/read"
  input: "conv1d_14/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_14/add"
  op: "Add"
  input: "conv1d_14/convolution/Squeeze"
  input: "conv1d_14/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_14/Relu"
  op: "Relu"
  input: "conv1d_14/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_16/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_16/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_16/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_16/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_16/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3484894
    }
  }
}
node {
  name: "conv1d_16/random_uniform/sub"
  op: "Sub"
  input: "conv1d_16/random_uniform/max"
  input: "conv1d_16/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_16/random_uniform/mul"
  op: "Mul"
  input: "conv1d_16/random_uniform/RandomUniform"
  input: "conv1d_16/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_16/random_uniform"
  op: "Add"
  input: "conv1d_16/random_uniform/mul"
  input: "conv1d_16/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_16/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_16/kernel/Assign"
  op: "Assign"
  input: "conv1d_16/kernel"
  input: "conv1d_16/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_16/kernel/read"
  op: "Identity"
  input: "conv1d_16/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/kernel"
      }
    }
  }
}
node {
  name: "conv1d_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_16/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_16/bias/Assign"
  op: "Assign"
  input: "conv1d_16/bias"
  input: "conv1d_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_16/bias/read"
  op: "Identity"
  input: "conv1d_16/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/bias"
      }
    }
  }
}
node {
  name: "conv1d_16/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_16/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_16/convolution/ExpandDims"
  op: "ExpandDims"
  input: "max_pooling1d_15/Squeeze"
  input: "conv1d_16/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_16/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_16/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_16/kernel/read"
  input: "conv1d_16/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_16/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_16/convolution/ExpandDims"
  input: "conv1d_16/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_16/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_16/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_16/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_16/Reshape"
  op: "Reshape"
  input: "conv1d_16/bias/read"
  input: "conv1d_16/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_16/add"
  op: "Add"
  input: "conv1d_16/convolution/Squeeze"
  input: "conv1d_16/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_16/Relu"
  op: "Relu"
  input: "conv1d_16/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_18/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_18/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_18/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_18/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_18/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1670275
    }
  }
}
node {
  name: "conv1d_18/random_uniform/sub"
  op: "Sub"
  input: "conv1d_18/random_uniform/max"
  input: "conv1d_18/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_18/random_uniform/mul"
  op: "Mul"
  input: "conv1d_18/random_uniform/RandomUniform"
  input: "conv1d_18/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_18/random_uniform"
  op: "Add"
  input: "conv1d_18/random_uniform/mul"
  input: "conv1d_18/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_18/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_18/kernel/Assign"
  op: "Assign"
  input: "conv1d_18/kernel"
  input: "conv1d_18/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_18/kernel/read"
  op: "Identity"
  input: "conv1d_18/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/kernel"
      }
    }
  }
}
node {
  name: "conv1d_18/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_18/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_18/bias/Assign"
  op: "Assign"
  input: "conv1d_18/bias"
  input: "conv1d_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_18/bias/read"
  op: "Identity"
  input: "conv1d_18/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/bias"
      }
    }
  }
}
node {
  name: "conv1d_18/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_18/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_18/convolution/ExpandDims"
  op: "ExpandDims"
  input: "max_pooling1d_17/Squeeze"
  input: "conv1d_18/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_18/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_18/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_18/kernel/read"
  input: "conv1d_18/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_18/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_18/convolution/ExpandDims"
  input: "conv1d_18/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_18/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_18/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_18/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_18/Reshape"
  op: "Reshape"
  input: "conv1d_18/bias/read"
  input: "conv1d_18/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_18/add"
  op: "Add"
  input: "conv1d_18/convolution/Squeeze"
  input: "conv1d_18/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_18/Relu"
  op: "Relu"
  input: "conv1d_18/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_19/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_19/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_19/Relu"
  input: "max_pooling1d_19/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_19/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_19/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_19/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_19/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_2/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_2/Relu"
  input: "max_pooling1d_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_2/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_2/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_4/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_4/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_4/Relu"
  input: "max_pooling1d_4/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_4/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_4/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_4/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_4/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_6/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_6/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_6/Relu"
  input: "max_pooling1d_6/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_6/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_6/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_6/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_6/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_8/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_8/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_8/Relu"
  input: "max_pooling1d_8/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_8/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_8/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_8/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_8/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_10/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_10/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_10/Relu"
  input: "max_pooling1d_10/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_10/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_10/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_10/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_10/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_12/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_12/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_12/Relu"
  input: "max_pooling1d_12/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_12/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_12/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_12/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_12/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_14/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_14/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_14/Relu"
  input: "max_pooling1d_14/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_14/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_14/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_14/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_14/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_16/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_16/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_16/Relu"
  input: "max_pooling1d_16/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_16/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_16/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_16/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_16/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_18/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_18/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_18/Relu"
  input: "max_pooling1d_18/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_18/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_18/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_18/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_18/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_20/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_20/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_20/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "conv1d_20/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_20/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7749938
    }
  }
}
node {
  name: "conv1d_20/random_uniform/sub"
  op: "Sub"
  input: "conv1d_20/random_uniform/max"
  input: "conv1d_20/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_20/random_uniform/mul"
  op: "Mul"
  input: "conv1d_20/random_uniform/RandomUniform"
  input: "conv1d_20/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_20/random_uniform"
  op: "Add"
  input: "conv1d_20/random_uniform/mul"
  input: "conv1d_20/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_20/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_20/kernel/Assign"
  op: "Assign"
  input: "conv1d_20/kernel"
  input: "conv1d_20/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_20/kernel/read"
  op: "Identity"
  input: "conv1d_20/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/kernel"
      }
    }
  }
}
node {
  name: "conv1d_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_20/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_20/bias/Assign"
  op: "Assign"
  input: "conv1d_20/bias"
  input: "conv1d_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_20/bias/read"
  op: "Identity"
  input: "conv1d_20/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/bias"
      }
    }
  }
}
node {
  name: "conv1d_20/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_20/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_20/convolution/ExpandDims"
  op: "ExpandDims"
  input: "max_pooling1d_19/Squeeze"
  input: "conv1d_20/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_20/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_20/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_20/kernel/read"
  input: "conv1d_20/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_20/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_20/convolution/ExpandDims"
  input: "conv1d_20/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_20/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_20/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_20/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_20/Reshape"
  op: "Reshape"
  input: "conv1d_20/bias/read"
  input: "conv1d_20/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_20/add"
  op: "Add"
  input: "conv1d_20/convolution/Squeeze"
  input: "conv1d_20/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_20/Relu"
  op: "Relu"
  input: "conv1d_20/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concatenate_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "concatenate_1/concat"
  op: "ConcatV2"
  input: "max_pooling1d_2/Squeeze"
  input: "max_pooling1d_4/Squeeze"
  input: "max_pooling1d_6/Squeeze"
  input: "concatenate_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concatenate_2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "concatenate_2/concat"
  op: "ConcatV2"
  input: "max_pooling1d_8/Squeeze"
  input: "max_pooling1d_10/Squeeze"
  input: "max_pooling1d_12/Squeeze"
  input: "concatenate_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concatenate_3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "concatenate_3/concat"
  op: "ConcatV2"
  input: "max_pooling1d_14/Squeeze"
  input: "max_pooling1d_16/Squeeze"
  input: "max_pooling1d_18/Squeeze"
  input: "concatenate_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_20/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_20/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_20/Relu"
  input: "max_pooling1d_20/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_20/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_20/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_20/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_20/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_22/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_22/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06933752447366714
      }
    }
  }
}
node {
  name: "conv1d_22/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06933752447366714
      }
    }
  }
}
node {
  name: "conv1d_22/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_22/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1833681
    }
  }
}
node {
  name: "conv1d_22/random_uniform/sub"
  op: "Sub"
  input: "conv1d_22/random_uniform/max"
  input: "conv1d_22/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_22/random_uniform/mul"
  op: "Mul"
  input: "conv1d_22/random_uniform/RandomUniform"
  input: "conv1d_22/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_22/random_uniform"
  op: "Add"
  input: "conv1d_22/random_uniform/mul"
  input: "conv1d_22/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_22/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_22/kernel/Assign"
  op: "Assign"
  input: "conv1d_22/kernel"
  input: "conv1d_22/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_22/kernel/read"
  op: "Identity"
  input: "conv1d_22/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/kernel"
      }
    }
  }
}
node {
  name: "conv1d_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_22/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_22/bias/Assign"
  op: "Assign"
  input: "conv1d_22/bias"
  input: "conv1d_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_22/bias/read"
  op: "Identity"
  input: "conv1d_22/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/bias"
      }
    }
  }
}
node {
  name: "conv1d_22/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_22/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_22/convolution/ExpandDims"
  op: "ExpandDims"
  input: "concatenate_1/concat"
  input: "conv1d_22/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_22/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_22/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_22/kernel/read"
  input: "conv1d_22/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_22/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_22/convolution/ExpandDims"
  input: "conv1d_22/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_22/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_22/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_22/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_22/Reshape"
  op: "Reshape"
  input: "conv1d_22/bias/read"
  input: "conv1d_22/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_22/add"
  op: "Add"
  input: "conv1d_22/convolution/Squeeze"
  input: "conv1d_22/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_22/Relu"
  op: "Relu"
  input: "conv1d_22/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_23/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_23/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06933752447366714
      }
    }
  }
}
node {
  name: "conv1d_23/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06933752447366714
      }
    }
  }
}
node {
  name: "conv1d_23/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_23/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1312642
    }
  }
}
node {
  name: "conv1d_23/random_uniform/sub"
  op: "Sub"
  input: "conv1d_23/random_uniform/max"
  input: "conv1d_23/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_23/random_uniform/mul"
  op: "Mul"
  input: "conv1d_23/random_uniform/RandomUniform"
  input: "conv1d_23/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_23/random_uniform"
  op: "Add"
  input: "conv1d_23/random_uniform/mul"
  input: "conv1d_23/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_23/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_23/kernel/Assign"
  op: "Assign"
  input: "conv1d_23/kernel"
  input: "conv1d_23/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_23/kernel/read"
  op: "Identity"
  input: "conv1d_23/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/kernel"
      }
    }
  }
}
node {
  name: "conv1d_23/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_23/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_23/bias/Assign"
  op: "Assign"
  input: "conv1d_23/bias"
  input: "conv1d_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_23/bias/read"
  op: "Identity"
  input: "conv1d_23/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/bias"
      }
    }
  }
}
node {
  name: "conv1d_23/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_23/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_23/convolution/ExpandDims"
  op: "ExpandDims"
  input: "concatenate_2/concat"
  input: "conv1d_23/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_23/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_23/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_23/kernel/read"
  input: "conv1d_23/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_23/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_23/convolution/ExpandDims"
  input: "conv1d_23/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_23/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_23/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_23/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_23/Reshape"
  op: "Reshape"
  input: "conv1d_23/bias/read"
  input: "conv1d_23/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_23/add"
  op: "Add"
  input: "conv1d_23/convolution/Squeeze"
  input: "conv1d_23/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_23/Relu"
  op: "Relu"
  input: "conv1d_23/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_24/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_24/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06933752447366714
      }
    }
  }
}
node {
  name: "conv1d_24/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06933752447366714
      }
    }
  }
}
node {
  name: "conv1d_24/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_24/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8889254
    }
  }
}
node {
  name: "conv1d_24/random_uniform/sub"
  op: "Sub"
  input: "conv1d_24/random_uniform/max"
  input: "conv1d_24/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_24/random_uniform/mul"
  op: "Mul"
  input: "conv1d_24/random_uniform/RandomUniform"
  input: "conv1d_24/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_24/random_uniform"
  op: "Add"
  input: "conv1d_24/random_uniform/mul"
  input: "conv1d_24/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_24/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_24/kernel/Assign"
  op: "Assign"
  input: "conv1d_24/kernel"
  input: "conv1d_24/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_24/kernel/read"
  op: "Identity"
  input: "conv1d_24/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/kernel"
      }
    }
  }
}
node {
  name: "conv1d_24/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_24/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_24/bias/Assign"
  op: "Assign"
  input: "conv1d_24/bias"
  input: "conv1d_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_24/bias/read"
  op: "Identity"
  input: "conv1d_24/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/bias"
      }
    }
  }
}
node {
  name: "conv1d_24/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_24/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_24/convolution/ExpandDims"
  op: "ExpandDims"
  input: "concatenate_3/concat"
  input: "conv1d_24/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_24/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_24/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_24/kernel/read"
  input: "conv1d_24/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_24/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_24/convolution/ExpandDims"
  input: "conv1d_24/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_24/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_24/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_24/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_24/Reshape"
  op: "Reshape"
  input: "conv1d_24/bias/read"
  input: "conv1d_24/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_24/add"
  op: "Add"
  input: "conv1d_24/convolution/Squeeze"
  input: "conv1d_24/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_24/Relu"
  op: "Relu"
  input: "conv1d_24/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_21/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_21/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0883883461356163
      }
    }
  }
}
node {
  name: "conv1d_21/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0883883461356163
      }
    }
  }
}
node {
  name: "conv1d_21/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_21/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2476970
    }
  }
}
node {
  name: "conv1d_21/random_uniform/sub"
  op: "Sub"
  input: "conv1d_21/random_uniform/max"
  input: "conv1d_21/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_21/random_uniform/mul"
  op: "Mul"
  input: "conv1d_21/random_uniform/RandomUniform"
  input: "conv1d_21/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_21/random_uniform"
  op: "Add"
  input: "conv1d_21/random_uniform/mul"
  input: "conv1d_21/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_21/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_21/kernel/Assign"
  op: "Assign"
  input: "conv1d_21/kernel"
  input: "conv1d_21/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_21/kernel/read"
  op: "Identity"
  input: "conv1d_21/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/kernel"
      }
    }
  }
}
node {
  name: "conv1d_21/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_21/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_21/bias/Assign"
  op: "Assign"
  input: "conv1d_21/bias"
  input: "conv1d_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_21/bias/read"
  op: "Identity"
  input: "conv1d_21/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/bias"
      }
    }
  }
}
node {
  name: "conv1d_21/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_21/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_21/convolution/ExpandDims"
  op: "ExpandDims"
  input: "max_pooling1d_20/Squeeze"
  input: "conv1d_21/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_21/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_21/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_21/kernel/read"
  input: "conv1d_21/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_21/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_21/convolution/ExpandDims"
  input: "conv1d_21/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_21/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_21/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_21/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_21/Reshape"
  op: "Reshape"
  input: "conv1d_21/bias/read"
  input: "conv1d_21/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_21/add"
  op: "Add"
  input: "conv1d_21/convolution/Squeeze"
  input: "conv1d_21/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_21/Relu"
  op: "Relu"
  input: "conv1d_21/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_22/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_22/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_22/Relu"
  input: "max_pooling1d_22/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_22/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_22/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_22/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_22/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_23/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_23/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_23/Relu"
  input: "max_pooling1d_23/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_23/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_23/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_23/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_23/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_24/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_24/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_24/Relu"
  input: "max_pooling1d_24/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_24/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_24/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_24/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_24/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_21/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_21/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_21/Relu"
  input: "max_pooling1d_21/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_21/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_21/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_21/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_21/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "concatenate_4/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "concatenate_4/concat"
  op: "ConcatV2"
  input: "max_pooling1d_22/Squeeze"
  input: "max_pooling1d_23/Squeeze"
  input: "max_pooling1d_24/Squeeze"
  input: "max_pooling1d_21/Squeeze"
  input: "concatenate_4/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0902893915772438
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0902893915772438
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8325972
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1/random_uniform/max"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform"
  input: "lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform"
  op: "Add"
  input: "lstm_1/random_uniform/mul"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/read"
  op: "Identity"
  input: "lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
        tensor_content: "k\252\035=\201y_<%\261L\274\215Fx\275\213i<=\217\r\023\275\330No\273\022Y\254\275\233\273\206\274\272D=<i\201\021\275\341\301\355<\270@*<\242\017\232=\244M\246\275N\007\353\274\237{\030\275\010\261\322\274\200h\341\272\275\212\230= \307\203\274\237\367\303<!/\201\274\263\362F=\316\341\263=h\263]\274\374\r\346\274\201\n~\275\20471\274HC\241\273@\344\010\274\367L`<\344\r\277\275=A\206<\316\334\202<\345\233,<q\267,=?\007!\275\370\356G=K\345\262<\243_:=\203\203\354;\357\277\203\275\017\032\300\274\301\304\204=\272\375P\275\3214P\2745\226\277\273\007\034x=\305C[\274\327\312*\275\244o\362\274\241\330\300;y\214\"=\336\261\364\274\005\217h\275\357\006g\274\027[;=\324\327\024\274\277\000o\275\271[\003\275\336\364n<\235\000p\275\332\302`\274\031\373 <\361\3345\275\373\025A\275\002\272\230=\372\232\031=\247\036r=\224\215\037\275z9A\274\232\026\336\274\320\267E<\210\226\215\275\234\301\221=\031\267J=XAf=\2554\272<\231\251\033\273\014\035W\275\"?m=v2q\275\336\036\036<\031i\274;8\225{=I#3\274f\005\376\274_\033\034\275\224B+\275\244\"%=U\342$<\347\227\337\273\035\245V=\227mI=\251\201\341\273\304\035\n=\022\244\303=\377B\344\274,~\245\275\371k\262:rw\245<gL}<\331\204\257<\364\327\263\274\321<1\275\366C\276\274\023\337\032\275^E\316=\245\217(\274XI\363\274\007\227\211=\375\345\224;\271\"<\2750}\354<\010\244\253\273\000\037\341;\206\352\361\274O\254\005=\202\007|=\275\235\260=\310\325\237<\212F\256=\221\035l\275\346\253\344\273P\022\263<\275\342\024\275\322\266\035\275\347W>=\217\027\317<\365{C=X\301y\274\000\025w\274\013d\031=\037H/;\246\217\315=\335\262\213\272\321\023\264\274\341\343J=\225\261\215=\227\363\324\275\271\311E\275\317\347\311<9\t\247=\303o\003\276X\320\257=\343`\024\275CH\317\272\255\213\373\273\346\3766\274\372\250\276=\324\325\360<\241\245\366\274\030\017|=\302\253{<Gi\032=\237\024>\2758\377\223;\355\262\227=\377h\271\275+\3316\274T\"4;\261\346)=\256\372n=\025M\037\275\344W\305<\336\'\026\275\254\276\333<\0147\344\273\' \256=\354J\332<\262\024\\\275\034\347+<:\214\224=\241:\262<\030\333\264\275\264`Y\272~**<\003\t\326<(g\014=\250\0013\272L\273\214;\242.:\275\033\310J<\014\'\334<\221\033\037\274Tn\260=n\202\013=\216\331G\274kq@\275U\3170<\373`A<\2710\346\274\330\215\313<\215g\016\274t\303\033\275\000[x\274\304\276\234=j(\035\274<2\224\2742\013@=\026\241!\275\317\211Z\274\224|d\275}\016\205<\314\276%\274\200\210\217\275\010N\211=&\255M=m\251o8h\376\033;P#\240<\347\017\203\275gx\003\275@\376\227\273\314\340%=?\214\312<|\326\030=Da\366\273\032\276\013\275\271\234f=\243o\270=\342\3403=\251:\322\275\364\375`;\213\360\366<\252\270\246\275\235\037\036\275\213\264\r=\244\361\211=#\214\333<\270\010\233\275\316\027\177\274dbf<\343\364\250<@1\206<\022iF=g\335\2659\336\022\263\275!f\273\274\251\243\236\275\330\000X\274\351\373\210\275\025\321\013;S\202\310;\371x\027\275\031E\221\275\331\277\230<\n\305\210;x\274\001\274\316\217\265;\220\232\276=)\035\304\275\203cM;`\017f\275Cq\227\274\004\322\260=`\344\312\273\035q\241\272\225\242\335=\243>?;V\244\013=\370\227\373;\004\206\2439\300\260j\275\302\312\322\274\356\362N\275\371\305\207<53_\275\250\254B\275#T|\273\255\374\014\275\230\263\262<Eb\321;t\216S;\227eH\275\002\352\222<\033\375\230\2745\244F=-\257\204\275\031g\357<T\0130\273\336\317p<\321a\r\275\201?\215\275M\027\273=\257\261E\275\367\261\232\275\277)/\275l\315\314\274\0052\005=\305\241\220\274\t\251#\275\220\200\250\275\357h\202\275A\315\013<B\321\004\275\242\375x:9\234\356\274\216w\210\275,\371d<q\305\033<\022\2627=t\0332\275&\022\207\275\340V|\274\261M7=\263\231\375\272\254\273\001\275z\214\221;\332\237N\275\274\324\240\273\340\025F\275\266\276^<\206\246E\275\t1\017\275\224\320m;\305\0272\275\371\200\225\275\215\373\251\275\0079\374;\233\363\375\273\331\321I\274\260A\246\274\375?\211\275\030\032b\2754\344J=\262\2373=r\340\306\273\251P\320\274\250\316\213\274\245r$=\241\021\002\272\333\367\356\275\224!/\275=\"\342;q\212\274\274\304D\004=\345F\335\274\25428:G\310\317\274\000\226U\274\270\006\027\275{w\244<Z\013\364\273\326W\337\274#\3135\274$\206\225\274\3322\024=k\rA\273\310\221!;\375Ya=+\031\020<\304?\217\274\307\345C=9\277\357\272\372q3<9\027h=y;\333<\233M\030\273r\r\306<\235\177\373<-h\303\274l\373\n;\257\023\344\273\006\366\022<?Q/\275\36482\275\030\2736<]\247\255=\035\343\202=\273\362\206=\372^p=?\030\006\275\230\311\004=3W\347\274\310\330\271\274\255j\355=b\264%=\362|\225\273\327\327\007=/FJ\2746Z\345<\334\221\016<\233I:;\022\324\005>\304\023\025=g\222\266<U\370m=;hN\275\230\224j\275\311]\272\272\323\215\214=\225(\0039a=\205\274?\362\000\275U\231\017\2751;\317\273\013\325>;\177\242o\274I0!=i\2543<Au\361=\302\236\262:\354\004\241\274\314J\237;\324C\336\274\220\235\246=\203\3635=G\345\342\274_\036&<w_\020\275,\250\260<\005\227\006\275\323F\243\274\035\027\270\274@\331D\275\002\312\304<]\354\335<X/\020\275\205\204\211\275\241\030\234<$\252?\275\241\252\204<\006^\271=\000\331B\275<\327\311\274\030\346\254<A\330\362\274\002[,\275\334\005\022\274\227\203\352\274\322_~=\227)\211\274\243\210\214\2754\377\323\273$\364\026\275\031l\355<\210.\340\273\260\332\351<\263\035\004\275\356\177\230\275&\024\014\274R\334\001<\025\376!\275&CW=|\355\360:\271!\311< 7r\272\3318#=\326\263&<e\317\300;{\376\366\274\322\272D;\353g\233;\2407i\274\365\2102\275\255`\233<\253\235\321\273MX\363=\336\263T\275\3336\351<\315n\013\275@\232\202=\314\304:<H\257 =\026\343\036\275:\\\022\275\310[&=\262>\033=\207\nI\274vH1\275\021\003\363<[\002u=\346\020\232\275\260\031\037\274#A\031\274Q$\361\275\021\030;=+\216\377\274\351U_\274\212,v\275\010\201h<\345KV\275~ \021\275\274\022\252\275\237\341r=\272c\017\275\263\353\344\273\016)\311\273\245o\366<\242\204i=A6\033=%\265(\275\367T\326<no=\275{\370[\274\200\252F\275\231\353\302=\267\305W\274\003gN=\024\266\004\275\222;\367\274\214\302\345=ImY\2749:\307\273\010\333\253\275k\2163\275>&\242=\206R\026\273\302n\212=\n\356G<[@\363\273\355\321\372<\375K\003\2740TV\275mc_=\343\023x=\030\004*\274\207\351\246<\373\363\255\274\344{]\274\353\217c\274\366\003\312<\"-\202<\3212|<Pq.\275\344\232\224\273`\366\027\275\227\005p=\254\360\201<\216\266\362\274\367\340\"=\350\004W=\350k\225<\\_\025<}s\016\274_z>\274w\027\257=\275\341\"=\013\342\312\272c$\233=\255w\\=?7S\275\371H\315;\322Q\014;\375<$\275y\243,\275=I\027\275\005\316\256;O\207d\275\362\023\235\274\0225\255=\353\362%=\261\323\006\275\'\367\241=+\357\217<ui\334<^\250!\275ri\320<\323\311|\274\222vH=Z\025\'\275O\333\001=&\3458<\251\234C\275\017\020\242\273\230\016\344;\306\267\305<\207\3331\275A\311\035;AMP;\263j\t<\025WM<{\246A=!T~\273\3677\307;0\346!\275\216\256\220<\337\234\234\274`X\244<\217T\346<\355\227\270\2744\324\251:x\003\233\275%\330/=\245\230v\274gf\204<\307-2\275\224\342\236\275}He=\3735\376=:\232\250\273\016\021\223\273v#\230=sc\025>iN#\275\020\332\210=\244\310\024\274\313\335\277<\227\031\024=\345\311\252=\330O\302\275\025\\M;q\177\265\274\255?\023\274\206\350\371<gn\327\274\364\3567\274;\014M=u\261R\275\345\251\351\274y\340\220\275\232\013\030\274\304p^=,\317\214\274pkO\274ut\267\274y_\300;\316\250g<\220\377\366<\013[\222=\024\035\030\275ZT\354\274O\357K\275#\321\006\275c\326V\274\360\323\375;\304\233w=^\216\215\273\350eF\275\356\306\206\275C\347*\274\316A\032=\356\216\234\275o\335\211<\346\255:\275\234M\372;[\033n=\214\363\263<\357;\213=%v\367;\254B\251\275x\212\214=\326\326M=\252g\276\273\035\255\227\274\370\301\247\274/\264U=e\233\242\275q\235\242<\010\025\214<\323\327B=\272\030\346\273W8\020:\232\252\035=u\034t\274\010B\373\2732XH\275G\0269=Q~\203\274\314\346\270<v\177\345<J\030)\275\301\n\323\274\307\032!=T\362\353\274\216\264\301=\036X\205\275d\031\341;4-\007\275\334\301\027\275\344\246.\275\\\277\217\275\267\210\216=S\212\240\274\270\023\035\274\242\301X=\013\365h\275\271E\236<;\202\247=N\232\364\273\037J(\275\026\366\341=\231a\021<\336\361\013\275\356R\230<C\275-<8\332+\275\233\275M\275\244\245\302\274\204\005\025\274\365c\202=\321\304&\2752\014\363\273\004Q\217\274\351Zc<\330Y\004=\264\341m<\002\257/\275j\330\205;\033\301&\275q\\\371\273M\257>\275\2130\332;\346\226\230=\205\206\203\271\375W\177;\033O9\274\347#e=V\000\327\274#Y\001<\3257L=+\222\312\274b\372\346<\0054\203\275\031\207\023<\3325\310=H\347\341\275ukU=m,\244<\326\340,<\213F\374\274\250\036n\274\025\206+=\201ZD\275V\2270\275\3323\253\275D=-\273K\202v<\363G\263<\000T\332\274L\306\024\273\345\035\263;\002\373\321\274\363V\003\275\355w\316\274\364\223\313\274\322\024\274<\271\325i\275\226u\373\274\312\200\021\275\236`n<\0017\300\273\243g\224\273\374\354\240=\221\326\r\275\263\033@<\353\325\033\275\337\315\022\275\270\006\203<[C\r=;\224C\274\302\301\3209=\235\236;\375\025f\275\263\3374=\361\260\200=],\255=F\220\217\274\260\243`\274\361\227\"\275\006o\217=t\2266\275\026\033j<\346\246[\275\275\207l:W\330\022\274e\367\350\273*\223\232=\353\222\326<\222b\225:\\r\253\275\235Z\214\27514\242\275\313\357\346=\nlx\275z\230E\274`l\211\275\324iJ\275puP\275G!\236\275\n\374;\275\356\320\341\274\307\267\224\273^\"2=\300\372\260=\301X\037\275\014\334\344\274\335\271\335\2747\200\207\275\234\363\372<a\212w\275\273\312\203=\001\316\231<\002\263\226\272\310\305\336\273\017\347-;\356\353\004\275dq\203\275`\243/<\377p\322\275\274\007\246<\033\342\036\275]\322\356\274lv\235=\300\341\004=\025\227\204=\257F\316;~)\265<q\276X;\221\310\316\274\246%\242:\342\013Y=\005\002\267<9\204\374<\032\340n<KiY\275:\203*\275\2019\013=^\230\324<\354\270\202<aV\251\275k8\t\275\370T^\275\002\367N=\252\246l\274\372\365q=\033\000\245\273\230\231\367<\235~[;\311V\201=\213\3432\272)\365\362;\340\036\030\275N\026D;\3149\324\275T\204T=\217\3716\275\3142Z\275m\371\306<.@\373\274H\255\241\275k\375\360;\215\324T\275\240@w<.\354{=\232\3022\275\240\321\365;\203\323\342\274\255:9=\2359\006;\006\376z\275\321\273k\275\267\005\332\275\257\031\362\274i\203\353\274\371i\342<R\344V\275\264\233\277\273a\310G=\245-\033\275X\302\002\274\240\027^=b\274}\275BaJ<M\016\321\273\240v\237\275\351\201\"=\305\\\255<\000\031\217\273:\316\223\275\027n\344\274\303\030A\275\334_\221\275\250&\026=P\025\365;\327\177G\275\001\242\301\275\230\252C=\023\327\310\273\276\002B\273\335\222\372\273dV\t=\307\220,\275p;\373;\227\226\r=\230\033_=d\002?:82H\274\200\261<\275<#\003=\233G\216=\257S\033\275\332\337\250\275\n\231\242<\202\333#<\032w5\274\274\337A<\355pB=\\\271+=\307\022$>\223^\022=\\\234T\275X\330G=\211ET<r\000\271<e\316O=k9\032\275\356\200@<\364\203|\273X\327\000=\001\316*\273\316\261v\275\311\371\271:\222\207\025=7\344\362;\275B\034=\240\252e=F\375L\274\273\205\001=\352\377\3379\364{\325\275\0271\005\274Y\314\257\2754E\317\271s\373\323<WY\206<\316\201\373\274N\217\317<\'f\246\274\306c\204\274#\026\221<L\334\215\274&\371\215=\213\2310=)\262\244;\252+\"\274\252\303\'<\3578!=\022\271/<\2570\037= \000\214<\237\205\327=\370\256\214=t\374^<\275\276\202=\353\034\257=\261k(<\242\216L\275\301i\354<\231\232\307=\202\275\323\274\315t\010=\313\335\205<f\271\220\275\264\332\340\274\006\025\217\274,l\253=\005\250v=!\014\307;\204n\005>j\256R=P%\203\274J\216\036=\336>0\2759\305\203<wi\321\275.\257E\275E~B;;\220D\273A\247\273;p\276I=\221\273\244;\365\211\217\273\345\206\022\274\'a\033\275\231c[==\261\246\274\242l\r\275\247Z0\274\341\007N=%\335s;T.\216\274\240\374[=\0074\245=\205\223\363<\316I\016\275U\330\023=\272\353o=\202\206\253\275\252\265\014\275> \236\274\270\240\323\274\t\302\230\274\325\022\246\273\037hq=\362\301\360\272\254#(\274L\252\256\272\304\214\360<{<+\274~\227^\275\205\331\221\274\320\347\304=\202\313U\275\'bA\273\273^\217<\376<\\\275\252\261\222\275\311\005\226<\206\010\333<7\231\323<\2608E\275\263\311\222\274y\016\025\274\357\365\025=4``<\201a\352;L\324\205\275\277\rL<\304\240@<\354\033%\275\333\003a\275)\225<=~\340\254<8C\315<0\375\336\273Z\004\014\275b\334H\274\351\265k=\345X\317\275W\n\022\275\305\017j<%\224\223\274k\205L=\303\240\223=\233,\225=^\232D\275R\0361\275\2425\007=\305\266\363<\363\346Y=u\010\254\274\344v\244<\324\266(\2756j&\273\006)F\273u\023\310\274\241z\014\275\355~c\270\031j\313\274\264LL=e\264\246\275\236-\240\274\022G\214\274|e\301<.)E<\010\266\261\273\345\326 =\247$\233\275\246\224y\275\322\321\t7\336\200d\275c\321\214\275{|\306;\332:\330\274\007\321~\273I\221 <\036\335V\275\\y\352<\350w\210\275\031\314\035<\331\264\200=\255\374\007=\317\3461\275g\310\310\274\027\n\352\271rA@\274\347!)=Pq\307<\205f\213\275l\016O=y\276h=~\310_\275\201\275\016\275\263\302\372<\013\204\014=\017\323\220=;\377\321=\010x\232=0}\211=\017/\266\274\214\246\006;/\204\306\275W\017\250<\223\016\021\273\"zk<\217z\342<Y0\360<?V\345:\370\376I<\217\343\372<[\3730\275\364\330\370;\213;\031\273CM\031\275Qf\267<\300M\204=\0139\342\274M\370\030;\357e\337<4\244\231\275\340\325\226<n\004\356<.\312#\274\321\276\273<\001\002}\273{\033z\274\003\253%\275\307\243\275=\271 2\275~d\345\274\350e\350\274\257\023\243\275\037GF\275`g>=\201\3200<\t\366\206\275/8\035=M\263\223\273\342J\014\275\226\214p=\327e;\274\232\363\271\274Z\225\377;90i\274_\0245\275\312\350\274:6\201\207:\3165\255;_\033\031\274\323\202t<D\016\214=3\004\025\274\232ve=\257\241u\275\270A\236\275\321\3460=\306\306\327<\213`\002=\212\236\025=\254Q\030=]B@\275\374(V=h\3231<\214\001\026\275\335\376\213\275D\034\327<\343\352\343;\035}\230<@\345\362\274\024\232@\275\320\375\236:\310\234%\273g\254\\=ev\031\274k\263Z=v\311\304<Q\000\323<\026Ud\274K\220\316<\320V\343;\327\024\246\275\016\013\005<\3752a\2758\207\256\274\246\036\261\275#W\313\2747?><\250N\207=\325pK\272A\026\245\275\006PE=\2437K\275Ca\206\275\0252\201=\332\021\345\275+\306\316\273\300\243h\275\021\370e=V\212\372\273\302\351+\274\214z\026=a\242\023\2753\333N\2754u\244<\201\006\261<\034\370\211\274\\u,\274zH\363<\016\003u<%\226\273\274\226\322\306=\254\313\002<\220\215\264\271\377\373\217\274F-\251;\365\271\366\273\357q\216=\214\321j=/\214\320\274\217\222C\275Q\254\2428\003\235\017\274V\277\025=4\031\210\274\'\310\323<\301\315\027\275!m/=-\232\267\2758\213\250<\353)\007=\215}\234\274J\013\'=\260z%=\227\005\253\272\335\256J\2756\264T<\330H\356<Q\351\337\274\032>\272\275\251\216\030=gG\227=\177\340\022\275\202\250\273\273\370\025\021=\271N\272<B\315%\274\365\331(\275\260\000\021\275\321o\323\275+s\327\274\010\223\t\275\222D\342;\301\322\n\275M\254\211=E\302x=$\205\310<i\352\013=\t\300\016\275$\345==\341\017\237<\007M\265\274\257\352&=\311\326\236\274\207y\"\274F\005n\272\234g!=Fnt\275(t\034\275\332\240?=\254\032\237\275\341\177s\275\365)\036=\021CW=\373_#=V\320\364\274\375\357\006<*i\257<\374\207x\274\311\211\030\275\346P\213\273\244\213\017\274\3664\231\274\001\235\213=Mu\006\274\n1\304<c\245\236<\310\377\231\275X\003\246<\271\320\253=\257\353\232=\021\232\302;\2628\356\274p\327\235\275<\360\003=\302\005\013=\337\363\303;T\371\t=\323\320?=\345\252\326\275O\214!\275\"\254\260<\250\241\212=\225:\305\274\220\314\352\272\252v\203\275I9\224\273\34171\274\272c4\275\376x\214\274d\r\202\275\210\253l\274\375\036\034\275R\272\206\275\2020~\275g\370==\244\3711=\351\230\211\274\032\234\003\275HmW\275\245\212d\274g\255\234<\247\372\3439?\334\317\275\210ij=\020/\033<\237\312\026<\n\254\272\275Z\000w< \231\032<\333\000\341<\234\343R<UX%=QS\204=\321\007\021\2755\017\363\274V\207$\275B\246\206=\313k\232\274w\356%=\327t\302\275\240wE=\037\017\234<b1\371\272\355\036J<v\340T\275\214\331\256\273F\276s\275\351d\'\275\376\271s\274\363\344\271<\342\335\206\275\260\240\032\275=\311M=9]\024\275\227\324\242=\204\364\256=\0057\033\275\221\227\227\274\221\276\'=k8\240<\020s\242<\277$\221<\031e\276< \373\207\275\234)W\275D\030\245\274\366\3151\275\302x!=\373\221\275\2751\r.=\222\322L=Qk\301\275\350\232\014=\343\340p<\022\031\306\275Y\t\r\276wN\324<\224\252|<\337\346\266\272\352\3639\274E\305(\275\252@\246=\323\351\264=\356\375\200\275\364\257@\274\261\305\256=\363\317q\275\364)\307\274~\274\344;\020tG<0f2\274\376\000S<\036\200X\272Y\3348<\235\366\234=\324\r-=CXe=\000<\324;2\206\244\275\306\303#;\'m\217<\037\302\250\273\016\251\017=\003\270\231=\332\006\242\273\007\203\216\274\'\214\030\275\254|7\275\033k\034\275q\316\274\275\366u\373<\3371\314\273\346|\212=\n\362:\275\304{c\273D]\003\276\256D\275<]\003@:`\032\234\275t5J\275\341\220\361<)j+=\206\303d<*\243\330\275?\264\270=\374l|\275\016\024_=\340m1=\344]\320<|\236\200\275\363\022+=\310Rc\274i\037`=\000\204\333\273\315\301\014<\245uy=\227\272 =\211S#=a^\245<\206Ta\275\200\3502:c-\330<\007\244A\274\227\244G\273\274\245\'=pU\234\274\215\207\277<\035\323\365\274~Yh=\244\020\026=\240\354\226<\032D\305=\315\030/\275\375\321q\274!\245K=\030J\240\273\367\217\222<T\367\200<\373*\017\273\301\254n\275\306\006\030\275\336\367\304\273\231V2\275\212\255\312\273\350\3472\273\001\222K<9\375F=\034\212\023=i\242\373;\246\021U\274\243\340G\2756\364(\274\265\220Q=\032\022\333<\211\177\212;hU\207<\036N\265<Y\205\266\275\264\361\245<\326%*=1\030\355<EA\207<\253l\271=u\'N=\270\210\243\275pm_\274am4\275\231\232\344\274\236jI=s\267&\275\303\033\300\274\274l\n\275/\244\223\273Y\243\211\273g\277\036\274\346\260\363<\254\241\324;\231>p<K\364\310<\273\302\211\274<b}=[`\240\275\263\007\024=\024V \275p\226<\274\371n\357:\240\030<\275\027iB\275\024\262\251\274\374\277G=\357\370 =T\267\214;\272\002u\275$A\205<\350(7\274\n~\274<\353\320\246;\364\255\327\273AC\247<\353\333X=E\341\201\275.=\315=\006\356B\275f\307:<\213t\303\274\023j\277\275\320\264\005\274Si\007=\010\017K\274\357\347\356<\254\252\265:\221k\'\274\272\375\276\274\223\022\251\272\205Q_;7\333\341\275zp4;\346\335\020\275ur\"\275A\313\254\274S\235\375<\355D\315\275\2669j<J\317\207\275Z\222\216;\247\255\341<\347\332d\275 i\315=\316\033&;\261nk\274pZ\014=\342\033\032\274CV\013=m\'A=\350\226\021\275\367\234\004\275|\237\001<]\0277=N\316G=\340\242\222\274\353\337y<v\244+=/\242\304=\"\351\206\274dU#=\204\274\255=\347t\r=z\016x<\236o\370\274\r\020\035=\321/.=\200\226\231=\013o4\274\033\344\026\274\372|6\275\n\010X<J\301K=\276G\010\275\222\2737\275`a\005\275\271\224\020=`]\266\2751e$\275\212M\024\275\177-\302=\365-X\275\345\376\t<(\375A\275\004t\312\274\301\256\312<@\317\240<\231B\353\273\223\220\224<-R\260<\213E\361<W\270\014<6\330z=\252\232\264;\351\003\000=\337\322\245\274\006\371\007\276]e\224\274i\327\203\275q\244Q\2752:>\274\025\252\256=\36069=\201/\214\274G\210\235\274X\031\214\274\005#\366<Z\364\376<\377\271\321\274\203\235\207=*V\203\275r\2316\271$\375$;\307\272m=\213M\202\275Ir\314\273\223\367\020\275o*-\275\013\256\317\274{\352)\275\2316\226<\'\256,\274X\244\255\275\202g\347;\275\312\004\274\345\230\272<\007\036\216=K)\333<\306=\024\276\036\0249\2740\271\346\275TX\000=d\262\334\275N\272\370<\370\\\271\273\033m,\275\377q\033\275:\032e\273\033Q\270;\373Q\246<{\300\220\274\365\365\274\273\367\324\2719\031\325V=\206\263\200\273\201\235\005\275\314\364r\275\330\254\355\273\030b\020=J/\262\274\257\314\302<S7\3509\037/Q\274k\026\r=\354\232\257\273\320\rd\275M<\263;\270\001\246\274\255\374\320<$\272@=\222v\352\274\225\354.\275f\257\313=\365\272K\273l\025\250<\253k\336<\007/\236=y\007\306<\307\026\212<~\3531<\367\016`\2750`/\275hr\037<\327G\244\275Y\266\013;\226\313#=\0333*\275N\004\204<\177\234\226;b2A\275\335\274s\275\004\345l\274\254\2465\274q\355\244\274T\260\302\2741\256\004\275\005($\274\362*U\275\3216\217;`K\301<^\311f<iB5\275Yl\t\275\206\372\253=\032\203\025\274\335\021\215=\0327\010\275\371\2773\274y;\362\274\312\351\017=&R\221=\212~\024\272q?2=W3\"=[\'8<oX\021\275\306\234\360<\375\314\205\275\017\270\304<\024\211\234\273\216=\023\275\202\270\276;\341G!\275S\324\323\274O\262\375< af\275\237z\300\274\033M\213=\305q\234=MY\376<`\035\367<2fa\2751\021\257=\331p\305=?j\253=\236\247\002=\360\031\374<f\350\370<\037\266\013\275\320\306\337;5\344]<2\013\272<\326\023u\273u\301\020=\355\023\271;\277\316/<^\301\360<\342|\223<\0040\345<{\201\026\275\021p\307<\372\260\261<\314\227\214\275F* =Dx\364<8#\202\275\r\215\205\274\264;\005\274\216\241\023=\307\311\'<\0069\207=\037\265A\275m&\242;\327\201\251<%\037[=N\323\022\275-\233~\273S\365\025\273W\210*=\027\216\223<\251\2128\2757;\222<:\373\214=\316\223\016<_\214!;\223\342u=7\207\221=\3447\346\274t\204d=\213I\352\274~\320\235\275\266P\222\275Kl\217\274C\035\225=-M.\275\235\372\274<\007\220\213\274\256hi<E\324}\274\275\371t\275N\035\202=\002\234\264=}\361\321\274\315\361\313\275as(=^\317\031=Q\014d<\217fX=j\267\317\274g\017\027=V\377\235\273v\nh\274\216\331\035<\006f\217<\327\323K\274!\305\221\274\277\216\027=c\r.\275-\327\320<\2238\224<\314hi\275\314\t\022\275\024\327m\274[J\342\273lg,:YL\273\275\261yN=E\326t\27525f\275w([=\327\373\202\275\2165\010=\252\200\031\274-\357\252\274\3574\205\275\247\005\013=\377\202.=\3111s=O\220\230\273a:;=\240\320\240=\251\340I=a\026m=\273\221T\275\262\0003=\r\371\265=\211\023)\274#\032\027\275\356@\031\274\252\202\024\274\\\241\254<\252\3519\275\360\213\265<\302f\025\275 ?\266<T\266%\274\350\246\003\275K6e\275\324<\n<}\366\n=\245\361\222=\231\033\'=B)\035<\032\376Q<\\\216\220;\021\276\344<\3349\002=\013Y\007\275\234\0322;\034\000\313=S\244\206\275u\243A\272\271\336=\274\226W\227\275\'z\023\275-\262\037\275dw\344<\365\216s=\331\336\377\274\r\336(=\343f\032\273\352\214\231\274\262\263\037=\366\352\211=\376\363\240<k\\\215\272\341\021\320<\0350\210\275\364\303\312<9\262\025=}T\2639\245\236I=\334\2033=\221^\254\274\261\224\211\273\2346\227\274kok\275\007\013Q=>!\035=u}\'=`g\360<Z\314\364;O&\254\275\3507_\274b\343\014=\217R\237\272\027\217\346=\360\255\371\274E\377\r=lLc\275\000\002\326<\340\367)\275\357\030?=\353\341\r=\013\317\241\274kn\233=\377\330\024=\354^\333\274\352\007\246\274\0076g<\313r\344<p\002\207;0W\r\275\022Cu=\237\254\375:W\207\037=K\375~\275h\317\024\275\311\257\200\275 #\245<7Z\r<\033\350!<J\345\004<(Mm\274\223g\270\275A\344\306\274*P\030=\031\230\364<\364\272Z\274\027l9\2758\177\272\273\356\225Z<\345^\014\275\003\242\322=\2625\305:\231\253\276\274\326\241U=mJ:=VB\t\275t\3276=}\364y<X\022\025\275\tuJ<\366\302D\275n>)\275\2467\023\275\004H\275<\206\327\271<\005\tN=\245\245\271=]\357\201<\263\006-\275\236z\r\274\212\236j\275\230\251\372<( \325\274yA)=\352\237\262=\300\266n\272\0214q\275\0222\252\275\355\277\255\275\206\273\270<\323l\222<\370\222\253=\3069\205\273\016\251\302;;\370\026;\213\211<\274\375\241\207=\246\350=\275\034\370w\275=D\365;\370\271\352;\026\343\204=\234\014\220\272\177\336\021\274\004^#=0Dl=5\326\352=\377+_<\033\347\232\274\357\360\002\275\210\345\270;X\003\003=1A\252;\2243\205\273E\340\002>\222X`<4|&;Ef\022\275\350\361\361<\333\017\026=\231\272{=a\217@=\276\236\311\273\212C\034<%\255\223=| P\275\327\311\375<\036\267\235;\215\\u\275^\n\250\275\024\343\330\275\241\374\252;\310\202\207\275\246-\t\275w\370z\274\326z\322<\013K[\274P\025\205\275\014\223\360;\242\007;=\206\347\025\274Qv(\275b\335\304\272\014&\216<\364;\003\273>\266\177\275\265\372;\275\235\350<\275\224\323\236=\352cs<\016\206D\275\276k\315=\312vc\275\375q4\274\273\305\027\275\324\037\177=T\231\274<gb>\274\005\351V\274\221\301\003\274\377O\222=\342]\200=7^]\275\271f\321=U\234\314;^,?\274B\266\274\275\303\344\254<N\340\232<\344\000\003\275\376\320k<\236\375\366\273\013\236T=_\246C\275\374\271\312\274\266v\206\275\200\002\346:m\376.=7m\301\274\t\352\035<\247\021\331=s\nZ=\241\232s<\303\200\271\274\365v3<\324\321c;\336%:\275\003\246#=\230\202=\274\n\266\241=;_~<#\250\236\273\327M\304\274S\023\234\274\017\031M\274\264\303\272<\367\260\007;\322@f\274\322\032\322<\253P\266\275\232\373\035<\032\253j=\315Q\273=@\271o<\363\003[=r8\t\275\301>9=\206\326\355\274_\003\361\274\353\210\216\274CW\010\275\366\037y<\315e\232=\003\330\274\2756\205w\275K]\013>\210z\215=&\003\032<X\033\274\271\273\350\277\273tx\277\272\027\317\240=\343\360\200=\007\337C\275~\230A\275\026\235K\2746\300J=\260\024>\275\202[\317\274\363\226X\274\274[,\273\225kK=PW\253\273\023\217\r=\313\242\375\274P\031\214\274^\'\270=\351\344\350\273\316n\277<\003\333\234\274r\204.\272\315\366\3169SA\212=\345\3079\275\306b\376=:\205\324<)H\252=\261u\034<^\245B=\n1P<k\273\237\275\265\335\340\274\332\032`\275\000\021u<\343\266a<\247\003\251\273\340\317H=\212\333\\\275\360\230\\\275.\306\367\274\360SC\275\245\336\364;%^\335<\246(\306\273\361\177\240\275\312\302\200\275\276\\\224\274Y\371d=\210}i<!\202\t=\033\336,=\262K]\275{\225#\273\376\017\264<\226\037\001\273l\226\266\274M\332-\275\343\0050\274Kw^=\323\235\021\273C_\002\275\302\3509=\252\030a\275\244\315\275\274\016\275q=\0329\242\274\214J\273\274\270JZ=\"K\260<G\236\200\275hB\256=\354\320\310\272\010:L=\332E\006=\\\tQ\275(OE=\271\306d\275\215\337\323<@|\323\275*\333\260<\201\233\225\275\246A\264<\314\215X<\360\2674=;K\010\274<\271v<S\256\255\275X\346(;\327\302\r\275\274\310\344\274h\247}\275Be\221\275&4f\2745\007`=B\234\273;\370\331\034\274p\323\023\275\025\"\022=\271*J\275\004\010\304\275\237\225\344\274p5\221\274y\232c=\002\370N=\361\370\247\274\350k\324=;\245\225:{\'7\275\002\275g\275\227\263\222<<\231\022=@\004\001\275\036\353\372\274\304\256\030\275X\276\363=K\330\315<]\252\017\275@\242\306\2748Zu<\3616+\275/{\320;\014\237\340\275\310\270\334<f:2=\037g\220\275\334\306\262;q\207\277;%SR=\334,\331\273p\212>=h\226_\274)\016\316<\356\342\032<\374\354\240\273\010\357\353:\376K4\275\000\332\265=v\t\262=\003\001\236=uq\254<+\016\247<N\261\212\273)3B<W\333\312\274\2003\331\275\326\242$\275\337.\303\274/\252\347;|\013\207=(\365Z=\220D)\275\000\275q\274m\017\033<P\236\257\274\021H\200\2752\002]=\025\341\355\274zR\027<N\221\351\2743\235G\275:\254J=H\224\211=\235_5=\227\177u=\373P+:\307\210e\275\303\311!=\215\035\223\275\361C\260=\2109S=\344\272G=1W\306\274\273\343\002=\346\r:<\\0\025;K?\345\275;\205\376\273^\245\023\274\276\275\205=\013\373v\2746I{\275\346\325\233\275\033=P=\201\300\367;\266\313!<m\272\273\274\305\237\356\274\203q-\275\271}7=\002\300\266;/bF=\373\256\204\274\322!\034\273\346+\\<\007OJ=oZ_\275\342\374\351\274\205\3527\275\263\222P=\010*\370<\237-\207\275\350\204\217=*.\272<\331\006\001=\345!\244=\337{\010\275\343\365\211\275\006\360\'<\321\023*<\020\202\212<\224;\200=s\203\001\274\241\366\r\2759fI\275q\n\243\274\314[\222\272[\020\025;\212\247%\273&$\250;\353\305t\275EO\202\275g\2767\2757v\213\275\204\325\222\2752\022\222\274\031\225o\275\256u\007\274U\325\263\274\035J&\275\242\263-=\364\340(\272\035\357g\274\367<\372\273\016\267G\273\216\200\004=\251\202\252;I{\304\274\036\202\353\274Z\362\325\272\221\315\200\274\226b\326<9.\303=\2577\251<\255b\035\274\177\257\t\275\372BO=\354\221\013\275\325\312\206<\252Q!\274\231\204\333<\2641\247\274\367\233\200=8\325\017\274\006}\223\274k\310\302;\360\022g=q\265\256<h\305\010\274\375\363t\275\230\304\202<\230\313T\274\276\317\270=\333\025\233<\355w;<\221\004\246<4XK\2752;Z<o\256\346\274\340Z\034=\230\362\361<P\233\346<\356<\217=\353?\277\275\021\232\220\275\340\352\023\275z~\257\274f\235\252\274\214\250{\274\201\010\266<\206\223u=rg\347\274F\370\274=~P$=7\352\177=\310\025!\275\367\217*=\0210H=\343\367R<\317b\306\274\367\313t<\"\346\253;\341\210\206\275\274\344\004=\032V\"=\324g\362\274\300\004\260= E!<\363u|\275\010\350f=\302\302,<\242\r\223\275Q\301\221\275\220\251\313\274\320\360\270\274\363A~;\221\265a\275\315\234\347\274\\\240?<`\036z\275\326\331\236=\030\375_\275_<+\275\326\320\211\274\323\236==\227\260 =\341\342\037=\004\222L=\002D\r\274 %\321;s\255(<\352\221E<Z\317\222\274\311$\254\274\277\267\205\275\262:\n<\352.\026\275\003\247\022=A7G=w\256?=\321l\267=\204\311\240<i\214\261<\352\215\303\273\276@\004\275\373a\024=\335\205\263\274\006}\"=z(\016\275]\223Q=\224;\237\275\001\3446=\232\036\010<\327\354D=2mt;\365!\234<-\344b=\252\246s<RlD\273p\311]=P;\314=\201Cv=\3627\345\272\206\260\016\275\027\nD=H\266 \274\362\224~=\2770\206\274\376\275\324\272\234;\253\274\332\326\313<\252F\235<\201J_\275\025\254\341\274\324)e=\\1\t\275\244\363\262\275\270G\021\275\027\271x=\210\345\035\275.\017<=\333\242\200\275\031\377\322<\254j\323\274\201\211\366<\313\230_<*\373\010=\246Q\363<\231.\212\275\341\260\305\274\201\235\314\274\234Y\245\274\353\243\\\275w\337R\275\200\225D=\020\271K\275\263\202s\270\210.\200\275\010\313\225=xyF\275A\312\347\273/\342\211<E\377\246\275|\347\224;\026\202\024=~\376n\274\206\275\t\275(l5=\372\024\302;<\324\212\274W\276C=\330\0003<\242\235\320\274\334\347W=\025Y\315\275\316}\"=\375\306\366<\357\320?\275X\312c\275\264\316\213<1tp\274v\231\232\272\327\256\302\274\374{\025\275%\307\346\273\027\367\0059\223jK\273\027\003\265\275\375\024e\273*\016\001<\363\200\226\275\005X\205<m\357B<\377{\204=J\213k\274\'\243\210<\326\307\214=\010\311k\274\347\261\347=\027C\302\273\206\240\342\274\321\263\030=\002\315&\275(\255\227\275)\022\316:\222k\244<\356V\300\274=5K\275\007\310\303\275\261\017n\274\010\207r\275\032\355\346\274\337A\372\274\367\255k\272\232\326S<\023:\240;\211\337L<c\273\220\272\246\250e\273(\301\304;\227\253z\274}D%=\254\217G=;)[\274\306\014\260<\247\213\255=Pq\255\273\233D\265\274\267-3=\374\363&=\275\034\256=h\356\r\275+zG\275<\371\221<mx]=y\333\020\275\020\303\274<\337:i\275`\017\321\274\260\337\003\2749;\364\274\202\001\010<<+^=5m$\275\226s\264<q\327\352\273a\3774\272\216\240\233=V\314\315;\304\271)=H\313?=\020\364\200\274\306\260!\274\025\350W\275\305X\364\274@B\306\275uv\371\274\213\367S\275\321z+\275E\305\307;\024\3778=g\362\321\274a\252g<\\\177;;\264\240\264\274rg\371\274\336\021\345<\344\357\235<G\251\357\274\027\234\313\275\377\022&\272\033\300\341\274MV\003\275@;,=-v\014=\252\226\316<\022\217*=\020\357\014=M\266\217=\243\3623\275\213\021i\274\020R\270\275\351\342\374<f\006\201=\351\274\322\273K\275\024=\362\224s\275\363e\001\275\241sg;T\373t\274b\"\007<\321\233\024=oq\251;*\207\252:\266\020\333<4*\361<m\360`=\251W`\274 \320H\274\024\250&\275\004\271(<\375]\201\275i\264f<\273(\370\273>d\360\272\353\204^<4\033\216\275cO\271<5\325\261\273\234\301\272=\324c\306<\320\245\013\275z\201\316\274N[,\275\313{\212\275\366\246\377<\345wJ\274] ]=\360v\340\274\351~#\272\177\2455\275\')B=\310\315\224\27464\254;\351\340\215<\276\322\207=\377\341-\275F\275@\274x\022\032=\261Y\035;M\370\303\273\240\376\275<V\310T=\2338\305\273\203WY\275\2479)9\354\274\316<s\r\276=+\362\225\275\260\245F=\267fG\274\224\205\246;\237\212\370;\030\365\033=}C(=>8L<\370\036\036<r\214\032\273\263=\353\274)\177\036\275@\002\364:\303\300\r\274\014D\312\274\273?\225=\0136J\275m\377d\275g\334w\2741\227m=\023\364\246\274\362\370\340\274K\014\"\275R\356}=T\246\345;\320\225\234=\036\201\277:\276\271\007\275\335\317\231\275c\221I\275\214\204\312;\227\247\025=F\3121=\224\245\021>\206\202\202\275\324\214\253\275\265K\007;\367q\311\274h\016F=U\\\316\274\276\332\007\275\230\263\250:\026\227[\275W]\251\274p\256\003=\223\263\023\275\303;&=\034\025M<x\3623<Q@\001=\253\215\005>\202\275q8\374\277\023<\247\277\035\275a\227\214=t\000\r<\252\351\265\275qb\311\274I\344|=u\006\020\275l_3\274\350$\215\274\273\227u=\272\246\'=~\333\031\274\213\3222\275:\352\036<\255\337_\273\014\363B\275\323\324\300<\210\260\037=\252\344\177=\204\245%=\243%\357\27262\224=s\327O\275x\3726\274\372\267]\274\270\302\177<\177G\333<\024\337\221\274\017\337\212;\n\"\217<\252G\333\274\252\226\216\274\024t\301\275O/\264=0\273\246<z\0322\272y\036\315\274\245\357O\275\371g\371<(\3256<\370p\013=M=\204\273^\331\340\272\320#\210<\307B\212<5l\360\272\216\374m=\244\021\212\274\254\357\273\275\235\276\203=\027\261\371\274\261Y-\274\337\003\220<n\300\314<\'D\n\275L?u=g\n\311<\264\r\356<`\222\005=\336\233\024=\250\2028=\027D[\275\222\337\366\275\261\025\206\275\251\301\003=\375\020v<-a\270:\364\273*;\265L\002=\026\004\234<\216\320\320\275\262\320\205;\003\025\215=43\200<?#\006\275\227\027\236\275\0068\302=lxG=j\230]=\246\310\310\274Cg\002:\347\320-\275t\225M=\221\020\035\275\347\006.\274\265!\214=\271\313\317=D\034[\275\343\273W<\"\"\257\274\256\352l\274\234N\355\274\034\367\003=\203\014j\275x0#\275a\006\253<\231vL\275\023O\200<\206\321\317\274\n+\353<\244\342\253\273\026\252\257\273)\377\315;\352\014}\275>\215\326\274\371\204\354=:\376`\275\347K!\274\375\346s\275\250\253\237;\206\321<\275\032\211@=\256W\304\274K\313\330\274\3332\276<G\365\013=\\\316o<<\2632=\005\262K=)\034E\275?`\212\275\333[\245\275c\302\205<;r*\275\315\331\035\275\242\363\227\274*\326\336<\310\332\224<^.z\275\310#\266\274\222\362\205\275\341\272#\275\256\313\237<R\231\206=\304\t,=\264\017\267<\273\300\253<\003\004|;\025]&=L\271\212\274\231\247\260\275\004Y\274\274\013e\003\275\020\3238<j[C\275\376\305y<\024\014\332\274\207\346\270\275Mf\2548\242\272\330\274\340x\266\274\347m?\274\007\373\320\274\022\312Q\273.v\305\2733\t\335\274[&\224\275\333\316\360\274\373\310\317\274\330f\324<K \217\274\017\340\214<b^\032\275\002\214\253<\024\312\246=a\2623\275\301\315\254\273W\3176=\363\230\212=\032e\n\275\3105\013\275\244\363+<\033\364!=\234d7\275wJz\275\244\272\260\275\347\3404=\234\rL\275\322E\254\273\333ip<\363\237\203\274\007\363\262<A\233\226\274\302\020>=>G\222=\346\340L<\021\024\224\275\341\222\342<\237\373\217\275\034\235\353<\275$\202=\026\343\277\275+GD=V>\240<\350\003\024\275\261%\216<\241B2\275\307\257#=\200v\201=\265bK<\216\262q<\337[\301\274\313\353Y\274_J\212<4vF\274\311\305h=\250\260\211\274\223R\235\274\007CW\274\361&z\272W\007\224<\320n&\275t\025\306<X4\211<\027\206\327=\225\023<\275\203\036\004>\256\266u<\027\016\327; B\264<K\020,=p\274\241\274\250\307)\275\030\207\200<\232\001\307=\000\373^=\377YI=g\351\343\274\345f\212\275\270\262\213\274qJ\022\276\004\366\206=\210\356r\275Y\003\300\275\242\203\356\272\221;)\275\336\340d\275\017\356\031<\234\365\271\274\026\n\007\274<\177*=\257,]\274?%U;r\r6=!x*;\005\\\036\275E\024\t=L\3066\275QA\244<w*\306\273\006C\310<\206\';=\351\233\026\274\260.U<Z\363w<\317\227~=\265\357\266\275\203\340\364;\340#H;\346{;\275<\315\253;s\351\255\275L\244J\275vD\'=\300R2\274@=\217\274\243\256\336\275\220d\336<\306\210\370<PQ\244\273\203\260\260\275B\177@<\n\232\322\274\260e\350\274\370\035\267\273\024\344\256<8\324\276<\220\177\033\274Ne\325\274\246\237C\274\271\\\223\275\353}\263\273\337\371G\275=\357\224\275\023\320\220\274=\227\373\274\274\233\220\275\001\266\036=\257{>\274\017\013\202\274\344\316N;\207\025P;L\276\257\274\251\025\210=\354\331\247=\013\310I\275\004\017\222\275\305S*=\335\255\020\275fd]<T\261\214<\202v\227\275\021\361\037<e\244[=\371~L;\274\237k=_.\004\274\355\211D\274\014Q&\274\3733w=3S>;\031u\304=IyW\273<\232m=\350\250\364\273\0242<\275\321\377\375<z\245:=\345\027\206\274\262\003\224=p\373}\275(\026D=y\246T\275\320\t\020\276\206\327]<&\031\337<\234\311\261=\221T\361<EQ\234\274\373\346\320\275\023(\227<#!J=\262*J\275\0140\302\274\317\277\247=J\301\235\274\316A}=\277\331\372<))\317:\253\371\204;\367\305\342\273E\036\350\273D\007\000=\r8P=67;\275\252G\022=ZX\227\275\320\216V\275Q\016\323\273\2664\3648U7]<C%l;\177Xw<\202ue\275=4W=\002\250\317;\217 k<9\214h\274\232\253\033\275V}\027=\022@\000\275\033\240\330\273aE*\275\345\310\235\274\242\250\233\2744\312\266<\201\267]=\352\001\033=H\245\325\274A\333\203<\306c\240=M\017X\275\231-\343<\363\016^=\242V;\275\005\306\345;\254L\r=*\036B\275\2362*\275\2454\037\275\214\023?\275Qc\305\275}\313\'=\357\262\201<\022\003Q\275\355p\\\273\367X\233=\033k%\275\247\355\210=DFy\275\250\334\266<\331\216(=-\263\201=\2549\350;\213\0169\275g\006U\275\301y\231;\020j\256=RJf=\247\301?\2743\260\331\274ocd<\351\365:\275\276\003\214=\'\327\300;\310\227\264<w\3628<\312\036\213\275V\263\320<\277^\313<\356E\226\274e\331{\274\227\002\217:\330\357\241=M{\233\275\351\237\\\273\370\314\223<<\346\341<|\340 =\013I\006=\177\3466\273\276\344\321<+f\201\274\021\013R=wL\323=\353\353O\274\271Z\227\273\355\003\312<8A+=\\\376\235=A\2719\275\327\032\267\273\021\371)=\311C{=@hJ=\005\213\322;\323C\271\275\220\232\214\275r\341\017=\364\240\357\274\027\370\247\275\030\270\200\274\225\346\257<Hr\215\273\322b\212=\307\305\343;\343\234\221<VC\215=\2325b\275CPA\275\262T\205\275\241|\333\273)i{=!\371%:\346\202\002;\247\210b\274[ \251;Z\222\247\275\246N\214\275\312\024\240\274s\026\200=\277\0165<q\036\213\275\343\240z\274B\360f=\333\203F\275\021N/\275\302\377\n\276\030\365:\275T\317\275\274Jj\361\273\373\320\307=\246\031I\275\210\025\n=\210\227\272<M\355\206<\236\302\242=,Of<\327k6\274G\032;<`\000\214=\377\026U=\200\350Q<\321\207\230;\236\216\006\2720e\246<\220Y7=\361\361\036<\004\352\204\274\007\0072=\335\3067<\363h\333<\371\366l<\353\223\027=\377Dg=\035\026a\275\240\031\306=\272\3463\275J\371\242<4Y\005<\027\024f\275\325[\323<\343\325\256\275\207\226\217\273\336\324\264\275ysI=7\0201=\376\241m\272U\212z=\340\250/\275&J\244;\317#\337<\017\355\010\2759\307L\274\277)\236=\355\214\373\273\207\267\273=\201<\217<c_\247\275\216\276\270\274\227\363{\275O/\261\275%\\\212\274\323\362\266<~\023\234\274\353\321\212\275\337\300L=\006\357\232=\366\004P<\362U\211\275D\212u=QVj\275\031\353.\275\360\236\250\274E\322\315\274\232\316H<\270yC\274j1\037\275\277\312\374<\204@,=\341S\203=\022\224k=\227tK\274 \272\254\274Qs\205\275A\014\321\274\272A,\274\317\330J\274\327\361\214=g\373\271\274\3641\221<Xu\363\274(=O\274\232\021\000\275\224o)=\264t\365<$\314\266<\360M\247<\333\203\263<f\362[<{d\365\274\314\005\017=?\265\334\2735\022h\274\032H\247\274\213`\247\275\007\271[\273\031f\223=s\217\246\273\035\003O\274Po\266\274i\264\207\2741.8\274\364^\366\274\003\'\232=h\247\016=\003\373\304<:}B=@\221\031=\362\367\334;X\026\213=Lb\335\271u\330\261<\265\264\231;Y-E\275j\204\256\274\375\354\004=\321=\"\274\336dH={z\007<\037\004e\274W6\320\273\357\235\037=A\311W\275\201;\026=\030\016@\275n\355\205=+\206\"\275-\324F\275\216\373t<h\365\335\274\225G?=\322\r\201<\014\347\314<m\360;\274\251A:\275\301\300\236=U\376\266=\r\nG=\244\243\256;w\222\267:\367Z\353\273\315:\000=\361\0046\273go\271<\351m\202<\373\303\267=\331\237h;\341A\251\273q\007\374<\251>\312\267\026\347_=\254\363\243\275\367\350B<\205\335a=8Lg\275Hli\272M0\035=k\266N<\312\\\264\274\255\244\204\274\270\310]=\256\323\224;\221\223i\275n\315\001=\375\252g=:!J<\021\202\021\275pD\n\275\213\215a\275m\235\375\2744\\\020=\206\024\276=\234e5\275\024\253\006\275jf\000\275\324\342v=N\235#=\337\307\020<X\316\002<7\333\333:\200\347\027=k\323Y\274\036\253V\275\027\255\201\275\237&R\275\312\307\221<\022\026|\274\334\207u\275\371\374#\274\375\360K=\240T\271\273\2438~:\216\247[\274E\270L<\361+\024=\010\315V=\321\206\317=\361\333\204\275\026\221D=6R~\275\2659\021<\036\205\200;\307,\">@M\207<\350\266\300<\335\244<=\315\232\035=<\251\235=&\206A=\332\314w;\351\262t\275\246\006\244=_@\013\276\212\254}<8\237)=\337\003\231\274?\337m=@a\243\274\333wp:mT\372\275i\361\256=V\3107\275}\n\273\274!\352\301\273k\035\016<\205\204\216=0\300\303<\354\322\024\275\266\261\276<u{\206=\266O[\275?\223_\275\032\300\302\272\306\303\031\275oc\023\275v\026G=\023\017\\\273uxG=\273\002\364<\345<Q=\025\263.\275<\246{<S\356#=\311\243\360;\254\226\001=\222\3447\274Iqw=wm\t\275\257\023\313\274\ns\322;E\332\261\2740O\036\275\016\226\377<\005\213\211<\306\002\211\274\232D\333\275\274IF\2745\032\377<F\201d\275\303\335\263\274\202_\263\274\023~E\275R\002\243\274\316\002\241\27431\017=\236\262\025<\245\225$<\234\005\237;m\266_\275\222\205U;\317\366\207\275\210)a<@\330\035=o\341\010=\261<\235\274\303\360\222;0\020\027=\301\342k\274iO\210<\267k\271\274\307\022\277\274\355\252\375=\tx\367\274tZV<\267D\033\275e\222\374\274\002g\210\274\257\202\023\275\311\352\217\273;\323\241<f\2332\275\224\017\271<\321\342G<\262\356,8\352\265\227\274I\225P;\251\270\210\275\270\355\004\275\000I\221=\2322\241\275z,\203\274\370J\'=P\350\021\275\302\354\205\274\217\301\r\275\251d7\275\310\234\267<}2B=\262\001\002=\231O\326\274\364\212\005\274\261ue=\366i\240=JvO=|\261\326<\251bS\275r\022T\275\236\234&\275\333{U\275p\263F=c*\200\275\020[\312\274\032\373\241\274u\253\025=#[\032\275o\326\016;\2323\023=g5\377\273<\3041<B\230\251\275a\205\302\274`T~=\246|\000=~\367R<a\357\213=\374\003l\275\350\3367\275T/r\274\316\034\224=\300\201\'<\003V\244<\006w\243\274\266jw\274\226\323\003<\356\212u<\354\365\212\275i>}\275\372%\036\275\364\024T\274\342\242\367\27421\226\274\263\325T\275\360\364\3569\275\204\005=\227\177E=\006`|\275bV\216\275\320\372\255\274\023\276]<W\313\200\273^\347\033=\367\243\266\275>\226\323\274>\010\221<\360C!\2753\376\003\275\253eI=\301\272\252\274\236\025E\271\030G\030<C\302!\274\200\r\232<\263\003\204<ZS\023\275W\270\337\275J\252:<Q\377\274;\272\214g=\027\356\377<3\262\350=/\326~=mry\274\234\337\\\275\374r#\274k\005\242\275\302\333\206\275\344\\\\=\245\r\006\275v\335\261:\t+m=Q\324\333\274\251\342\250\275\276C\325\271\361A\004\275f\376\337\274\260\340Q\274\225\251=\275\001k\200=\032i\215:dO9<\037h\270\274\370\222f=\243\020h;\265\020\213;\234,\334<eP\232;\344@\376<\364D\202\275 \325\237<\262\223%\275\243U\\\272d\266\025;\016\316\261\274q\347\262\275\360\231\345\275\276\357\201\275\264{\031<\233F\026:;\301\351\271\3655\336<\373\365\203<\320\234\032\275vR\252=\203\005\275<\321\212\007<\310\353$\273-\2757\273D\216$\270\336\006c\273\361\231d\275\246\020\032=\3029]\275\216\'\301=\252\025o\274n\272\223;\014h\002<\221Vp\275\312\306\240<\006\205(\275\035z*={\373\361\272k\r\026=~\252Q\275\212A\207\275\257\256\020=\002\355=<0)\365\274)\245/\275`\177\267\274\270\212\270\274\217(\244\275/\022\\<9ib;R;\247\274\363Cs\274\023\004r=^\205\'=\026\377V;f\327\233\274}\236\026=\256:\205<ND\002=\210\211\346\275@\324\270<\307\210z\2759n\225;\010df=L\236\034\2754\310o=\367\257\227\273&\310\034\275\004\215V=S\220&=\246\360\223<\336Y\226<\226E\\=no\306\275,\304\332\274+\231\240\275\361\330\007\274\337\243\372\274!$\315\274\357\'B;\354\000p=D<\033=\355)\201=@U\372<\2150\037=\345\356@<\242j\335\273\016|\375\272o\326\221=P)\235\274\n\322\372\274;\221\315<M\0178\275\212\252\326;\205\031\341\272\023\276>=\317\231\303\274\270\231:=^_q:\256\016\224\273\n\026R;P\266\344;N\247\232<\351u\241=\212\265\006\2766\r\017\274\351r\237;J\302X\275\256\353V<nq)=\341\323H;\007&\267=x\333c<\244\242\025\2758y6\275Q\3110\273\225\333E=.-\227\275\357\3260\275bQ\233\274\353Nm\274\220\371V\275\006\027;<\250$\325\274-\207\273<\020[\330<\237SI=\221*\320<\350\332D=\211\027\374<\206k\021\275N\341\270\274p\335\273=\363.\270<\322\345\224\275\306\254\314<\'\327\355<E(K=\343\030M8\301&3\275\327\r\212\275\017Z\365\274\251\267\r\275\205\345h=\222S\236\2756\205@\275\250\265\307\274/\374\316\275\037V]=`\374\375<\271\232R\275\346\350M\274jE2=T\223.\273\177wx=@\330\207=\036\361\275;\n/?\274\302sn\275\365}\361\2746\373\353\274jV==\266Q\243\275.`\337<c\303\236=\352\327\346\267?\201\347;1\"F<\253\354\355\274\275\'\203=u{\016=\r\352A\275\364\375]\274V\217\243\275\275q \275PL\232\274\254\254\"=\350\316\335<\250e\212=H\365\272:\322\326\225=\270S\334;\367\264\256\275W\265;<\007\307\200<\323\213y=\363\024\347;X^\007<\"\000\277</\305==8t;</\333\224=A\301%\2750\252\323<\032\031\225\274\tZ\246\274,\227\362\274\275\211\241=\377\231\204=\307\334\235\274\221\003\332<\206pq<\340v\376\272,3%;\213\251\007<v;\342\274\241w\024\275}`\301<\325\024\032\275\346\304\232\275\324\206\n=Q \313=\001\371\000\275$\352\321<\322\243\356<Wy9=\252\3229<\363F\030=\367r\r\275F\251\307\273*z\234:\312\376z==\014\346=\000\255{\275{\241\273\273r\302(\274kN\216\275F\334.=\004\201\273\275\006\013\252\274]\t\017\272C7\\\275\343<\003=\375e\024\275 \370p=\212\304\264\273\276JC<v1\337<\010\350\274<\030\n\355\274\220\007\227\274)\325\325\274+\252\226\275p7\226\273w\3723=\311\2673\273\341w\377\274\021?\004\275\366\377\265;\210q\220\275\005\222\021=\374*J=\312Ua=\247\r\351\272\341\367\342\274ac\253\2739.\026:[\215\361\274\020\323\030<\223\003\006=\2520\240<\'kD\275p\355o\274\025^\005=b|\343\273\244\030A\275+\204\300\2749\301\021\274\025\246\303\273,\333\317\274\027\331\337\275\372\367\345\273\221\212X\273S\255h=\264i\014=\0377\234;\025\017\353\274\3176\223\274\030xM<\220\312\227\275\266\"\276\274\351\376\337\273\336\300\014=\001L7=G`}=\377e\245<\222d_=U$Z\275\324/\227\274\346\221\205=|m\001\274\353\214\313<\350C\265\274\372\207I=L+\322\275\021C0\275@\037\026<<SF\275c\347\276=\027\200\222=\311\322\371<J>+<\031\364\007\273\373\372\004=\274\246\214<p~\206<\016\375\222\275\267)\036=\016y\276=\211yI\275\031G\007\274\217\266\276=\353\323A={\335\321\273M\254)=\320\tz\274u\341\322<1^\220\275q\225\261\275\373\017\242=Y\357\021\276\353\\L=\"\001)\275\245\363\244\274\377y9=\037X\221=K~\225\274\375\024\202=_T\253\274\232l2<\237\242\"=\253\320\200\275%\337\033\275\005\323\303<\260\220\322<H>\030\275x\2517\275\346\262\267<\351\344c=\352i\303\274k\n\365<b\236v\274\345C\n:B\344\377\273M\371D\275x\002\034\275\023\357%\275\rPA</o\005\274\022\377\020\275C\221\244<\206\251\350\273.\n\210\275&R\007\275P\362\201\274\376\246\026\275\266\376\021\275a\031\377\275\2062\023=y\321\363\274\230\2464=o\366\206\275\203qR=\366\275\304\274\177dC\273\036\216\244<\310\020X<\342\376\210<\361 \336\275\204\357\215=PTV=F\202\275\274\347k\225=\034\301\371\274\205+\025\275\304AZ\275\226#q\274z\256\020\275m\202$<]x\030\275\252\233\036=\223\341\211<\363X\275<\244\357v;q\242\003<h\335\266<\003P\267\274\233x\036=|3\370<\200\203t=\224\255\020\274\256\305O\275\"<\273\274\263\340\256;\3667\277<\255\007 =\230\212\352<\331\200V\273^\033\263\274\331l#\275\331\177\354\275\261\326H\275,\352\226\275\311Y\035=\313Nn=\022\376\254=\252LQ=f\013\310\274&}\311\274a\004q\275 \036#\275\021\n\212=\346]\252\275\247\243\337<I\206\017\275\330k\217\275\274R\026\275C\361\030\275\211\225\307\274\352\213\010=\317\200\372\272\333\275\037\272C\202\226<\262O\230\274\021$\375\274\324\267\025\275\351/\312=O\'Y\275Y\367f\275\020\264\026\274\036nM\2743\237\014\275\237Rk=\036\374\254\274J\373\014=`V\026<\334i\027\275\354}\213<\202\3675=/Wd=\367\215\037\2750\202\321\274\003\364.=\n\235+<s-\330<\t\236^=\035\262.\275GD\013=o,\006\275\353\346e=Z\002m<G\311s\2743\323\200\275N\301\177<\350\307\010\275=3}=O]\212\275\342\014_<\257E\376\273\344\3574\275\245\321a\273\002\370\354<\273\270\030=I\243B=\220*F\275]\340~\274\204\267\276\275\224\203\255;\3603\253\275,\t/\274\310\032\352;\335\234l\273\345\240\323<\030\364@=\241i\323<\243-Y\275+\254\300\274n\224%=[w\360<\014\316=\274\223O\224<\342\235&<I\021`<\372\262(\273\036\031\230\275\010:P\275\340`J<\217\304\034\275KB\372;\243\226\263\274\324n\300\274\005o\035=\177,\031=.m\225<\030\202\032<iHl\275\256\'T<\020*o\275\212\030\025\275\016\344G\273L\240I\275\204\275\251\275\004\212\215<\211\335\274=\244\2320=e\302\234:\376\247h\274\264Y\014=i\253Q<\237\027\007\2764\0210\275\023\361\270\274\201\225\035\275\361\226s\274J6\037\274F\t\230;\032\216\235\275\261\364M\274\177\264\001\274{\315\213=\370\265\226<G\353\023\275i\301\245\275s\331\245;\311U\010=\263#\301\274\213\366\330<\226bd=\375qW<\'\335\205=\312 \326=\r\366\r=\tf\234:I*\333\274\304K2\275w\210\344<G\3520<\337\242K\275TC\307<~o\370\274\"Xj;@\221D=\341I\335<\375\223d<\336\237P=\236j\001=F\346\260\275\234\260X\275\246\247Y=\360T\221;82\037\275n\n\307<S^9\275%i\005<\326S\t\274\313\000\246\274\030<\264=\312\263\007\274va\245=O\243\223\275(Z\270\274\026\024\235\274\306\202\017=($\027=\260\310\231\274K\356,<\315\3728\273s\301\335<\000\334\315<\006\277\266\2744R\336\274\023xc<w\\\033=\217\331\317\273\213\220\347\274*\266#\273\022~\353<\317\007 \274\004\260\007=\277\235\275<\330\255\243;\351yz=\373&\r\275s\271^\275P\025\002\276\337\213\275\274\005\343\201=\\\225\034<\201\276R<\254\257\001=_F\210<\246g\n\275p\205y=A!\275<\t8>=\310PX\274\032d\007\276r\005\203=\341R\003=t\275L\274\217\017\307\275~\373r<mC/\274\227p\252<\251Z\212=\\D~=\212?\023<\031\212\027<\315\303\250<\251}E;\200i\031\275\351Xs=\275z]\272\371\021L\2751\013\314;B\321)\274\276\232\212=\237\301\r\2753\354\210\275\270\343\277\274Q~\272\273\022\266\217\274e\213\035\275k\301\236;\205\223M=\356\"s\273\244\016\346=\275u\201<\0064\201\275Z\331\022=\215@\017\276\000\352\241<vm\000\275\177\267\034=7\315\244;\222\241\256\274\332\254D=xsA\275\335\340\345\274\255\216\327\275$i\252\273\334\323`\275\007\003\024=;\331\376\273\333\262f=\327-2\275\003&\036\274XIp=|\356\000=\261\013\\=\001Y\031<,\310F\273\276hg7P\372\343\273\240`I\273\202\353\263\274\016g\262\275\033\310\352\2746C\223\275t`\224=\203+\224=K\367\200\275B\270\311<\202-\026\274\030\370\024\274\222+2=\227\307\'<\230w^=\306\343\320\275\006\0363;o\264a\274\247*\326\274b\317\244<\342\370K<Z\366\275\274^\025\220\275\025\254q=\263\004\254\274\312*\265\274\013V\357;\003\321\231\2753\322\350<X\330\207<N\347\212<\321\0373=z\203\000=\240\343\204\275\021=%\275\202\203\204<\355\267\331\274\321\345\362\274\204TU\275\177\266\364\274\206(\025;\331\223\016\274\305-_:\256i\372\274ea\237\273\210\207)\267\033\267\353;\226\001\255\274q.\205\275\213\207\210<Ys\242=\365V\275<{\224\315;`~\340\273\360\340\200=\220\363\310\274\314i\207\275\375<\277\274rp\244=k\243!<\320\336\326\273\266E0\274\031B`<\325IO<\344\367\020\275\034\336N\275\033\341L\275\264m\024=\"\362\353\273\3134\305\274\361\000X\274ku[<\3309d\274\266`u<Y\025\212\275S%\013=\365\247\371<\371w\354<\353\030r;qzD=/?^\275nU@\275}\013\020\275\330e*=\216S\370<}N\311<\226.\220=\314\321\005;/A\346\2725OD\275\017\241\235\274\212\255o\275\350\200G;\221%\177<\2410\253\273a@\002=\242\267\237\274=\233\237={\367\033\274v\335\272\274\2501\334;\375+z\275Zo\243\275\031p6<\277\260\217=!\025\340\273\340\024\377\272\326D;9{\313\202\273(\314\351\274V\354\230<\372U.\275u\230\312<#}T=\273\027\364;\345\340\234;5\233\354=,W>=Bq\357\2745\360\035\275\\\325\266\273\010\316\226\274^\263p<\221\215\277;\216w+=1\342\007:X\262\003\275b\004\254;h!\314;\263M\357<\356\376w=\372\"\010>-\350\244<\010\325x<z\325C\275\366\363%:Q\235\254\275\346M\000=n\322\327\272\210\354\235\274 k\355\273X\305\217\275\200j\274=\31218<\377\232\t\275\037\200\203\275\3128\004\276\236\327\3779J\2432=\007x&\275\245\023\343<\265\274\215\275\227\241\201\273\2776\273\274\376\213\023\275\247k\203=\304\374I\275Fy\203\274\235\004\232\274\177\204H\274Sbm\274\373\020\007=\322\037%\275v\260\344\273*\224\202=&\226\\\275^\025C=\037\356\203\274\224g\361<\316\'\210\274h\203T\275\341e\334<\253\336%<`C\304\274\304\302\363=c!\341\274\224\333\301\274o\250\003\274\005}\232=\323O,=\352\372>=\312\035\247\273J\030\240\274\256\264\255\274Bv\211\273\202\374\310;?/\314=\037\376>\2746\321\200\275\366\365\350\273\324# \275\r\367?\275\372\314\"\274\370\032(\272z/\243\275\343\025\267<\230\260\246<\013\2359\2754\233\276\273\264|\236<\206\361\212\274\235K\n\275o\223\016=\356\313u=If\"=\204\363\277\274:E\270\275\247\0033<d\300\035=\205\266:=\370\316h=\007r\331\273\340\0337\274y\307\326\275\331\312\370<\334\263W<p\001l\275\267n\023<\273\240n\274OH\344\274]\356\221=\220U\210<\362\240\014;R\305`\273\311\026\301\274y\2122=\277L\226=8B\331;^Mr\274~\207\376<\'\350\376\275\211\017\221=V\330\216=\245\217\224=\203=\223\274K\317\013\273\357o\253\274\370\350\333<\337Y\216;\257A\212<\233\341\236\275a\331Q\275\034?\365;\365+\\\275\270o\010\275\276QV<-7:=V\031G=QVe\275\273#\003>\231,\321<(-r<\003\341m<\2614\n=\330d\237\275\036\036@=P\026\254\274\221\t\265\274y1\315=\276RO=e`\216\273\337\313\217\274\246>\325;\300\302\373\274\215\221\237<c\335\224<k\234Y<SI$=F#\314<\021\200\200\272\231m;<\350\235\337;#ux=\210T\233=\356u;\274\304@X\275\\\344\236\275\310\2625=\3219\022=\210t\354;\240\211N<\276\023\234=+\266O=\344~\036=\201u\364\2743t\324\274\211\'\355\272\237u\341\275t\3521=\302\311\036=\314\025\306\275<\177\232\274\247\247\230=q\236q<\010\200\027<\000\312$<\324\365\367=s\035\013=\267 C\275\234g\024;m\016\261\274\322\225\003\274\352\374\344<\360Xi\275\205>q=\266\177\325\274r\001\243<m`\212\274+\317\031<\237\004\320=\000\317K\274\006\032\340\274\235\325\031=\230\305;<i\226X=\236\237\212<\004\327F\273D\261\224=\273\261\035<j-h\275K\243\260<G\307q=d\344\332\273\004N\214<\263\271\232\274\357I\"\274\235\226\240\275e\247F=\240\315\232;\030v3\275\225\312\323\274N(k\273!\233U;P\263\351\274\036\241\371\274\336\230\341<\330b\220\275A\177\313\274\252\324\200=\t\n8\275\343>`\274\262\327k\272\300C<\274o\220y\275@L7=\311:#=\007|\343\273\303\204\023=Y\000\016\275\374\221\005\273\217\002\272\274\212p\303\271^\002\001=\263\257\021\274`_\205\275Y\367\303;\3215\214\275\337\234\210=$\367\021=K\370\252;5_e=\334\003\225<S\205\\</,\217;\010\371\031=\013Q\222\275\270kf\275\254T\255\274\0310X\275\341\267\017=\232\224\233=\206\342\230<2\245\003\274\331d\325\274\204\025\247=D\221\025\275% \270=c)\221=\330\224a\275\036\017\352<\301H\370\273\353\004K\275l3\333\271z\007\001=\264.M;\022e\204\274\324\224*=\t\177\231\275~\300\000=5`\016=v\306Y\2755\'\344\274\317\034V\275\335 \242<\344y\027=Q\302]\274L\365I\274\271=}\275\356{\247=\006\n!\275\224\354`=)\367\333<\327\311:=\305\327\273:\335\377A=C\",\275&\362\302;#_\013=\307{\262\274w\266\245=\317M\266\2743\276\221;\001\342I\275988<\312\272\201;\006\014L<\301A\233=\267\255\035\275\177\361\340<s\256W\275\330\037\256=e\337[=\220y\203\274WG\313\275\301M\243\274\310\274\351\274\374\006E;8_\330<\360fP\275N\2326\275\307\253\356<\020\325\227\274\365\0230\274\216\036\014=\351%J=\2408\366\274\263\3421;\023~\345\274\265\245o\275=\036\000>\212\246\010\275\2618\270;?3:=\253=\350\274\207\2761\272.\315\252\275\0028\217\275y\204\'=G\302\021<\264[A\275%\226\374=\271=\031\275\275\211\355;\375bm\275\001\\L\274\212\303^\273w\303\373;\307\026\331;\223K\017\274\"\323x<^\327\\\275\337\265\301\274\373K\314<\222u\225\275\001#\241=RO~=\345\007\217\275\206\034\375\275\022\353\033\275\254\0348\275\355[==\276\217\020\275\327\346\010\274\240\206y=\3333\224\273k\337\243\275A[~\273|\376R<\347z\r\275\333\230\026=\302i\212=\010\372\325=<\ts\275\317h\216<kE\243\273\203D4=\233\271\322\272y\234)<\327O\033\274\004\265\204\275\210_\177\275\017F\035=\2740T=\373Ko<\372\315\270\274\246\376\353\274U\337\235\275\034Oo\275\225V\033\275\300\010\327\275\327\214n=\241\251\245=\2246\200=\342n\253\272\332V\335\273\347\325\026=\037\215\303<\000\206\244=\215\224\322<L\205.<\373Og\274W\206\241=\377\225<\275\235\203C\275\220\252\030:\241\211H=\360\374Z\275u\224\224\274+K&=\366h9=\261\320\323\274\207\0351\275\225\034\317\274\367\273\346<;h2=\336\254\223\274\002s\023<\335\314\223\275\262\001\372\274\232}^<\375\3515\275\207\254\204\275\363\362i\275\231_\373\273t\026r\273\225\353\363;\340\362e<j\254\024\275\331O\001\2755\303\234\275\314^\253;\"\275\245<\242\325J<iY+<\362\341g;\n\324W=\256-+<\273\024\302\273\232l\t\276f\3434=sH@\275\227\023g;R\370>=\375m\027\275\014\262\217<~T-=\2509p=F[A\275h\211\327\274;\255\210<\276\353\206=\234Z\230\271\3417\371<a\000(\274U\t\260\275\372?\275=\331\263\232=\232-f\274\t\330\367;\013\007/=)\237\210=3*\017=N`a\2748%\214=\227\204.\275\330\262+=6Hj\274\334\366\242<\342\237\214=`\365\252\275\036IC\275\305s\333\27400\260\274\272?\213<\220\276\261<z\371\274<^\315)\275\200Z\202\274\306\323w\275?\006\007\275\001-y\274}\r\211=\302,\355\273\312\rm=&`\310\274sc\351\274E\221\005=Y\356\376\273)-\r\274\343\033\312\273v\354\211\275\221\235\004\275\313!\343\273\r\323\'=\201\233\204;\336\207\243\275\362\212\203\275\326\252\030\275{\342\007=.\017\220\274d\013\231<\205\315D\275\014\350\255\273\203\"\376\273\367\350m\274\345!\224<\362>\274\275\250\323;=#\'\370;\331\302\277<n \274\273\216\313b<s\2107\275S\303\037\275\261oj\275;b\205\275\211+\365;5c\235\274N\t\330\272qc\361\274\360\220\337\275\304Bs=\203VM=\240\007\023\275\005q\301<\347\3339\275w\010\"\273<\237\330\274!J?=z\301t\275I_\212\274Q\355\377\272R\014\374<O\002\255<m}\240\273I\224\252<\010\237#\273\214\031z=\036pU=,F\006\274\371kg=\370\241,=\313\230\266\275\265\207n=8\250\211\274\266\317P=\337\013f\274u\006k=\230\252\327\273\254\326P\273\335\206\225\274:\211H=Z\211b\274\333S\027\275\306\225[\275\231\246\022\274u\237:\274\333+\231\275\351\262\226<\337DV\273z\251\021\274\352\2045<\030\306\002=?@\276=\222\253C<in)\275xV\201\274\240\322\211\275\242>\201\275\224i!<z\274\320<63\202\2743\314\251=}\3249\275\246\323\261\275\263\037>\275={%=\246\024+=N\013E\275\230\027\311=\000\336[\275\251\355\364<3\360\200\275\247\257W=fAQ=6y\300<\363\325\023\275\000\211\035=\334gb\275\000_\237<\362\027\207=f&k\274\265~\332\274\023A\274\274\314\376\017\275\277\300b\275\205\203w\275y\316\326:\221\270\230<R}\010<O.\001<\244\260\205\275m\316a<h\252\030=\326\332\346<\023O3\275\376\342\323;\272\364\237\272\232\274\275\274o\362\205\273\267uU\274\035\'\255<M=\233=7\177\327\274\326\265\357=\273\001\352<d2\000=M5P<\014\327\247<qM\001\274S\263\311\275b#\376<\277\027\301<\213\365:\274\037\315\301\275\240\374\032\275\340-\253\275i\230\367\274r\240\334\274\304\3609\275\376\013\237\274\342\252\227:\306j\372\274\372\221\207\273\010\t\230\2756\271\260\275\316\340\021\273Ow\n\274QpY<h\203\0368\263\351\314=@\0140\275\257\212\261\273\332)\252<\210\004\265\273\222{\264\273\341m\375<XN\216\274\273qq\275ua\2278E\335J\275\210\260\345\274\33314\274\34686;K\267b\275\315jI<!\363l\275A\317!\275f\334`=-T0\274\237d\253<\266a\216\273\247\3643\274\360/\247\273\247J\033\274\234\333\211=\253\332\034=\277\254\r\275A\026\017\275\251\337{=\347\026h\272\375\002\333\27307\371;\202{\263=\246-\230\275#\362\205=`m\210\271\017\212\313=\325\034`=\246I\266<\310x\322=\235<\203\2756u\226\274\247=A\274iI\301\274\002;\371\272Ll==G{\005=\000\206\207<WNt\274\362Y9=\026\321\344\274\374M\033;\256Z=\274D\213\007\275S#\020\275\223\275`\274\302\342\025=\036E\206<VR\3069k\351h<\250\301\200<7\324\204=\3757\266<\031}m=\030eQ\275\336\323:=\344\234H\2756@i=\260\001r\275\275\236P\275\005\3100=\0275\300\274\177?\276<\241=\250\274\020\026B\275^\262\224=4[!\274\345G\200<\"\255\016\274\002v9\273\354\013\211\274\242\037\205=\237\030\251=\315:\016=O\253\276<J\206\275\274%}g\2755\257L=V\336\213<\003\241X\275\317\242Z<M\212\242\27454\314\275?1,=6i\370\274v\\\374\274\206)\227=\243\302$=\325_\363\273tW\350\274DQ\216<\024\315b\275\036-\277\273sb8\275}\331\301<W\\\030=m?U<\316A\234;\014\006\332<\2366\030\274$\311\220<\263\254\307\273\256\364\032<\363,t<\221\010\314<E\0334\273e\334\023=3\203S\273Z\322\246\275\267\000\204<>\273\260<\374z|:(\204\202\275\230&`\273\202\266\220<H\2146=\010\355x\2758g\220\275 \021E=-J\275<O\213\212=_\'\3659\003\026p\275O\302\214\275\023u_\275\203\230P\2757\330\260=F!:\273b\366\314:\254\363S<\257\343\267<\253T\264\274\251ke=\302\215c\275\0148\177=\301\302\215\275YM\013\275\201\022\211\275\203?\375\2744|m\275)\347\264<\236q\016\274\247\316\245\275\367\336\236=\335\225\240\275\271\r\365<9\033\206\2756\267\277\274Z\225?=\"\324\354<\236\320\017\275\307g&=8\303\253\273t@\263\271\274\013}\275v\375\003\274\252;\371<\rE\014=\327\253\302\274\365\003o<\327\222&<\214M\314<X\264\014=\225w\245<9*u\274H\273\375\272\2056\020\2756.\236\274\327\251\355\273\257\335\256\274\327r(\274B\013/=\311\036)=K\305\372\275H\223\030\275\220\312\247=S\035l\274\020\366\203<D$k\275k\266\364<@\217\206\275\237(#\274\330\374!\275{\202\363\274\306\340\232\273*]u\275M\005\n\274\263\ry=/\361\330=\240dJ\275\326)\025\274\3543G\2747yh\275U5\360<rt`<\250\035w<|\006\304\274\237\220\212\2735\325\253<\036,\234=m\301\020\274\342\3056\275%?\371=\347\265\037<\237\352\201\275-gr\275J\3517\275F\363\212\273\2514\376\2749\334\247<ba79+\361\213<kG\230<\306C,\273(;\032=_\250\215<B\017J\275m&\342;\001\327\323\274H$\312=\342\261J<\357\351\273=\322\327\032<\276\032\373\275z,o\274\254R\201=\305\246\"=\305\320\270\273\301\213Y\275\303\240\301\274F+@=\241p\351<\270H\215\275\r\310/\275\331xp\274\200n\266\275 OF<S\210\r\275p\240+=\032Dj<,{N<cJ\010\274\376\357\200=\245\324j\275\006\245\220;\234\347\032=\003\361\250=\2177\311;\336!\202;)\177h=\237\307T\275\321\236\312\275\034\216\002=@7\237\275\332\352\007\275\311\302\213\274\313\374\270\274\255}\237=\341\207D\274\273\310W\275\304-\243\274\227\211U\275\265\267\201<^-\340\274\027/V=\310\276\024=\t\320f\275;]\177\273\026\242\003\274|\340\366\275\317n\030=\245b\211\275\035\te<\354\013\010<\271\355\337<\237pt\274\344\246u\275Bj\203\275>\014x\275\030\022\223\274\210y\\=Rz\020=L\347\002=\371hD\274\333%\343\2746C\004<p\310g=\261z7=\211\342\315;\276\031\017=\226\014o\274A\344P\275VKq\275\"&\035\275l\224)\274\366{\350\274(\200\267<&Bi<FG\005\273w\241\314<\017\202\204=~\004\003\275\371\311p\275\353\360 \271>d\021=\355\010\264\274\373<@\274\2773\235<\304\002i\272\000\211d\275T\"#\275\275u\023=\020//\273\376\004g\274\305\235\025=\"\320\374\273\247,\254=\027\024:\275\003\264a\275\177\024\360;=\364\243\274\363\365$<\332tG=\035Uo=\013\214\364<\250\222\340<\037t\247=\n\245X=|H\334<\226R`;\264i\225\273\020e\240=]\337\022=QI-\2746\006\354\274\266\364j\275\326\376\001\275\206+\320\275\377\243\323<#\036+\275\200\010%\274>\261\223=\177\014\226<\t\242\031\275,\212\020\2753s\356;\263\335\033\273O\305\207=F\tm\2750Y\003\274\250\032W\275Y\341\254\274\242\263+=|\264\n=\322:\026\274;\341\356\274}3\2059\005\202\013<\254\003$\2752\235P<-}\330<\252\206/=\216\271\235<\320\313F;\007J\r\275\030\242\325<ta\221=`v(\275,\037\251\275\340{\355<;\233I\275\331n\235\2757la\273@\260Z\275WU/=\267W*\275\016\247\365<F\343P=1\2127\274\014E\355\274<@\317\273.\243\017\275\027\006\232\275\272\3060<(\033E=\314\373\361<\227#\376\274\342\037O<\017c\314<\377\274\000\272Mj6<\216\355D<\377\354\242\274\221\331b\275b2\363<\306\314\315\274N\206\274\274\3039\217=\313\216\305\274\315\316<\2755\326\301<\363a_=_~\346\273\256\247\036\275N6\n=\315\244\275=\010X\272\274\200\224\324<\265\312\244<)\223\025\273\306\312j=y\017\310:\n\230\371=>\351]=n(E\275W\262\210=[\031\254=\226Xc\274\n\007\003=a\317\272\275\206\371\234:\t\222\273\274c9\231=@v\272<+\260\327\274+q{=\256\347M=\025r\226\274\305X\026<.\333\354<&};\273\023\240\013=\"S\245=_Vs\275\024\261-\275\026\202\306<\273\231=\274]\003\037\275\265\246\354=\217E\001\273\341~3\275\273\000U;GK\225\274\212\252\234\274a\234\342\272Pj\205<\243\370\303\274\210+f=\233\013#\274\274\307\257:\000\371L<\257\236u\274\335\246\253<\277\262$\275\364\235\313\274\261\354P=\370\004\270:\235\371\033=bR\232<\340\272f\2755o\263\275Sx\236<\212\202\224=\242\276\023\275\3258\250\273\327\232,\275\220n\365\274\210[\321<\003\340~<[\356\272<\373\301\276\275\000\000X\275\021\334\032\275.7\326<~\026H=\241\335\007\274\331\340F=\314n\326<Q#\322;\375T\253=;u\013\274\216\354\337<\271\377\254<_K\035=\213\200\250\275\357\354\332<E\002\356\274\230\321`<\352\n%\274\275\023[\273G\3521=\250\206\021\275\375\263\324<\263\361\212\274\030\355\250<\374\246\033\274\330\255M=\227\030\326=Y\343r<\341\234\271;\273\347\016\275j!b<\352\034\n>\020\001w\2758\235#\273\272,\251<>\2042\275\270\340\371=y|\244\274\3032\n\274\267\2421\275\311\335\236<\206:v<\220;(<p\232\320\274{\270@=p&5=\320\347\316;\271\322\206;\343\217B\273\255\213a\274)\335\204=\302\371\241\275\224\242>\275H\017\367\274\014U\303\275\031\301\022\274\301\037\031=Nd\000\274\024\244T=\213j\365\274\227}\211\275\267ya<\314\006\376<\237u\021=\230\301\177\275m\332\364<\327p\323<\t\242\354<}x\200\275\266\260\247\273\252\342Z=e\353\236=\"\252\334\274\271\253\023\275\253;\r\275r5\215\274G\022\362<SxX\274\331\335\301\275[.l\274\316\037\257=\345\222\337\274\327\262\257<\365\377\232\275[\216&\272ak\026\2757\302\241\275\352\3234\275O\234\275\275.d\371\272\264\244\322\274\234\202,\275{\317\007\275\210\026\322<D\t\217<)\"\227;\324\"6\273Z*\201\275;\335\003\274\247\322\243\275>eT\275\204\270*\273\315i~\274\346c\307\274DG\271\274\242Mp\275\0142\231=\226\r\001\275\\\374\344\274)yu\274\257Y\206\274~\024%\275\277\302\010<\265\234\231\275\344\\k\274d\311j=lP\025=B\020\371\273\031\030\326=\377om<\336(#\275\004WP\275\336\235\252\275\316$0\275\277@*\275\246Z\360;S_\230\274\\\376\372\274\213\312\233:@<t\273\340\307d\274\225\210\016=\200#\034=e\311\237\275\310\353\021<\200\255\310\273\246\234\214\274*(\373\2749t\246\273Y\277\314=\376\3349=Sq\323\274\272\177!=K\366!\275\346\226u<\226Xy\2751\363Z;\30289<n)\206=\374\314,=uya=\217\007\206\275x\340\257<e2\254\274\271\236\337<\022\315+=\360\027-\273\345\214N\274\032-\311\274\256\315N=\303\230\200\275\037\2225\275-\016f<Q\026\263<\030\371\363<\347\033W=\243\331h=\377\234\202=\313K\036\274\037\025\370\274e\216\303\274\016O\366\2738o\377\274\361\025\375=\230oZ\275&a5=PT\030=\371\3317\275\007\263\205\275\222\246\006:L\250\207<\264\230\022=\017\330\213=\215\217\024=S\203\020\274\n$\252\274^[U;\261i\210\274\337L\344\272&`\243<\276\355\315<YpK<\007\002\202=\347%\031\2754\037:=c\366\322\274V\305L\273Z\257\212\273\240\243g\274\023\336\215=\223S|=m\263\316\273\300,m;:\017\213=\251\365\201\275\027=\227=\221z-\275\263z}\273\326\013\007=7\351\036\2750\263\305\274\334\002\316;k\370\274\274\014S!\275\205D\014\274\034\231\227<\272\246\013\275q\2602<\212+ <F\0204<\311\362\020\275\361r\006=\217\375T<\210\350*\275G\022\375\274\356<\207\275i\314\007\275\260\007!\274e\034\032=\360\227\212\275\322\340\031\275\034\241\026\275?\322\255<\220\000\356<\310]G=\242\262,=\363K\201\274\022\247F\275\263N\200=\263\334\241\271\252~\223=\306\237Z\274\346\240\237<\024<\315<\250\345\026=\205\270\233\274U\357\367\271A\237\205\274\371\313\257=Y\021\223<\351T\213\275\033p^\275\311\362\256\274\276\216\004\276A\223\033=\307\016(\274D\"\267\275\225^\013=&\245\034=\027\2434\273\227[\213<\266\033\006\275\254\273E<\362\n\000<y\341p:\327>\005\276;\342\270=\004\206\247\273Y(\\=n\245\247\274v\257\t=\213(\214\275\014\315\005=\305\333Q\273\325b\344=\321\355\325<)\372\366\274\247_\r=\2057\016\274\0345\006=\030\273M=\374\263h\275\223w\203:\'\245\326;K%\326<\003m\t=\320\324j\275\352UL=B\242&=\023^\377\273\337\322\002\275V\236\230\275Q\202C\275=\355\214\275\203\264\017<\331\257\013\274\233\316\226:B\321\231\274l\211-\275> \322<_S^\275\014\030\272\274q$\024\275\300\263\226\273\223\2618=N\235e\2757[ \274\026~\260\274\321\251\023<\220y\035\273u\305T;\213\226\254=\321\013\215\274\207@\3409\226\023S<\343\222\352\273.\262\250=\311\026\235<x\220\020=\263D\233\275\302*\021\275\272\216U\274<\203\251\274T\241\216=\334\213\330\274\\\303\273\275\303\351\322\274[w\322<Y\260\032\272l\263\017=\232F\210=\353x\365\273\026\224\234=\315\363\301\274w]]=\340=V\275^\344\n=\211m,=\336\264\n<q!\303<\306\365\324\274~0r=:\361!=k9\205\275mQn<\373\021N=\371:\001;\272\347\"=\261\335\232\273Y\262\322\274\353\304@=\007s\270=\232\3746\274\354>\323<\251G\231=5A\014\274i\314\302\273#\377\022\275\341\276\230=\252_\324\274\234\260\353\272@\005\025\274\037i\276\274\206h\003\275\256\254\020\275\2132\317<\022I/=\373}\226=\3117\212\274\211\337\030=\210\264K=%\267\242=\240\203[<\260\250\252=\000\222\227<\273\343\350\274\032\336\032\275\"\307\237\274\275\3351=\234s\246<\207W/\275\033\2024<\261\270x\275H\002\216\275#,\r\274\303\202\t\273\310MI<\373\3157=%\320k:Y\005];r8\271\272\005\353\251<\201\350\326<\"\017a=\337\273\233;QH*=\233\244\331=.\365\371\275\031;{8\254\021\023\275{\014\254\273\352\257Z;\306y\267=\036\357,\275\001\354\302<\347\332\027<\026\305h\275\r\257\243<k\223\220\275\360\340\013=\357\302\326\275\244F\20694\344\346<\264\320B\2743c\205\275\177C\003\275\233\343\n=\314\224\006\274\033\035A\274\357g\340\274\352\251Z=\377\270\034</\255\026=\216\301:=A\006O\272\273\252}<\235V&\275\3316/=\367\341\t\275E\3470\275\t\004];+y-=H3\020=\254\236.=\243\314\017\274Z\257\301<\364\320\240<Z\203\000\275w\230\216\275s?\312<\023\033\"\274\245n\236=3\322H\275<\001\035=Q\000\217\274L\241\"\274,jk\275m\343\341\274\340\'\234\274\270\316\016\273\344\020\206\275\255\261`=^\201p\274\032\233#<\324\002/\274\311\273\224<\323\332\027\275\372/-<I\r\353<8\343A\275-7`\273\256i\010\275\314Wq\274\276\236\241<w\366\240\274\304l\342\275\004\331\020<\032;.=T\230\353<#\237\016\275\320\323\270<\372\201\264\275Y\037R\275\276(*:\361|E\275\010\370\260=\236`\373<m2\341<\352\355\224\275\246u_<8\375B=\315\376==\313d\317\2744w\025\274\034ID=*\251M\274\315F\353<\346\274\311\2741\025U<\376\241w\275\211z\244\274\322\247\372\274nd\251\274\254\226W\275\371\334\010=\314A\232<n\301\013\275\254\007p\275f\377\261;\027vE\275\357\361n\273\332)-\275\317\3436\275\223:\371\275~\300\213=o\206/<?\231\004\275\262\244\010<x\246\315\275DJ\251\274T\347\032<\333\227\025\275\232\366\355<m?1<\2576`=&\251\320=\375\201\265\275h\265\274<o\204/\275\254XR\274\346\306\307\274o\252\032=2Hr\275\227J\215<hm\245<S\326\202\275\021\247\374\274G\0205\2744_\320\274lJ\221=\243\273\332\2746\243\247\274~\370\377\274\322\314\342\275/H\331<]\321#\274h\t\232\273\321[\271<\341\035*=p\304\362<2P\004\275\273\374\213\274\017\206i\275\223\013\r=E\0000=\315\371F\275\377\234\311<\333\020!;a\222|\274\222\276\036\275\346\257\'\274\036ts\275][2={o==\370\315\350\273+\315\031=\363\210\007\275 \345U<(}P\274\027\206\242\274\3304L\275\275\245\203\275\244\036\226\273\tl\276\273<\013\366\272\367\033\344\274\3247\263\275\350\025\267=\335\252S\275\272\002\365\275\313\350\223=\"V\007\275\036\024\277\274}\241\345:\251\254\273\274x\035\354<\264i\360\274\3561{\274\306\272.\275Q?5<\021\343-<AH\376\272\373\342=<\220:\257<\";\016\273\331\241\025=\375iR=\217\364\357\273/\256\207\275\230b\016=\021\300\312=D\224(\275\307,$=.IR\275\276\343W<\330\320\341<\017\002\257;\017\0322\273~GS\274\371\352\314<\373\266D\275\017|[\274\331\245\000=\3259\000\275\336\304\213=\t\016\366\274\034xH\275\221\213\034\274\346\215\342\274\254\023Q=\367$k<\000%I=B\327\244<8\323\260=\361\256\227\274\367\316\037\275\244\003\t=\214\016\201;Z$m<s\003\021\275D\351*=\354\251==\301\243\227\275\340\002\227\275\367\262\360<\252\235\003\274\202\210\321<\025\027\264\274\031\264y\274\327\000\314=ax\035\275\347\010\236\275\217\277\360\275\231\247L=\307\245\236<\tK\267\273\346Y\272<ud*\275e\303\031\275\274\216\222=\022A\233=\007P\371\275\205D\327<\330H\035=\273\326\002;\'\212\010\273\366\022}\275^\020T\273Kg\327\274\354J\300\273\222^\210<\330\332;\275\270\213\230<A\021\2339\272\2339\275x\030\333\274Ww\217\2759?\252\274\270Iy\274N)T<Nf\023\275g|<\273|\350J\274Q\210Q<\030\330x\275\322\327D=\210\253\300<\033\021k\274\273]\200:xh\370<U\311\356=\021\316\260\2741\373\240=\245\270\024\276\271\371k\27534\235\275uK)=B\"\030\275\342Uc;\237\2149=\347\030\231;\354\204\325<5\307\033<\032\302\202=5\r\364\274 \374\250;\210\247\214=\371)9\273\204,\002\275\221g\007\2757\214$=\254.O=\377y\005=\002\3638=P\310z=\241\036\216\275\370\215\024<C\2140=\303\370\001=7qC<\306\005~=i\\\036=To\200=\017`\360=G\327\222\274VZ)=)\005:=\326s]=/\2729=(\330\224=\353\235\031\275$\304\314<f\227<\275V\013\201<\333\354\317:\260}\340;%F\236=F\230\373\274\357\237\206<\"\337\237\275l\347\020=\267\376I\275\233\250\222<\027\327\224\275\251\330\341\274\300\3758=3m\t<\364\371\303<\270q\215=\026\305J\275\271X\205\274f\033\213<\306\313\337\274\201\0043=/\016\233;\304\354\027=\371\021\231=*\304d\274qA\001<\210\033\250=\210b.=\\]\212;M1\302<\337\371\0109a\200\225\273\3303\037;\312\252\337<\236\016\222\274\036b\241\275\016\203\001\275=\221\017\2756\367\304\274Z\377\271<\235\202d<\256\001\365\273)}\241\274s\347\335<\353\317Q\275(\273,<g\304\326\274\371\204z<\361Z\354\274\317\'N\273\364\274\355\2743\240z\275\035&\r\274G\020t<\231\351\177=\321\336O\274\234oE\275\235\340\340=\223\2515\275 \221+=\\\265\021\274s\001M\275\271TT\275v\017\333\274|(*=\250|\226=\243#\307<S\334C<\26718\274!<\311\275\262\006\376\274\213\203\270<\010\274\037=\010\021\306<\013\007P\275\346\241\205\275+\302Q;N\274\273<\342\367z;\343\006\372<\370A-\275\327\261\002\2756\026\241=\025\221\"\275\314gX=\214\"y\274\314X\002=\340\255F\274m`.<\002W\216=nA{=\305\035\331\274\203\374\313\274\305e%<<I\\<\225]@\275\350\363\204\274\245\370S\275\236\301\303\274\377,\\=\005\352\201\273\214\302\261\274\303\365.\273`\303\'\275\253\036\344=C\003\240<O\255!\274;\243\232\274o\200\010=\262N\027=y\276\205=V\014\334;\256\001z\274)n\304:\263\276f\272\201\241f\275\232\275s=Q#\013=\035\'\222<\2149\301;g\337Z;>\315\217;\r\002\026\270xj=\275\226\326==\312Z\315\273\021\022\302\275,\314S\274{\312\361:\357\226$=|\376P\275\307\276\233\274\324\235P=\341S\266=I\030\251;\247\344`\274\215-\211\274\005\033E\274G1\333\275\031\367b\275\251Q\213\272/8\033\275\007~\314<\225\202\273<\341T\257=r\257\266=Y\330#\275c~\324<\256\364\243<;\313W;\221kg=\323\316\253< \016!<\252\247I\275N\2708=I)\275\274\313\0013\275\255\353\371<hA\202\2753\255\337\274\000\360\204\275\247d(\273\350|\\<w\370]=Hd\233\274\177\204D\275~\272\230<\302\257\226<\301^t=\227\000\231\274\255\317S\274)e&= \206T=\201\303{\274\352\311U\275\276`/\274L\n =\246\322\244\273\257\322\352:C\361R<qCi=\344;\256<\331cB\275\256\227\361<\210\346\032<-\327\010=\346\260\276\274[6\200\275G\276Y\274\021\316\007:xd\017<\252\246q\275\361\005g\274*0\324\274\035\242\r=\202OY\274\360\252A=\350$h;\n-\025<\247\323E\275\341\214\275;\343Zf;\375\333\216\275\315\342\r\2758\320\313\275uIq=\025u\244\273\035 m\275\325\n\321\274y\336\362<\034\265R\275\365\032\254=pKd\275\356\026|\273l\372\304=3\003\355<2\263\021\275\272P\217=\364\366l=\275{\202\273\036\270\t\274\271\266-\275\215\364\221\275\000\370\262\275I\235\214=\305\253\272=\375/\320\274\233#\004\274+\023g\274\241\340\252\274\326\337\262\273\004\314\271<\202=\215\274\343\370a=\355#N=\233\257\021\275\244o\202=\240\273\350\275\346J\374\273\247Ub\275(\272\'=\321\304y=\214Q\002\275\t\007\257=\004\306R\273\030\323$=\r\3736=\373\322\220<\334\341\022==h\222\274w\024\223<\263\371\324\273\0241\311<\347\232\213\275\335Y!\275\301~\226\275\256F-\274\250\037\264=B\256^;\033\027?=.Ov;\nq)=.oT=\203\325\222=\331\246\030\275\'\274\271<bg\320<\276`\255<z\r\013;\241SD\275\342\034\253\275a\350\003\275^\207\340\274_\024\263<\003\313\r\275Ba\200\275\014\356\000\274WvC<-z\257\274P\n\334\274_) <?\247\033\275\255\222\226\274%\241\345<*\004\327=\266w\"=\220\020\206:i\307\267=c\242\013\274\017\030\017=\002_y;d\315d\275\000\333\311<\356\204\363<\3272\204<#\243\314=\336~]=3\231;\274\274\352\027<\212!\034\274?\231\277=\001\337\201\275\276t\346<&L\252\274jt\215\274\341t\263\275}\236\363\274\031GB:\227J\003= \312\222\2755\205\363<\001\310y=4ej\2757\013\224\275n\267\220\275\310\265 \274\350\307f<vn\222\274\345\326\240\273I\035T=\302V\242=s\031\202\275n\014$=\2335\311;\n\032\261:\035\335\340<K\326\207;\263\252\337</D\005\275\275\0136\274\261\363%=\211\253\314\274\034\376\327\2747\273T\273\216\341\216\274}0\034=\346\036\231=<&a\275\361\306\331<\211\207\263\275#<J\275r)N=\366\251\341<\225_\317\274\376\332k\275s6t=\020~k<\332@\263\275\017\350\240\275\326\r\327\274\211A\230:9\327\377<Wk\255\2745.\006\275\'\2577:\333e\335\274\257\272\327\2740\251\031=h\250b\274AU\257<\307Ny<\356`\223;B\032h\274b{D=\0173\2657<\204>\275\\p\316=Hu\005\276k\271E\275\365+\260=\320\025\252\274\315Y\200\274\207l>\274\261f\216\275\301O\322\274`4\320\275\007|\211=g\000\203\275*\205\251=ZU\022=\361\251\225<.\032\017=[\014\024;\371\034\276=\274\r\205<\337\212M<>;\231<\257!V\275\271O<\275\204\311\000=;\334\225=A\347\234\275\256\000y\275*\215\317\275\270\265\010\274\311\275\260<\224\003\007=\212\363p=\241\035\022\274\237\262\275<\236\344\234<\340\325\021\275|S\261\274\034\341\200\275\253\355\342\273;\277\220=\210n!=\233{%=\225L\373;\2679\366=;3\256\273E\243\202\275\232\264\225\275\375oj\275)N}\273\021\003\211\274\343\331W=,\355\236\275\212\273\016\275u\222\310<\350:k<\217j\337<\236\352\263<!-\200\275%\255!=_\375\001\275\354\260\326\273r\227\364<\000\004\274<Qb\200\274\335\251\247=D\362S=\014\261\232\274c\201==)\345\220\274&\302\203=\"T\247\274\304\230\234<\225O4=\350\343\210\274g\316e<7\031\276\272(\333\257\2747\203\t\274G8\274\274k!\027=\024\300\230\274\205\346\'\273\332b\320<9\002\211\275iu\202\275fA\222=\267\370\254\273G\241J=w?E\274\271\350\'<\256=p\274\277>\005\274L\267h=\317v\025=o.\202\275\242y\337\274\021\220 =\241\375$<z\335\030\274\t>\335<\274\234\252\273b\223^\275{\307\356\274\252\013+\275\274\000\316<D\010\030\275VA\300\274=\246\240\274@\303\206\274\226\020\373\2738\315?=\251m\233\275l)\021\275\n\333[=Zx\310\274\245x`<\217\350\370\274\331\274\326\273\'V\274\274~\032\256\274\344B\r\274\240c\231\275\260E\006\275\237\333A\275|N\024\275\330\305(\274\231\352\246\275d0x;\321\377_=\034z\307\273\234\253}\275\214\300\236=\317\204\037<$t\200<w<m\275\246\237G\275\303\362 \275\377-R\275c\242i\275\r\367V\275\312\341\375;\243\265?=A\201\320=\373\266\210<\014\020\003<\302\007k\274\035\036\231\274\330\354E\275x\220g=\313\223p\274&\225\035=\205\373\205\275\346k\306\274\036\2621=\007\303\231=D\215\016\273\212@~=lB1=\317\354z\275xiT=\035Q2=\001\223\213\274\207\321N\275\215x\320<W\004\322;4F\274\274\367\350\372\273\275F\271=\317\263(=<\253\306\275\223\031\233\275\032\344\221<\376\217j<s\366\013<\231M\316=+\300\345<P\263^=\256\307\252\274\273\333\227<bQ\016\274\254\377\240\275\261\264\217;;a\002\275\222\233u\2758h\246\274e\352\026=\354\312-<\221\347\010\275\364\234\034\275\206\327\032=\347\355l=\363\201c=\260h\342<>\375#\275\352\354#<\344\231\267\274\001y*=l\263}\275Pq\227\273\246\216M\274lx\226<\303\014\003=]\302\026;\260\361\n\275\273t\205=?\343\225\274\304\211\222<\0010\314\274\025+\177=\336\372A\274\325\323`<\371\177\204\275\375\303\371<\032\rF=^FG\273F\257\206\273\233\225\017\274\322\354H=\r\030C=\205\330\004\272\310\324\373\274\211H\203=\321\r\n\274Vx`<o<\230\275\0064[=\345<#\271\320\375 \275z\022\037\275\306Iy\275E\233\307\274\013c]<\253\354\241=+yN=\031\373\021\275\304\276\233\274\304\313\253\273\324\340\217<\305\260Y\275\304\"f=j\275\203;\'\257\376\274\357\007\253\275\371\206>=\363\023\360\271B\306\205=\037\205\321<\264\005\246\275\211\320==;9\207\2758Q4\274\331\367\027\275\\+\010=#[3<\357\201\251\275\310\3440\273\002\0244\274\235\007\203<\"\327\256\274\216N\024=e\257\t\275KE\315\274?Hz\274,?\366\2712_\322\274J\204=\275\"\374\272\273\037\001\226\274+\345\026\275^4U=\210|\177<\205\205u<\036\323\271\275\335\000\213=\025\261#\275\022\3233=3\266\255<c\345<\275\367o\324\274R\250d=\277?\0169\312z2\274\221\232~\275*\302b=\370\206,<\365+v<\366v\002=\002n\345<f\030\006\275\240e=\275f\373\216\275\263\361w=\362u\314<\302-\256=\341\303\007<\370\016\3469p0\245:K\221}=\332\345\'\275Z\367\225;\370\365W=\327\306\234=\3469\303<@\363\213\275\357\277\257\273\204\331\2269^\251>=\346(\204<W\250a=\210{\215\274\036\314\023=\327\231\035;7\002\207<\373\324O\275\204\"\340<\372@)=I\177\020:*\262\364;\276a\363<2\300\236\274\305\036f\2742~\001\275w\367L\275\323K3\275\264\371\222\275\306\337\373<t\n\204\275P\247!\275&\237\206<\272|o\275\260IP\275\177S\226\272\232\037\005=0\235\013=\207\257\223\274[d\235\275\345\217\227<\353O\214\2742\227\302=\321\306\307<1\240\213=\306\373r=~\246\321=*\370\224=\356\231\211<\321\017\355\273\002\336\002<\3175i\275\014\351G=\346\034\201:\247+\277\2745\027|\275\\!\036\275/\266\361\274`\274\001={\376!=*\311r<\277,\272<\232\347e=\265i\347<\266/O;\004\002\022\275\022\300\334=\034O\232\273\016\375\305;\036\3006\2758gM\275\323\264 =\277\007\264;\016\314\362;\327,\253\274\024:\026\275\301\326\232\273\034\250:\274]&\215=^5\205;\372\025\333<\034\376A<\014\374\247\274\261\n[=\035E\353;\020\244E<\033\016G\275\343\230\361<Z\002\030\275\371\273\200\275 z\362<\346\257H\273g\035\026=\214\031\225<*\327\317\275)\323\335\273\003\367\231=\266\317\326;\324#\320:\377\025\363\274\0374\216:\362\347\314\272\253\240\217\273;\323N=\211Kb=\307\305\233<\'c\327<\340b\374\274\261\355\216\271\017\216K=\3627\"<\342\260\216\2741\332\255=N\340+\275\276\356\202=\211\321n\274\277U#=\220o\217<jl\010=\211\220d<R\232\332\274\251/\023\275\330\006\343;\310=\264\274\362\3137=\236\027\037<\2559Z\275%+\246=t#\303\274J\367x=\t\013\247=\337^\350\274\230}\344<\014\276\270\274\346|\273\273(\002!=\202\335;\275W\207\303=\265\217@\275\231Y\303;\006\236\021\275\357\206\341\274\350\211\265\274\222\221\016=@\037\030\274\310\264q;I4\201=\275\251/=\267\322\277\274\347\365\267\274\251\006F\274\210\276\215\274\301\373\020\274j\214<\275Q\330\213\2758S\007\274\213>\315\272\270w\355\275\323r\206;2\203\354\274\254{\232=\347`S\274\\\322M<C\336\374<\276\272\234\273\265<\033=?-\314=\316\372\214\274+\353K\275n\272\004<<\345\253<\034\006\216<\325_\204=\267\255\251\275\221\002f=3\313\021\275\220k<<<\035\310=IQ\271=(\"\353\273\r\251_=U\024s\275\324{\255\275\340\367\001\275u\r\271\275\37136=\275,\244<(\354\211:gL\315\275mv\264\274\274 \003<4t\267\274\365v\032\275\206\331\205\274\255\374\357\273\217\231\366\274kZ\227=\016\025\310<\267\177_<\325\025?\2741t\372\275S?\224\275\313\177=\275\n\255a\275\234\232\232<\237\350F;\273\0139=\225\006\217\274,\346\217=\272>_;\017\305\365<\355R\204\274\233\017\010\275\007%>=T\370\233\275i\004\030=$\034\'\273\343g\232\275\321TE<\231\035\026\275\356W\202\273oP\032<\212\216G=\200)@=\335\242$\275\016\224\t\275\253\214\r\275\330\255i<\256\257\207==\343%\275H\001\314<\010s\215\273oG-=\247\324\276\275\2038\234\275\271ca<a\346\004=}-\034\275eO\260<\344\311\031\275\2621r=\253% \275\347i\014\275\250\273$\275UX)=\n=\343<\252\332,<\240\"\r\274\315\317\273<\333\2211\272\253dR=\"{\227\275\266\222\210\275\345]\221<\317\216{9\305\003L=\\\370\n\274)\362\223=\355\236,\275\242\307C=A\276\305\2732EO<kS\244:\226\270\206\275S\325\256<\332O9\275e\177\224=tI\367=x\"e\275\r@\322\274\246\356#=j8\007\275\275.\262\273\360\322w\274\346\201\224\274E\202\346<u\250\221<DK\252\274\014m\371<9\253}\275Ao$\275Fh\217\274\244\020\001=\342\021,\275I\246\205\275\3074\n=X\271V<\214F\031<\306\346\323<\235g\315<\333\216\336\274_\';\275\017\230\253<S\023v\275lnl=c\242_\274)\237\273=d\n \275\307[\034\275z\242\274=\300\232\004\275oe\323\274\310\351-=\236\023\217\274\375k}\273T\022n=F$\324<\314\303M\275\3570M\273!\360\271\275M\331\217=\20450\275\037wu\275\010Y\334\271m\211\"\275\352i\312=\255@\244<\341$\030\275\363\356!\275\322\221\367\275\273\233\235\274\201&\022=\315\243\361;\272\225\302<\324\005<\275\322#+\275\365\275\001=\'?~\274<\362L=\"\016\317<\025\353\356<\244\035\200\275\216\314e\275\253Pi=TD\264\274\2511\003\275\201\322Y\274}A\250<\020\211\004<\023\231\254\274\230\177\032=\371\t\350\274\220~-\274\324\360|=<\252\224=]J{\275\377\207\307\275V\010P;\031\177\237\273\223\322J<\034\230~\275#\206\032\275\372K\312\275V\037)<\2375X\274W\365\245<\274\026\320\273t\354?\275X\261\245\274\254\242\317;T+\006<\275\305v=\272\377\352\274\025\032\030\275R\'\263<1\212\020\276P\344]=\312\007[<|\224\233\272\362\223:=\037\004\004=*\337\010\274l[\363\274\327\0304\275\315/Y=\361\035\025=\177IG=\365,(<\261\340\221<`oo=;\350\006=K\215\305<\212\210p;\275\242$\273\252\033\266\273Z\364\240=\301\367\026=\005\3427\275YH\230\2759^\257\274X\310\"=\220@\021=\376\221Z\275\017T\335<\211\376:=\002\331/\275\237\003\r>\276\331\221=|\315\006\274\274\212+\273\007Z\030\275\017l%9\223w\240<\033l\013=\261\341\226;\353\005\305<\377\014+>\232\245\276\274vV5\274I\365\305=\263\235(\275#r@=\366\331\032\275\366\331[;%\255\311\275\221:v\275\311[_=PU{\273\260\241/\275\t\376S\275\256M\000\275L\316\221\274\017\375\352<}\216h\275\217\033\025<\225\017y=)\377\001\2750\2335=\306z`;\272\"$\275r@\220\2751\234H\275\253\034\036\274FA\202\273\035m\345\274\010\007\000\275\272Vw\275}\377\347\274\233<\231\275D\270\265\273\331\027\024\275\353f\006=\350\307\232\275\25449<D^\026\274V>\340\273\305H\212\273\030\023X=\367\016\005=\254\372\223<r\3360=)\234Z<\374\232\203\274%\265\235<Y\342\251<\350\014\352\271\253\375]=\315c\027=\275\306\347=\352\265\275\275\353\257p<\254\362\367<\324n\303\274\035\254\265\2753P\007<\305\3659\274K\2120=g\006_\274\2054\317\274\021\264\246:J\344\002=\264p\256=\374\276\217\275\251\031\240\274\333\270B\274\020\307\243\273?\303\002\274m\3356\275\t$\030\275\3774\025\275x\333\255<\217E\005=\215\340t=w\370?:\266,0={\350\023=odu\275\261\252[=\257\353\205:\000\2117=\375\272\251\274\213\364\'=\323\226\300\274\206\331F;6\376[\275_-G<\333\243r\275\001i\365\2745J\303\272GO8\270\313t\256\275\271}\366<\022\366\024\275V\222\021\275\177\272g\273\201\275\224\275J\202\334<\356\213\005\275\371\376\242\274~\360\021\275\2325U<\347\237\224:\255[\233\273\006]\033=\356\030\365=\242\037n\274\020\320\217\275\206=s=\323\324\033\275\202l\270<=\006\221\275\006\307\026=\376\010\253=u\003\021\275\203}\263\2751\316[\275(\352\243\273\265\257@\275\277h\311;H\327\265\274n\316(=\230\242*\274\2112\211\275\354>\327<\0333\365<\201\232\035\2752~\035\275\362f\026<\326\263\025\275@Q+<p#P\275B\334\200\274\034\246\217<O*\233=!S\016\275f\345\211<>\251*\275c\271R\274\300Mh=\241\332\350\274\316\017\306<SI\233\275we\r\275Vh\003\275Z}<=\350\007;<\353\n%\275\253\004X\275\036)\246\273\270\275\223=N\215p\274\354\375,=\307\031\346\274\200\336\276<t\245;=\271z\354<-O\367\273a\3246\275KDF=\375\361\244=\203\016\347\273\333\201\253<\355\365a\275N\376u<\241R\351<\'\317\236\270\262\024\342\273\227\302\256<\243s\327\274\323\341S\275\372\337$\275S\262\031=\014\350\010<\017s\236\274\202\351h\274i=\'=\001\237t=9\263<=.\274\215=o\351f\2707\341c\275\237\276\351;\025\300#\273W\251\363\274`\337P=\215=\'\275\275\273\250\274\321\260\251\274Rl\002\272\302\3344=\371\365|=\326\016\000\274\333\005:<\375\307\242\272\354f\241\275\342\346\245\275^\255\216=\000U\251=A\227\355;\263\007\360<\312\360\364=\310\0174\275H\220z\274\022\3425\275N.{\275\347\202E;\370\373\035\273,\226\375\274\311:\336;!\337\212\274\027w8=i\367a\273E\031\365\274\204\361\360\273\306qW\274W\374\225\274\031\251\233<m3U\274(\332\231\275\031\226y\275$\277\260\273\226s\'\275\207\"\334\274*\245\000=7z4=\331C\221=9\213}\275\037\354\275\274\243\327\275\274\206\245D<S\210\204;\024\254\230\275\317\324\305:\232pW9Cg\021\275|\305{=w\257\216=Zt\220=\\\201\300<L\250)=\316\324\"=\207\300\307\275}\336)\275.\362\215\275}wK\272\330\264\272<B\317\261;\264\177G\275\332\312+\273\252\226=\273\006\257\003=+\377\016=\261\313:\275X\373\307\275|v\'=4\225)=\250\020\325\274\266\213\323\273\014\202=\275\037&*=\305C><I\303\241\274u\261\307\273\343\005\254\274\235O\237;\037\343\t\275C\013.\274\357\212A=n\017E\275\310\006W=\202\000\303\273\022\025\211=\036n\223:\234\241B\275c\325\031\274\035\322\317\273%d\020\274\232\307\371\274\353\301\027=6\216\371<\312\362v\275\024\214(\274*ua\275\327u\226<\316\270\306\273\352\313\230<S\256q;\216\340\236=\001\200\252<Y*f<\222W\223\2745\235\345<^X\352<\"\331\346\274*\205\221=8E\321\275\371\267\001\274>\317\023\274\336Ai=\"\363a=\325\254H<\240\303$=iI)=\200\007\037\275\262\232\227;jY\360\274\323\270\324\274\337\347N\275\253\335u:G<F\275\237\322\225<\303wd\2751\276\244\275\323\210\031=-}k=\351\203\177\275\014Q\276\275lM\'=C\216\202=\211#\231\275\332\232\207=Y\264{=\250>\013=\247\226\007\275l)|=PlZ;\027J\272;\00391\275\232\235\333\274Xe\204\2752\237z\273\017\335\247\274!\335\310\272\000~s<\35244<\213C\177\274\301\305\201=jU\364\273:x\014=\006\236\246=\240\211\216;\035\212#;\200\007\345<\305<A\275\234uE:\241\366\321\2748\335{\275\031^\376<b\006Y\274z\177i\275\310\203i=\361v\327<D\311\002<kq\231;\354\335\345;*}\336\273,)\204=7HK=\333\0107=\014\274q<\234z\210\273|\321\305\274\342D\013\274*\036\361\273\021\205d<\354\317w;j\340\037=\361\373\202\275B\276@\275\"\373\377<&\3038\274\243\263\237<\2635\024\275\253\341I\275\356AO=%\346\372\274\210\201\275\273B\247\202<\026\336O\275\227\247\337\274\345\327\205\274\005\316\253<\220\377B\273\243\031\265=\303\375\034;\363s\037\275t\235\372<K\210\033\275QU\365\274\330\304m=\007\341\275=\320~\275\273\037\026?\275~\240L=$=\210;\2718\201\275\022\035\247<\003\377\005=w\307\335=?\'\371;\364)\200\275\267\267\365:\377\343w\274\305A3\275\303\2106\275\321\211\346\275\250\022g=t\260\350<\357<3=C[\321<\311\206\022\274\354=)<\216\211\";\023\332]\274h\t\310=\303K\245\274\006M\231<\245\352\214<\t\261u=\266\003\177=u\032\270\275\005\016\232\275$t#<\344\210\301=\204\021&\274^e\302\275\316t\212:\020f\254<%\027\204<\356\326)=\251\321s\275\001E \275F+\230\274/\237\354=\375\262\"<\241\234\347:t\302\002=\221\021+\274\243\022\0049\370\266\224=\227]\240<$\007\267<\250]v\274\244\275\204\275\305S?=\016\3422=(\277\226\275[\320B\274M_\330\274\240c\304\275\'p\233\275\304\354\345;EQ;<\311\237_\275\342\016\206=\360\263N\274\343\0020=4\"\214=\rY2<\2621\033\275\tz\000\275\306\203\367\273\223=\003=`\235y\275\212\263\300=\357\3328=e0=\275\257\364\003\275{\251\004\275Pt\237;fz\313<\374\267\013<\025\351\326<\346tP\274s\035\271<\342\013\363=\222\235c=SH\352\274\253\203\365;W\001\303\275^O\241\274|^\010<|\206\304<\251xC=\223\037P=Qta=*4G=\0232\031=w{\000=\316\241^\275\245 \345<N\027A=\337y\007\275\314\244=\2756\355)=T\020\330\274\224c?=\026@W\275kYl\275ehf\274\334\264m\275.w\245=n3n=F\224\207\275\277w\361\272\214Q\235<^\316&\274<p,\275\227\005\\;\242\325\256=\214y\317\272x\t\201<\023\363\034=}\002\326\274\245P\035\275yS#\274\374\n+<8\336S\275\317\201,=\264;\354\274!D\264<\340gJ\275\204\330\343;\376\004j;\363\037\241\274Bz\201\275\323\312\314\274\310B\\\275\267 \272\274\r\021O\275\010\333G<#\027\266\275\243\357W;\013\325O\275\231\267\356\273\246\267\262\274\360\215\362<S#\217\275;\234\n=J\257\352\275\216\337+\275\231\310w\274\270\231-=Af#\2733\0025\274f\0072\275$W\313<\235F_;m\340j=:>\372<\\E\203<5\n\316\273d\375(=\274L\310\275\374\222\021< B\244=\241\343\277;Z\306\233\274J\233\200=\003\366W<\007\234\372\274\017(\371<J%\005=\007\302\355;\370\305}\274h\357\006\275^\377\210=;E\255<\364\240f\274\026\327\262<]\226#\275}\364N\273\317\215:<\263\267\037\275[\316\357=\337\3150<\221MP=\322\363\312=\370FL\275\247\312\203\274!Jq=\030\210j<@!\375=SC\341\274\205\265\266\2745k\363\274pe\225=\t\345u\274\0327$\275C\221\036\275\266\251B=\266!3\275\300\224j=\372a\352\274!_~=\250\310\321\273\337\t\216=\344\266$\275\331t\342\273\032B\374\274\360\316\250\275=.T\274\223\340\264\274\3770\023<\345{\311;\302\261\341<\376z\317\274\377g\341\274)\004*\275\324\037y=\204n\005<\336\371\212;|B;\275\245\003\326\274\364\326\211=|Z\301\274{<\327<)wF=\323\355\214=\362m\025;\n\031\305\274\004(J=\020\334\316=\340\364\367;\013U\225<@\303\341\274\247\021\340<\257\212\370<\000\211\224\275\314\277\267\274B\356\272<F\003\247;\345\217\275\274g^\377;]]K\275-\204\311\274\324\315v\275\355\007\307<K\201[\275\264\3574=V\254N=\320\204[<\261mM=\276h\263<\260\036`<\024[S\274\363\346\213<ieO\275\344j[=\024\010c\271l\n\r\274\002.\307=\002\3741=\302\255}\275\250\340\223\275L\346\362<\351\263n=v\r\211=\340\327\267<\371\231u\275\0009\237=$Z\361<\232S+=\375z\271\275\233\307/=T9y=\302\002\211\273\267\332$;C\216n\275\334KB=\333N\327<x\314\303\273\327\215;\275\234\251\331=N\376\365\274-\202j\272[\010q;\255\211@<I\335t=3\n\374\273\364e\n\275\246\002\214\274\211\000\215\274\024\033A=\2407)\275\241\321\331< \002P=\255\356n\275^\017H\273>\352c\274\033\303\203=\357I\227\275NC\240\275549\274\327\316\016\275\360\212\257\275\314\327\302=\355R7<\020\211z\275?\271y=\266c\366;\341\255\003\276!\t\006\275\262\310\210\2744\247J<\216`\350<D\334!=\333\325\222<d\306B\275\22710<\007w/=\333\\\217\274\357\303]<\376Vl=\317\214\377<\033\347v=Yh\220\273\367J\212<\314,\241=\373\237\337\273\330\373/\275\316\001\335<\277\202,=T\231\024\274-\023\021=\367 \'\275\230P2=/\251h=\216N\266<\227\311\250:y\320X\274\347\337\226<\233\377\021>\010\267*\275\'w\002=\254\225\t=\324\221\237\273Ni\236<HaT=\3138}\275\225EN\275!\252\331<\276,m:\373t\376<P\306\225=H\264\274;6\330:\274:\320\363\274\321\031)\2758Z\222\2724\211\021\275\342<i=\273\225\317\274Y\214\353\274\233`\206\274f\024\230=\305\363\214\275\315\275\302=2U*\275\226>\243=&\265\000\275\310\027\333<\036 \222\274\360\344Y=\356^-\275{/\007\275\222\033C\274\214\301|=\242B\215=\323\364\003=\221\327\n<\345\007\027=\223\227\251;\331*S=\372S:<I\234)=N\377[\275z\013\315<\222\034i<\277\003,=\017\270\017=\272\017\227<\341\331\242\275\230\227\207=\tB\365\273\025\346+=(\267\241=\001\026\304<\311\351\221\275GY]<\370\362<=\010\002{<nB\240\275R\326\232=\363 #=c\022\025<\033\2733\2759\245\220;\325\362\347\273X\024\313\274\034c\007\274\261C\337\273\010%\236\275+NJ=H<\323<\006M\257\275\343\000(\274\221Z\020\275\216\366(\274{\352\242;j\001X\275\302\304u<\277\374\243\274o\310\232<\035Y}\275R\010V=\346\025V=\360\212\302:ha\376\273\033\214\367<\241X\311<\347\246S\275\272\304\026\274\237\240\240=\356W\267\273{\025\300;\320\233\237;\036\010\006<\020\324\226\273\277\\\234\274?-\371<\030\324\326\274\271d\022={\376N=\002n\017\274\237\234\360<\263\350U<\016R\231<\261\371\353;yq\333<_p\253\2725\363%=m\021R\275b\266H<-\377`\275\034\332\325;Vp\255=\024\314\245<\254\2735\274(5\n\275T\326\030=\013\364W=\203_\337\275\355\n\2279f\235\177<\313+\270;\0040{\275\313\355\223=\373\366\314<\335\327\264\274T\261\037=,@\320\2746\341\212\274M\260-<\322+\201=\355\214\201\275d\036\021=\327\376\216\275\277\245Z<\267\270\\;\265\031\231=\014\274\033=\034$k<(\306\347\274\350;\033<yT\254=\245\323O=u\233\337<}=@\275X$\242<\366\022\301\2756\230\310<\262\310!=n\311\225\2749\305\236\275\022z\315<\016=\231\275\236\021\375<bf7=#\324\235<\037\013[=7l\204=\203bR=\300\225w=\352\247\205\275\033\225_=\214t\014\274$@\345\273\324\027@\274\r\204\266\274\364\034\267\274pa:<\355\357\252\273\306\312\262<\032\3228<\025s\360\274\356Ov<\241kC<\370Q\216=A\371\255\274P\245F\275\240\027\364\274\026\002\270\275\276\260`=\257\020\022=\321\337\025\275\376^4\273\356 \244<$\361\026\275\317\202\234<(\332\024=\302\245N\273^\311\331\272\244T\253<\220g\006=\217f\215<\376\366I=\2573j\274\\\200\222<\322\315\2049\201\273\317\274\010,\336<\264Q\014\275\033\323:\274@\362V\275\216+\202=P\202\367\274a\233\304\274_8\247<\014z{\2756\264\206\275\034\303\235\274\241\257\332\274\\\313W\275=\315\233=(\341\225\274\321\"~<\250\355\362\273\205)\223\274\220\024\r=h\351\327\274\235\342\251\274YP\224=\364\314#\275\005I\236==\247=\274?;\205<\202\315l=V\200\273\273\210\202\225=\330-\'=\235\340\000\272\315U@\275Da\247<\235#Z:S\326\203=|#7=\372\247P=\344\215L\275\006R(\275\303%\242=\017U\335\274\347`a\275\232\375\322\2740\203\310\275\354\351C\275\004r\233\274\360\024\362\275\327\254\r\275\005\353\262\274\2135\247\274\026-\214<Cy\325=5=G=\342\355*\275\340\016P=\277aj\274z\002\342\274*nN<\202u\330\272E\317>\275)Q]\274\367\312\202=\331\277\216<\274~\361<\251+S=\275\312G\275\227\241[\275\313\306\206:\005L\017=\253\260\245<\243\301\005=\354\027\206\274\242\337y=\265\337\'<<^\205\275\3401\031\274\371ek=\2711B<\210\343:=~Az\275\230\023\016<\204=\233<\203\3740\275\246\235~\275JA\030\275\204\361\021\275\314\235\203\275V\250\270\274\030\201W\273\0250\317<\347\242\257=\021\350\000>\230\347\210=\356G+\275/%\235<=,:\275\231,\203<\004\2134\273Ic\213=PR\251<Q\377\031\275\370w\224<\323n(\275\215\307\002=\252w\'<\313\366\260=z\245/<\035\336;=\006\373)\274\335\341\016;\201\252\'\275\260*\237=\263\254x\274\377\333\020=X\374h\275\334\267\005\275\035\226\231=:\177\232\274\305q\260=\206\003\220\275\265\250h\275\242I\004\275\207(\253=\365e\224=\213\216\004<\t#\305\275\0378\323\274\374\263}\275\272\344\034\275\267\211\354<\321\351\304\274\251J\236\273\"T\237=M\354\322=\026\3161\275j2I\274L\nB\275%\272\231;\274\347\034\273\364e\374< \255\256:r7\031\274\351\250\017=\233\276\257\274\353\340\237\275\371\\\265\273\365nz=\006\357\'=]\201\253=\233\233\226\273\025\363\215\274\336\0262\274s\335o;\241\257?\275V,\363\274\266\325\007\275=\001\355\275)m\365\274\274<\021=EN*=k\374V=bk1=\214A\231=\362\2357;\332\234o\275UT\201\275\257\263S;Y\342/\275p\313\321\275\024\255q\275\326]\316\274n\324\260\275Sw\210=\032{\221=\242\366\272\274\0237$\275\023\257(=\025\017\n=cM+\275\313\n\265\275\301\212i=\230kv\275\r,\364<\221\027\237\275\341\356\211<N\227\276\274\256\336\003=\027\376\336\274\261\344\373\273\025\314\253=Lq\313\270\371\025\242=I\223U=\342\235\023=8\240\000\275\317\267\3037\034\320\300<\254\n#=\027\254\213\275\241q\262\274F\306\371<\016\231\303<\210\322\212:\211\263\2029w\245.:\207K\366<\222\376\322\272\014\226\266\274\207Gw\275\230*`\274>F6\275\234\017\"\275s\335\317;\344J\241\275\250^\251\272Z\242&=N\025\236\274\270\034l=>\022l\275\020\371\017=\211\032\236\273Alp\274Gw\371\274J\266&=X\037\203=\257l\030=SN\251<\340H\312<\303Q\372\274y\346\224<\247i;=*B\370\274\352A\305<7ti=hW\202\273W\365@\275\276\274\327:\022\214\264\274\277\346\000\275\234Bo\275\360o\233\274lr@=\3251\237=p\266i\274\271\210\243<\265\340\227<\360\231\320\273`|\\=W\270\263<\201#\r\275\335\225+<9h{=\014,\016\275z\264\303=K\341-<\033\305\025<j\013I<\203Cu<\013\307\033=KIk\275E4\033\274*\306\035\275\234\260A<\322\241\345\273\344\027L\275=#\376\274\246\206\006<h\336?\274\353bB=\257\201\337\274\003\024\023=hO\353<\022uS=w\356O;7c]=\322$\336;\200o\227\275f\324i=B\022\361;\214\316k\274\024\227\242<\214\314|=G\221\360\273.L\373;b+?\275.s$\275\275-\220\274\277\013h\275\356K\332<\226a\022\275\252\037c\2744\222W=\346\376;=\256\002@<Rv\237=\333\363\274=\207\325\313\273\356\t)<\243\311\001=>\302\3339P\000I\275\003|\241;l\225n=\006\375%<\2737\206<D\244\227:\311\035\203\275\217\333\006<y\304\271<\267\342q\275\357\336\306=)x\365\274\275\030\216\273\223\200z\275\'mA<\233)\210\275\035y\"<\034\251\241<\n\243\237\2757\253\242\274#q\361<\211\350\224\274\301\274\213<\275]H\275\227w\234=ow\005=,\353*<\004\3223<\367\245\024\275\306\026\323<\004q\235\275\230\005\354<\307\347r\275\252_<=\2774J\272\252\241\034<\023\337\242=E(\267\274\250\341\244:?W\216=\223\203a\275\317\r\210:U\337\322\272\031\r\264=\000\366\223=\037:\272<X\343\004\274\336n\246=`\277\203\274\277;\201\275B\036\367<\260\004\021\274\337*\262<\264\0305\275l\241\023\275/{\000\273\250N,=I\177\366;\247\205\333<\225\024\320\274\333\263X\275\350y\\\275#\004\030<\335=|\275\230+G=GC\376<\257m!\275\232\252\243\274\021\275\353\274S\336%\275\324\020p\275\0260\222\275\351\177v<\022\026\200<\373\237\314\274z\022a\275XY\225\275\316b\372\274\203\272\032=\251\203L\274\325\010x\275\310EW;G\024=\275\213\nB\275\"\301`=\220\270\025;\334\277\226=)\033\342\2731\201%<\007L\253\274W\313\'\274\265IG\274\005\240\245=\020\345A=\316\347\023\275 \372\215\275\036;=<\220\352s;\357?}\275\250h\313<\336L\203=\021\310\260<\023\365\201<h\353\344<a\316\024<Q\251s\275\346D\005=.B\211\275\212\254\323\274\316\264?<A\037\227\274T\254)\274E\375\\=\025\262@\274\317|\032\276,\260\246<z\202\255<\372\037\222\275\277\321\317\274\306h\257<\216H\305\275\021\314\037\274\254\355\370\274\000\226\257\274\004\366\016\275S\305\346<\327\316\356<Ed\325;\363(\343<\265\3535\275S4\223<B\227!\275\271U\231\272\275\016\340;\317\236(\274N\222\236\275\270+\221<|L\374\273\212\r\305<W\346\341<\017\0278=6\332\265<_\246\202=9\240\247\274\230\223\375;\300\340\024\275\241\351\223;\004X\305\274\314o\025\274\232\317\233<xB\257<U\016\355\273\024`\237\272\027\352\213\273u\334C\275\370\277F=\201\361\243;\361o\006\275\213\210\025<ho\005=\233\240\254\274\220\010\246<\240t\235\275\211bm\275E\325\216\274\252G\262<)\2615\274\027\341\305;s\220@<7\275\322\275\217\275\332:\321\240\023<\313\212X\275\216P\220=\377^T<\354T\236\275>\315c=:\274\205\273\251\375\3009\363\362$\273z7\007=\375\315F=\272J\307\274g\263w\274d\002\323<U\253\205=\252,\275<\006\n\327;u\252\266\275\334?-=\206\323\355<T ><h\317\251\273#;i;j\006\002=\272\254\347=R\252\344<\204\306\021\274k\273\005\275\207\376\232\272\370F*\275B\227\n=$\255\246\275\260J\003\274*eN<*\271\240\274\265N\332\273fA\344<\'o[=\247R\265\275\000\037\345\275\022\034\037;\214 \206\275\302\307x\275\313\234\245;lo\031=#?H\275\256\227&\274\007\352b\275\203&\223<\200\205\251\272h\034\251<G=\237\273I\201\222=S_\210=L\001\204<\232\201\300;\343\030s=\007\202f<fe\225<\260\006\324\273\323\216\304\274\2235\245<\376\361)<cr\345=\332\336\253=\335 \364;\205\r=\275lH6=<\366\321\274\242\261\231\274L\257[\274a\025\027\275\321t\032=\275\\+=\337\235\206=\201G\261\273jm\220\274]\234\266=\313\306\350<\371\245\316\275\346\035^\275\200\246\200\273p]V=\343?y\274p\035l;\210\010o<!P\";H\277\267\273Q\"s\274B~\275\274\014\226\233=<=\036\273>\352\233=\022\373|<3\r <\233\363\002\275\217\330\360<\276\330\n\275t\177#\275\312i\361\274\324\254\366\273\"\304\232\275\204\004\324<,6\307\274\341K\341;\235\227#=\260\352\214\274)H\203=Abe\275\005R\255=f\262\313\274\305\300\250\275\247{{\275\034\335\323\2727\303\242\275xu\256;;\313\203=zA=\274;.\211=E\336D\275\337\032\n\275\251\345\326<\242 |<\200\010\022\275\346\225\222\274\270\3639\275\341d\251<\234g-=+=\256\275)7D=\345\240W\273IW\020\275{\326Z\274\200Z\025:\026\360\230:\236\206\222=\241\226\205=\024\037\023\275\232\231K=\033\244\374<M(\260<\264\027\213\275\227c\247\274\203\372w\275\263\374H=\2106\204=\315\262\210\274\222\004\024\275\276%:=\367\320\265;wB\225\273\300\324\374<\266WW=\007\227f=l\374\263<\242\375Y:<\372\257\275K\024Y=r\256\250\274\360\2475=O!C\275v\323\250\273\025s\216\275\352N0<\2030\306<b%\234;#\350\311:M\361\024;\234\244\017<\022ch\2750D\224\273\305\001\030=\321/\306<o\017\323\275\220zg\274.\264s<5\307\235\275a\206\236<\273\2676=e\316\203=\233\212i=Ley\273\265U\226\275\003\212\355<rYe=\014T\252\274F(\203\275\317H\n;\030 N=\311gS\275\360ov\275\337\206\254;\365\323C\274\222\302\347\275\257F\371<Uz\005\276B5\345\274 -\352\274P\323\331\271\245\215?=,bU=P\017C=\003\357\271=4`\334<)\367O<\311\371L<\202\321\241\275\347\333\236\274\216\2572=_(\210=\344\304\202<\210hY= 3\003>,\371X=\263\253\004\275\375v\020<W\246\366\271\313/#\275\216\273\300\274m\372^=\332m\240\275\261\310\256\274\241y\274\274\r\357(\275\336R^=\2775\242\274i\021?=\305n\305=\032\312\212\275Q\325\250={J3\274\343\274\301<\247kF\271cT0\275\005l\002=\226G:=\232\3433\275.\0206\274ff,\274\351\362\202\274\201\\\200=\274\'\002=eM\343<%\275\032\275\324\305\256\275\270\306\010\275+ey=\320\256\025<}S/=\016\217\250\272@\030\334:\367\306a=\370x\220\274d^\331\274\203Uz\274+\260*=\240+8<\224k\324<\344]>\275T\344\212<\207\213K\274\216#\307\275@M\370;\020c\271=\247^\031\274\215\222z\275<\320\301=}\252s<\3440\201\274U\022\014<z\315\256<\272\245\375<d~\356<\262)y\273\253\247\366\272*\234\341<rLn\274\t\261\302\275\362X\323;)*Z=(\275\242<\311\225\026;\261^Y=\262\214%=\301&d=7\331\000\275\207\351U\274\354\327\206;\244\314\337<\260|\006=\354\255\230<\267&\376<\376dD\275\\\261$=\365\273q=IX\221<\276\327\216<\ng;;8\244\365\274\344\227|;\032\232\300\273\032\306m9\246:\003=\225\334\340\273\371\321\006=\\N\007=\246@\317<\363E0\275C\312\212\274\312_q\275O\322\246\274\246\3173=\241\271\241\274tKW=l\005\245=v\365\n\275\32134\275\217\356\211=]\025\317;YR\235<\375+r=\257\242\220\272\245\371\364\274\365\2660=7\' \2751\177W\2758\">=R~\232<\261N\024<:\332\362;\013B>=\343\3529<\207\240\n\275\022\271\301\274\007\202\254\275\213\220\307\274\244>9\275BY\322\275\201v)\275\264\205\343<\371x9\275\264\333\237<\353D\207\275\227\333\007\275\325\032=;\2519\034\275@\366\033<%\252\305\273\333\261\273\2733\350\230=F\005\327<@nH=\307R\240<\013\3451=\202T%;\341WO\275\307\357\212\274\236\223U=N\"\236<\"\374\273\275\203}\033<Fb\260\274\302)\237\275\234\222\000\275L\326\t\275l\006\221\274&v\"\275\336\330\310=7\201b;)uw\273\016\023\345=\324\324\327=\255\023\366\274\352[d\274G(6\274\241/\006\275\262\223\264\274\325ic\274\321X3=\350\240Z<\027!O=h\262\024;\334\201s\275h\3471<\302\2378\270\0358*\274p\323\034=\242\241\274<&`!\274\315-3\275\002)l<p<b=\177W\n\275\271#Q=:\264{\275-\237\t\275\235\237\306\273&s\314<\346!\374\274\342W\002\274$\005\271<M6_=\360\315\010<P\374\013=;\010s\273X^!\275\203\344\342\274\352\001l\275\300\207\324;\304]*\275\277B\204<\365\376\227=u\020[\275\254\004\025=\374\234\r\275\240k4\275i\001\201\274\246\232<\274N\205\372\2745\356\367<\364\253C=c\331_\275\"5\013=V\016\262<w\2553<n\267\376\2749\236L\275\0249\363\273R\317h\275\237\030\222;f\226\217=\260s,\275\374_\224;\"\217\'\275\006\3709\275\274EC=\2436\217\275u\314#=^\371\254\273\260\333H\275\273g\313\274\233\252\216\275\374V\221=\217\344\270<&\201\177\273\033\305\213\275\367\022\333<\204yz=9\275\324<\014]\237\274-\263\215<c\343\327;\315\347\310\274}\331\270<3\005\270\274\362#\021=\265\304\014\274\350`\222<\003S3\275\327\036\342;)\0256<V\264\"<}i\335<\260\307E=\313\201\200=\343/4=[\376\302\275\276\267\226;\222g\026\275\307\265\035=B#\350\274\215\0055\275&\010\375\274Q\331\263=>\365\207=\207\324S=\205\007\\;]\030\214\275\237e\202\275_A\021=\270\307\330<:qs\274\223o\244\274t\304;=/?\002\275(#P=\031\324\264<YJH=@\200u<\357\274Z<\237\366\300<\247\232\303\275H\273\315\275\230\317\2706~)\021=\357\362l\274\020\340\n\275\334\366n<\236(\005\275)\221\006=\334\252\376\274\244\013\234\274\367)%\275\351\260\034=T1C\274\273L\221\275\371\001\252\274^\345^\275\022\200\361\272*\265\203<Bt\340\271\002fj\275\007\250\020\275\352\341\360\274\360\221\224=\245\277r\274\274\376\225=\3210\315<{\314\007\2758\016\314<\260M\262<\305\234\277\274\337\261\217=\244O\005=3\367\322=9\003\003\275\020*\236\273\254\350\253=\345\314\250<\227\242\335<j\315\234=O*\001\274\205G\223\275\361\216\026\275\247\003\202\273\014\305\216= \235\305\274*\332+<\374\371F=D\315\020=\303<\365\274\212x\246<\306\345\237=\237\327\304=x\235\352<\265\262h=\373J\274\274\374\301\320=^\262N=\031\312l=nBJ<\214\213M<Y\2533\275\022\006S=\340\222\205=\243\221\223\275\006\354&;\273\206\225\274\351\267\267<W\036p=\352\346\234<\3150$=\347\200\202=\255\n~<\355\007o=\340\322\030=\244\nA\274sT\\=7\257\274< \352n<\230n\337\275\371\332\271<\320^\220\275\223\t}\274+\352\224;j\031\363\274-\010L\274vP\240<\301[\314<a\3313=\241\267\326:KK\272<\226e<\275\252x\353<\305jX=K\214+=\020Qk\275\226Iy<\027\212C\275\272!\230\275\335\\\205=n\203\234=<\260^=k\374\310\275\302>\326<k\276\304\274\335(\207\275mX\021=\341)\217\273\274-C\274\240\363f\275`\343\014\275\3362a\273\300\254M=(T\'\275z\301\343:b\206\344\274\241\001\350<\312M%\275E\000<\275\243+K\275Nn\006\276`1j=\232%)\273K\t!<\316\3343\274\302\271B=\373\010\200=\222~_=\374\207p=9\306?=u\302\347\273\376G\276\275\220\316\336\274\025\302\210\274\213\357\203=\311\331\231\2754\275\267=\030\024h\275v\324\000\274\027\007\0329\036z.=X\204=\274\330\246\251\274\3005\211<\265M\206\275\355\367\310\274*p#=\231\302\267\274\027\354S\274<ng\275\204\235\004\275\301\213\212=G\201\006=M\007\t\274\34485\274\037\213\202\274\234\342p\273\241\305\371<\232\343O\275md\262\275\305\264\025=\205\227I\274c\270h=EL\201\275\227\262\036\274\003\210\275=\256_\225<g\361\025=\340\314u<\2138\216\274\013\230\022\275s\223w=\322\365\034=\370\350\256\274\374\343\317\274\215?\236<\005\224\343\274\'y\240=|\344C=O\315\033\275\351\036\374\275\336\033\313<\317\020\025=\365/*=\025;X\275\024\242\021\27591\232<|Y*\274\274y\027\275J\"T\272\250\361l\271\035\220-\275\303*\223=Tn\006=\na\377;\201V\003\274A\224\303\275\2226\227<?)}=\247]\264<\022\304w\274_lC\275\213U\r=*\271\301=\234\272\367\274\013\330\226\274\214\333\254<Zi\031=\344\342\247\274]./=\265\031\013<\027\214\206\275\220\340\326\274\350\010\010\274\343\223(=\224\372\013=\210\341\361;\313G\017\273\216h\352<Lq\270\274\321\004=\274\2577\024\275\341\341\266<|\240v=t\260\203;uM\334;M\372\177\275\367\006\225\275\272\264\003=\355\273G=\367\213\3049\321\347\025\274{\250\274;\327\347\356;j\2425=\t\376_<\256\002n\275n\225f=\365\200t<\217x{<T\327!=8\372\347\274\236\216C\274u\3231=\330u\200\2759]\327\2748\375\236<R\351|=\377\320\255\274#K\236\275\313\335\343<\364\347\216=\321\373\232\275.\363/\274\301\311\201\275\237;n\273\017K\322\275=\244\212\274\2451\246\274V}\216\275*5 =L\356\234=6F\350\274;\346H\275p\263\236\274\002\337\303\274\006/\002=\236\207\240\275\212\353@=x)?\271\376\177\027=\226\002\270<\262\007J<\270\261\230<,\223\022=>\037\'<\200\303\216<\314R\246\275\003?Z=xaW<\201l\201=\224\335\262\275\211\205\r\275\250\205\225\275\351O\267<9c:\275\374X\356;z\340\217\275\323\316\245\274@\\l;*\001\277\272\324\2354=S\035\205<\247vT\275(\036\226=\227\3010>u\2571:\271\213\005\275\207\200\337<\225&\261<2\005o;\313\324\241\274\204F\371\274\207l\364<\023\241a<\222\251\347<l\316h<\270p]<\273\235\002=\312\241\211\275\023!\331<,y\r\275\307\021F=\301\027\255=\020\346\377\273\003#%\275\2119\243\273\326\032\227<\322\3723\275U\312\277\274\267c\033\2742\374\211\273[\267\265;K\257\245=\334\364\276\274v.\021\275\317\225\215\275\245_a=g\340\302\275\357:\247<~\2323\274?\224h<!B$=\245\000\331<\0310\247=6%L\274@\3524\274\250\245\204\275\232\026O<\327$5<\267\376=\275\266\330\025\275\007\247v=k\361C\275 \261H\274\312\266\244<\267J\004\2721l)=\330\231#<66\331<q\027L=\304[\327\274w\315\373<\375e\246<\230\240\203\275\315\230\207\275\351,\213\275\333K\257=\313h\366\274\312Q\036\274\347\342\217\275o\257#\275<\230\006\275\361\246\306\272\023A\215;\372\272h<\337\272\375\273\022\353\307<\225o\004=\351$\227\275\214$\232\273\025\001\206<J3\274=J,\262\274r\030l<\264\355g\275t l\274\267x\273\275e\013x<\007\323]\273\370?\253<z\333\206=d\345L=a)&\275\254\366\363<{\221\357\270<L\216\275\226\007\023=h\024\235=c\024z\275\3531\244=\217\227N=\177\272\217=\nq\225\273CFT\274u\337U\274T\3473<\013My<\256\364\310:~\177h\274\214\014d\275\200\216\260\274x\335\266\274\237\357P=\001\333\"\274\234\355\376\272\211]Q\274\222to<\200\313\233=\342\217\341\274\\E\251=%{\236<\021H@\2749\327\232\275|\'\256\273\314\033i=\036\021\210\275Y\346\206<{Z/\274P\303\262;\217U\027\275C\201b\272H\277\205=<\013\326;U\332\213\274\201uF=\017e\010=\006\275\243\275\365\200%<&\370@=\3613\300<\3226\272\271=\217\244<\025G\225=<Y\024\275\224\001K\275\037\201\220\274\2644\237=\246\324\031\275(6\237;\236\214\245\272\364\307\232;\277\212\027\275\230w\332\2748r\205<A*\034\275@+\206=\002\225\037\275\003\334\345\274\033\255\211<\207{\027=\303R\324<M5\177\275\036\305G\274\236\210#=\305\323\306<Za&\274iv\271=\017\252\002\275\254\021\020=[\000<;_\257\202\2756\3718\275\364\\\203\274e\0237=\304\357\014\275\275\266!\274\027\017Q\275-\275\202=\301\307\237<;\257\224<\357#3=\n\\8=`\006F\275z\375\277=\353\261\205<#0\007<\220\201 \275\227r\305\274 c\\\275T\204\332\274\334\374\3409\010oQ=\375\252\326\274\016\031\333\274\250\223\202:t-\371\273\314\1771\275\343\272M<\335\245\035\274:\302\217\274MF0\275\034\213\361<\235V.\275\241\342h\274\316\'E=\217\327\201\274\372A\377<\014v\276<\272\276|;\372>\252\274\001V-\274j\273\203<\343 \271<\315Q\014=\364v\370\274\205\203\211\275\0049\200=\354H\006\276\3014\006\275J\376%<uh\216\275\010\314^<\356#\351\274\233\221\331\272\323;\244=\257\231\313\275\337Es<\261\327\034;\006t\205\275\211K\237\274T\242\221= l\336;\337BX=d\370b<\227\362\036\272\023*\370\274#\036!=\003\215\010<\332\'\t\274\203P\363\273\361\320\333\273\t2\003=\031D;=\222\362T\274\\\311N\275\301\n\225\2753I\177\274\022\236\261<)j/=\315f\260=\231~\237\275as)=b<\342<\352\235\026\275\003u\014\274\201p\233=\261\377(\275k\355\023\2754{O=<\371\025=\274\347n=9s/\275\242{\245\273_\340\225<3;M=\243\025\314;9\006\007\275\373t\357<2\007\273:\223$w\275\245Lv<\227!}\275\251\324\241\275N\276U\274U\376\305=\246a\242\274\356\r\213;\360C\246\274\027\232#\275v#\035\275\003\361\255<\242\323\311\275&!\204\274E`z\275\230e\333\273t\343\212=\\\002l=\353#\312;\264\034\357\274\377\214\032\274r%\230\274\032\304\371<\316T\332<m\241D\274=\351\205< \267\362\274\222\347:<\3167\223\275T\027\300<6\252\240=\007Li=\341\223J=\320\025\346<(p\261;z2\210\273\261\347\257\275\027H\343\272\241kh\272\250Dn=I*\032=\"\352\356<\366\302\350;\037}\276\274\2026\260<nP\251<\377@w=\227\3702=soe\274*\246\033\2753\314\t<w\024\214\275\270\240\202<\0009\021\275\033\365\252<\003!\003=\303\017\315\275\345Z\211\274\006\256\034\274\207\035\256<\300U*\274\n`\037<\224\340\224<\300}0=\261ZH<\271\266B\274-\216\034=\302_\221\2753\230\177\275%bj\274n\0251\275\370\207\251=\377:\204;^W|\275P\304&=\010\236\362\2722\010\237\274\2063\311=m%\263\274}\366\002\275R9X<\376\211\266\273\303\203B=\327m\224=\201\364\347\272\224\235\215\274\r\301\310\273\263\036\035\275\226\0319=]\257\325\2743\377\235\2755\003\027\274\264d\202\275\366I/<\277\372\364\274\353\024\014<e\030\300\274Y\214\353\274}\000\244<\223rs=d\217\211<u\314\310=\256\326F=9|\354=}C\327<\254\224W;gI\023\274\2718m\275\313\217(\275\306\032\326;\021\312Q=zg\024<\327\'\372\274\222\216\217<[\201F=\033\367\037<9CF\275\226\036\025=,,i<Y\243\251=1v%;<\010\330;\355\000\n\275=\244X=R\034\035\275\204\326h\275\201\350\240<\233\025\002\275\332\033\324\274\304\256\301=2!\002\276~\013`<f\343\262=\214\225\254\274\341_\243<\304;\277\275\032\341\371<GE\301<\207\376@\273\362*\225\274l\336\177\275\217\253d\275\274\361!\274Q\254\303<\n\031\253\274\336\341\272=\316y\027=\207A\242\273_\023(=R\372:\274\035qz<\362 \242<\215\t\013<\246\312\023=\277\003^=\305M\013\273\277\315?=\255\376\204\274\221\202\322:\342M\337=\364A\033\275\263\010\234\274\256\264\343\273\261\250\257\274d\221\306=\257\002\027\273\300\025\377\273\0370\264;\316\267\242=\353A\311=\006\007\014\274\300\352n\275LY\032=\311\323\322:\3131A=\350\217\370\274\016\024\004=\334$\271\274[Y\253<\341\376\371\273\201#X=\221\014H<\213\2372\275/\362y=\260\357\216\275\215\251\022\275`p\214=\3378\025\274\205\276\210\273&\310\225\274\267\374s<6\016\010<\245i*=\371v\226=\227\302i=\030\374\307<\360\031}<\026cE<{\005\033= \010h<\265\002\211=\271\205p=\262\222\261<\231\312\013\275]\252M\275\006\322\302\275zx\250:,\313\004\275p.r=\354\014\306;\001\215U\275\362:\330\274,N\016\274\371E\266\274\2637\322<\251\276r=\321\363\213=\213\245\035\276k\014\345\275\003t\322\274\340\225\037=w\37669\315D\212\275\241S\254<\226\013x=\336\325\362<V?\354:\351\243\214<\254\303\240\274\201\337<\275M\255\256=\250\263Z\275\234\'U\275\232kh<S\274\354\274G\304S=\357\023\371\272G\275\364<\177E?\275B\364\223<\201\tJ\275\3554T<4\270\243<o\265\235\274\r\202\335\274\031\371\375<\"\332\216<\233K\203;!I#\275\276da;\")\030\274\360k\365<\322\235\331<\217\360K\274q{\331\274,\272\231\275P\331P\274\373\005\"\2756^e;\033\311\347<4\311\r<\337\321\237=\027\240C=\271\253\235\274\317\254\t=B\032\006=\251\276\210\275\244K\r\2742\2259<N\033\"<g\362\237\2755\2231\273d\n8=\2764\321<\277\251k\275o\252\276\274\335l\013=\365\310\342;kD\215<\203\330\2249\010%u<\026M\371<\373\2411\274\367\357G\275\025s_\2755\027R\275\261#E=\212\206_\274w\030\206=Z/\247\2750J_\275n\220c=\3349b\274Y\210k\275.\351+=\335\246\024<\241<\335<(\307\216<eSq;I~V\275p\032m=>=4=(\266=<\021l\303\275u\314\303\274\314\233>=\013\360\211;5\360\013<\324\245w\275\254\303Y=\025F\032=\342\360\034\275\254\207 \275\017\006#\275(N\244:\373C\221\275ll?=\035\351\374\274N\226J\275h\215\246<\213\023\r=\265b.\274r\357+\275\261O\005=c\331\000\274;\372\363<o\277\200\2750\226[\273\204\245\007\274QY\274\273h\001\026=\215\'\020\275\271\t\302<_\221\200\275\312\346y<\350Q\202=\311K{;\027\267\'\275`\035V=\213\351\256\272\177!\204\274\323\354\\=# e=+\324\265\275S\\%=i\216k<\253P\265<\372n\t=\207\215\274\274<\250\213<\332c\366\273\237N\020=\234\241m<\344\342\245\275c\037\247\274\3231\224\274MHM=b\276\300=J\325\004<\303g\177\275\240\362-=\243\302\004\275\203YY=\035<\022\275Uy\2729\033\310\221=\375\353V=5a\255\275\367\026\"\274\377\t)=\303\342\321<\201?\002\274\327\036\032\275\315]/\275\004\303?=\351/\377\274\260\250x=\201\025E=\231\241\014=x\333\254<\357x\034\272\363X\311\274\330d\300\273\351\036i\275Z|\215\275\301\326\333\273\237C`=\322\212\270\273\026)\353\2743\371\255<\006j7=;\231C\275\037`\210\274\006\021\300<\256\247\032=l\001\022\275Vy\224\274\341\336B\275\272p\262\275\233\313\257<\331\276\223<\366$\375\274\332U2<\213 \324\274\014\205h<\272\373 =*\023\202=\306\007\224\274\365\372W<\036Q\330<\rzK=\005 E=}\332g=\251\235!\275\3761!=\327|M=r\245\274=`\236\330<\304\265\252\274\022\325\200\273P\213\201\275\250\351\245<U,\004\273\201\306_\274\177Y\331<\206Ts\275\370\353\016\274\261n\223<\320\260\221\275\247E\226:\373\232\205\274\267\306A\2751@3<\331\3360<CW\220=Wa\303\274M\003\240=\360_j=\262\335\221=L\300\020\276\373vA<\316\332\031=\353?\252\273Z\236\254\273\360\301\212=@\324\340<S\203\233\274\241\270\353=\311\025\326\274@\333\241=\020>\302\275\005A \275\303\312K=~\275,=\333\217\262=\372{\211\275\270\177\301\275#\271\343\274el\352\274,\0366=Jk\275\274\334\223\224<\025\007\020\275\214\200\354\274\233\030\346;\225WY=-l\330:\374[\235;#\007\367<\234\267\373\274g\032\027;\2415\003\275\200f\227<\214\265\201\274\365\022\026=COR\274\211\316\242\274\3624\020\273A\373\332\272sv{\275\244\244\014;\235\037\014<H\255\030=h\221\005<\332\3220\275\2370V=\206n\373<Q\036y=\366 S\275\324\035\320:\214l\212\275p\236\323=\224\231\035<]Y?=\247\266\352\274\260\251F=\335j\347<\251_\347\274[P\022\2757\'\004<\037\307f\275.\364\000=\205\264\362<Z\031[\274\212o1\275s\242\204\275\225Z\021<C\021+=\321\036\001\276\366x\327\274t\214\200\274f)\227<\325xM<\2313\205:-S\302\274\037\213#\274\352&\200;\245m3\275\351\322\000\275\244\260\247\275\360\307\210=k@\240=\241\243\216\274\033\251\213\274z\225\253<\0360\177\274a\212\243\273K\266\303={\210\003\275x\353)\275\304\371u\274#\305\210\275\n= \275\014\327\033=\350\203\031\2749\007A=:Hd\275B\225S=\243\252\201=g\362\370<\021\255\224\274\225\252Q\275r\234K\275H\251=<\212\021j\275|:6\275\245\367\';\352p\222<\327<\\<<D\305\274\347=\344<\235\035J=\006U\t;i^\005=\005\331\003\275\337:\316=\2219\001=T\010S\275 \022\035=\271\276\256<\300\025\366\274\206.\276<\211\177V\275\340\021\032<\263Y\027\275(\360\230<n\031\014\274io`\273n\233\'=T\254\200\274\376O\203\275p\204\234<]\311=\275.5)\273M]I;\"\343{<\013l\225=\340?\021\275\343\252\022\275\364g\237\275Y\350C\275V\0102<\003\250\227\275\'\347\331\274\232\3019\275\326h\217\2748@\335<\350|]\274\23683=\271\314\026\275\354\240\'=\037\246\235=\2552\020<\223\222G;\212\213\221=2\235$\275\2062\213=\014\353\273\274\224l\3569\353\256&;x\305\241;\222u\262<?\267\376\274\264\362\257\274\206\235/\275a\302P\275\334\333w\275\005 j\275C\273\247\275UH\347<(\373\336\274_\202\202;c\022^\274\371N\026\275y\201\227\275\261\255\301=\247Bg\2753\377\336\273U\022\232<\245\243K\273k\005d\275\232\245\277<\253\262\2358\301Y\257\273K\260\016\274\307\237\255\273\246FL<8\024\007=\t/\032\275\010\212@\275\364F\017\275\257\021\246\272\274\332\3569X\327=\274P~\217<\253\237\312\275l\270\235=\357g*==j\303;\036\026\315\273\236g\010\275V\316\231;;\177\333\274xnD<\350\226\202=Rj\216=W\365\004<l\230\036\275\335E!=?\273\346\274\201\2653\275?\016\005=\227\245.\274\200\274\000=\030\003\237\274+\002f=\226\305\374\273\272\355\007=lzL=\005Ha\274\373\247\371\274\370D\352<\000\375a\275K*\322\275\006:(=^\3537\275\023\240\337<\\W\325\274\351\225:=`\252\213\275J\221\271=e\327\231=97\'=\242\265\021\274LW\'\274\235\244O=bh\205=\261N_<\001C\341\274]\007\'=q\203c\275\250\246\206<\023\036\n=Fa\237=X\307B\275O\356\254\274\221C\014=v\202#\275\252tC\275E-\325:+\305\265\275V\021\251<\335\372\002=\005b)<\250\014\235;D\254\217\275\034\026\256<g\220\334<t\001i\2751\223\246=\203\201\002\275\220i\315\273O\217\243\274.\262\315\273Y\261k=\373\026\334\273\316 \352\275<\211]=\234\367\240\275\335N2\273\206\365[<\354\363#=\"\n\310<\324\035\341\273\177x\033\275c)\337<\246<\247\273A\035\215=\214\277\336\274\336M\233\274q\233\354\275\250\036\022\274\222\330\325<\'G\264\273u\'\243<\357\327\"\275\021\244E<\013Y\364<+S\230\275m\340\243\274:}`=\360Sa\275\3448\326\2742\333\036=^\305\353\274)\351\343=\331\215\236\273\221F\334=D\364\026\275\006z^\275/\023\001=\"\274\017\273\013\310\243<\256q\264<Y\374\231;M\000\330\274\2419W<\021\017\237<\230\334\275\272\200g\304<\342#(<+P\252=DY\325\274\254&\007=\247\345\211=L\224\377\274Y\307\007=\317^\212\273\373O\013\275\2222\266<\374\356\202<\013\307\032<\223[\376\274\205\234@=\230y\215<_5\244=\356\020x=\"p\302\274\273\007\312<8\000v\2759\\\264<\n\343\267\274#\313\251<NMf=_\270\304\275\005\307\257\273\007\211\317<\242ey=wq\014=\371\320\235<.\276z=M\304A=\300\276G\275\346\345\237;j5\267\272]\257z=1\201\220<\3716J;\372\224\311<\255Q\344\273/\"d<\350C\215\275Qy};1o\215\275Gk\213\273ND\266\273\033\347<=\235k\340\273\235\324\227<Z\207\303\274\016\260X\275v\316\247=n\r\202\275\225[}\274R\211\347;\365}\332\273i\263@\273\373\372\251\274|\017\366<{*\t\275b2\202\275\334\266\363\274\027\312\361\272\205>Y\275\370$\"\274\2402\370:a\364\024<\007T7\275\241}\240\275\033\221\256=\262!\204\275]\374\234\275\2300D=\n\267\002\275u\203\r=\3010\203\273\'\267\346;\023\320\177\275\033R\251<i\0144\275\0276\230<{\207%\274\036\0360\272t\334\323\274\352\306\331;\211\335<\275\0312<\275\0056\346\274\220\033R<:\321f=$}\264<\022M\355<,\000\330<qMj<\216ng<\362U6\275\235\'\313=\342#\\=\252\334\352=\331\003g=_W\004=\204[\013\275\235\020$\2756\376\311<\276\226\003<W\275\217<\037\363\343\273!RW=f\026\314\275O2n=\006\367\256\275\244:?=_\330t=\2525.=\177\341\004>\333\r\305=\337bd<\361\222=<\223HK<\235\214\320=\207T\016=Q\t\351<\t?1\275;\315\242\273\200t\020\275\002\373M=\003\265%\275VK\226=\3305N=Y\332\270<CV\242<%\313\277<\006\310$<9\0176<\250n\027=E\321\n=\261q\223<;\354\276\274\272,\001\275\023\037[=\002\311\3169\3178\216=J\266\206<\0147\215<\233\2674\274%\276\304\274\035\224\212\273fF\336\275\206{\003<F\020G\275cD\320<H\336 <\302\341\324<\256\261\227\275\202\372\233\274\n\356\267<\345A\226<\230F\303\275\321m6\275Y\240\321\274\377\343\235\274/-\304\274\363\030\357<\245r\'\275\215M\002\274t\231\316\274\267!\244\275\003\306$\275\366\351\227\274\003\324)=\004\r\271\274y\325,=dkI\275\361\263\211\274\036\024h=\021\024\177<\307$T\2744c!=\340n\203\275\220\327K<1\2402\274\216\264\305\275\337]\303=\r\276\371<&&1<!\311\221\275~Yn\274\230\253`\274\270\252T<\312O\237;\177\0173<\034\302N\275\261=\341\273\007\370\306<\025\240\372\274\337\224 <E\205\354<?\032\256\275\324au\275\032\250X;\362\320\231\274\033\377:=\371\225\'\2748{$=;\226\177=$}q;\037;\213\272\307\336m\275>|\260\274\301.\215\275\037\355\375<Y\330\356\274{(\365<&\323N\273\003\217(=\310\310|=j\250\311\271\250\013h\275\007\tP<\3303p\274\202\323\007=\r\304G=l\232\036=\1770\372<\375\344\014=h\315\017=\263\334d\275@8\370\273\326\300\263\273\024\342\033\275?>#=u\001)=\253\263\265\274\340\330\033=\274T\004\275[\302\246=\026R{\2751W\247</\260\031=r\025j={\006\214\275o\226w\275\306\242;=\203n\366<\0034\270\273\005\007\324\274S\276\227<z\002:=\317ZT<tl\225\274\310\213\241\275\371\254\351=\201\224;\275\360\311 \271\260\201\342\274\336\310\346\274\231\031\203;x~\257<m\345\377\274\317x\225=\326@\233<n\245\202\275\316wH=\332\263N=\367\226y=U\003z=W\250\264<y\342W\275\311\217c\275\220\261\210;\246\236^\275\352<\237={\027\007\275\360I\031=\246q\310=X\350 =v=\024=-J5\275\237a:\273U3\025\275$\305I\275^P\241\273T\2132<\347J\251\275\244[\207=\371\312\261=\315\214\345\274\0176\356<n\2445\275\264\205P=pA\371\274R\374g=\271\271\000>\244=\204=tl\t;\361\227\263\274\202i\263;\035,N\275\r\314D<\321\t\244<\336\252m<.f2=_\310{\274\027`\027\275Q\255\222=\331\300$<\006\005@\275\232\244\003<Vp\266<\217\034w=\001\364\242\273\246\267U\274{\254\204\275\370\315K<7O\r=\352u\021<N$\032\275\263\363\313<\353y\017\275;\236&\275\r\242\010=\271\206\202\273\031\2722=x*\037\275jSA\274H\350\305;\277fc;\371S\225\275x\\\021\275\340\217\001\275\333\210\244\273\302D\305\275\334\345\227<\016\371(\275\200Y4\274\006\034\217\274\235\nW=\230\336\325\274\010\267\324<\203\010\245\273\266\'\241:G\262\037=c\352\231\275\200+\027\2758H\030\274i\021\203<\352\302\335\2733\226t\275S`}=\017d\030=\026)7<\365\354\201\2750D =\013\374e=\331\010\231<\374\370W\275}\333\272\274Y\336\274<\233\033\232\275\373\034\264\275\321\003(=\374$a=\354\036\345\274&\377|\275\tg{\275\2509\312\275\232t\312<\255K\330\273\230Op=n\314\371\274\004\345\366\274\204\025\247=.\3271\275\226\2142=\250\371Y\274\031\021\222<\017\320j\274\222IW\275f\237\312\274\000y\311\274\020\216\037\275\310\331\016<\267C\317<D\217\216<yP\345\275\255\263\t=\265\343\306\273gE\\\273\330\317\233<\314\300\370<\314\n\267<\317h\007;3\032\241;\t\221\315\275\350\2776\275\t&f<\013e\025=\344G\363<=[8\275\\y\240<\003\375\256=\007\002\002>`m\t\275\262M\014\2753o\337\274y\301\227=G\223q\275\233u\n>\264`4\275\320\316*=\337,\216=\303\244\310;\305\340\231<^RX\275f\022\260\275Yz\372<\002o\271=\2207\216:5\325\003;\207\267\243\275T:\340\274\373\357(\275\304\333\375\275\321\371\224=r\220\212\275\031c\316<\257\370\243=?\375\246<\031,!\271,-\n=\014m\213\275CH,=eYA\275\265\203\031<\244w)\275\223\260{\275L\227?\274\234\204\037\274\374\360\305\275\361\220-;\347r\222\275\306(\001=\323\n\016=?\023 \274Z\221\221=\020r\260<%\2627\275S\367\027=\300\tE\275\266\352\\\275\211\205\001=\343\310\036<\021\363L\274\215\214\306\274@M)\275~\215\304\273\t)b\274\345\324\221<&\317 <\274\304\323=\270\215><c\014\036;\302\373\330\274]\r\231\272`\264\307\274\370(\020=\016\211\020<c\302\253<\340\230\365\274j\236\216\274\313\016\201\272\276\214|\275\256\361\'<\213\233\255=j\004\200< \3775=\346\266D\275\377\213\376\274\250\236\205\275=\277i\274\377\263f\275I{b\274\265\204%\274,\273\350:@\204\n;\246\231\373\273\350\230c\275,\376\244:\357\232\232\274K\027\254\274\202K\330\274,\257\204\273;v-=\0034\245\274\220\3642\275,\327\262\275\272\372e;\014\026\005\275#.\220<W\3423\275\3168Y\275)*\242\274\341\311\264<Y\337$<]\343\000=\201\005U=\233m*\275\241\234\036\275\246q\255\275\321]\020\273d\255\221\273\277\362!=\274\263\320=:7A<\250\006\016\275e}\006<B\217\261=\354j\342\274)\r\362<\237\347\223;\237\234W\275\264\335)\275\377\331\366\274\213!\362\275\227bw=\320\321\326<\033-}\274\363a\017=\227h#\274\253m{<m\230I=\355\023\177=\3428\022\275uc\216=\251\021\237\272\352\027(=\330Y\330=\306\374\"; \351\022\274\005:\033==\246\302=\3747N\275\267\217/\275\'?\341\273@\375\267\274V\265\n\275(8\236<\006#|\274\024\263\343:\332\213v\275u\307j=DL\244=\372\232\213=\224\032`=\n\0149=2\200\364<au$\275\261\021Q\275Y\277\255\274\302\022\236\274\226\226\2755{\340 <\247U\020\275\014G\253\272\222\316\2069\205d\344<\241\037\002\275\021\376v<\364|^\274\232\037\321<\202U{\274\243\002\r\275d\024Y=O\310\307=\302\232\230\274\021O7\275\217\3748<8\336\263\275\250\226/\275Acv\273\023Z\264\274\252t\010=\027R\025=\353\371\224<\357\242\254\274\306|I=\261\034\311<)\342K\274o\375\202<\361\321\335<\230m\'<\367WH\274~\033z\274\nq\204\275\010\020\314\275\352\221\236<(\225\332=f\373\010\274\037P\375<\332[\202<\032\034\220\274\332\023N\273\217\006D=t|\222\2754-\243\274\210)\342;\3263\337<\004\014\255\275\224A\007=!\332\221\275\202\371!=6\224\213\275\332\301\005=\020fK\275\177\223l\2759\351E=\327\355\302=\237\347s=?|\375<H\255O=\255\364k<\270\027)\275m\365\325<\320\312<<(c\031\275<ag\275\270\376\340\274\356i)\274\252\001\325\274\277\2734=WV`=i\357i<?\346\267=#\252\037\275\033_U<\001\252\255\275\224\026w\275&\373\002=+\313^=\222\000C=C\344\022\273\324\274O\275\210<\343<R\271{<\226V!\275:\337\253\273;c\205\275t\317\377\275\344?\017\275gf\205\275E\204\232;s.!<\361\0342<\3571:<\346\0009:\346\001D\273TK,\274\227\222\210\274\347\305T</\373\262\275\t\301a<$\352\374<\322\244 \275|\022X=\377\352\237\273\377\241\017=\273ki\275 y\251\273\013B\026<\211i\267\275C\342R\274\342;I=\331\306\002<1WM=\325\243\277\274\262\236\360\274\322\311\331<\345\031\n\275\223`\350<W?\354\274\026\013K=\2549\022\273\377g\327\274\211x\207<D\017\204=2~\036\275\0339,\274\370\321@=\245@Y=\\\374\035\275\2345w\275?i\303\274\230\265\311\274\332a\333;=\336\307\275\203\361{=9u\205\275\207\025\200\274\323\202\332<\374\271\245\272\267G\365\274\312\231\266\274\330p\221<\022\201\207\274\250(\225\2749\251\307\275\367w\201=\364j\217<1\243\037\275)\346\003;\204\360u=\265\017\214=\007\n\032\275\\\005Q\274\225\371\316\272b!v<\332\233j<\335\2777\275\341\310F\275\227\342\272=\364\214\210\274\363\357\352<\036^\253<\317\020o\273!M\217<\346\340\361\274\0027\321\275\347\230\267<j\232\341\274\323\301\256<&\236\226\274\342\322\317=\203+\316\275\202\257\267<\343\316;\275s\377\357\273EE\220\275\232\177{<rv\375<P1\240\274-H\201<\017(\302<(\334c=%;Y=-\260\036=\002\313\271;\254\237\246\272\365\207\276<VW\316\274NL\004\275\315d\244=\253LE\274T\2434<Q\033\344<\372\232\227\273\212\017\340<s\222\244<`DT\275\210~\212=\016\316\340\2742GL\275\251\256\';\327}\002\274\202\275_;s^a\274\306\\\030=B\340\304<\256\344\023\275\373\3536\275\310\3555=\034\2215=\333\013\231\274\000\231\002=w\223\032\2747\257\007=\376\360\004<\334\026\000\275{\232\225\274g\355r;L\257r\273\270\343\336<\233@\306<~\330\203=b\0354=\227p\006\274\3613g=\234\204\372\2746~\035\275\353@\322\274\313\242L\275I>2\275h\014\003\275\2635\315\274\"\217\231\275\006J\242<Zm\'\275?\020\263;\234f\254<xy\n=\251\357h\274\337\322\276=\370qj\273\320\177\331<\013\212B=/\024\006\275\203\203\257\274]\312\277<imG\2757]\223<\321\325\362\273\212\332!\275M\322\262<\247\257\202\272a|\236\275\333\343\205;\226Z\317\275z11=\205\373\366;D%C\275s\346\225=F\364\261\274\026\023\271=\330Y\270=4\212\354;\3730\315=\216dH\273\006\217f\274\324\313\370\274\240\023\013=\316\341n<\033\262[<d\017\007>\346\260\230\274\207\253\365;#iP<\255\t\270\273\243\007\217\2744\036\003\276\364\243t\273\367\366\223\275\320\275v=\207\010\245\273\013k\245\275\371\265\031=\177\271_\275\364z\036=\033\003a<\301\366\260\273\261\002\257<w\376\370;\335\315e<6\327i\272\327\342\322\273\244\375\016\274\207+&\2742R\212=\266H\036\275\342\207\017=a\304b\273\257\032\013\275\353\300\213=~\304\013\275\211\304^=UX\241\275Ph\021<\273\246Y\274G`\335<1\016\274\272\021\205\376<\273\256%=\222\374\247=\311\312\307=\307\330\006\273\255s\003\274u\226/<N\277U<J\205\\9|\241\'<\306\257\"\275\320Q\264;\234\016~:v\325\007=w\244\025\275#\251\032\275\016\177\n:\233u5;\n\360X=\314,u;jh4=$ \223\274\346\203\345=:%4\275\364&r\275g\243\337\270!\337\213\275\307\206\351<\000\206\232\273\270\243w<\202\017\025\275\321\023\253\274\350=$=\324\227m\272\274\230\026=\357\214,=\252\271\003\275\256\007\217\275\263\010\364\274\261r\235<\330\341\237<\205\021\023\273?h\224;\263Qt\275{\365\030<#\t\031=\034\355\230\275\346\274#\275\261n\210=\216\302\352\274d\375\361<\223\212\371<\027\263\250=\030B\323\275\262\226\211\275$\216_<\026W\206=o\356X\275\356\274\264<Pd\226\27513><#N2=rjG=\250\2556=\310c\010<\360!\344;6<\253\274\373|\020=!\203\251\274\236\312~=\033\275e\274<\312c\2751\244\343\274\025\026\203<M\2105\275\210_R=d\223d\275\005\312\273\275,\357\017\275\004\345\000<\177\000\260=\222\203@\275\t&\315<2I$\274k\254\322\274\200\353\317=\203\353\000=\363\025\021=\250|\306<\n\307\031<\361\002\032=\355O7\274\247\230x<3L\002\275O\034\352\275)\\\300=\324\325y\275\237\372\220\2741V\252=\264XW\275V\r\t\275\306O\260\274\003r\326<\354\212\201\274\212\211\355<\323\235-\275#6\230<\223\324\257<@\020\264\274\2257z=\t\376\232;\2445G=s\004`=9a \275T\371\260\2744\177\005=\311\247\205=u\021r\275\033\353l<\024r\244<\327/\215\275\374\252\267\274{\010\007\275k\3476<\201l:\273zCV\275J}\367<\330\'@\274Wg\225\274Td\202\274&f\033<\363\341\202\275i\014><\267~\232\275G;-=\017b8<\333_\024=929=\362\347g\274\366\361\002=\231o\024=\241%\344\273@F\017=\317@>\275\000\350]\275\243\'l\274tm\342\274\225\303\037\275\302x\023\275\371\267k\275}9\231\273\ts^\275\211\201\304<\272\274\034\275\233\215\307;6`\313<$#6</rZ<\241\177*=\016\342\240=\310g2<\220\313\251\274[\220G=\367\253`\275\017\351A\275\256w\250\274\023%\224<\363\311\227\272P\260\005=|\r\233=\323\005\307< \214\204\274e\2256\275M\014Z\275m \215<m\276\033\275\000]@=e\235\324=\006\340f<\365\307t=\244\240_=.Z\321=\213L\323\274Z\265\006\275\311\221\301<QG\264\274\362\336f=$>\241\274\007Y\352<h\023S\275\323\246\321\274\372\230\247=3^\301\274\246N\302\274\000\216K\275pU\r=Xu\t\275\201\006A;\030\340?\273\330.:\275^i\226\275\264\277\001;#e`=\334=\221;\367U\305<\002^\016\275S\272\266<k\324\232\274\032J\243=\356\241\023\274\307&\020=\177Q/\274v\276\030=\026hL<x\215\030\275\026\2468\274 \3228=\tp\217<\225|\201\275\205\016\r=\177v\014=\r%\237\274\331~\217\274\354\316\333\273\214\212_\275\014\326B\275\346\376\200=\030\336\365\274&\303\261<\022\243\\=`\035\200=\322\224\252\274n\023\343<\003gb=\321\306\227=\334\2438\275\334\277\004\275\007\017\271\274\007\017M=\014\215)\274X\230D\275\rzL=Wg\033=\020%\276\274\'j\023\274\263\344\326\274K\265\235=l\237g\275\326\374f=\206KO=ct\350\273\005~I\275\320\226\024=~k\272\275\342F\323\2735\007\n<\256\212E=\342\000\361<y\316\353<e\367\016\275#\315\226\274Z\340\360<\254{\363\273\227\007\223\274x\302\273\273\206\331+\275\342\312.=\002\354\362:\315\005\222=\342\312w\275j\207@\275\224\\\255=\370\364%<\234\236\010=m\332\030=\014\2507=t\311 =M\025\005=Z\327\302\274K\215\223\275/\257S\275\262,\324=\212\200X\275\202n\245\275{p\006<\3443\334<\252\255Q\275\356D\204=\323\205v\274U\204\223=\346UR\275D/\275<( \300\274\356q\335=4\347\322<\344\277X\274\267-O=\250n+\275{Z\203\274\037$\200\275q\001\216:\231\352\302\274\265\203\031\274\341\353\017=\236\"\221\273\235x\350;b`1\271\305\005\263<\203,\306\274\020\365Y\274\234ev<j\034\231<\201\277P=\354\226\260:\270?7\2753%g\275\316\306\304<8c\347\2756\026\\\274\003\237\235<\376\332\026\275\004\377\244\275\275p\212\275Z6W\274\321\236}=P5B\274<H%=\272QE\274\324\234\204<\262\0210\273\327\033\345\274\270\201\255;1Mt<\3415\210\275X\021Y<}Z\017;Kd\321\275\223\r\243\275\213I\357<+\353]<\266\226d\275yp\232<\335\314\023=\300\017\205=\345{\367\273x~\343;\256\217\343\272\354x\257\274\014\375\355\275\030-\251=\357\337\225<R\013\032<\357\001\024\275\316f\017\275\014\243\213<\310\034K=?\317C\275\027\374x=~Ru<\3173\225=\227\271\021\275<\347T\272\000\271\207=;<\n\275\271;9=\316Z\342\273\322\026\233=pC\2238\232}*\274<\220\000=\357\242\005<\254\036N:\252\261\205\274\003\0235<.0\035\274a\226\2429]u\310=\276\007\004\275|\266\303\274\'^\205\274\202cO\275\030\021\301:\350\227\323\273\023H\"\274(y\275\275#~h\275\370\366\352\274\366KS\275zej;\242\332\341<O\234\203\275\026\2702\275\266\037i=\306\250}\274\302\215U\274\222W\277\274\030\021\354;\226\230&<\020\031\240\275\253\374\371<\034\300\001>X<I=n\324V\275\234\234l<\035\214\\\275\360$\266\275\3065\343<\022o\333=\304^\322\275]\317\261\274\027\271\302\2724\271\000\274.\207\002=\311\"o\274yd\023\275\350o\030<\376\310\370\274\273\252\224<\223[ \275!\232\"\274>\221\261<W\016\277\274\236.\3439\214\351b<\300\3211\275]\256\213=XZ\234<,\030\276<\201e\345<ks|\273\353\r\\<\252\335\224\274r\177q<\307\333~=\215i\017=|l\252\274\364r\032<\302\tW\274\370\221\024\275G~K<\032s\360\273v\023\273\274\262\036\005\275\273~\200\273\0347\203\275\367)?<\025\007\250;Un!\274\274hG\275CZ\240\274\036\327\005\275\316\004n\275\250\213\006=\253Y\304\275\3672\226=Z!B\274$7\216\273\222\000\316=\351\227\224<\344@;=\307\364\006\275\240\256<=:\305@\275\305\277\256\275\014e\211;\025\253g\275O{\031=8\273\231;\326\341\264=\362\3301\275G\226\275\274\\\217!=D\243\031=\3123\270<\311\271\343\274\325\361\220\273\220\362b;\275^U\274\256\213W\275m\2451=\370\322\260\274q\005\312<\255\343\007\274\3548G\274\302\034\343\2747H~\275\311\256\226\273\3441e;(:\312<;\257\033<\377aA\275\017k+=w\333d\275&\220\250=\254\220#\275\352\017u\275s%7\275\305\230\201\274\035h,\272tf\211\275<\366\302\274Y\r6<\331\206\215<rZ\212=\323\224z=B \355\273\200n\320<\215\024:\275\274gB\275\272dY\275\374\020\031\274`\032\374\274C\347\255\274\331\254\005\275\361\032\317\273\300?\236\275\331T\177=f\337\202=\3444\335\273 \361O=l\201\273<\233#\037=H5\320\275\232\346?;\023\215F\275Hz9<t^\304<\017U\025\275\273\t\314\274*\367A\275\026\336d<\3348\203\272X\204\217\275r\305\273\274\357&\004<J\'\310\274\374\372c\274\263\364J\274\032\355W<\352\2648<\255\'\r\2752j\243=\005[\344\275\034T\210\274\327\334\243\274b\222\360\274\254\277\021\275\275\006\261=\177\321W=M\342;;(\356y\274\302\302\253<\365\344;\275\222\nA=\025S\204\275>\322.;\032)\017=\356H\205=\372\345\232\274\247\206H<\223\343t<U\201\363\2740NM=\010G#\274\303\367D\275De`=\354\351^\273\264T\246<\201\303\273<\352\212\337;\013tg\274S$1\274sl\346\272\022{g\274FX\021\275\370#\035<(+@\275\233\000\346<\307\240\211\274@\275\204\274\201\'\372\275l\237\347<\341\364\0309A\255G\275?Y\201\274\217<v=\177\177\275\274F\337\226;\231\353M\275w\357?\275\260D\214=\357\203\340;\021(\334=\317\017\372\274\344<\233\275\302\217\341; \356\236=[\352\355\274\026\307H<\372|\227<\365\237|\275q\217g\275\\/\222<\2045\244\274m\262\032\275TA\031\275dE\227\272t@r:\306\255w\275\365IZ=\220\226K<\374\306\265=\214\324\275<:\2620<\223\3307\275t\211\r=\006\\7<\2000\037\275y\272\371<\021ws=\224\315h\275\3064\3319\240\331\031\275\262}\200= k<=\332\310\360<\251\330\"<c\263R\275\350l{=ni\\\275C\226(=9\301&\275\341\2712=\002b\263\274r\305x<6\310I\274i]b=\362\370\034\274\364\351\323<v\300A\275\031\304\261=\026\002\334<q\330\246;\247\213_=\330\351\244<\251S\233;MY_\273\364-\020\274Y\261\350<X\315\207=n\331\216\275\376\017\254<\222\371\262\275\274%\251\275~\001\212\275\335r\003>\022\376(=\247y\000\275\321\2376=:YO\275\241\243X=M^@\275\225\265\206=\0352\276\273@[R=\274\377W=\032.K\273N\220g<\005\006i<\324\373\034\275\030\"i\275\225x =\003\215\002\274w\262s=~\t\214\274\372\375?<U:)\273o\270\213\274\3243\365<\367\272a\275\034*\036\275Y\371\026=\301\204\367\274\377\023\024=EO\270\272\r\014o=\244\313\0149\030\227\334\273\365\326\220\275:g)\275\364\242Z<EI1\274-\226\276=\302\002\017<r\206\246\274\016\034I\275u\006_\275\247n\342\274\030H\355\273\341\261\301\274\247\021\026;\211\353\261\275 \357\200\275\254\377U<`\353\242=\353\377}<\260\265,\275;\004\257\274\204\252K<\275U|\275S%F\275P\266\r\275\350\335C<)\276\351;C\331\031\275L\232*=\206r\230=\036\311\212<\352\322]<\366\250\232\274\352[k=\303\337\267=Ki\t=\020\245`=_\242}\272\307=\214=p\004\277\2737\370\253\274\364z\000\275>$Y\275i\006\226=X\034\367\2745\030\001=k\026\370\274\217A\260=9B\031\275\177\300\240;\031[\244<\274\331\332\272\327)+\275V\266\004=\356\252\227\274.O\252\274e\315X<\307\207\n\275\317\375\207<\027\231\330\272\"1a\274\1773\247\274\305p\267\275\t\375\275\274$nT\275\353\232/\274\3147\227\274yC\363<\316\346\247\275\013\202F\275g\234\240<\033=\212=\275\225\371\275\375\201\r\275*\241\270<\217^\321;\377|\376\273\022\352\227\275\255rE=\035\260\r\275\331\007\211\2743?5\275)\323J\275\367\376\250:aHx\274\356\373t<\331>\004\275!z\322;\375\205i\274\304\376:<\t\253\232\275\320\366>\273\245\372\243<VcF=\266h-=,\275\213\274\252\002\222\275\206R<\273\017\301\377\274T+\254\274\244\335\013\275\274\312S=\2122\257<\265\275\302;\271+k;8\026f=\222\312t\274\200\216\037\275f\271\206\273\3401\256=\270t\274\274\270\035\200\275\351a\t<\244\3129\275\"Q\222\274\20520<N\356\005\274\026\236O\275\273Hg\274t\222\r\275\247.\027\275\355\364h\275.P~\274\361\177\317<\321\321\"\274AA\006=\177\3661\275s\242\r\275\325\016\030=\257\352F;\321\335\351=f\013\260\274\373\367\327<\317\244H=\211\303#=\031\260v<\025\342\213<\2424\333\274\236y\301\275\347\266\237<3\337\362<\030 \020\275X\302\2639\245\000\372;\242NO=z\017\301\272\333\253~=F\013\010\276\351T\371\274\001$\250\275P\023\025\273&4\003=h\366\025;k\022\004\2757$o\275\033^\310\274\177\376\247=<$\216\274\031.\272<\301RT\275mk@=7\356\001=\001\256\211=\201}\260=<\332\037<\022\235!\275T\355G\274\372E\327\274u\371\311\275$C\371<\255\211r\274\003\224%=\204\312\034\275\031\242+:\300\207\350;\243\372\317<\221\242|\273\254\035\006=2\274n\275$u5<\217=y\274\367\270\344=\205\220\220<\224\245g;\215Yh=\225\266!\275u\370\365<\225\3742\275\3313\226<i\304\214<a\265{\275\005\314\220<~\216\212\273\307\307#\275\001\256\034\274vD\025=\347K\017\274\"0\031=\244\007R\275.\232\272\272\247\315\305=G\267l=\200R,\275\177\244\216<\351\250t\275\224v\325\273 \017\254;YUF=$\346\037<\333\317\013=\274\027\347;\220\260\267;!e\324\273S(\361<\367\327#<v\023@<\320\2413=\310\223W<\336\335&=\336\257\210\275\374\002\025\275\226\0165\274ik_\275\374`l<\242\322\267=\2416\266\273\013\226d\274\255\332\345<\236\022\n=\207nQ\275\263\314\371\273\234\273>;\355\002\322\274ZsM\274$\354\257=h\245\t=E+;\275\002q\t=\270\362\247\275\027p\326\274|$\226\273\031\266\000=E\244\241\275x\3572\275\250\227\370\2742\217r=\3351\337\273\246\302\267\274\326\375u\275\272[\315\275H\3263<\363\037E\274b\2459;\206\376\375\273\347\t\301<\016\254\262=u\367\232=\240u\245\275\322\210\254\275\332yE\275\2745_<i\234\205\274\267<\233\275\247\255\253\275%H\202=^\253O;!\262\241\275\241\315e=S\220|=A\037\275<[\220_=?\t}\274G\311\025<\201\030\017\275\322\211\363=s{\233<\315Z\244\275;\327\322\275\200\305Q=\177\023#\275\255^\261<4\324\355<@\307\272\273\311a\232=mQ2:.Ai\274\331g0<j\352\003;\037\305\210=<\361&\275\245\206+\275\352x\327\275\276A\241:T\353\330\274@E\222\275\013\364\033=\364\270\013\276L\010\244\274\301\356\264\274\2547\354\274\017\361\374\274\331M\317<m\356\n\275\247h(\275\235\005\307\274\370\314p\275B}f=d\217\266\274x \375<\250#\246\273z\222\021\275\252D\355<\"/\263;H\027\205:\200H\210<K\256#\274\256D\3179\364;9=/\330\240<O+.=\037\031(\275\320?\372<\355\356u<\202\r\032=w\te\275}T\321\274\335\242\033\274v\356Y\267\346\376\207\275\030\005\372<\005\305\351=I\335#=\347\3762>\350\324<:\220\367\037\274R\273\336:\255\377!\275\235\020\350\274\277\333\374<\013\356\265\274\303\341$\274\352\033\377<\031\214\034\275]\0328=\266\234\211\275\337\037\205\275N\030\203\272\266\352\001\275\357\342)\275\215U,\275\344\365u\275\372g\016\275\221\344\007\273\273\3322\274;:\377\274\320\326V;\240<\332=\030\262\221=8\251\217\275\312/#=yVS\274 \333`\274\235\357[=b{-\274\221\036I=(\260\323\273\321\300\305<\006j\363\273\256\262\002\275\230\372;\274\021\002!=jk4\275\362I\211\275\211MT\274\350\267Z\274Ww\360\274\353\tL\275\217\211?=\344\310\031=b]d;\370\274l= kq\273&m\025=-\007\333\2737\342;\275\036\'\342\274!\254\245\275>\204\260\273\302\254\211<\331\376V\275r\\+\275v\033D\273\212_\214=\237\317\250<9\227\351\274\305\232\220;v\003X=oy\334:\2271\315\274\266f*=r\031 =xK\265\274\350\333\300=\0050b\275\343\264H\273\342\366\200=\235\266\235;}R\236\273\245+@=x\263\010<\355di\274J\214\226\275`Rz\274\320\270\235;\273\302\200\275\315\005>\274K\2250\275_S,<+\000l\275\023\237a\275\005\346\212;Aqn\275jWG=F>\000\274`\\T\271\263}a<t\331A=\225\243N\272W\024}=\2537\347<D\352\245\274\221\360\365\274l!\007=\027O\227\274\232Bh\274\335\027\370\274\314\177\230<\2318\352=\345P\000=\272\337\254<Z\021\263\274\343&{\274\340\267\226\275\035\010y<\235*~=\270\307\t=F\241d\274\205\\\016>\233m\320\2758\226\370\274\363l\260<\241\211\306<\363\200G\274\331V\307\274\300\035\244\274\240P\353\275+\237\2609\266 H\275\260\326F=\362\201\031=UE\034\274P1\316<\207\034\244\275\032\203g=^D)\275\223\373\016<\320\231\310\274Q6\312\274\034\224\220\275\000K\037=X\202<\273\224z\241=\376\244\240\275\310ca=q\240I\275gS\213\275\207\303\025=hxK=L\377\213<{\262\312\274\2322\242\271\331\213\255<\366\237\376\273\245\333\023\275\335\317/\274\205\356\'\275\031\250.=\021\233\025\275\307\001\216\274\001\265\030=\344\306\203\274 Z\361;\362\244\242\275\233\204Q\273\377Pj<]\023V=\372h\212<\r\332\r\274Q\333\354\274W\203\367=\032\246\000\275\032\353\214\274`P\234=\017m\'=\315\021\216\274/\376\270\275\031U\232\274\263\252\023=\377\323\241\274\342v\213<W@\307\274N\360\217\274[R\275\273Ql\037\271\275\330+\275\245\245\235\274f\332m=\023P[\275\325\030\333;\347#\227=\316h\236\275\353\037;;\231 a=\022\027\260\275\337$M=_\377\022=\272\367\301\272y\000,=\236\245\200\275Rt\014=\350\036\227\272\004\345E\274\3129\230\273\3101\320;\200>\303\274-o+\275\363\211\033\275\034\212\232\274\255\302\234\274\221-\243\274#\246\376\273c\271\266\273\2143\326;\201\367k<%S\264\274b\225\301\2720\217\033<Ze\251\274\363\\\224=\365\215\300<(|\307;Ae\037\274\"`\335<r\257\311:\357=\210<V\343\202;\324x]\275\214\317;\275\332\035\032\273\336\307(\275\246\013g\275t2F<\035\2149=\367\216\246\274\201\320{=\0213D\272z8\316<\257\275\023<&\207\225\274\306\241\004\274\033\303\257<h>\312\273f<K<\244\226\200=\246mo<L\'\211\275t\316j\274a>*\273N6\254=:n\253<\234He=\217\210N=o>\311<\t;\365\274n\351s\275Tr\034=\007\372\272=\0209%=\306\363\214<Pu%\273\024R\021\274W~\006\275Q\335%=\201\256Z=\330/\366<\345\021\317\274+r\251<p/V=L\'\266<@}\206\275zr\205\275\344\327\201\275x\034@\275\026\332\224\274 \340\312\274\321\277\271\274\373\350\327\273\204\263H<\320N\220<\\{\036\274\210A\351\274\237\247\211\275\336\337\t\275\026!\036;\242\026Z\275\373\014\326\274\001\0132;\331\201_\274\252\225H\275\204\211Z<^a\233=\210(&<\013\005\316=\021\356~\275ez\226;\371TQ=Y\036\230<\354=j=\362\266\350<\261W\020\275\351\366\014=\207w\224=\301J\301\274\224\201\000<)\007+\274\304G\254<\226\347Y\275Wz\347\274;\025\223<\344\324\030\275;I\253=t\347\324<\273\342\031=\337H\'<p\257i<\223}I=X\303\217=\366\244H\275\303\300\360<#\377\006=\315\000\227\275^3G\275\222k\211=\3511\022\274\253\320\271\274\306k\273\275d0\234\275T\017-\274\000\032c;/cZ=Q\321\353<g\023\337\274\332\256\206;aC\246=]\244\245\275\223\030\200:}n;=\020\332\307\274\210j\370\274r\002Q\273W\360y\275,\016:<d\273M;\223_\337\274\300&E\273_\200e=?\274N\275\325n\260\274\261\300\247\275\320\261W\2753\363Q\275\024\322g=\316\371\305;C\031\201\275\367\213-=\331\246U<\242\356\342:\3341\r=\324\036\007\274J\376\376\273BF\311\275iR$\275\372\325\207\275\332\035\300\273;.\333\2740Xa\272\202\266o\271n\264\232\274\035o\224<\345\020\022<\030m\212\275x\036\220\275\336;%\275\355\327W\274sH\256=\3328\231=\004a\322;_\225K\273\366\217\271<\000o\017=\352{\022\274\350z$=M\330\203\275\225\002\013\275\253\332\232;\363\301A=\210\'P\275\206BG=\026j\003\275\007\3279\274B\323\264;\000\213g=\344\301\000=N\257\036;\016\004\366\274\336\213\226=\206\311\363\273#\002V\275,K\036<:\333\3228\030S|=\021\'\305\274d\3531<\363Ab\274\357-\270\275\240\337w=\341\031\227=\003\222\260\274\312\311H=5\276\006\273-\277\212=\312\205b<Y\237\217\275\333c\376;\001\223\205\274\374r\270\275\245\031\220=\2317\\:\275I}=\0335\233<}I\3449\306PX=\276\031\365\275\020\273\222\275\025\360E\2749ZH=\254\365\215\275\034\222,;\321\331\336\272g\354\212\2751\356s\275m(h<\271H]\275\376DC\275YR\t\2734\3302<\236\257\177=\024f6=\326\363/<j\274\255<_\266\373<B\320\036\274\357\211v<7\024\257<\316x\337\273FW\252\274\242\201]\275\203~\235=\311H\265\274jc?=\273$\216<[\273\242=}`\241\274B\026\204\275\352p#=\014%\325\275\332a\216\275!6\264;\240\375\337\274RZs\275Q\350\207\275\335\002\264:\237W\361<\351i\323\275\230\250\022=\373\036f\275\006t\334;\017iQ<\024]\324<\002\230@\2758Am\275\347Z\007\275\225\016\226<\320\225\030\273\032\262\027\274\033\264\234\274\371x\214\274\265NF=\212\n\263\274\353\315\321\274\335\255\206\274\232\266\007\274#=\034\274L*\233\275\325\027\267\273\343\364`=hW\310\275\0337\205\275\007\260\255=\026 \020=\202\346\033=$\366\230=\217\326\t\2752\2701=W\366\346<\271\236\240<\213Jj<\345`\215\274\17749\274\r)A\275r\261\r;\3421\211\274\200\266\260=\372\256K\275%K\346;c\n\350\275\255]\212=\343uA=\215ro\275q\234\334\274\221\014\357\275&\367\303\273\025J\023=\233#[\273\222\327\001\275B\347\201\275S)\231<\267\2018\275\"M\316\274>\213\354<\302\014\372\273Z\267\'<\312\212\021\275\342\324\347\274\220\034\013\275.jp\275^W\201:f\317\317<\234\022\255\275!$\310\273\265\231\013=nA\306<\361\032\001=M\230\336=1n\032\275\001\366\220\275C\353e\275\257\233\244\275\302\305\026\275\364\317M=\243\307\230\274LI\201\275\277Sv<\375\205f<\323\013\310:\205h\302\273)k\300\273\226\001\247<\005f\253;h\321\342\274N\346\t=\025\240\244;\226f\001<>\277\032=\274\020\220=R\307!=\017\313\333<\326\356\341<\227q\313\274\371\214\021=\220y\325=n\231D<k\330\216=\270?d\275\032\317\313=O\350\001\275\031\332\350;k\260\277\275\357\265\036<\204\3505<\347\336\271\274U\305\204=\243\234\036\275\317\317\207=\355\177\030\275\322\237\227\274\225\365\202\275\272I\356;\271\317\203=\377\213\201=\031\3014=-\360\245\273\231\355\350=k\247\341\272>~\033\275\242\307\022=2pZ\274`\267\311=\315\245\034=\3548w\274\233\3044\275Sty=}\355\333\272\021\372C=\227\000\204;\032\357\016\275\005$W\274\246\216\267=J\326\017\275##\304\274=\3775=]\207\377\274\260\036\354<\006\002\244\2759\244\002=\345\345\271\273\244s\274<\350\357h=k\216\240<\275z,\275\320\3616=~l\321\2744\373\373\274\274\252\006<\330>^<\304\375\033\275b\\\253\275$.\273;g`q\275\264 %\275\351\325u<\220\250@=\230\377\276\275I\334\006<\023J\243<^cl=xae=\330\235\244<\241I\322<\0303\336\273\314\276)\275\035x5<`\177 \275\245\016}=\242\013\330\275\203\2704=>\232-\274\243\221\035\274dO\n=\222\215\312\2744\263\010\275\234\341\216\275\322o\006\275\345\315\017\274\320=\243<\022\312\231\275\346\237\254;\362\231.\275\025\'\336=9\241\230\275,\006\316<\264\333\231\273\024;d\274j\272\201=\201\nL<pZ\006\275>\351\205\274\240qK;\377\0256=\252\242\013\275\3457\220<\265?*=\017\256_<}[\311<\363\344\007=\231\206[\274\364\014\357;t\272(<F\222?\275\316\317\t=\017OY=U#Y=u\341\016=\316\305X=\333\265d=\037+\256=d\232\375\274\251\232\263:6\244;=\306-\374\274\351\243M=|_%;0\234\031\274\217\014\367<\334\223<=\301SM\274\335\255\306\274\031\222c\275&\022)=\317Q\310<:\254\036=N\345:=&#O<\317\234w\274J\207\261\2745zG<\220y6\275Q3\334;\031\026Y=\013\310\007;\354Z\323=\271\003\323\275P\350\356\274\tc\262;9\251(\274\240\205<=\034\256;<\332\221\264<\016\001x<\244~u=\303`;<\235N#\275\241.E=X}\007\275\206\352\274\275\211\342M\275p\331w\274\240\277\263\274\030I\000\275\n\202\035\275\223k\365;\2245\032\275\373\3612<A\327\003<Z\003\031\275\027#x\274VVD=\031\033H<\210Wo\275L\307\020=\364\"\024>\262k\216<\2234\243\274C%\016=.\217[\275uX\310\273\231\267C\275\016-\361<\266F\314:\267\364h\273J\331\264\274\317\335B\275\226\354q=\262\204)\275D\367\204<rg\274\274\207\266\003\275l\375\016=\310?,==\rq\275\373\360l=\027\201,\275\031o\\\275\003\"\343\2748\311K\275\214[7;\310\352\321\274N\211\273\275\372(\r=U\"Z:M\216\207<2\005\024\272\204\267\"=\010\262\333\273\\\253\361\274>\263\021\275\310\315\237\274H\277Z\275\325\"\003=\323>\233\275\330\035L\275\306\357^=\3165\\<\301\340\347<\226\201O=I\323\031=\036$n\274\351\356\206=\025H\271\275$\301\230\272\"\354^\275\32309\273x-X=\344\005\302=\370\212==\337K:=\036\000R\2756\022\005\2751em<\327\201r=\017|)\274syk\273\331\347Z\272\237\212\215\275\240,\016\275nj\200\274\231j\"==6\003=\266\013\"\273\312\023\250<j\204|\275\250\030i\272\014eF\275d)2\275o\r \275mX\n\275\220q\031\275\276\351?=\233#d\273\313\220+\275\257\213)\275\242yi=I$\233=x\224W\275DL\030=\340\217\241=\3016\301\274\302/\277\275!\266\n=\025\313~=\343`\356\274/\377 <9\0323\275T0\230<\201p*\274t\257;\274\243\206\033\274WR\355<\353\346\307:\251\202(>\257X\212<\t\325\303\271\200r\266\274\r\245\347\2739\332\004=\"P\225\275\261\270\'=\276\0131\274\027\037>=\227\223\324\273D\035\243=c\016\032=\022\332X\275\274\210\271\273\217\363\210\275\216L\367\274\tE\232=\303\003g<*\320\017\275\025\026\201;\023,\033=\020\017\211\275\260\247\035=\330\002\302\274\330\035\010=c\301\016=\357\203 \275\222\206\005=\305;\t<.\023\026<\224NI=\341\311\330\274\311\021l<*\335\337\274\225\035\227<96\336<\310I\035\274\227\350\001\275^\313\033\275-\001:\274<\355\203=\020\366L=\271Wn=\212,p\275\\\0062\275\262\001$<\357Z\267\274\264\370g<sR*=\341\221\004\275l\rR\275\204H\223=\271N4\275\177\342\034=s*\310\273,5\252\275\226\377\201;\000v\017\275\245\032\t\275\313\371\362;\304R\302\273\251-\t\274\004\r\234\274%\202\352=\177\256\333=-7Y\271#\217\226<^nZ\273o\200I\275*\351\020\275m\\Z\274\373\207^=\312\\\255;X\331k\275\220Sy<1\2778\275-\323\237<LuY<\375\237\233=\0328{<b\2754=`\006\333;<Q\026<\324Kh\274E\266\317\274\000\373\036<\212\260L\274\241\362\211\274=r\226<\3278\277<8\202:\274_\335\311;\324\227L<q\317\250<]P\234\275\235N\375<\261\020\025=\243a\277\274.\002\020\275D\306\000\275(&v=vA;\274\014\324\233\275\360\017\027<W\027\215;- \347\273G/\200\275\326\215\000\275\220f\351;\324\250\311\273o\336\357\274%8\020\275q\371)\275u\215\300=\232\037\037\275\026\373\232=$\312\233\275U}==\355\332\206=\034g7\275\003b\367<\317\312\017\274\322\352F=*W\230\272Ce1\275\264\323\371;\345Tt\275AV\346;\025\266\204\275\\l\203=\225+l=\'\024E=`\373W=<\216\203\274\222\005\014=\014\022\254\273;\252\325<\236\017\023<\314r\345\275\310K>=\314\217\302<zm\337<\332\342\277\274u\274#\27465\004\274\263\010\215\274\255\322\001=\372\204p\275s.4<X\375h\274\314\232\021=P\035q=\177<<\275\274\362\034=\024\275b<\357\'5\2758\333\254=\260Y\270\275\013\314\034\274\200\266b=\303\302\010\2753,\224=\1770\002<\362\227\202;\266\001\267\275NA \274`\373\272\275\2062\301\274\362gn=\301z\320\274\016\034R\275\232\261u<?\326\375<\t\345\250=J&\244\274\361J\317;\246\214\210=\345\0202=\3708\371<\\{\365\274C\250\250<\305\013\212<\334f\332:\353\306\335\274\n\362\342<\\\036\360<\301\356\205;p}~=7[\005;\326S0=7\352\240\275\363u\261<R\342M=\231-P=2\3142<\317\323\235;\177|\332\270\236\270[\274\033.\255\274\t\007\313=C\331\3628^\214]\275\230uJ<h5K\275\350\374\253<\225xu\275e\320\013=\315#\274\274D\2547\274\252\312^\275\304;P=X;\216;\330\233+<\201\235p\275\203\025\327;\225L\201\274\016\266>\275D%4=\254\350\275\274\335\227w\275u6\315\275\247&\027\274\327\351+\275\206\3100<>\202Z\274\036:<\275\263\272j<\250\310t=\214\277_=\2640\267=\307B\355\274d\254\231=\232\307v=\212}A;\351vH=\227n\020\275Kh\224<0\233-\275v\244S=sa{= A\272\274\207s \275}.\361\274\035\354\247\275\353JI;$\224P=tXq\275WZ\210;3\340<\275\t\025\2129\030\306\021\273SB\203\275\320\335G\275cW5=\337q\211\274k\374\244<\217\017c<2\360\010=\220\237R\275\024\241d<\016t\316<\020T\234=\230\032F<g\367\010=*\251\265\275.\362\256\272\004\021{=\360?6;-G\303\275\177\212\333;!C\225\275\370\343\233\274\345\233$\275\n\371p<\266\204\240\275\243\2353\275\373\005\204=)\213\212=\276\001\026\275\375\210\324\274\0301\'<\004\202C\274\3521\275\2742p\312\275\361\210\361\2743H\236\273,\276\357;\'\014)=\234\222\203\274\247?\022\275S{\202\274WD\311<\316\360G=\177\347\354<\331\304\005\276\2365\000=RC2=iT\007\274\270V\247;\232n\260<:\201\020<\000E3==B5<@\307)\275\217\2631=\342\nV;+0\303=\351\302\261<\236A\210\273\230\322%\274J\'\250\273\255\274-=\344\316\0329.\357\227\274j\246\245\274h\322M\274,\2072=\005c9\274\343(\224\274\302-\275<\210\366\306;\245,?9\216\001;=\325M\246\275h\177\215\275\377.\227\274\264\006\324\273\0210\010\275%C4;\037\226\356\272\2607\252<\367\016\n\275\030\252_\275\321c\241\275\266_-\274\344eS=\273Z\356\2741\373\002=\372\205\221<C\217[=\315\312L=\031F\025=o\257\320<\030\034\001=\357\331\221=\222\251==\3116o\274\202V\313\274\031um\275\256\0346\275\365\321M\274\211\2106\275c\355\267\274\034g\375\273H\020\325<\256>V=l{\350\274\006\315a<c\331\306\275<Z\321\273\335T\224=i\207\224\275\000\023\317<~=\201\275\254\377\355\273\302\221i=\305a\036<\270\313\264\275\234\360H\275k@\013=\343\020\240\274\016\273\202=V\217\207=\306\272\312<>j\250\274\'\016\207\275\305.\t=\353\030\275<\217=\266<\232y\254=e\252\371\273H\205\255<(\314P<\210\273\267=\244\252\007<!\tT:\22283\275\271w{<9\344\016=9*\227\275\311R/\275\006F\002\276\374\301\351\274\346\256k\275\016\300;\275?7\247=)\005\005\274\t\222r<{\267n=4\346\277\274\244\017S\275^>\010\274\213\027\212\275%\017\014=\344\237_\275\031HC=\261\351Y\2759\240W\275c\314\033=\022\375\034\275\007\370\017=\300m\177=\270\346j\273K\2103\274\244\031?=\215w\013<\267\266Y\275\346\0166\274a\231s\275fp\025=\274\223\360\274^Z\322\274\277X\031;R\213\344<\214\217\213\275?U\013\2740:\272;\260\003|\274x\356+<\021\360\371<`P\224\274\241Q\203\274\374\332#=\t\016\271<[\371\r\275\360*m\274\032a\377:\303\\\234=XXA=\312\305\031;\206\376\367=\215%\254=\030e}=o\227\302;\002\214\304\273\245\034{=\'\272\260\274\257\246\t\275\001\031\247;!\337\303\275Dt\331<\213\324\237=m \026\275\203\275\227\274\341\262\\;bi\314<\230^.<N\361\371;S\272\343\275\000\322\254\274\3569\331\274\271\020\310\272\371\037R\275\017\227B\2754u\361<\334\224q=\300\005(<\303\355#;\014\321\312:\021|s\275\266\302\232<\355r$=j$r<\343\036\032<\274\021\222=\222l\377\274\316\246I\275`&\262<\022F\211<\036\325\337\273\036\224\256;\261\216\003\274\266\252\023<Y\212\377\274\020*\217\273\245i\261=\250\245!\275\035\242\200<zZg9\2479w;$v\247<zHs=\242.\300;\014rx\274D\003\363:E\305\235< w\377\274\352\tT\275\335\2644\275kqn\275q\300C\275\262\256\267=7\262\274;\347\274\202=\024\260\351\274\321d\376=\272\367=\275\220tf\275\336\341\366<-G\361\273\315{n\275\240\355\r\275\232.\360\273\207[\326\274e\340w\275\252\314\021\275\212\2240<\342\247(=U\034\036;Hwd\274]>R=\031\252\273;Ga\223<\217\355\277\275\247}\245\2751\021\312<\025\241|<`\237\243<t3*\275G\225\211<\t\025p=#6\260\275r\305\035=Rp \275\000n\245\275\304t\030=\321\234\250\274\317\334t\275AC\005\274}\341\243\274\222\306u=\302\227Y=\275\327\257<,u\230<\272\000\024\275\001\243\356<\363\001\366\274J\367n\275\333\023\035=v*\363\275\022\362\212=\341\375y\275Q\215\327\271\016k\007\274\007\214\205=`2\366<\327\"\003\275n\345\255\267\006\306\031\275\323\305\362\274\342\213\312<\321f=<xM\204=\352\237\346;\222.\t\275\314\023V<2\006T=\014\260\320<\354\373c;\0375U;\244i\346;PR\300\274*\275\220=\367E\220\275a\217\036\273U\207\203<E\337G<\245\027W=\033\n\214\274\352\353H=\245 p=e\303\206<\272\347\t=1m\277=j\2674\275l\244\006\274\017f\356\275\020i\n<!\330E=\226\034\001\273\226\340@\275J%\001\275}\240H\275F\030\231\274\350 \306<\255\021 \275\320\372\234<m\343\252\273\0069S=\000\334F<\014\246\262;\347\210\320\274{s\226\275U\304k=;\216\302\273D[\003\275\200\262,<5\321\262\275/8\032<0\355m\274\371\323\255;\323Y\n=\344+\243\273\272n18\020\006\237=\303\226\201=\315P\037=\216\352\245\275\361\225\333\272\r{ :\201\310\036=\271\326\242=Mhq\275\371\020j<\340\363P=\266\277\345;\014W\016\275\244\030\026\274}\366A\274\365\246\327\274_\245\207;E\211X\274K\343\005\275\035\3427=\342\023U;\216\237\224;\2131\202\275!\322D\2740\344`<#)~\275\006\301\036<\036\232\347\275|\325\204=\003y\232\274B\275\374<\321#\211\272Z4.=0}\"=\211\343#\275\236\341P\275\"\213\361\273E\214\214\2753)\333\274\272\260\347<\241\230K=\373d\255<\004_R\275\032\007B=*yB\274vWb\273;\333r=\014[\323<\240\211B=R\032\372\274\273C\363<\325\017x<\362k\217\275^2\000<W\2202=\270q\204\273\376v\367<m,8\275\243=\250\274\2553 ;J7\273\275\341\033Q\273\204/\325\274\332\264D\275I\363\255\274\342+\365\275\026\332a<=\330<\275\"jm<\310Bm\275|lC\275\260iS\275\374p\324=&\216\246\275\245Y\216<x\266\003\272D\346\371= I7\274\371\272\204\273V,K=\374H\235=\241QC\275J\370\022;\266+\030=\250\262s\273WMt\275>\345\036\274;\343J<\272\260\311<\254b\262\275\362\305\205\273[\262\305<\007\277w\274\202\311;=X\347\222=z\016\273=\32239\275\260\272\246\275\330\265\232\274\252\357\314;\200\"\231;\005W=\275\211\\\266\274.\006\366\275\367p\014=\003\'\030\274\304$\222\2757\037\213;Y{\002\275\323M%\274\257\225\360\274\031\354\014\274\354\352\377\274s\345\027<u\251\265<\2666-\2753\262\364\274X}z=W\222\255\274\232\336\264\274=E\367:[\"P\275\267_\253\275\316\2715<\022\336\r\274\371\354\365<\n\316\333\274\233\304\363<\271T\337\274\274\273\031=D\354\265\274\236T\230<\322\261\370:\353\324D=%\263$=nXY\274\354\364\022>\357g\316\274\227\017\'\275\376\316\347\275\264\000\r\275\276\366l<S\337\231=\322\305\372;yi\014=K\365\362;\213\013\257\275;\310\016\274\335\350\315<\312\272\317<\204\365\262\274\363%$<\234\264\222\273Y\305j=\256\026\212\274\263/\305;\346\026F\275\r\213I;}\260\210\275\001\351 \275\014\214\272\274\211\223\226\273\322\360\243\274\001\242z\272\264`\236=$\327\302\274O\312r\275\020\037O\274i\362\203<\224\205\231\2754\202><t\2749\274\216\331V=[\\\002\275T$Z<2\266\372\273\202\354+=\275q\370\274\306\352\222\275}+\210\275\001h\221<I\353v\274I\001{=\214\221S\274\374\2261<o\302\221\275|\tc=\364\250\024\275`\251:<H\216\373<\252\347\265\275\310\275\"\275\311\013\334<\271\025\262<\242>\314\274\r\204P=S1x<\303\234>\275\000W\206\272\215\2402=S\023\022<oq\250\275\225k\245;W\006\215\274>\3377=zK\035\275G\362\267<L\036\227< \226\265<\203\271\263\274@6\360;\202\350\230\273\223\322\321=\265B\326<\'\321\231\273c\372R\274\277\310\331;!\232\254=Y&\222=\027[{;`\032\247\275\023\201\033<\371D\203=\343\242\232=\214\022t\274\034%\\=\342FG\274\231\027\203\275\210\370\353\271\225a\030<1\352F=\022iT<dx.\275\243\005r\275\023\243\347=\307Y\207\275\'\330\231=DN@=\007\341p\274\322n\220\275*\2029=\023\354\326\273\nTj\273Y\345\232<\375i$\275\200Rw\275|\321\274\275\r\3069;\230/\017\275\217Ww\275\336\206\245\2749\345C\274\366\374e=\275\026\207\274\375t\215\274\205\2471=\236_\375\274\234\304H=\204\357\'=\364\261\222=1\nE\275\271r\3058\330\247\014\275\207\345\315<\305U\263<F\317\225\275\255\2443\274\016\032_=\370\001\215\274\271\367K\274\005}\240\275\376\253\013=\303\252b<\022\016\037\274\r\227\037\275\245\333\017\275\322O\326\274w\344\231<M\363\310\274\361f\035\275\366L\345:\303\353\201\275\201\354\006\274\303K\353\274_2\206=\004\354]\272\210\347\356\274\'\"\021<\332\233r<\1771\365\274\234\265\004=\376T\252\274\344W\240<\270\013\335=\201O2;\253\343\242\274\261\003\354<YZ\226\275(\2054\274\355\313\303<\336\031\327\273J{\211\275A\327g=T\325\007=zm\\\274A\237G\275\367np=zZ\331<\361\273B=\375^ \275\346\326\372;\247\303\327<\252\224\001\274\216^Y=\024\310\022=\305)N<\376\376\n=\312\014\244<\267\206T\275\t\222\n\274\233J\241<\214\031L=\367\220\237=\342\200Y\275\226\200\371<P\363\230:\202u\032\275\2156\347;_\227\356<\360\224\333\274F\236\224=\331\352\307<Qe\224=\277w\237<\242\243\241;\256/\303=\361\245]\274V\215\233<<:|;]\334\276=\236\\\335<?\306\206<-\010\211\273u\206x<\304S\030<\274q\221\274}5\226=\002\216\237<\217m\311\274\243V\261\275Ak\367<\305\305\222=\352\322\215\274+\223\033\275\364\364\222\274K\032\302;\354\0044=l\213\213<g\347V\275\307\313r=\256*\267\274\352\033\273\274.\207\000\275S\255s\275\244\210\006<\300\246\226=\004\261C<4I+\275\264]\274;\342\366\177\2745\247P<3er\275\237\257F<\305\330\211\274O\347E\274!2\315<\354\206\332<\022b\315\2742c,\274l\240\362;\246 \264;Y\204\312\272e;\362<\330p\214<\242\314X=\004\310\314\275\307\210\226<\321^\013\273\256\272\3508j\232\254\275\261+}<\023=\024=\375\004E\274\033c\243<Co$\273\350\r =e\330\215<+\216I\274\244\303\256=,\233\027\273\337g@=iU8\275Zq\344<^\345X\275\224@\020\274\242\032M\275\314\330\277<E\276\223\275{\365\033\275\001tU\274}\030\255\275\344\242\002=8\356\324:\230\237\306\275\335\177#=\343\255\341;k\270\304\275\232l\255\275<\022\225\275~x_=UT\364<\257\177\214\273\321\372I\274\355\303\212<\236\251\300\274\334\323\373\273\033\310 \275\216\2677\274:U8\275ab\347=66\007\275\333\244\"=\320\263\303\273\250\017\035=>\234\227\274\302\341\274\272Y\324\302\274\214\207\313\275m\272\301;\014\225\343\274=\371\004<-R*\2759H|<\000\200:\275\022Z\001<Dc\266\273\362\332\306<\241\345\272<\213\024\316<\326\367[=\026\\\272<\272\366\215<\204)^\272\232M\310\275\342\020$\274\264\353\210<k\204\213\274\343-\n<\276\031\360\2744\332\312\272\356\324\254\273\034\316O\275\251\216\031<\256\014\361\274*\r\317<\204i\226\273\272\267\'<7_\215\275v\257\336<r\376<\270\253\037\205\272\322xf\275k\312\225<\203\303x=\222[\211=\205\221\006\275\265\377\020\2756N8=\207C\236=\022\206\315\274\254{d=\351\336\222\274`\300x\274\013\021\313=%W\374\273V*\025\274s\250\260<\014\325\307\275u\036Q=\320\341\264\274v\310U\275\366\010\006=g&\226\275s\2162=\344\037\246\275\352:a=b\033\024\274\016\330M=\205\213\016>\004\334\323<s}\257\274\251\'\347<\322~E;\253\017\237:h\'\246\275@.\263;\250\236\'=I\347t\275p\006\334\275\373}!\274\301;\237\274t\231\231=m\262\021\275Y&\251\275\010r\265\274\342\336\251<\373;\232<\365:q=r0\246\274\317\022j=\026n5=\312D\373<\376\2464\274h\242\300\274\306\2579=\251j5\274\204\213\332<\236@\013\275\363Z\255\274\231\214>\275~S\030=\376\246=\275w\324-\275\261\226\325<a(P\273G\227\213=\307\355\017=\205\013\306\272\276RT=\260K\373\274\265\025J=\341\001[\275lc\203<\363v\022\273\330\303\237=\335\207\230\274\350%\301<\311\337\221\275\273\276~<\223_\334\273\231\324\255\275c\'\006=(\212\370\274\301\341#\274\252zL=z\373\031=\016\335X\274\333\335\005\275\332\376==+hg<\"\357\327:\313\037\275\274q{\377\273H\316d\275\325=\250<\365\225^<,\232F\275\343\327\321\274t+?\275!V\227\275\341\217\257<\351y\333=\200\030\216\274\323f\024=Q\227\343\274 \0146=\025(\344<\255U\0239&xU\275&}\265\274\300\202\223\274B\363k\274\350\305\206<\014O9\275\302[T\275$\344\246\273\376\t\025\275\016$E\275C\237\367\273\333PS\274=\0022=y\215\367<]q@\274\233\316b\275\371IP<\275\004m\274MX\351\2744\r\203=\036\227\234\275\007\253\362<PNl=\322\224\245=;c\235\274\0205D\274\357\335\212\2750\316;\2755\tR=2\234Q<\202\223x=\351\313 \275\315\267\3469bw4\274O\211<\275\332\201\224=,Xl<\024\324\336\272\221\033\374\274M\317\274\275\223\301\362\275\344\206\320<u\217\374\274\346qo;\206\364k\274ng\204<\273;c\275\251T\257=\'\360\227<\000\344M<RC\302\275\004\262\006\275\341\207\224\275_2R\275\241\n7=\240\026\251<\221\336u\274\017\013Z\274\0050\036\275\235_\222\275M\360\234;\235\225\035=]\225l<\tb\n=Br\223<\316Q\252=)\345\375<\340\001N=\317\271\242<\307D\355:\004\n\331\275ti\322\274A\025%=\352;\367\274\244\3514=B\216\213\271\221E\'\274)S\234<\302\221\267;\346\265p\274dT\232\274\016\333\025\275\215+}\274\262d?=\202\221j\275V\022\274\275\266m\237\274\212Q\032\275\372\017r=\226\206b=\376\211$\275\3679\327<\370\321\360<0\250\014=\2123E\275\014*\276=NH\341\274\266^h\275\236\275\277\274\322\021\351\274\374\267\236=\223\255\212\274\230\025\270;\363\001\236\275Y\260\225=\215\270\024\276\225:\234=\271;\233\275\371\316\220<T\221L\275|\000\020\275u\000\014\275\240\2569\275>\274\022\275;\334\t\273\210\312\027=\373\331\201\275\335|\315\274\tF\217\275\306\347\235;7\376\\\275n\321*<U\026\373<$\026\306\274\216\251\271<\367x\036=\265\201\370<\347\3128\275\021\231`\271\244\307H;\224\251.\274~\357\344=6\016\223<d\260w\2734\314\216\275\313\210\220\274h\242U<\224\315\200<\023W1\274\214P\374<\317\336J\275\030\215\242=\323T\031<\250\212\"=\263{[<\345\032\230\273\031\356I\275c\256\364;\201\307;\274n(#\274\247\237>=@~\207<&\270\220;\213\002\t=}\242j=vMe<\202\217\223\275\371\002\311;\001C\325\274\233\266\001\276\265\224\263\274\240\301\212\274\031r\031\275%\210R=\036S\201=\266g\377\274@0\214=7\330\245<\215\204\307\273r\262\220\274\311\346w\273\013d\351\272M\003\202\275\010Dq<e\243\234=\350\230\220\273>\\\357<K\246\365\275\002H];xd3\2744\316\212\275\265\210\354;\025\230\312\275F\336\305\271\2709\033=\377\261l<\017\324\255=r\374S\275X\"Y=\376\177\212\272E\026F\2740o\247\272K\017\230;\377(\360<\223\013A=<\216\302<\265\334\301;\004\t\360\274\344\204\337</P\224\275p\031\217\274r|\031\275+]\030=\327\260\321=\305\201\345<\007>\213\275d?\253\274\325\333\334;\340\241A\275\2551 \275\373^\337;\326\200\356;\2527\225\275\304\031\201\274\311\013\375:pc\337;\346\370\345\273L\341\004<\237\224\252\273\210\210\255\273\261\021\024\275\227\263,\2741-Q=z\224\007\275\201\306\214=\'\233\003=AC\370\273V\372\253\275\354\034.;w_\216\274\337aR\275\204\306N=\314*E\274\303\257S\275\262\177\263;\275v<\275\006\371\302\274\003\314x\275\246i\303\274wx\334\274\016\310\232=\327@\352<\267U\t=D\261\215\274\224\217W\273\005S^=>\302\312\275\371\264\255=S\316\224\275\202\333;=\207\345b\275fw>=9@\272\27418 \275\r\343y;c\376\205\275\334B\026\275\326\n.\272\235D\000<\177\213\246=\320\005\300<\002\233\217\275\355\234\200\273\335\211\266=<\206u\275\004?\027=\374\257\267\274p\0326\2751\342\022=\315b\314\274?\267K=\203n\310<\020\n\252\273*DQ<\322\355V\275 eU\275(\262T<_\317s=\315\033\374;\322\366j=5#d=\003\216\322<\331\3649\275\240\207\231\275\033z\300<\002\323G\275\323\224\2414\200u\\\275\316\022W\275\372\212\224\274i\372\340\274\r\212\265\274C\035L\273\273\371\372\274\200w@\275\266\310\037<\273K\203<h\363\246\275uAj\275:\252\221=VA9\275\362\006\323<+2\216\275\234Y\255=\034VG\275\305p\216<pM[=L\342T\275\315-\310\274\353;\340\273\230k\364<29\344<\027\016\233<g\001)\275b\223\245\275\362\t\222\274\002\371\364\274?\361+=\276\3415\275m\360Z\275\371\2112=\030\371\331\273\034\260\311\2739\236a;\030\024\212\275\r\302k=\205\255\262\275?d\371\274\266\371\205;\245\035\251=Tn@=,#\254<\305\215\224\274(\214[\275\024o\226<+\010\205\275\240\227V=\273\232C=\324\225\222=\223\254b\275M\324\265\274/\343\222<\020nC\275?\034\326\273\251\330,<\2425\220;\275\177\250\274\363\264z=\013\3443<\212\234\t<\021\217?\274\022\324\213\275\323&w:\r\312\301=A\022\221\274:Q\266\272\006\215T<>\010\271=!#v\275\332+\330\274\330\222\033=k\311\263\275\375\035\027=\227\334\303<\300r\t=\255\223|\275\321\031\023\275\213y\362\274\312\241C=E~`\274\022:\017=\253\252\254<0\022\344<\304\024s\275\231\317c:Fr\274;\241\335\004\274e\222i\275~\374\207\275\303}\302\275C\341\246<\364\301\354<\233\351 \275O{K<\245\020O\275_gL\275\020\321\257=u\270\230\274e\275\200\275L4\032=\327U\325\274\264\372:=\235(\031\275K\202\006=-g\213\274\204W$\275\020L@\275[\034\313\274\341\333\224<*d\001=\225\336\363<\304\036\331\274`\261J\275\034S\245<\252\360\026\275\222\022\205=\307\320f\2745\273c<m~\017\272a}\375;\032\034;<|\204\020<\251\353a\275B\035\241=\323y\3569\263\271\255\274\310g\211\275\022UR\274\234\\!;6\"\266<\365\210b=\024\340=<\347\215\343<R\335\212=\351;E\275\366h\217\275g\233\225\271\004\004e=\316\0366\275\377\250\213\275\024\2163\275L\233\276;\307iC<\2616\207\274N\350\003\274;\262(\275\311/;=\340\313\331<y\235%\275\324\350r\275\215\026V=v\272.<V\371\206<\340o?=\366\207\342<Rl)=\334\372Y=\016\013%==\323\022=\363\346\306<8\277i<g\260\353\273\271\261\310\274\264O|;\215S\026\275`\351\274<\331\036\372<\347\273\206=0\376?\275\013.\356\274\261\367\204\275\307\003\014=0A\027\275\247\324\017=@\306\363\274\325A\254<X\267\371\274\312\364\254=\203\313\022\274\035\003\032\275\320\013\020\274X\243\204\2758\031!=7w!\275\020\025\225\274\021f\030\273\362\3013<iO\245\274\253\020\221\273|\310a\27280\373\274Ot&=\207\242\204<\377\325;=\032\220J\275\023|\326<X\343c;\000\303\275=\351\331\343\273V\to\275v\305\224\2744o\216<,\337\246=\031\305j=\230\376\314\274\301R\034\275\336\225\207\274\217\240\250\275\026\235\363\274\004\025\017<*?\036\274\rP\264<M\236(\273\013\250\254<\243l\242<\022\323:\272\025\3173\275\275\274\257\273yB\305<\347:\022\275o\227\257<\022\356\254<\336A\027\275\237\013\227\274\222f\016<\316\n=\275\364\255\205<o!\377<\323\354C\275\326jQ<-\2469:\253\243\261\274\224\223\302\274\304\301Y\275\250\373x;;c\332=\324v==~\342\321\275\025\003\017<Z\275$\275J\207\310\275\360\204\200\274r\342@=:|/\275/U3=\200\016Y\275\336\273%\275\273, =\034,B=j\212\010\275\313n9=\256\027\227<[!x\275\364\213\212\274a4M\274\211\257\223\275\235\306\201;:]f=\212#\031=\227\314{\274\201\371\371:]\333\334\274\343W\230\274\377P\024\275;^V\275\000C\324\275\331\233B=_\207\347<5+\246\274\207\243\002<\024\023\233<\022\007!>\317r<;\370~[\272\226\206.\273X\201\"=\377\367<\274\367\221\265\274\305\300\003<3E2=\224\005\r9\275\346\234\275V\234\201\275<\3124\274\3602\003\275\224U*\273\004.\275<\221\233\264\273\261\326\030\274\376\302\322:\363}\250\274\335U\001<t\370\203=\237\310q=X\272\204<\222\220\032\275\006\231\235\275h(k=\367u\232=f\363\264=5\237N\2741\360j=\307j\357<\251\n&=\261\013\"\274\370b\336\275<\2277\275\"g\005=\334,\301=]\224\316\272o\245W=\227\315\261=\255#\216\274\252\372\004=x\240\032;U\370W=;\274\032=\272\351\204<(\314\201=\323g\342<u\226%=f\032\r\275a\364\024=Ya\037=\233\225\221=\251s\210\274H\305\037=\264V\271<\255\353\t=7\321\005\274V\350\273<w\\\205\273\002\331\022=K\256\356\274\360d\347:\310\241\031<2\t\214<\226-\212\275\177\351\207<\025\251\030\275\355y\022=2h\231=\t\354\216\274\3365\244\273\002L\360<\237\021\327\272\305\224\236\274\370\204:=\345\273\214\275\246\243\3129\016{v\274\217\274\017\275\025\005\362<\370\237\303<C\3759\274\313\2262\274\014\327M\271&i\261\275}W\000=R\211q=\307aQ=-\257(=\270\035\300\274DN}\275P\021\271=\000\354\256\274\227\177B=\304\207\206\275\346\033*;\037)\332\274\t>\347<\235\365\314;=\232\232=m\333\303<\r\231/<\210<\002;s\221\330\273\373\341|\273u|(\275v\200\005=\2305\317\274\320>9\274\241\204\250\274\330Kv<\034\000T<\346\350\250<\224\243+=\202/\240<&\324\337<\"\002\231=\224\362\356<\236\017\245=\033\362\211=\2654B\275\004\357\214<%f\020;}\337\372\274>\327a<\322S\340\275\247\\9\274;A\364;\206\363c\275%\260\350<[\270\252\275\351\215\236\275\340\325C\275\336\264\034=\240\373\006=8Z\247<eM\234<\021\345\205<\034\030k\272\261\246\017<.\303\270\275\265\316O\275\312\305\027\275U\326`=\271\363==p/6\275\334\236\277\273!\326\225;\224\352\200\274yx\351\272\243yP\275\300\275K=\177\nF\275\034>\233<|\341\336\273\202\036-=\002\342\327\274\332}\014=8\302\271<r\242x\274\310v\227\274z\261\027=X%t<\203\307\336=\232\305\322<!\031}\274\020\254\250=k\3377=1O\355=v\247\211\274d\2618\275{yV\275\177\371\022; Qn=\221\247\237\275\257T\341<\306*\026<\365\333]=2|\367\273\332\235\253=\224\003R=\375\215\335\274=\016\373\273\034g\357;s\014\241=+\267\276=\334Fp\275\272\024Q\275\341\230\274;#E\210\275\323\303\310<)O\240\274d\204\004=d\304\211<)\027]\275\320{\221=\010\244N=H\000\013=\352\212\262\274\274x\235<\302\362\005\276\321@\334\272\237\035\215\273)>\002=\347$\025;\255\2347\274\016c\t=\224!\207<\026\345\224=U\021\205\275$\032\220\271\276K\214;X\013\375\274\303\256\003\273\025\363#\274\276\362\263\274{\203^\274\367\006\356<\307\271\350<\272Z\004\275\031\212\253\275-h{<\214\331O\273t}\202\275\210\031\027\274\3263\033\275\220|W=\241\023Q<\236V[\275\246\334\226=\230\241V\275}\013\t\274\013\037\254\273o\205\305=\220Y\366\274\017\2610<(\364~=\247\330\241=\365\3618\275QF\001>\221\253\364\274\332\034\000\275\344E*\273?\027~<\021bh<:\177V\275\365\000C<\312[\324\275kE\217\275C:L\2756,\302\274\"\321\017\275-\330\036\274\273\277\250<\252=\372\272\177\377d\274\317m\031=4\320\206<\317k\343;;\031\030\2749\233\305\275g\034\267\274\007\362\303;-.\204\275\356%\325\274\340\207\372\274W\341\317</\314\"\275\026\361\264\272\301B\337<QH\227<\177\310i=\323@e\275%\201\375\274\357\261\213\274B\321\220\275\024\250\210\275\227\253\'\275\023V\231\275\365\210\224=\267M\212=\250\271B=\220\321\310<j\036\037=\245\240)\275t\356}\274+\204\203=\340\215E:\357\340\322\274\255V\002=4\341\242\275Y}\210=\323_\304<\276G\314;\342\245\277\275\230+\204<\315a\217\274\004\371E\275\310:j\275\222\000}\275\377\001{=uI\034<~\250\346\274\225a\227<\003\214\276\274\377C\322</qi\275-Hq\275y\343\005\275\360a\227<\260\336\207<\002\367+=Xe\240<\202\266\205\275)\204\351\273\377\367\235=\316\260\330\274\302\331\201\275\235~(\274\272\276\013<\230\316R\275 \034\330<\313\250\322\274U\343\026<\353N|<\022\255\216<w\316\315=S\035\201;\324M\300<\300\340.=\326\276\246\273\272\024\023\275\366\224\027\275w.\002=\"W\2209\321^\353\274\255\0271=$T\035\275\222\321\305;q\253\214=\027~\t<\275Mb\273\305\217Q==\006\240\274vBt\274\311\341\211<\251\215\t<\022\212\r=\006\214\251\274\030\213\366<\001iW=l\221y<\353P\331\274\277\271n\275\205`\207\274|\262c\274C\0258<\020\235\013\271\214[\265\275\306\332\323<\256\306N<\233\242\201=o\217+=\264\265M<\027\232\244\275Q\\\372<\000A\007\275\344\2361<\211\265\230<\222\232\256\274\370l\303\274m\272\231\274\300\022\215\272\024D\227=\000\325\325\274*b|\271v\312\335\275\241\347\333\273\200\313=\275\335\251q\275:v\377\273\372M\335;\273\337\006=X\"<<\313\315b\274\345\\\360<\375\204\016=\n3\253=\273Uf\275\033\311\023< \377.<\221\221\001>q:E=\n\\\313=\350\277\035\275\214\251\310<\243\303D=\346\030\206\274\275\254X<n\222\206=\354\323Z\275=\222\335=3\343\222=\253\036\260:\363P\251\274\361\204\247\274\376\002z\273x\030\234\275\310\3745\274\344Ym\273\301\303b\274\375\251\204\275B\371\244\274\351&b=`\370\243\274\322\267\002\275(\206\347\272\020\014\361=\221\263\004=\201-g=*\235>\273\221E\266\274\'\272\262\2732\237\276<\tm\326<\205\037&\2754M\030\274\344\200\247;\003|\231\2756%{:\356\000\246\273\307y\374<\217(J=\250m\364\274,\312\023\274\003(X\275\215\021I\2750\0019<\320\362c=\372\307\321\274\334E\225<;<\333\2736\2425<N`\037;\362\227\263=\314\250\177<\037\315\325;Mo5\275yQX=\265|v\275\262y\027=#\204\260=\226\362\t=yK\201\274xg\220\274\275\336\007=V$\000<\220]\213\272\200)\022\275L\353\206\275aP\023=H\321\005=\213f\022\274\234+\246<\021\333\021\274p\355\t<\311\262s\273\352v8\274\006=\023\2747\340\016=\207\340c=\302\352\n=\341Q\357\274\370\030\245=\332\001<\275\237^\031\274\224 \007\274\204\371\211=\261\343p\272OO9=\375\034\354:\253 \323\274\276\321\214<\220\021\"\274.\214\214\274\250\200%=x\217\255<\t>\007\275X<\017=\277vG=N\027q\274^\260&\275\242\246b\275Y\251\215<\345y\206=^77=\266\311\250\275\340\tD\275\336{\n\275\326v\303:\314}\215\2744\343\207\275\357\372J=t\214\265;\342C\265<\255\233:\275I\302{\274J\005>=\242J$<\202\3350=\222\343\201=f\250q<\200.W\275\231\r6\272V\212\243=\355\030\273\274c\022\334\273W~b<\031\273N=S7\235\275\373\277\217\273:\302\261=qDi:\337\206-\275#\245\265\272\263\037B=&\262\263\275\206\002*\275\225\357|\275bL\215<p\340\270\274~1\223\273\343p}=F^1=\373\344\350\271\247\005U\273G\345v\275\312OK=\023\264N<a\033*\275Z\205\332:\\\223\205=3=\030=\370\240\036\274?B\013;\331V\353\274\205\300Q=Z\356e\274\325\271`\274>\216\254\274;5.=\027{-=gZN\275\307\023\224<h\371\337:\2634\334\274\020\255\373\274\017\353\244=2\010H\275\200\023\373\275\315l\217<b\253\333\274D\n\213\275xb|=nru\274\242\3140<\214 p\274\330*\003\274\272\244\334;\\\231\213\275Wq0<D\211\201\275\337\314@=\221\007f\275\322\270\204;\262\330(<\324\345\374\274\212\372\213\275\\|\020\274\035\016\363<\244\264e\275\2067\032=6\240==h\352(<$!)\275\335\323\022\275\336\233\322\274\225\001\014\275C\002\266\275\210PA\275\006`-=\305\\7=\020\365\253\273\233F\203\274\270\355O\275\324\260\217\275\354#t;\032\004\244=\250\033\025\275#\201\345<\267?L\275\262\3236=4,\r=Ia/\275\023\372-=\216\n[=\251\244\024\275\300r\346<5\305H\2759\3159\2742\333\211\274\315\340\007=\365\317\035=#u.=\242\215\024\275\026Aa=\213\241\231<|\001-=\215a\010\275\245e+\275\366\237\226\274\277\253P\275\032\366\014=I\311\226=Q\303!\275\032EV\275|\254\332<\363\312L\275r\312\251:\035\302\251=v\203K\275\246\217\217=\274\243H=(\300\251<y\314U=\307B\215\275}\217\274<y\254I=\324\316;=T\004\222=\202\255Z=\361#\336\271\237\241\202\275Q\003\314<\361\371\031\274\207\\+<\315OD\274\317\005\275\274\261\345n=\273\355\006=a\337q=\021\']\274s\330\273\2744\227c\275g\252\324=\373\240j=Z#-=iY\361;\237\235\016=\330\344q\275\271\320Z=\370\225\214\274\2057\237<\006$\262\275\312\002\016=,\003;=\362Ab\272\256_\231\273\351\260\362<\002O\001=b\333\221:\332\315\260\274\214A\252\275y\025I=\305B\010=yb\215\275\217\013#\275\320K\r=\204C\217\274\366\252\325\275M\205\245\272s\201\023=\254\211V\2741S\304=ZG\304\2755\324\006\275\350_^<\227\226\177\274\344\007\260\274\215i\256\274\367!\014\275\305\367\345<P\032\010\275\265Al\275$\205P\274\2318\\<^\223\326;{T\312\275\321\0169\275z\023\317\273aXJ<\35032\275\224V\300<\261\211\r\274\026\256\207;\231\333\026\275\257=\224\274\211\330\t\275Z\221E\275\376$\035=\006G\207\272\034\010\027\274\"\005\206\274\271\303d=,XT<\"\312\241\275\351N\217\275\271p$<\326*\037=\007-\300\274\3151/=\3328&\272`\214\366\273\303\201$\275\313\033$<\363\362\224<\303\366\264<\333T\201<ZWG\275#4^=b\206o=\'\277x<\206\245\326\275L\264p\275}X\202=\325\224\022<\230\330\230\275\351\346\202\274]R\272\275\255i\230\275\336\310\220=\037}\355\274\265\021\214\274}g\010=*#4\275\305e\340<\223\205U<\273\357\304;\006\004\235=}ow\274$\020q<\320\020\342<<\302\'\275<\237\353\275\245\010\r\275\023\244\035\275|\021\275\274\220\277\001\274\216\330\315\275\356It\275\226\344\243=\3758\201\273  /\273/\301\367\274\206)\336<>5\376;\315\272\301<\255e\237\273c\231\364\274KQT=\207i\224\274\221&H=\216`\247\274\006\216-=%]\321=\252\377\344\274\231/\256<\272\365?\275\220\360\245\275\221\372v\274\252\2619=\2657;=\277\265\253\275\"B\n=\360_<\275\246\233\320\274X\351T\275\215\211\003=a[\367\274m?u\275R\017\375<:\224\013<\210f\340;\370\013\030=F\272\304\275S\366!=b&\030;W\203S=9\320\r=\353\005\201\275\024\0362\275\342^\025=\203\261\271=!b\353\274p\214\035\274\"\033\231\274\260\352F\274\177h@\274R@H\274h\245k\274^\263\347<\274o\307<\276\242\215=\352\022\320\275\245J\242;5\240\320:\354\274\n\276\201\256\t=\210\023\016=\000Q\323\274\035U\310\274\270\004\241\274\367M\037\275%sq=IUj\275\265\253\230\275;\214\363<\325\334\r=\342\226_=\241M\352\274\213\033\324<\005;\227<\304\311\023\274\360\206\262<\\\026Z<\2055\327\2759\r\225\274[\036\020<\223m\370\274,\210(\275NOd\275d\027\030\275\307D\350\274tm+<r\301\225=\365<\207<f{\\\275\246\3418\274\005\343\n=\257\252\353<\217.e<8\370\026\274;\031n=nr\254\274L\243\021=y\257\233\274\301Dd\275J\373\232\275\313\023v\275\323\335\217\2756\'\230\274\334\033\210=~\337)=\025\211\352<\227B\014\275\363\001\260;\016,@\273\305\215\210\274\025\217\360\273\357\320C\274\331\024\215<EE\'=\021\263/<\030\026q=v\276\353<\352x\022\2757\010\027=\024Be:\006\034\312<\210\3771=U\005\205\273y\346\013=-\365\034=\000\261\366\274\346\370\267=\330D\036\275\030\016\334=\336\207\'\275\215\023\213\275\237\361\007\275\030\271\216<\036\336W\274\246\215,\274\006>Z\275\246\315z=\375\251;=\3706K;,\254S\275,P\026<\242\022<\274\361z><G\221\017>\305\t\275<\242\351\205<\024g\020\275?\3525=\034P\222\274i\307\345<T\223c<\311\266\242<\346\000\017<\256\364\t\275ON \2741\022\275<z\267\203\274\302)\266<x\335\363:\254hy\275\315\371G=\214M\000=\006Xe\275\237\372C=\202\376X;\235\243\372\272\346\026\000=p\327f=j\346~\274\037\'6\273\003\266\241<{\300\374<\306\027\214\274\017\370\327<Y\245D\275\350\350W=v\232\210=:\256 \275\016\000H<\200\224w=\227v\371=\275@c<\206LW\275V\005|\274\220\376\356\273#b\035\275\'&\237\275C\327\307:\310^\300=6\014\025=H\317\252\274j\274\354\274Qh\321\273\274\212\246=\245\022`\275\"\026\237\274;\205\221<\265\333V<u\235\321=\314\266\022>a\255\367\274fu%=\2559.=\305\014+=/Q.=\221\260,\275\001\343\263=\262\346\225=Ix,=p/\343\274\020\211\232\275\350\351\276=\013\366\232\274/pZ<j\020\021\275Oq\007\274;E\364</\233:<\"\1771=\362\322!<~\317(\275ui\217\275\312\006N\275\225\023\236<J\276\243\274Q\300\206\274K\023\250\274U\331\200\274\346\031\377<+\300<\274\275\230\014\275 \227\257\275\"\370\035\275u\315\373\274:\263\213\275\025\0013\275\261\326\322<\273\326\243=\220\252\250=@\n\267;\361\242g=~\200\030\275\275\371\212=O\262\257<\316\350\204;\261\223\310\272D\277\232<\343L\223\275\037\014\270<\367c5\275Q\035$\275\217\376d<\206\337=\274\006\366_\273\r*\177\275v\231\344\274\341+\351<\210Y\271=\363c\242\273\004fi=];\177=\237\2625=\340b\347\274L\025g\274\214\374\237\275\232\370z<X0T\275\223Y2=L{1=\023\032\367\273_\256\"=\256\212)<\310\240o\274\276\271\362=#\267\210\275I\\\346:\014\214T\275\243\341\201=\302\330\304;\3205B\274\275\202\253<\311\032\303\274\266\"^\275\364F)=\372\177,=\236\264\200=P\301\210\275wN\227\275\351\235\303\274\256\262\025; \001\276;\347\375\323\274\250\370\266\273g\344,<\225\n\007=\375\210\234\274\r\372\235\275\373\255\032=\255\256\242\275\205\252k:\352\213\200\274l0\017\273>\2672\274\263\035L\275%\233\274<\014\206\202=\324_\377\272\257\230w\275\265]\200=\256\214\207:\004\362b\275\214\273\251<\376\254\277\275y\332\214\274\347b2=(\003\033\274\336\234J=\002n,=\200\302F=\037{\254;\253\305\350\273\363\241y\275L|\245=\250\302e\272\223\014\351<X\270w<%\212\216<L\236\267<\006#\245=,\275\322<\205\370Z\275\035n\207\274\314\334i:\265\320U\274\357G\202\275,Tc\274D\363\005=\246\221W\275\016\370\252\272?\300\006=|z\200=U\020z\273\277\243]\275\317\320\207\275\201\177\305\274\240\345\362\274b\355\351<O\371`<%j\021\27504F=\226\354a\2754\307U\275x\"\241\275\256p*=\362\375\370;\240\335L=5\273$=d\203\030\275\373\000$\274)\'\006\275~\222G\275\024N\342;e\026\214<\377\300v=\272\350\025=\244\213J\274w\020\021\2756u1=\320H\035\275Y\355\246\275\314\0131\274&\270Y=^\016\360\274\321\300$\275]*\r<\201\255\022=\361*Q\275\374\326\224\275\025\202\303<NNu<(\310\241\274\372Ks=\357\307\010=\211\336\345<+\214%=^S\275<?\021\235\275K\rf=2\352\324\275\220%\265<^\247T=DTG=\007-@\274\372m\220\274\207`Q\2754V\205\275!?\"=\377\335\215;^\222F\275r\'2\275neu=\2059\200<\252\222-=\212\264\240\273\356\207\'\275\360\337!=l\252g=\272_S\275S\346`;\023\032\200\2736\362\204=\313\203M\275\211\246,\275\3633\260\274`\020\\;\347\3463\275\210\240C\275\351\001\217\275\315\221H\275\001\236\315<\242\0021\274\317\224\375<\352\244%<\320\205\277=\207\234\327\2743\310\212=)\2410\275L\216(=\360o7\275/\033(=6\007\215:\\\351\370;\225\3030\275\304\241\270<\334\027\335\273\353\202 =y\214\267\274\014\341`<?/\"=\367\304\327<\201\330/\275g\035\242\274\006\1770\274c\332\235\275\036\231\355\274\324c\364\273\035\027\016<\351\200V\275\242\224\213\274 \025b\275;\272\260\275n\350\271\275,\203\277\273\365,,\275\306:\245\275\332p\352<\303\206\371<~-\266\274\n\231\361=\010\221\201=\221\237\010\2754Q\034=u\177 =\316\320S=\253v\272=\325%\301;\250\332\t=\262\252\271\272\304\260\300\274S\334\361<I\315\265=\006\373\000\274\356\322\336<6\202\021<X\305\324\275b\311q<\271$\314\274Z\256g=\354\222\"\275zx)\275:<\032=\207U\363\274\222)\2369\201I\356;\2479l=\303\"\303<\244\033\037\275\020E-=\276o\344<(\264\217\275x$\233=k\n\r<[+\177\2752\213\325<\201\237&;\214\273B\275\3676\206<\262\360\031\275\260c\246\272IMU=\332\304>\275\006\367\371<\264\2632;\262S\267\275\202\323|\275\314\321A\275\250V\244\274`8\031\275w%\246\275\006\360\325\2749\224G=m\373\252;Y*a=\013\246G\274U\351\261\274\014VR={&\375;f\004Q\275\347|\034=\002S\006\275\036\271%=j<\214\274CP\200\274/\330\031=!k2\275[\225\'<p\276 \271\301Q%\274\303u\211;?\206\013=\244\232f<\3732\235\273\240N\351<\310uY<\310\214\227=\344L\027\275\245\240\341<r\324F\275\203G\265\274$f\353<\215f\235=R{{\274\311N\372:\252\370g=\365VW\275o\017o\274\255[\235;f\354\n\275\257\233\036=\257;\r=\375R.=\272\244%;\236\000\277\274)\225i\273\342\n\350<\371\376Q<<e\004=V:\340<l&{=3\231\316<\213\254\005=\013~\320<Q\300\003\272\nW\370\274\177\242\207=\352\321\307=\246\205\372<\232\006\031\275>F\213\274\227\264\223\274\273r8\275\267\363\337<\227\265\242=at\245<$KE\2745\263k\273c\025A\275 \343\227\274\365\251\003<\340\027\016=Jv\247=\275\212\006\275Y:\355\274\021\205@<\305\177R<+\262\013\275*Wp\274@u\245=\014\020\212\274\003S\255\2746\327K<\235\3215=h/^\273\330\336\277\275\255\310\005\275\022R\374\274+\231\036\274\022\344R\275s.-<\200\221\253\274\010\337\240\275&\033\322\275\273\277\244\275+\270.<\261l\320\275<\356v\275\264\177\247\274\017E\231\274&\216!\275\263\222\215\275^g\261<\357X\362\274\026V\226<\244\231\223\274S\261\217=\313\036\006;\303\010\311<o\274\000\275h/2\275\004\342\000<b\253^=\21013=cM@\2750Z\221<\000\033\352\274YF\277\273\335Q>=\222\300K<\\\223\030=\232\315\035<B\037F\275\246\273j\275\351\242\210<\027\245C\273\177%9\275\320\000\362\273\346\313j\275\264\255\355<\257\226\177\275\235\222f\275K3\260\274n{\230=\234\005\001\275^\240\325\275\363\216q\275\215\220\013<(*p\274\343Lx\275\206t\242\275\305T\r=\002(\007\275\327\3272=\264a\367\273\273\222\251<\007\002\276<s\266\005=\3654\'=\245t2\275w\201\305<\335Y\237:z\247\002=\353\367\004<b\237\'\274\337\360\231\274l\021\230\274\202\331\343<D\222\351<\226\245\353\274c\360\253\273zS\225\274\227\331\324\274\004\206\221<S_J<6~\304\275\235`]:H\234\327=\303\367O<\361\001\315\274\337\002a\275\0309\030\272\255\367\223\275\2043\'\275\007fC\274\233\'\271=\300&\010\275\344\355\217=\033b\213\275D4\212<\244=9\275\003\367D={2*;\220\t\350<\301h.\275\247\364\272\274\317\300\237<)\253L=\\\365\260=d\230\344\273o\023\013\275q6;\275:\035f=\334q\254<\370Y\005\275!=\255<$\3360=B\261\220\275\265\020\002\275;4\300<(\316\247<_\215\273=\354\205\205<Tm\372\274\336D\374<\376&\317<x\035=\275\004\227\207=\325/\364\275\306\034\036;\250\275\253\273\327\2733<\000\346\001=?\355\344:W|b=\3105\037<3\361\367\274\215F\202\274\352?F=a\340\202\275sk\367:j2\204=vw%==\354\312<\202\034\203\275S\367b<\241\3748=\220\335\220\275L\332\034\275<\252L=\306q\014\275\371\2528<u\232\306<\272z\031\275HSB=\334\211\225\275\201\265\352:\302\224\273\274\320*v<]%\367\274\202f\205<H\3037\274\255\375~\275\230\377\337\274\222\027\271<\003VT=\266[\311\275\274\013\210<\344\035R=\241\225\200\272\375\360.=\253\264\255<\353ue=\212\254\255=JXv<\204\340\301<\033\365\t=\217\276-\273\t7\307:\221dg\274\014V\002<\200\340\312<\034\250\005=!\277R\275\206\234I\274\243\340\020\274\000\370\013<%\267\205\275\354F\316\275-\030\271<\357\3231=.*7=\333S2\275\360\276\253\272{\246\331<sQ:\274fpM\273\301\362l=Xg\203;%x\232=8.\274\275\241\345Z\274\rwA\275Z\342y\274\316D%=\025P\007\275X\372\323\274\330b\204\274\351R\356=\326\254F\274J>\230<\310\023\006=!\256\223=\365\301\034=\026U\203\274NT\231\274K\227=<\337\233\211\275\336y\033<\352\331\324<\016$\025\275\013\232\232\275\035\274.<P\324\251<X\034i\274\203-5\274\202\t\372<D^\026\273(\275\200\274\023q\217\274\334e\342\274#\323-<d\334#\275\334\275t\275\342\216\251\274%9\353\274\352\274g\272\334\335%=\267\2050=\235\306[<o\0002\275\363wb=\207d\217==\213n\275\210}\262<\003\206\213\275XO\264\275\243,\210=9\304\327\274\037\323^\274\367\210q\274\301\0307=r\333\216\274Q3\344\274\355S\246=\216\235\017=L\2069=\373\200\310:\006\214\r=0\003\350<<\252\315\275\301\017\002>\007\211m<\204#(\275\007\024\'=\266#\247=\367\301\235\274\274\225\217<\222Iy=\230,)=w\247\221<.\364\224=.\374\021=\234\013\324\274:~\177<\347\257\257<z9\273\275]\230x=\2750\203<m\000\305=\325\227\275\275,a\231\275\306/\252=\340Q\213=P5\371=\022\037\304:\370(\025=o\313\220;[\300\315\274k\306\t\274\306\020\341<\331\013\034\275\230\307p=\237\r\215\274Ny\362;@%\000=`}\235<N\256\375:\253\017\312=L\267\266\275\250n\346=T\210\201\2740\000V\274\270\234S\275\177\325J\273*\"5=\273\272\032<}\343\020=\350\320\037=\2660\004=S\2127=\214\\[=\277y\325<\267\375f\2746\017\272=\336e\352;D\256\245\274$6F\2743\246z\275\353\216?\275&_v<\363\255}<\374\212~=2+\377<Qp\027\275\205\017\322<@~\357\273d}\255<sh\r=\353\007\272\274\021\215\210\274\"Zz<Xi2\275Z\243\r<\345\241B=\353\313==@K\010\273\230X|<d\030\240\274\2302\023=\213\031Y=_\355e\275A\205\277;!#%=\321\036 <fCC\274y\026\242;\215\2309=\334\225\216;\263\330\333\274^\260*\273\233\006\027<\324\205\200\274\203\335/\275zy\216\275^\322Z<\227\252+=W`\337<&u.\272\024/X<\306E\254\275\\(\306=\265Y\004\275\310T\214<\337\270Y\275\331\223\"<\315=]\275\327J\331<\331G)=\027v\000\273\007\034)<PS<<\352.-\275\354.\315\274\301\217\334\274\306\000\326\274\004\300K\274\341.]\275\202\226\013\275)6\240\2724\270\006=\310\245]\275\357B\221=\203\261|;\351+\020\276\320\230M\275\264BN=\317\023v\274\024\022\350\273\177\253\314\275\001X\304\275\225\234L\273^\374\r\274\365\307\223;\320P\021<kJ\253\274\326\357\266;c=\233\275\200\020\321\274\251\331\310\274ZkW\275\354\021L=n\033\237\274\251~\215=9\032\361\274\262&\"<\324e\351;\222\035\313<+\034\021\275\2637\202=\016\024K\275\306O\223\275n\352\243<Yc\357\274\217(\204\275e\347\345;\032\222.=\237F\370\274\252\213\275;\202\350}=\301\263\014>H\272V\275\274\001\344<~\"~\273\320\271z<UGc<@\247b\275O\337\022=\014\361\265\273c)c\273W\022H\275\241\254t\274\0231G<M\247\202\2758\236\275<\243)\332=\261\313\360<M\225 \275\205\002\230=\346C\263\274\354\300!<\312Z\027\273\365\211N=\231B\"=\034\033\213\274\342g*\275y {\274d5M<\005\000\365\273\252\223\007=\371K\210<F\004\302\274Q\2402=\035dP\275*S\'\275\026\000v\275\324\207a;\235\325\033\274\323\236+\275\302\377 <\215\022)=\242\356\233\274]`B\275z\217\337<\314_\'=\376\304\323\275@KY\275\235\236\237\274\3035b\274\243T\177=\317\304\225<\021\227\265\2749\254\245=\276\317\374\274\341\"V<P0\354;0sF=+$N8\330\261h<I\301\324<c\353A<\266r\221=\021?\343\274G\213\021=\377\227\236<b\377\031;\324\230\014\274\362\265\272\273\365\327\'<\366\010)\275\305D\242\274\211\016y\275\332\205\257\275\014\360d<\254g\023<\230{\207<p\363\211\275B\2624<C\301\204<\273\3731\274\010B\"\275\315\341y=\204\322\270<\273\302\022\275\261\214\350<\375\036P=.`J\275nLA=\243\271\327\274\362_2\275\372\357H\275>\223\032\274\373\200M=\337\027r;l\335\027\275\346\022\277\273=\002\221\275=\216\225\274\242Q\'\275\013w\330=\355\257\363<.\371S\275Z\t\244\275d\304D=\364\231m\275\316\225\211<\330\032\215\274\366<I=\355j\217\275B\314\000=C\"\376<\257\271\037\274w\300Z\274#-\013<\342\0024=\td#=T0\245;\337\222\320\274L\226\311\274g9\314\275-\327q\273a\334t\275OdJ\273]\004\202=c\372>\274\312\232%\275\334\326\344<\376~\027\275=h\014\274\025\206S\273\312\023\227\275\235e\243=_\002b\275\331MO\275R\361\223\273\214\360\320=l\255c=\217d\237\273\274q#<\315\244\250<\3153\235;\237\273\334\273\256\224\257\275p]\242=\302\241\010\274\222\361\212<\241\347\217\274QkY\275\324\243?=\213\216&=\373<\340\275\026\010\221<\363\350\220<\322\370\274\274\271\376\000\273\323#@=\341\266\013\2755\014\024\275\262+x<\020\234@=\266p\333\271h\345(\275\212~\010=\252t\233<W\030\351\274\376i\213\274#T\307\274z\343,=\347\3011=\345\374*<a\0276\275\237vG=e\301\207<\371\376\244\274\311KI\274\324TI=\205\246,\275\242\321\351\274<\245\227=\217\357}\275\371\332\014=\360\346\245=\2143S\275\036Th<\016\324\006\275\014e\340\273\314tG<^\203\233\273\263[L\275\200\375\304<\0009\035\275l\223\306\274i7\003<\234\'\273\275\003h7\275\262B\r=7\236\351<\00780\273$\034\301<\353\255\313\272i8\002\275)\344f\274T\343\325\274\n3\245\275\316\3229\274\256 \235\275\021i\320<83\\\275\273(\230<\264i\333\274=\236\211=R\220\021\275E\271\212\274e\r\355;\330^\205;Z\265\007\276\367\317G\273\353\324x\2742\252\336<\376+*\275\n\345L<\275d\357<\022T\271<SQ\365\273m#[\275\246;\023<O(\375;\261Rg\275\241(\032\275\316\260\341=\200e|\2751\203)\275wR\323\274\t\375\010<\001\340^\275^\352\371<o`\257<\360\013\003=A\037\240\275o\303\314\274\304#l=C\377\235\272-\244\223<PPR=]\324p=\254\017\n\273\346[\304\274\353\231\206=\352,\003=\314\374\021=o\375W=\036O\244\275\240U\264\273\372\237z<\343\006\013\274\212\036\340\274\327\001\223\274d\255c\275<fV\273J\212\3019E\003\027\275\"\345\t\275\352L.=\205[\271<k\024\250\274\364\027\257=\n,\227\275X\021\214=\210\016\n=\220\360\241<L\367\234=\271\223\347\274\215\036;\275\212\275@<\354\225\006<\275~\205\274Rl\344\274\201\251\340\274^\367S=P\361g\274n\343N=\010\276\243\275Q\201\365\274\360\001s=]wA\273\265\364\275\274\024\'\302<\200\261\341<\231\241%\275l\020W\275T0H=\262g\265\274n\274\017=r\225\222\274\002\234\353\273\277\370\231<Z\020\304=\217\004\353\273\246\'\377\2743\032\227\275\"\007\274=\\\245\372\274\275\001\247\274;.\t\274(x\245\275/\005c<\374\301\257=\000b\255<5\351\230=o\361L<\211\320\201\275\215\361\205\275kz}=\203\004\357<\245C\242;\276\344\"\275\244\366\365\274\357\227\216\274\2554\\<\212\r\247\274B\325\233\275\352\230\370;\354\210\257\275\272\2700<\251\345\024=\343\010\271\275\305\022\004;\'Wr\275\207\362\217=\231f\025\2749\320k\275XD\302\274KT\310<a\005\n<\244\347-<\367\274\177\274\202\254\340;MV\374;\330W\014\275g\274\t<T\r\216<\337\321_\275d5X=\277\357\022=\372\350\213=r4^;\230\004\023\275\247\256\346\274\207Y\234\275\035\372E\275H\351*=\210\032\351\274\322\031\274<-\376\213\274[\337\004=\300\271\357:X\354\331;\375I#\275l\207\306=\333\334\207;\227\314\203=g\363D<,C\217\274\366m\211;^\350A=\222~+\275\322U\304\274\222\207\372\274\005\210\364<\251}[<\230\360H\274\024k\'\274jrd\275\230\204\322\274\235\351\332<GW\230=T\202\313<7\3655=J\0343\27513\226=2\373_=e\344\"=\226\003\227=-=\374\274(\277\323\273\031\247\332<\027\337\202\275\025\341\002=\322\333>\272\231\205\211\274\002\207\223\274\234\002\221;\3634\334;\241p\017<\364\223\220=\327Z\202\274\245\215\004=O+.\275e\315\345\273\335\327!=\267}\266<\320c\227\274l\031\016;\226\327g=b\345r;\217\332D\275\337\006k\274\001\006|\275\213\225}=\371\301\324:\032QI\275\362\265\363\274\324\001-;\267\306E=\205\014\250;z\223\027\273Ca$\275igo\274\013d\226=H\222\013\274\305\252m=\367\005\307\274\306\306C=R\351m\275>t\236=\t\351\230\274\033\330\t>6\025\034\274FeZ=\022g\315<\236\3534<\360\335\344<\216d\255=\353\223\363\272f\014\021;\036\374\374<\306a\031\275E\301\'<Y\227?\275]b\002=\361c&\273ZDs;\224S\215\272\213\"\212\273\262\245m=\2136\310=\311\265\356<\177C\264\273\036\n&\275\303\346K=\203AX\275]\251\231\274\r\315\036\275D\207T=\247+\240=-\276\204<\367\237\213\275\341y\270<\342O(\275\237\361u\274)\235\233;\320:\017<J\220\225=\204\352)\275\266\006\232\274\335\260\307\274B-\257\272\345\225\234\275\341JI\275\201T\221<\021p\025\274]H\311\2748\377x\275\251\317\000=B\263k=e\231\023\275Y\364\307<\007\217\301\275\r\347\344:\"W&<|\301\'=\017(m:\307\017\374\274\005\020\276\274\375\200\310<\rW\'\275|P\216\275\004\305\304<\261(\322\274.\343\000=\205+\206\273\254\310\231\275Z\230~<0\363\020\274\367\025\270\275\004\307\301<\0269\212\274\303\251\033\275\271+\242={@\347<\256\221\022\275\rs\025\275\360\327\215=\\e=\275<\365\245\274\314\230\242\273\035\023\270<w1\034=f\261\024\274\231c\233\271\373\222\226\273\311\t\352<\364U\264;\365\264I:t\272p=\330X\021\275\360\202\r<\366\340i\275}\267m<\247\255\222=\255\227|\274\212\237\007;oca\275\377\003\344;\342\341\222<\214$%=\222\000\374\274[\306G\275\210\247\360;\213I\252=Y\210\312:c\370\272<\377z\206=o\372\324\274\313H{=\370\t\257\275C\022r\275\'2\003\275\323J\367<\0045\260<\324\035\327\272\307\317H=\242u\016;/U\230=\251~\341:,\376\010\275f\314\343\274\214\001A\273j$\352<\322\311t=q\300\341<\235\013\312=\000T\201\275.\366c\275\027&\263\2745\364[<\235\260A;5@\306\273]OY<C\205j\274k\026\t\275\336C(\275*T\202<\274\233\273<l\000t<\353#=<xi\002=\336\2103\275\nm\364\273d\210P<\322\274\207<7Ao;\227\301\022\274&\350c\274\205\2633=\n\032\261=\344~3=\351#\246\273*c\001=_h\273;\365X\227\273\251\307\236<hA\252=(\267\300=\335\272i=\3456\013=\350\271\337<\025\301i\275pS\320\274\356\326\357\274\026\202\232\274\322&\220\273>\351\311<p\226(\274g<\250\274\304\225\255=A\177\266<\221gr<\276\205\225\275F\355.\274.\325\355<z/=\275\375\331\225<\215\nH=v\2422\275L!h\273hx\031\275\235~1=c]\376\273\036\037\021\275\013\016\305=@\013\245=?\222u\272T\037x<[\276O=\3517\236=\342\2522\272Ju\226\275\210d\235\275.>\357\274\254\212\266\275\346\211\201\275\315\315n<\014\264\302\275\005eK:A\213\233\275\214f\007\275\240\242\020\275\363\351#\275\352\322\350<G\316z\275M\346\220\275\317\024\330\275z1\213==\226\020=\236\216A\275^qr=96\365\274,$\210:\210j\205\275\272x\311<{\223\034\275\257\3342\274\232\016\213\275{\200\017=5\360<\274\007ZB\275\253\230\237\274r\352\233\274l\225\202\275b%~=\376\243\216\275\026H\264;\257\353\312<\326u\243<\\\215\036\274,\036\237\272\373\256\230=\302\036*\275s\241i=\035s\026\276\340\r\332=;\r\037\275\200\255\206<*\242\364\274\205\'@=\273\220\241\274\010\355\224\274/\036\271<M,,\275\221\352\275=a\231N<\223\n\205<Da\274<\253,\342\2747*\260\274\"\262\236=\207\202\n\274\014Y\246\274\332\361\317\274\343\027N:\343\361T\275\0273c\273\260*\013\275Z\320\316\275\362\220\206=A\317\034=wY\026=j\231\322;\251\314\204\275e\224P<B\235#\275\342\305-\275\022\376\214\275e\361\252=\016)\234\274\034\321[\272\2322 =\010\232\226\273\007\213\301\274k\203\272\274\341\371\242<v3&=P\330T=\306\214\313\274e\363\341<\366\320+=\365\212\036=\205I\200=KI\207=/\215\267<\0044\014=\304\217\271<9\033\001\275\021\236\250\274X[\244\275\361\211\365\274\211\366\014=;X\206=|\334\007\273\350\010t=r\014\212<\014\037\202\275t\207\271<)a\231\275\375\332\361\275d\361\370=\215\237\256\275\266\326\347:\232\235+\275\333,8=\271\2038\275\221\tJ;\364\",\2747\265\354<\002\252\372<\361\340\237<)\\+\275PB\240\275\241\303\334<\223\255\335<P\030\342\274\245im:5\253H;\322?B=\242;\266\275\322\226\211=_\264\000\275N\003)\274<\003Z\274\246\363$=r\232v\274\034\367\357\273\257**<N\375\230=\321\031(\275<\315\215\275\226\313\352\274#^\202=\2669\304\274p<\270\274\204[\350<P\331-\275cmM=\027\234\335\274\2702Q=\n\201(\275\253\232\351<\\\030X\275\272\206\336=2\314;=;\374\343\273i-\213\273g\321\227=\366\316_\275\330\350\325<\004{S\275\371\213\375<\037\3516<H\345\025\274\275a\313<7\310g;\356Q\256\274#\220\237\275\327\2518=\356\030:\275\231{\024=\277\275%={G\260\275\321$ \275\273)\301\273t\366\221\274[\2032\275?\\_\275\332PS=\337+7\274\312\341\316\275\365\325\020=\306vO\275dNI\275S5\247\275L\333\023\273m\275\032\275\3211D\275__\017=\366\367\311<\235\237*=\027\306C\274\335/O\274\274_\327\274\034\177\227\274a\371n\274W\342\362\274+\002N\274\354\037\230=s\231\310\274\266vJ<e\177(\274F\376\243<.)\201\275\026?E:%\037\332\274\\qc<R\310\264\272\257&\260\275\'\377\325;`\374?\275\226\246!=b\244X=\353\330h=\013q#\275\3548\311;\323/\t=\362e\206<\225\327c=\033\005W\275\017J(=\263\261\367;\205\0143\27570-\275k\226\035\274%\260*<\374\333.=\213\303\022=lZ^<\266\201\300\275Go$=\277\272\311\273Z2C\275\277f2\275\005\032\303:\327N\250<Ck|\274\274\237\003\276\235Y\376<0\356\373;*\014w<\206\312F\275\340\002\307=\355\266h\275<\2579\275\275y\246\275L\2406=T\371\355\273\343\255\324<{\244\315\274\351\010\210<J\026L\275\214\322F\275\254o\370<9\356`=R\253 =D[\027<`o\336<\251\342\263;\324S\244<\366\374}=\313F\274<\261\330\271=\324\275\037=\305[@=\027H)<y\206\336\274\332)\327\273M\001\355<Xv\313=lW\225=\207G\273=\315\226\023\275\212\221\210=TvT=e\032\203=\337\247\360\2742:#=R\266\366\274\003\026\237=\265\303\251;\215\262\302=S_\344\274\303 \373<\211]\217<\021\034\266;\314N.<\262\234)\275p\355O\275\204\036\250=\001\030\315\273\220\264g=\370\212:\275\271\334b;\201\036+\275\023\262\363<E\353\223\273\034\023+<8c\026\275l\010\003\275\276,\247\274\365\261\275<\270=~=\327\277\342;\304i\357<\320\376Z<W\314=\275!B\213<\0261#=\343\247\252<\032\001\022=\342\006\261\274\210\036\232\274vDJ\275\364m@\275\371\227\366\274\271K1=\314v\363\273\0219\001<\n\362\261\275\213\325\020\274mc\221\272`\277\337<\022\350I\275\023\3618=\365\3733\275\010\210\003=\251-I\275V\206O\274e\315e\275b\350\001=B\234\263\275\020\324>< @\370<\006G\320<\317M3<\210\261\371;\200\212\376\274\017\215D=\210\211\021>2\324]\275\327\323\251\274F\332x\275^W\200;]v%\275LnG=\316\360\225=\202\275\273<\006&\375\274_\361\275\274\367\234\233=i\032\001\275\013\246\334\274\243\301\324=\322a\212=:\343O\274qyY=\261\231\240\271\177\3265=\320\335#\275\235\257)=\034\264\271<\231ZZ<#\234\177<\\\'\256;\346\333D\275\343mA\274\276,~\275c\271\246<\242~\307\274<\020\254\274\207\024\177=D\333)\275\327\337 <z\0263\275\254\243|\275(_\264<\000\337\371<\253\343w=\277\266\277\274B\332\327\274w4\241\273x\236\204\273\234]\253\274jS\240<\004 \000\274H\031\013=\033\221\006=Qv\003\275\002Q\260<\257}\257\275\2624\024\275\323\251X<?\007I\275?A\217=+\221\225=F\311-\275\346\321\244\272\316\352{\275\346\0235\275\037\355Q<q\233\243=\213w\231;\362i\343\274\245\036\266<L\272\007<\254\302\324\274\177\211<\275CG\347\274L\255\201\273\205\3760\273\\~\206\275\211\215\216\275\025G\025=\032\0211\275\014<\377<\207\271\036:\322\215\231\275\t\2733=\224\207w\275\023\370E\273\271\2701<\266\303y\275T!\205\273\222\353\346<\024\021l\275\206L\311\275\365\306i<=\364\035<5\371C\275i\204\215=\375\212\274;\317\303\244\275!\001\213={\337\347<\366~9<\237\210\"<\362\211\205=\032O\203=R9\231\273a+\265\274\255l\244\2730\340n=z\320\354<\243\310`=`\322C\275\322|\355;\326V\270=\227\301=<,\245\000<\232\363n\274\214Tc\274\004\210\371\274\r\262\003=\322r\017=>\375\016\275Q|\206\274X\0328=a\210\226<\266\377&=)\303]=\265\261\016\275q*[\275\323l\217;\222\332Y<E\353\227=\240\016\321\274\002\240\243\274\361\'A\275\206(n\275\365\030.=\373\343B\275=_C=\032\265\310=\220M\032\275\200)\225\274\225\377#\274r\'\270\275\236\3705=\242pI<\010y\021\274\260u\203=\354J\331\274\333w\322\274yii<\2177x\273Dz_\275V\r\345\275\0267L\273\325w\264\274F\231\305\273\342\253X\275\373a\031\275ih\270<\026\251u\274Px#=e\004\367;\3514\032=\206;X<v\367\365\274h=!=;\307\246\274\027\264\252< \277\202<\226B\003<\210\2537\275>@\267\275\016y*\273\325\352\237=[\013\n=|j\336<b\210\330:\360\332\260\274\343\"\364<q\033\305\271ti\365=\231}(<$\210\361=\034V\n\274\014\353\233\274Ra>\273\017\353L=C6j\275\036I!\274\277\346*=\315$\200\273\364p\275:F\246N=\000\225\342;\204\336\305<}\247<=U\371\314;\237\346.=kd\212\275\234\3412\273\270\355\016\275\217oF\273G\030\200<\256Tu\274\304z\'\274*\t{\274\357\036\216\274\014d\351\274}H\350\272a\305\363:\334Ry<\225x)=\017K#\274\261\264b=\373y\212=\032<\267\274\\i\023\274\305\334\305<\343\no\275\205\264\210\274\203tk\275\333\314\331\274l\212\032\274E\037\337\274\272&\250\274\003\t\020\275M\363\246;\336\273\304\275i\372k=\2210$;\235<%\275K\263.=\2449\221\275\331}\327\275:X\210\273\370\006\257<\351C\364:\355\2705<w\322=<\263k\310\274SO\353=\336\'\313\275<h7\274\230\263\341;\273@\264<\362\030G<\365\327\245\274\272\330\263\274Z\034\235;\023\244W=C \027\275\201Q2<h\244\026;\225ca\275e\310\003\274\337\246\233\274$\200\007=\001qi\273\345\373\003\275I\250\235\275\324\323\004\274i\375\247=\345\222L\275\t__\275\300o%=\365\036\371\274\351C\231\274\220\3149=\323\177,<Zp%<\306k\274<\021\341L={\'W=M\3724=Ww\217\274\360\016\332\274\316hm\274\233\031.=E\000\230\274#dz=M`K<uUW;h\227U<\204@t\275,A\321\275`\350M=\014I-=\333E\312\273\347\223\252\273V\020b\2755\213\237\273\244\376I\2758\245\274\275>@*<\330)\312<\274\365\254<N\376\333\275F\350X\275\250k\024\275J\245\337\274\301\033\213=~g\014\275\303\333p\274y\212\362\273\327q\370<\007S\t\275\260+\245\274\241\207)=\264\'\002;\352\257(<\271\260\361\273i\372v;k\255\206\275\202zp=:>\332\274\330Z\375\274\016!\223\274/\205\266<\356\244\362\273\037\3470<\304\251\305<d\377B\275\313\206\241\274\241\363&\275\315\026C\273\274\246\350\274\213\214\305\274a\260+\274\005\364\032\275\013\2168\275\354\177\207\274Y\212\245=\221\340\270<\203x\272\274\034T\331=\267\337\334<E\354\202<S\207)=\221:r=\201\n\004\275\347\n\374:z8p<g\244\005=\035\241[\275W\215\317<\023\265\023=\177\266\232\275\254\264\000=\331\332 \275i\305,<\2645\227=|\313\226=3\354+=\237M\350\273\326\215j=T\334\335\273\005\025\266<[\221\222<\375[a\273kS?\275\004\306\\\275G\371\372\274\n\036(\275\236>\241\274+\203\343\274\352\236\246=\177m\364;\324\242\245\271\336\317\033\273\261f|\274Q\025\005\275\013\312\366\274\257\363o\275\312\216\001\275\317\345I\275\201,\344\274S\305%\275\345E\021\275\346\263U=9\346\205<Q\\S<\241/\205;\210\300 \275[\004\207;n\233%\274r\304T<\335\260\306\275_)\201<\035\211\271<K\177,\275q\016\025\272\234\026P=>\202\231:\376\324\243<L\314\307\274\037g\350\274\013\nN<\264\264g\275\277f\226<D\316\036\275w\307\002\275r\347\023<\215\335\027=\334j\253\2746}}\275sZ\236\274/}>=\314d\227<\255\307\344<\334\263\2766\311\021\370\273\270\227<<\364b\214\275\314\253\020\275E\322\313\274^C\256\275L\t\024=\276I\230=u1\245<,\370\\=b\330\031\275k\262\023\275\324\333 \276\262>6=P\031\257<\205\231H\275\203\36248J5g=\335r\006\275:}\262;T47\275i\227\266<m\300\n=$\014\025=B?\223\275\231\305\262\275\377\030\010\275\331\032P\274\364\351\371\274\333c\364<D\343=\275\260=\010=\254\343M\275Y\230\\=\310-x\272?\315?\275\376\247+\275\nR\330<3\006\004\274Y\035\014\273\262m\270<a\254\005\275\350\311\305\274\370\330y\274\307,\354\274ET4\274\334\331\332;Q\310\260\274\026I\256=\3432\260\274\022\357\273;J\332\223\275A\376h=W\252\203<\021\213\377<\375\267>\275\271xq\275>\212P=\024\201\232\274\340\271%\275\324\376\344;\350\226u=-kc\274\253\325\035={\260/=\013\274I\274\227\212i\274\000l\025\275\257?\313\274\211\243\022<\351\n\366;\304\207\262<>}h\275\217\365*\275ml \274\310\331\322\274\272W\006=L\230v=%{Q\274\327e\256\274\306m\304\274=\'\016=C\014\216\275\037@\222\2757\321\031<\017\347\377<\222\351\274\275%\273\276<\254i^\275 &.=\031\251P=\330?z<-\032\316\274\203Y\312<\t\323#\275c\355{<R\354\244\275-\375\244\274\224\326S=~\327q\274\323\226\222=\324\027\236<C\322S\275\'\241\344\274\213-\256\273\256\211U\274\335\005\265\274\324\207\251<\346\267\253=\345\311\333\271(WS=\351\346\001\275\033\326\330\273\005%g=\253\317\314\275K\203i\275\241\020\236\274\276\233\251\274!\026\374\274}HG=>\232O\275t%K=R\n&;a\300\244\275\337\343>\275+\304L=\325\247\236=\216\233\006\274\304P\213\275\244\250\275\274\335i\342=\361|\343:\237\030\243:\253\302\2479\234\013B\274ya\004<\224j\370\274\003<w=\315\232E=\250\024M<Q\235\026\275/\310\216\272\025\036\365\274\357S9\275\261\031\262\274vmG<>5\353\273&[\271<JQ\205<aL\346<\335\004\006=3-\261=\274\026P=WD\235\275H<Q\274 \310!\275(\227\030=\216\212W\275E\260\272=\365\010\021=+Rm\275I\262R=\000\007\007;5\205\240=%s\021<\'0\321=\2342\343\273!\336\246\275\337\262\213<\232~\225\275\272\375\035<\241\\^=\243\253b=\255\271E=a\267\243<\023\277\311=\343\247=\2753\026\t=\2161\200\275\300\371(=\003O%=7\340\342=\371\357\220\275\233\rt\2745.\344<\307\254\265\274\003\333\333\274p\016\033\275|q\354:\227\247h=fK\330\274\316\rR\273\teD\275\341\"<\275\346\322\016=s.\336<\313\253\324\273Bp\315\275)\332X=\034[*\275\3614\264\274|\211N\274S\020N;\'S\205\274\237\255\200\275\027\003\303=\005w\307;\372\353\262<\377\"\300<\311\273\254;\036e}\274C/\241\274;()\275D?\211<*F\006\275)\302\330\274\202\253\212\274\235<\264\274S\304\035\274*\201\313\274\310=\256=\234\267\341\274fv\261\275\262W\367;\363<\357<\270m\214\275\225\250\211\274\207\037`\271r\214\033=ki%=F\336\017\274 \347\202=\254\314\331<5\303\327<.t\223<UV.;\366`_<\256r\246\272\302\001\304<>$\224;\222(\340\275\341\355\t=\320:\367<sf[=?\363\003\275\3011a\2758Y\030=\365^\262=\"\223\036<\264\335\211<\013\2140;\021\001\014\274\013\035\265=p@|\275p\334\362\273\272\000L\275\351\344\017\275\222\366X<\2046\234\274O\322\212=\300C\203<,Ju:t\203\274\275\362\244P=\313J:\275(\250\232<#\037\334\273Rp<<\260\001\005=\004\342`9\350\327\004\275\000\226\203=\001\301J\275\251 ^\274\203\343\263\274\206\347\201=\332E\221\274x\005M\275\263\322\254\275\261\213\214\275l\355\024\274\230\204M=\312\326\200\275\351\033\r\274\262[|=\034\303\256\275s1\237<\322\243\377<\006\304\274;\017\312F<\235\0146\275gw\366<\330\266\302\273m\217K=\347\025\233=O)\302\274\253\204\263\275Y\320\333<\013? \275\362\344\014\275B\370\002\275\277\275\221=\216\362\021=\320\224\224=8#F\275\323\347\343<\330\213\277=c\237\345==^N=\355\201\201=\317\244b<\242\256~<1\231\264\274\246\033X\275\260\273\241\274\000\275\200=9M\214\274\324\323x=\254D\034\275\340\305\245\275\243\017 \2759\003D<\203\025f\275\330\374\303;\317\367\274<8\260|\275Z\301\'=0\310\277=\010\272\262\274b\031\237\274\251\364\013\275cL\245<^\211\251\275\035\2104\275X!\276=8\230\200\274\216\202@\273h@\275:\006\024[\273Z$\246=M\030>=Wg\017=\000i\200<S\227\244<\216=\030=\377\273^\275\245R\r=w\245\312<\363\233\211\274\332\352K=\0229\276\275\250p\257;\020\274\212=\310[j<kV`\275\207X\215<\024\335\000=\315k\312\275\270\252\215\274\272b\372\273V$\300\275\014\250+=\014oL<\203\275\262\274\367\233\'<C7W=B\347\002\275\234\215\224\275\333$r\274d\034\342=\345\357\335\274\302\213\r\2754t\230\274\212\303}\275\376\303\231\274\007\225U\273=\265.<\260\343\257<\366\013X\273,.\301;\204\205E;\377\352r\275\251\323!\275e\017f\274._\365\274^\204\371;\245\300\363\274m\321\037=\300AN=G\224M\273\312\216j<\244\375\026\275s\210\327;\267z\221<\036\034\213\275\356)\001<\265\340]\275o\250\361<\261\347\362=\3226\204\274J ?=\202\214\366\274 \364\004\276R\307\311<\"\202\t=\342\034\352\274\254\003\214\274\250\376K\275\025(\222\274L\035\205=B\014)=\017\035\264\275_^l\275k+\260\274\203[+=kS7=\345\365Y\274\005\220\231=\361\377\243\275r2\260\275\032/\006\275\\]\232\2738\013U\275S.\335:\273\366\254\275\006cR\275\330\201\217\275d\332z\274\0207><\253\350!<\366x\365\274\177\377\006=\027\025\237=\263mX=3m\227\274\361\352\237<R=U=/\227\203<1\211e=\036=\030\273&lZ\275\"m\323<\213CB\275\302{D\274\004\303\021=q=>=a8\033=\3762)\274\335N\004=\247\236\352;&\314\336\273L\003\010>O\307Z=Vw\211<\010\026a\275\261\333\002<x\2531;A\203d\275~9\250=\213\0245=C\320\376<<;L;\310\221\300\273\344\036U\275q\351_=0\236\234<*\277\215\275\3337\364:+t\3379AcA\275\355n\301<X)\307<\\\036B\272.)w<\"t\240\2735\026\273\275z%\014=\356X\210\275\\/\346\274o\032\266\275\247\270\224\2750\234-\275\233V\307;x2\277=+\206`\275r)\0359?\262\317\275\314\310u<9:6\272>\310\256\274\262\252\031\275\"{T=\323|\351;\350\006\213\275\017<T<\223wc\275kG\217\274\203\033\272\274S6\\\274\234M\216=\020\264\233<L6\336\274S\310\266=\241\000/=\372X\002\274\275\212)=\300{\362<\206\337\256<\203\'Z\275\311|\244\2751x4\275\252v\341\275\371\227\201;\342\375\253\274%\273\216\274\216%\351\274W\374\234\274\241\007\237=ki\321<\000\317\001=\313\220\221<\252S]=/8\250=\256\326\330\274u\033\261;\256\352D\274\232\374\366;{\243\207\275j%\203\274\027\306\261\272`\254\t\271q\201\020=\036a\217=b\267C<2!\232<\331\034\206\275Ze0\275L<\206\275\374\274\000\2756\321#=\347\346\026\274\\\344\'\275\363\246\213;\320\302\236\2741N\300\2745H\246;Ed\377;o\034\230\272`\313\227<\351\2757\275\254P\356\273\320d\213\275Ox\005>\2729Z\275E\273\271\275\342\207\025<\210x\235<\321\246\230<o>\\=l\350p<\266\006W<nf\207\275\271\004\225<8m\344<@R>=\031\021i<6\027g\275wzT\274\312O[=\303\t[\275m#\376\274\026G\276\272\362\374\033<\366\227t=\316\365\207\2735)\356\274?\363\014\274\030\226\211=y:\376<+\327\232\274P\226%=\246\272[\2742\316{\275\352a\312<\265\267\216\275ST#;\350\317R\274\364\341:<\236\245\360\274m\307\226\273\300$\203\273\337\017\235<\206\323\334\274c\266\002\275?\245\362;|\354\200\275\322q\261=\264\346\337\275x\274\356\273\365\020&\275\347>\\=\210]\013<z\376l=l\276\340<#&=\275\217\366\265<\373i\272\275\316\365n:\312\276\204\275\216%\334;\344\227\323<\272\220\023\275\007\236i\273}+\221\274\312\365\264\2748;#\275;.\250<\326\036\255\275\025\262:\273\340:m\272gS\242<974\275\215\023\007\275\374\273\362\274B\347\337<54\315<\343<\217\275\216\331\255\274\to\241<i\360\205=\322\307_\275G\214\243;\260a*=\003\306\342<=*\230=P\344\217\274\313I(\275\227,\004=\373H\277<N\327r\275\004\r\257\275\202CL<B\316\331\275\037\000\216<\252\246\214=\364\374a=\207Li\275[\250+\275\236\n\377\274\351\025j\274 ;\035\275;\256D\275\314\265\250\274<.~\274\0163\236\274\177\233;;\025&\335;\376\352\210\2759\177/<\326#\241<9\316;\275\037\016\202\275\311\217\254\275\021\312\n\275\031#,<7\277\023=\226\240\303<\232\022\267<\003|\201=\016\177\337\274<\243\254=%\361\233\272\037%\317\273\226$\266\275\000\030:\275\314G\211\274\031wR\274j\004\312\273\221\034\256\274)lz\274\364\265\372;4\240\302<\231I\226<h\314\035\275e\301\006\275\352\203\214\2740!8<T\372\270\274k\263Y\275L\235\201\274\340-Z=\r\351\2169\006\225i\275\023\305\310\273\223~\314:Y\371\002<\330\202d\273\321\301\200\274DE\201=\374\346\211=\016\354\006\274\261!\r\274[\013o=\334\342/<\177\313{<\332\262Q\275\221F:=\353\004\025=5\373\201=\266\354F<\261\347\025\275q\313\351=\207\346\244\275\353\032\330<\247dw\275\023n\217\274\002\224\222;\245\3728\275!\327*\275\272y$\275\216\0179\275g_$=(\303\344\275\245\0268<\215s\307\273\n\232\354:\361\231\312\274\241\253\220=}.8\275U`\205;\355PN=\241s!=\240g\343<\356U\314<$\2729<H\030\300<s%\226<S\016*\274\2407\226\273U\327\325\2748\234\230\274!8\356<\340M\235=B%+=q\364\374<\277kn\275Kx$=\250\245\215<\301\243\346\274\330\267\227\275\"c\006=*\325b\275!F\224;\344\"E=R\007\376<\377=4=~C\212\275Fc\004\275\274\246\010=\374\356@<5\337\327;\321\007\262\274\233E8\272}g\333\274\274\316\223\275l\276\377;\031vm=T\262\031\275\rZ\025=\331B\361<\323\321\035=(\244\200<\371\006*:r\025\016=]&D;\3364\244\275\337\316\240=\362\313\276<\303\277\000\275Q@\231\275\277\010\336;-\014\251\274\363?\317=vC\326\273W\322\003\275\215\353\357\274(\300\325<\212F\023\275\274\215\264=\303\336\346\274I\031s\275i|\255;\215\315A\274x\346`\275\343zF=\245\223\314\274bR\204=\261\005/<\357\352\237<>f_<\363,E<g\255\026\272\022B\247<\251\230f\274\277\364\210<[\214\r\275+\313*=\215\272`=\216\364\016\273\273y\341<\325\010\021=\2124\030\275\323w\026\274\223\010\215=\371\032\014\275dbP=\376\332$\275\312\031\252\275R\370\242\274R\350\013\2754\303\203\275x\2618=\330\264\351\275\272\034\356=o\010T\274\355I+=x\316\"\273\032\372\230\274\352;O\275-\235[;\265\357\230<Q\335 \273\004p9\275z<\322\274\030\317\n<\200N\014<Z9\357\2742\266t\275\346\002\336<.\340s\274u\027\036;\354\361L=\325\300\345;\374\310\360\274\351\025\325\271\210%+=v\320H\273\216\203\201<\257\247\002\275\377\217\022=\244X\235\273\247MU\275~z)=<\'Q\275\371\307\013\275(#\034=3\n\204\275\261\033\315<D\0378<*\315\230<\215\337\014\273\321^\315=\005Ng;\347\200\020\274\264\364\215\274\t\225\035\275\013/\266<\215\306\205\274l\313X\275\227\354[\275\271\245\032<\000\211y<m)\242<&\032p=\264\200\251\275U\207 ;/\334N\275\375k\005=\306N\017\273\305;}\275\322\233V\273I(\246\274[\347\021\275u)\267=Zp\207\275\224\'k\275\222l\211<\332Gu\274\017\315\304<v\256\352<Mct<\244\017c=z\320Y:\034@(\275Z$\325\275\354\252\241\274\316-9=\353\026\214\275\351\200\226<\0050\240=@k\200=\2041C\275\336\222\206\275:t\013=\302\365\256;\314p =>\0209\275\333\215\037\274\266\235\002\275e3\032=\"(\251<\266\313\357\274\333v\352<\250\227\222\275\315\3764\273\022fr\274\245\027:\275\021\010-\274\027c\253\275\360\340\230\2746\201\251=\331f\307\274 \230\237\272 \005\310;2\206\233=U?\263\274\2163\177;\341\'\225\275\320G5\2757\337c=\353V\372<\337\201G=g\323\0039\330\363\376\273\314\373\302;\355\026D=\360\320\004=\245\2258\275\027\243==\256\264W=\3544\246=3\212\354<.$9\275\345\314S\273c?\344<\310^\355\274\244\036\266\274w\303\307=Zu\346\274\022Q~=7`\327<\371\006\302\274\033\352v\274C\345p\275&l\247\274d\367\246=\036F\306=^){=\263\300\013=\206\326\200\275D\026\016=\207N\022\275\230\026\220;I\316\334\273_\343\210=\035\245r=\210\236\212\274\013:\323;j\004\362<\'%\237;D\034\233<\247r9\275\360\360\221\274\024\275\340\274\250\307\346\274\216\352s\275\"VF\275%\202H\275\311\241\021\274Z|\032<<\345\320\2740T\361\272\275\223\255<_$(\275sK\243\275\n\321\\\275\206\354\236<\342t\202\275\355(\212\274\037RR<{0>=s\351Y\274\340\026\262;^\302j=\030,\330\274$\341\236<\334S\235\275\333\347/\275\224a.\275\335\351\006=\351XY=l[\377<\030\206/=\036\367\227<\304\331\314\274\3708\013\275\243\007\034<z\346B\275\006\354\254<O\226\234=\317qx\274Od\307<\265\350d\275\205\221{=\310l`\274[\361w<\035\305\252<\300L\271\274!WJ\274\213\352 \273\231\271\306=d\354\001\275?U\367<|{\345<\366\247\257;Ux\340;\302\267\035\275\034.\224\272\242{@=\261\276,\274\221\223\226\275\363\002\252\275\204\345\227\274\243w\266\274\220\2333\274w\005,\275\3442\254\275\362\335i\275\250%\335<Dz+<%<\t\275\036\354\347;\374fH\275X\236\016\274\315\320\316\274\034\342\256\275sz\\\275Hu\317=\343\362\031\275\013\240\247=\203.\027\275<\210\\=\265\356f=\202v\213=\335Ci<\243/F\275]\'\301\274e\305\361;\026\036:\275\223\327~<k\336\201\275 o\177\275$\206`<2:1<\356\373P<\273\373\005\276\023\350\356<\3775\261<m8\022\275\221\246\332\274\t2\342\274V\207Z\275\035\234\311\273\241\352\311<\312\345\274<\313|\005\274$x\260<h\353\031\275\377\364I=\036\372\276=?H\312\274\363#\222\275jq3\275`\317\354\274\346\023\243\274\236\256\000>K\332A\275\025{?\275\255\246\016\275\341\221\323;>}\217<6\255.\273\326\250\267;\361\231\344<\345tk=\'\006|<\255\362\204\275\177\351\225\274\254\347\205=8\324=<\216\315\361\274t\036\343:dDE<Qj\013=7\371\002\275t\307\263=\301&\336:\316p\222\274\312v\021;\346\252\211<\305\207\242<jZ6\275\231z\032=\27751\275 \253\372;\010oU\275q)\357<\222&\014\274\207b\310\274\205o\006\274Vw!=\001.M<\037\200\267\274\253O\010\275<H\351\274\030p\226<\324\0217\275;\224\271\274\331\274\257\273\365\203$<S*\241=\325\366\223\275D\177o=\372 \217<\357\324/\274cQ\256\275\240\005\365\274\332\267\270=\325\307\'=\360\036*=\302\310d<\237\r\215=/\352\245\275w\232c;nW>\274|\334\273\274H\355=<\334\276F=|:n=K\250\233;DUC\275\240\032&\275\374\223x<\345\222a=8\002\261<\255\270V\274\212S`\275y\336\215;,\325d\274~?\216<\335k\273:\245T\355\275>\221\365\274s\301\003\276IT\022<\007zw\274a\217x=\334\357\347<\301_\245\273QE\326=-U_=\367\256\'=\225p\014=\034\367Y<\037\234\273=\211\017\211\275i\037g\274\356H\023=\205\027\037\272\315j\271\274\361\026\375<\034\345\206<\222\265@=\340b\222=;;\275=\251\t\225=?\206\242\275v\307\030=4\256J\274\321>@=\314%\376;n\250\354=\037\223\326\274\247\212v\274R\247\205\274\246\306\262\273#\360\265=\315\205\227=\nA\311\274\035\'\227\275\345R\234\274\363\311a=\334\321\000\275B\274^=\207\361\223=#[\253;\017M\307\274\267\207\016=\326\320\203\275\277e@<f\224\035\275\363\001\010\276\203\363\020\273\307\272\236\275\004%\250\273\205\340\240\274\2028\224;\021f\233\274\250js\275\315Z\016=\000\316\324<\244\212\336\274B2W\275\024\317\335\274\376\323i\274y\304\232=\025^\024\275\306\374\246\274\242\254Y=]ou\275\303)\005\275h\213\304<\3770n\275\361\002f\274\234\321e\274W\317\246\274\336\307\235\274V\007\224\275*:p=K\204\201=\023m\270<\265h$=\031\023?\274ga_\274g\032\"\274\370\370\217<\364^\335<\366\215\322<8\307\272=\263\335\200\274\260\222>\274\rH+\274\273R\310<)\374\361\274&\352\'=\203\304\260;f{U=\027\3757\273C\306\303\274,\352\223<\255 \227=\232z\016=<[\215=\317l\030\274\277s\257\273\273\320#\275\375\330\215\274\270\304f<wd/\275\233\205h\273*-\340\274y\001\205\274V\360\245\274\357\020\251<\376;\325\273\027\032k\275\303\026\303<C\007\235<\020E@<\032V\000\275\216\0349\275\303}\351<\374o[=\203\240{\275\374\037L=\205\332\363\274\n,\023\275\342\2155\275\240+2\2750\317\031\275\214> =\204-\220=S\241\305<\r]\014\275E\013\310\274Iti=\021D\215\2752\221\003\276/\313\305\2737\027\245\273n)-<EXL\275U\247T\275\277\365\363\275j\377\266<~\227\005\275\263\\\334<.\363\325<_\350t\275t\373\331<z\230\325\273\372\371G=(\242\334;\340\207\314<\0276\223<i\243\213\274jMc\274\250\242\220\274\213\312\214\275\004\223\321=[\263\344\2742_\220\275t\177c\275g}\215=\227\354\210<g\233\331;\232\3001=\275O\300<\353\270Y<\313\346h\275L\274\345\274\035<\036;\013\t\214=\332\315\340</\223h\2746\230\226\274\237S\361\273\"~\250\274\266\327\002=U\\ =N\332\307\274\371n\027=D-l=\002\321Q<\237&\320\274\315\257U<\212<\013<\316\211o\275\254\311\207<\361\232\263<\201\213C;I\275\006\275\304\333\250\272\313\275\352\273\223\323V<\216\205M=\375MR=Fu\277\275Yz5\275\332y\215<\365\226\004\275\254b\317<\373u\334\275\242\2017<K\264\362;>\265\34577\201\031=\301wr=\023\352P\273\266\2751=)\215B\275\310\242 \275OU\300=\034\021x\275\244\252\345\274\335\225*\275Q\321\030\275?q\272<\245J\010\275\013Yu\275p~H\275\234\3475\275\'\341e<I\227\"\275u\017\033\275\205t\324\274\256\364{=\353\214\336\273\001*\300\2737^\177=\267\252\264<Q\304\034\275\033\364\026\275n\214)\274\357\014\001=\301\310\332<\0335\254;\233\311g=D\021,\274\260\377\303\275\305\303/\275\201s(\273\200B\244<\274\363\034=\243\002\326\274\013!)<\260lb\273\202\014&\275J\325\247;\003\037D\275MU\261\273P\\X\275S\346\256\275\233z\034=\312\334\022<\341\017\206=&j\277\274\214\322\231\274\023\025\214<F\231\010\275\372\325\024\275{\351\250<\025R\301=\024\234\316\274fx\217\274\213A\001<\202#\324\271u\032\321\274\216\302~<\302\265g\275jWS=\354\321i<x\2439<\255J\311<\220|\207<\005\201j<J\000b=B\275\254\274\020\231\364<\216\330\336;\334\366\261\275\177e\327\272\36102\275\314\r4<\261\003\352\274\327\320M=\037\232\320=5\036\262\274P\2546<\320>\241;\346\342\307\272\360\002\362\274\267C\345\274\231\313&\275j\207\t=l7>\275\010\036l=\275\340u\273\320\247\361\274\353\t\026\2745\305e\275j\267&:\230\254\232\275\222\220\031:\033\371[\273!\211\375<{v\014=\325\221\206=\260\226\326\273\366j%<\205\311\003\274\257\327\301\273\375\205\310\272N\247\221<\237\2429\275\304\204\200<\321E\025==\255\026\274\017\245\322\274s\321\025\274\2308\346;c\257\t\275-\336\200<\352\3505=(*\010\2753\256\217\274\300\013\211<\000\030\313\273\026d}\273\365\231\002\275\336\261u\275\341\020f\275\350\302\027=\303D\374\274*fb=\277\351\013<\253\257{=\356\325\031=g\241\017\276\345u\306\273\204\347>\273\312\260\367<\251\326\020=\027P\214\275\344\255\212\273,s\313\274\025\242\345\274\007\311\005\275\267\010\205\274j\347\356<\353\366.<\252\360\022\275\311]\033\275\264\2034\275\325\366\227\275\214\232\217=r\327\210\275\344F\010=\373\205q\274\366\273\302\274\333\023k\275\335qw\274\305N%\275z\030^;\036\206\010=>3y\274!\375\317\273\354\274\265\275-c\322\274\n\036\223<\0314g\274\325\251x=\262\305\312<\022\273*<?%\373;\276O\347\274\261\236\210<EL\252<$\341\367\274\355S\006\275\247\377\010=\370Q\225\275>]%\275\252&\302;\267\371\270<\237\261\216=\2048\237=\265Ls<\206\245\271=7\263\017\274v\257\224=\315\201{<\302\\\206=ag\255=\273H\033\275\371\323c=\372\215\270\274\220l\367\275\t\263\246;\032T+\275N\306\024\274\231\240\317<\225\337\006\274\346\315#<\01744\275\0074\014\274G+\340<\031K\256<\263W\222=@\202\231\275B\261\362\272!\177\267\274\200i\360;\222\335^=\033\016.<\2211\344=\201hz=\257[\022<\344\020\236<\026\201\016\275a\350\371:)j\324\274\360h~=\247Oo=|\322\026=e\362t<%C|<\350f\263\273\267\245\026=\303\243\034\275\275\265\264=\234F+\273\377n\375\275j\000`\275\211\020\370<\241%\333=\273F\376\275\267\220\210=<\3744\275\210o\001=\317\343[<_\"\205\275\033\353\212<ZK\304\273d\264\231\275~\345J<BD\366\274\014\304\213<\375|\273\274\317\227\206\274\007[0\275A\026\347\274-f\206\274^\354\323<\265!\205=u\340\322<\212\237C=\345\3503=\353\273\371\274\327%\244<\003\367\246\275)\263?=\250\253\205<\303\226\265<#7a=\202j\010:\005\256g=\356\217\224\274\265\264 \275o\003m\274@D\310<\033\270\347\274M\347(\275\372\315\211;!+e=v}O=\377QP<\252\003\243\274oL\346\274P$K=\231\204\331\275\247_\\<\315\271,=CJ\211<\277\3026=.\262c\275\3432s=\316{\342<\026\352\264\274qu\371\274\265\277P=\361\033@\275\331\300\001\276\210.\242<\231\210\025\275\257\352\207=jwT\275\237\353O\275\356\377\n\275\212`\254\274\226\352\271\275\337h\306\275\305\213y=\001\224\212\2753u\251\274\373h\205\274\331\367?\275\\\215E;{\237\013\275\353\332\017\274\2568\312<\264\271\'\275\230\224\252<\000\003\010\274\022g\241\274\324\232\017=\234\351\'\275g\350T\272A\022\254<\330\322\217\275\256n\'=d\224\355<\312\357\215\275oC\374\274$6\"=@\020b\273<\351\247<\305\237\013=f\240 =\324d\326;\031\317\207\275\026\225\326\274-\243&= \265A=\271\303\275<J\333\335\274\314\212\000\273V\262-=W\353\266<JB\256\274F\220c<r\242\264\275H\362H\275\nE\036;\220\270g;\210\213\233<\2511\033<\350\374\346\274\241\204\023=\037\213#<\222p\233\274\376\260}=\204\323\315\274B\310\266\275\200J?\275?\002j\275\030\213\013\275\307\243\322\275|\344\301=\307,\357=\033\363\260\275&\256,=J\304\355<\3438\307\273\027\316\351<\223\350\325\275\211\201F=\273\307\211;\343g\310<\224\237Q\275\240\373<<\004\314\364\274Z\377r\275\365q\222;:\334\206\275\342^\270\274A\225\034<\334\310J=\347\231`\275\201\252%=\317\270n\275\264\220E=v\214H<\353\253\330\274\217\036\227\275h+\374\273\250\350K\275\205\020J\275\235\346:\275\225)\330\273\323\234\201\274\375:\217\275\2701\273\273\315\253\241<\314\001\036\274\333h\024=`\005\207\275\247\311\001\275\240\007\250=\372_\200\274\230\n\237\274e\372<\275,\371(=rJ<\275=%\267\274\342&\001\275\253Y\262\274\326\275p\275\033~\370\274\274\t\004\275\315\036\033=\267\231\236\275\320H\177=?\253\313\275\223N\341\274V\200}\272~2\330\273\267F@\275\307\200\277\275e.h=b\004m\274/\330\343\275P<\356;\224\3022=c\322\256\273\343\3364\275\354\237y=\216;\235=\n,\201\275\010\020\360;\350\221\256<{\216\341<\356\000\245\274\352_\030<so\276\274/P\251<\252\200w<\330%U<\360\036I\273\300^\375\274\002H\374<w\027\231\274\226\363\200\274\217U?=\004\215@<\376Tb\275\227\304\330<\325gb=\261\367[\275\367E\201=\307\371\002\275@r\244<\351Y\001=\342\307\273<\010\264\210\275\340\311\320\274\t\224\373<3\344\025<\273\265\200\275\264 \236<\205(-=\304\010Y=\207\352i=\270\032\013\274\034\222\207\273!\216l:I\325\226=fo\227\275\360\037\323\272_K2=\357%(;\003\250O\2733kM=\243\325W\274\376\r\n;Y\236\225\275j\027Y\274\324_\206\274+H\341;\325\355\250=oO\273<\274f\305\274\220\347\177;\224\273B\274\233\022\226\275^#\030=\214\177\"=\tu\270<\234J\251\275\275\211\226<\357\343g\274Ak\232\274|\245\317\2730\217\214=\345A%\275\006E\001\274\021/3=\002\313\353\274\2078\352\274\301\3767\275g\307\3378\216\031\023\274a\247\202;\230\322\210\275\265\262 \274\214\213\177\275\001<\212\275%<\004=c6\n=\321\032(\275\200\201\277\274\177\2620=5\366C\275\277\rR=\215\334%\275\2168\'=\252\3462=\310\021E=\313B\374\2736}2\275~{\261\275wK/\275E\037\337\273d\037\001\2757s^<q#\021=X|\374;@\003\223\273\347\312\026\274\343\366\001<n\262\360\271\354\260[\275\'\022N\275S\211\322<\354\330\202\273\202\256z=\004\'\017\275\337\301\200\275\365\366\027>i\234\200\275\225pb\274;\363/\274~:-\275\001\257G=\206\267e=\350}`=\310l\231;\277\032\267\274m\235\032=&\372\210<m>S=q\025\"=\347\263?=MK\002=\305\\\031\275\304o\014=\304\340\201;d+b<h\333+=@\000\017\274e\274)\274\201YT=\317_\366\274\3726T\275\236\255\031=\334\256C<i\236\233\274\271G\002\275 \234<=\000\035\002=K\211\210:(\202\212\275%1\370\273i\240\r\2757\250\022\275C_\010\275}\001a;\005y\251<\312\202m\274\245\205\000<-\272J=\327B?\274\033\206\323\275E\242\234\274\336\352\273\272\355\301\206\273\032\221\210;n\023\271\275?\222d\275F=y\273\"\241\277:\377q\310=v\340\216<\005\201H=\366\353\000=\373\334\201\275\236\237\033\275\341\253\345\273\020\'\214\274\244\025\r=\316\037U<\246\342\024=\tdJ<\031\267\231=\325OH\273\253\0059\275\251\253\035=\021\211\355;W\211n\273N.V<\264fY=\344=)\275\311c\r\275\360\227\365<W\240\021;vuX=\350\251\\\275bW\271=\325\333\022=\004 6\274\352\007\215<G\312E<\337\275q;\017\305\304\274^c\030<5\347\270;\372,\\\272!^(<\312\332\321<\216\367\212\275\206\177\001=\306\215\361<&\020\326\274|q2\274O\201\353\274\316\357\003\274k?\252<w\212\003=k\3563\275\275_p\274\026\362\366\274>\025Z<\312\215\344<^[\202=\314\035i\275m\352\353\2758\204\371<\234\215\255\274\nY\230\275\373\361\276\274\2454v=\263F\217\275N\264\032=h\310\272\274o\272\210\275\340\224>\272\006)\247<ty\265<dH\t=\036\003\260;\216\n\250\274L\241\314<_:\312\275\014\315\303;\037\224\260\275\007\177\000=\243\217C\275Pe4\274\013\301\374\274c\\X<\317w.=?O\003<z~\363\271\301\334\223\274\005\005\304\274\323+x=\024;\t\274\025l]<\303\030;\275\266\035\255\274\327\037\330<1\256\233\274c.\007=~\214\303\274\371\352%=\336\241\263;\337}\221=\361}\222\274?\022\300<\013Ho=\225\206[\275\3220y=\n\"\035=\321p\265=\035im<?\341v=\336\227\037\274\213[\324<\232\342\035=Wm\013\275\t\225\023\275\244\342\371\274I\014$=J,\331\274L\234\236=\254\035\016=\nX\343=\307\227\367\273\371\333\331\274\342\330\020=x\356\234<\361\315\005=$\217\\=\213|\314<1c\177\275\220\231.\275\243\315g=\275\037\363\273\210\325\250=\377V\000\275\251\\\235<\3707\225\275\377\370\003\275\332~\216\274\233\032\005<\370\211\036\275\036D\262<9\207=\275`\256\313\274\263\250r=X5\004\275\272\314\341=S\354d;\252\221\204=-]v\2745F\000=\262}\307<\250\016\200\275\364\272\240=\3161\344<I\247\216\275\">>=\254\017\356; \353 =\327\\\336<n\314\021=\212\273\276\275\225P=<\303\351\033\274\242mn=B:t=m+2=\225\313\202\275pV^\275+\257\242=\246\222w=\245MV\274\205\006\326\274@E\300\274[~\244\273Plq=O}\201\275\373\223\363<\326Y1=\277\013\020=\271\255\372=\234\"\210\275\356\261\204\275@9\206=\026\024\215\275H\240x\275\321\325\203=\007\267\277\275\320\360\256\274a;c=\343l\343<7\246,=\'\365x\2758~R=\262&]<y\260k=\265\354\325<\005U\237\275\013\323Q=1\202\301\272\213\303\311\273\211\226\331<\001M\025<[*\013\274\245\256\217\274\222;\322<3\021#\274Jb\022=\324\026\202=\316JS=C0\033\2758\013\220=-\027|=W\036G=]\227\324\273u\313x=\014\205\351\273\035\356%\274P\274\t>\244j\364\274\345\370\352<\302y\221<g%T=@\211n\275\332\244L\275\221\314\014=\225\314\226=\234^\306\273\221\370\250\275C\363\221<\360\303\253=yW\356<\345\227\212;@\243\020\275I<\200=\'8!\275\234\322\235\274^\223\224\275\207\224\217\273\251\031\217=D\205j\274\316\270-=)O>\275\020\337\214\275\356\267\022<M\t\233<;\005\024=\275\020\372;\240\264]=\305K\204<\260pD=\211Q3\275\"\252\202=\266j\312\274\275\006\246=\251\362+\275\246k\251\275\2244\315\275\240\341\354\274\205\023s<\334D\032;\025\263.\275i\365H=\341Ds<\301\216\221\275]\334\037\275hX\021\274\n\024\221<\244aY=\205\'\307<j\353\331\275\224\035\347<1H\223<\357P\025=c\304(\275N\226\225<I\207\232\274\332\366\006=\001T\030\272\027\255\311:|\020\025\275\2632\340\274\242/l\275kCx\272\001\326\322;m|Q=9\205\264\273XD\272\274Ob>\275\372\301B\275\006\373:<\266\025U=$Q\335<\244\033I<\2660\354\274\265/\030\275\374\313\240=v\001o\275m\242\265\275\335\312\271=\330\243\264<\2021o\275x+\020=\376S\211=C\230T\274M\237\306\274\323>`;\334V\204\273\032n\330\273\237\342~;n\234\030<\021\3348\274\337Yt=\273\360\237=\037\210\235\275v\251\342\273\324O\024\275s\353\226=X\274\215=\353\005\270;/\023\032\274\222\350\363\274/N\037\275\023\330t\273\223\221\327<\216\305\300=\3020I\275\004\330\202=\274\321\254<\231R\023=\371j\"\275\205\376G<m\020\320<\013\253\320\274\010\377\177\275\265\302)=\023#\260\274\274\254\344\274\257Z^<6#M\275\2171|=\202\022\276\275sq\360\274=\211\031=\202O/=D\003\266\274\255{\301=]_\343\273\376\365\255<\333^\307\274\341%X=\267\243\246\275X\312z<HM\371\274t>!=M3.;[\347\220\275\211\201\346<\206L\010\275L\256p<\303\304_<\\^\275<\200\340*\272\250\261\343;\025o\325;\016\373\234\275*\230V\275\204\202C=\004\306\206\274\222u\244\274i\305\030\275\345\263\360<\241I\240\274\310\256\237=O\204\325\274x:r=\312\250\036\274\260\'\225=j\304\356\272|\346K<w\"\232\2747\322M\275\031\007\307\2740\372\346\2748~@=A\364\t<\360\206\276;S\263d<\234\330P\274u\365\r\275\010/\204<\221oN\275\225i\220\274F?\211<\006wz;\323\0365\274^]\311\273\234^\366:k\360\374<[<\001\275\nV\224\273VE\250\274\350\224\230<2\224\202\274\225\203\010=\363\314\361\272\324\227\252\2749p\347\2741\266\r=$4\264<\006\351\016\274\355\275\204=\347\025G=\251\347\265<S\274\n\275\037\242\270\275\201\253\'<\017\353%\275\201A\317\272ujI<\3741\230\274\3657\032=m8\007=\272\341$=\317\344\017<\365\331\217\275\263\212#=O&\255\275\267l\026\275\324\261\n\276\005>S<\351}\277\274\261\202&<\205P\020\275<.\033\274\242ta=\305\225\225\273 \241P\275\353t\225\274\313$\036\275]\353\021\275\230\\\221=-T\321=\3359\227\273[c#=\345\235\316<CO\240\275\205\272?<\000\306\277\273\t\361\200=\225\245#\274\353&]<\035\270\327\273\237F$\275\204\210\373<\323\375\022=\232\232?\273\207\272\344<\002zo=1uh=%\323\206:\216-\346:7\336\005=\237\346\371\273`\033\225\274\246\374\216=\266\276\277\274\273\207r\274\207F\252;\004\312\223\274\205\232g=\333\206\327\274y\235\255;\204z\230\275\353\031\203\275\203{\316=\323\222\226<6O\231<2\354M=\202\364\352\274d `<\3408\265\274\210\355\302\274~>\216\275,L\372\274\"qG;\332\277 \275\014\2548;\326\255\237=u\315W\275\336H\236=\376\367D\275P\222\030\275m\017\220\273\226^\323\274\340F\024\275y\206!\275\006\306\216\275\207\302\340\275jR\372\273\003\363\035<Z\316 \274&[*=4\211\262;\260EP=c\r\301<\351\216{<\014f\037\275Vpn\275\316p\004\275F\351\030\275\024\251\352<\211hY\275:;\343<\310L\211:\027l\207=<\2140;q\014\027\274\357\304\025\275>\001\244\274B\227\256\274\277\330\303\274\356\255f=83K\275.\350F\275\234[\335<\357 \006<\002\013f\272\3536\016\274\322^\324<r,\242\275\264\244\363\274\243\027\000>F\320\311\274\341KS<\"B\002<\222\371M=\213\027\003\274\262\204\207\275!\177\r\275\313\372)\274\254\021\364\275\311nW=G<\r\273\352\330\205\275+\340P<:U\323=\201[\202\273\240/\224\275\272\310\177\273w\3716\275\311\330X\275\317\367\224=\322(\206=\255\237\n\275\005\373\232<\237\'\033\274I\247I\274\\\204\333<2#\246<\212\262b=#\343\201<\332\301\316;\313v\212=@\305\014=\372g\244=I\216\010;\373\332;<\232H\355\273\367\327\027\275F]\345\274\232\263\235\275\275c\372<Uu\232\273\244a9=\350\361\207<F\325\240<O\216\321<.&@=\364L\230\274<\021>=\025\253\332\273:\013\220\275\326\340\347;I\256\033\273g#\036\275\r\3269\275\"\216\373\274\364|\317\274{$\305<\256\320E=,\210\037=\246\277\265\274\274\360\207=\216y\372=n\200\215=\026(\177\273\276\330h\274\346~\221<\255x\211\273\332\260\321\274\375\205\017\275 \272\t=4\303\204=\361J!\275\247U\003=\342\202\226:\022T)\273v\025\202\275\335\rq<\240\321\265=X\347\027\275H\303\026\2759\267\034\274V`\215\273x\342\375\274\235\365y=b\030\342<\376\023\251:\236IC\273\201\002/<%\334\372<\t\253\240<,\254\204=XE\214\275J\211\210\274&\023\345<R\362\226=\244\0367\275\366\003\'<\274\231\016\275\201\266\224=\362\032\212\275<\341h=.\336X<UCl=i\365\253\274\202\374\002=\364y\032<;\006\337\274\217`d\275\323q\322;^\227\230\274\377CM\275\'<N=6\327R<<5;\273>\003\007=\325\001\216\274Q\032\375<\177\022\313<\3223\356<\024\365\273\273\010c\212<\343\261N=\371f\014<\323r-\275\2406\r\275\350\220\201=\004\356\034<(\t\206\274\000@\002=\366S\241<\206\347\013\275\254\2301=\017#\357\273s\203+=\363+\200=n\226A\274\321u\324\274F\371\227=\210P\266\274`a3<\372\007\034<\371\255\233\274-\210S<\016A\324\2742\363,=\327r\243<\205\360g<\243\240\212\274*V\270=\251\007l;\341\306\032=\363M\300\274\\`]<\033\315~=\331\373\260\2734T[\274,\206^\275\320\033\201=\203\357e\275a\326#\275\t\363\222<\376\321\"\275\'\363T\275f\021{=2\244\233<\236$\333\273\351V\337<\352\273\242\274\004\264\003\275>\375J=\223\321h\274\027\340j<\ns\343\274)\245\344<\356\326\006;N\006A;P\r3=\252-\221\275\':\346<\'\251\361\274R\347\326<\017\274o\274\013\032\301\275Moh<\260\025\271;\010\236!\275\243\271m<\227(=\274\241\270\262=\242\274V\275)\010\016=O\240\243=\331\024\302\274\252\372b\275vz\277<\327\242\323\2744\306\323<\246h9=\341`U\274\250D:=\303\217\030\276s\212H=EO\366<A\334\013\275R\357\332<\327\322X\275u\213J=?\364\023=O\342\313<\344\276\200=6\353\223=s\342(\275\022*\010=wS<=H\256\014=$&`\275.\000\300;\364\363K<I\013\321=\371\202 =\267\304\314\275G5\032\274\332\n1=c\314\216\275B\360\323<zS\272\273)\352g\274Mv4<~g\277\274\234\314L=\243d\'<\213\304u<\tR\032\275\204\245\233<bh\000\275\"\025\217\275\017\3444={D\265<[\212\231;p\334\261=g\217;<h\277\234=R{\233=\215^\212=)\215C=D\002O<9\037{=\271RA=\341\2724:\371\273p\275\201\366\227<\006\224\017\275Z\003\212=\347\344 <\tA\214<=V\221\272=@\242\274\233[\373<\370H7=\0249\214\275E\030=\274\341^\213<\244\337\200\275{}\363\275\305Rx<\357=\331:\005\246\237<\252\223\\<\245\177\263\274\026cx=XC\225<\210U\\=%\022~=\336h\377<\207\326f\275bV\264<\370\025]\275\374\232\252<\240\246l<!v\337<fL\212\275\371\2378\275\252\371\306\272\264B\266;\317\277o=\034\2275\273C\250\n\274Kp0=\253\341\005\275\010(\353\274\302\254T:\000\272H=\r}\024\275:\304\270<\006\202\177\275\027\t\355<\201\312\254<\242\342(=\312\001\032\275,\327V\274\026.\241\275u\213\033\275\270\343\335\274\237E\014<99\204\275\374\231h<B\354M\274\301\226[=\243\220\367=\032,\234\274s\217\353\274\204;P\275W\270?\274rMB=\314s\211=1\363\370<D\316_<U\010\223=\263\253?\275\235\202M\275\372_\t\275\025\370\002=j*\026<g\n\313<\335\231\357<\326\001\356<\233\310\312;\016-a=8\266H=5\216\373;(O\t=\305\371.\275\361iB<>`\272\273\335\016;=\360i\260;=&\362<\336\331\210\275\364\337\246\274\350OP\273\272\207\242<\033\233!=&\237\267\275\r\312!\275\326\222\363\275\031\353\330;wQ\276\274tC\005\275T\322\277=y\351n=\303w-\275\200\276\233\275\025\001\363<\264\251\220=$\276`=Y\272\330\274@\300\316<\2131\n=\235@\273\273$\2023=\021B\334\275c\314/\271\013\3769=z\304\216\274\030\227|=o\373\247\273/\2235\275Ym\371<\206[5\275{\252\317<\007\017\331=\242y\316\274\177\\r\275\346\365\236=\007M7\275\332\306\204\275k9Q\274\025\217\315\274@\252\236\275\030\242\375\274I\257U<\210\251\014\275-\333\312\272\276U\305:|5\026=N\237\212=\337\366\005<\377\346\325=\026\035\014<N\'\022\274\240\256)<\022#\371\274\362\235\"=L\374\020=\307r\014=\241m\341<\257\002\303<VK\215\275l\261\274;#\341\267\275\365\350\376\274Q\232\2779\353\034_\272q\037\241\275~\362\204=]\027\032\271D\036\376<\370Fj\274\224\337\377\274\211\301\251=BB\261\275\233\205\235=\213\273\252;T\300X=\033J\344\273\246\335\251;\212\016\"=\247\374g\275.\236>\275~j\233;\275\034[;\257\306\271\274\2254\233\275y\030\355<L\222\321<\004l\267:\364T\271<\212\r\r<\356%\351\274\027,d=O6\002\276\333\\\025=\347\371\356\274\371\373\316<l\207\010\275\273\010m;\030\223\270\275H\304\333\274<M\013\275\303\2559=\215\331\300;\262\365n\275\273\232/=g1v\274;\335\322<N*\227;d\325\204\275\330\320\203=^\333\030=n\270W<\323\323\262<cWg\275\245\205\343\274\242P\362<##\225\2745\341\205\2759o\343\274\036\203:=\245\337\033=\020\020\210=e\342\226<pL\223\274\3059\354\273\352OR=\3032\270\275\2337]\274\234\006\265\273\200nH=\366z\355<\301\033L\273\014/\376\271\227\345~=\030mA\275\344\026\243<\230\024V=\325\224\022\275n\221>\275\247\226(\275DZ\227<\020\316\022\275\325\252\274\274\306r\203<\"r[=\027\320x\275R\035\003=~<>=X&#\275\205O\203\275Z\202s\275\320]\362<\037\337c\274\257Y\326={]\267\273\010t\356:~\020\212\275\026.\255<\220\277\273\272q\247\014:\370\220\322\273\245\264\024=\351dg<Z\245\022=;\255L=\257\010S\2750a\013=\366i\227<.\323\343=\301\330\270\275\014h*=\353~0=\233qP\272\037\304\273\274\235\020\247<c\214\317;\314\264\031<\200\0253\274\371\301I<JJ\272\274\243\177e<I3\206\274^kA=~dr\275\312\345h\275M\374\264\275\374\220\327\274\177#\257\275*j`\274\360Mc\275\336\213\300\274H\265f<\202\023y=\305\027\275:\311?\224\274\'\241 \275j#\230\274$\352O\275\206\032\003\276\260\370\337<X\221\006=u\0314<\314\023D\275\017\276:<#\364\212\274\201\251W\2757N\321<\014Y\236\275_\001\000=\035GH\275\360\031\260\274b,\254\274@\224\030=\314\203_=h}:\275\214T\263<\313\232\261\275\321\267\236\275\255\030L<j\301\313;\2570\254\275c\020\361\274\360\312l\271\035\211\242\2744!\n\274~\333\365<{N\275\274\227\'\017\275b6I\274\374^\206\274\016\267\275\274\210\236\323\273qL\\\275Y\345\332\274\r>\264\273\t\214\202\274\223\241y=\274&\r=\3003\354\274\316a\216=\023>\202\274>8\271\275\236\317^\275\t\311\273\274\201\335\246\275\310\037\n\276\315\347H=\316\323>\275\320\262\344;\201\371_\275\243o\223\274\362\361!\275\264]5\275\000a\203;\204\333\344\273\336_\235\274\017\221\026=|i\2229\357\277a=\241g\260\274\264\370\207<+.j\275\264\314];\343\036\242=cL%\273\330!\260<m\030h\274\342\241\002\275G\204a\275\255\035\321<\206\233>\273\214$\021\275\213\256A={\344\317<\333\263\222<\346\302\332<0\217$=f#c<QP{\274\365\356\275=T\326\267=\'\260\205\275\204\371&\274\330\224\273\275\312\266\272=t\311\022\275KU\244=+[\200<\305\220\213\273(\232\007\274\275\275\224<\350?\350<\313\207\027<\275w\267<\005q\214\274\310\371\n=Ed\221\274\346;\'\275\203Y\373\274\334\265z\274\004\377\206=R<Z\275\302\346Q\275\234\260\213=^\027K\274\335#\321<\260\362\355\274Zn\200<\214\206\351<\227\2541\275w\316\224=\322 \254<\360\326\020\275t\255\261\275\230\200r=*\272\233=\016h\223\271\361\034\243<\276\374\376<\t\365\303\274\201T\255=\241S\306<\254\001\354\274\031\3761<\366\205\021=\350\3770<(\"#\275\\\013b<\302\372\257=F\373\243=n\247\014\275\200\251\007\275>\251V=Vj\233\275\356\216\260\274\221\305T\275\360\247]<\007\305{\275\331JJ\275\310\214\254=\201-C\273\300\375\230<*\0053=\tn\217\275ME\224<N\022\262\274G,\014\274q\254\304\275\220\224\200\275\357\320\271\274E\304a\270\301\177\315\275(\320\241=R/\000=\315\254\377<h\340\270=\264%\021<O~\265<\376\255B<\025C\030=\265\353\304\275f@\302\274\331Yo=\361\332\256\275lo\023;\313t\215=\321Pf<\206:\032=<\021\330\274S)\010<\272\251a\272\365\264\221<\305D\255\274\013\355T\2757\016\023=1\364\025\275\035\353\025\273Wx\262<\325\322`\2750\222]\274\306\352+<\215\t\374;\342S.=R\244\267\274@\336\275\273\372\320\007=\337\002D\274}\337\216<\007\252i<\263\177\004\275I]\357<\270\204Z\275\026\331\014\275\323s\372<\251${\274\264\031f\275 \005\255<Fa\236\275\314\310\256\273\350\032\356<lv\252;\214M\024\275\351!\246\274\203\006\362<?)\376<\334\344^\275=\034\345\274\030v\206\273\216\224C<d\270\276<\t\233\247<\003\3143=\275K\232;3p\205\275\'\340\204\275\253\223\364\274a\232+<\200\003\340\273\214\3453=\255\002\016=\243|\267\275\020\365\325=G&\200\273\036\265q\275\333\350\225\274X\356\204\275\375r\005<\223v\352;S4\225\274l\022\215=NvM=M\247\206\275pn\313\273M\005v\274\037\341D\274\253\353\007<\222|\033\275G\300\260=P|*=\026~U=\"g\177=\376cA=\325\037i\275%^\257</\264\'\274olZ\275[M\226=T\335\026\275Gj\003=?\"J=5\370\333=t\312&=\031\300\226=\204\305@:yA\315<\274\213\361<\230~\022\274W!\250=|O\354\274\373\r\216=q^\367<\330\250\243\275\002\276\245\274\211\246\"<\005\177\"=\232\353\230\275\326\336Z\274\320\354\020\275\033\0211\274=\014L\275\205\201\210\274\212\251><\207\355\223=\021\020\376<\346\220\265\274\364\013L=\301\237\263\274\357\322\317<\232Nq=\242\366L\274\025\2353\274k\317T\275\370\275o\275\276a\321\274$\256\265\273\222\333\016\274\377\001\r\275\177AM\275\"\264d<\351M+\275\302\036\022\275\335\377\241:b\207\340\274x\366k<\216V\335:!\347\033<\2334\241<\331\272N=^\324\223<\014\273\333;QX6:\236\250\310\272\355\017\233<\363\305\3268,\372\345\273\260\335S=\375\314\005<7|\250\274\211\n\'\274\t\217\222;\3508B=Imq\274\225\203m\273M\245y=\211\027N<\303\211\273\274\2709h=\247;_\275\305f\242\274\244\342\017\275\022\343T\275\201E\221\274s\353 =8A?\275.\216\377\273\367\337\341<o\262\031\273\246(k=\343\352\205;\271^\375<\220@\004\273Z\001\245<J$\n=\216S\000=HG\303\275U\337\010<\314\022\206\275;\007\241\272<\372#\275\257C7<\226\262p\275\251\251\013<\377\243s<]*\204\275\021\000\226<\005`2\274+\301\335<\221\220c=\220\362\366\274\006\212{<<\223s=\372R\257\275\237\331h\275w\304J=w\004\220\274\023\034\263=4\370\210\274\311@G\275\001\331\001\276\201d\021\274\216\213\256\2757l\210<]L#=i\271r\275\311x#\275\206.(=\201\032\222=t7\301\2743z\342\274\274\221\353\274\272\316\244=P\365Z=\325\371\254\275\252\003Q=\036\342\226\275\274\021\037=\247\200\335<\254\304\262\275\337R\207<1\023\231\274(!\201\275R\266\016\275[\300:=\256\016\311<\030GY\275F\334w\274o~\322=>\272\361\274\374\343%\275\202\373\204=w~\252\273e6\305<L\024\217\275\303\303?\274\253~\302<c\266\007\275\266p>=L4\302\273\220\3175\273eFu=*\034\332<\332\345W=bm\224\275\264;\273<\024\216Z:\233\033\304\274W\tM=G\000\026<\211\034\034\2756\323+\275T\002\276\274~\346\224=o\330\330\273\267\232E<C\030\n\275NH\240\275\037\277.=\244\3674\275}D\r<\352\304\302<Q\227\222<\006d\253=k\016\271\275\351b\t=\004LG<s\273&:\036\023O=\023\034\035\273\343!\016=\354+\266\273q\035\306<\314s\031\274\320T$<T_\035=\016\033\213\275m[C<\311&\222<cxG\274\313U\246\274\352\315E\275\341\327-<\327\005\020\275\347\270v=\033\335\327<\273\343\\\275\310$4=\265\377/=\245G\317<\004\332\324\274\200@K\275\364L\027=\234~i=\306\336\373\274\273\333\005=n\021J;\014 5\275K\023\203<T\331\t<*j\211\274\204z3=\230\333_\273@\344\377;[\244{=5\306\017\274\021\276.;\002R\365\274\032\033\013\275\031Aa\275\020\003\222\274\t\2330<\316\250\207;\223\244\325\274\325\277\354<\005\300\202=\236\241\317=u\205\273;w\027\004<\036,\341<\366^h\275?\275u=U\351J<\205\225\\=\272\243t\267\004-\260\275\307J\220=\212v\332\274\375\252\271\2742\245(\274p\336\350=\346<\215\273\323_\314\274\251v\356<V\217}=\214\241\243=\235\342\001\274r)\254<0\315\372<\250W\210\275\205A\340<\327\265\242\275h\347\'\275\236\213C=\026\373\037\275\034Q\205\275,\323\230\273[\322B<\350\017a\275\260\307\252=\256T\252<\266\270\014\275\346\014\244<\235`\003=Ei\021<\262N\212=Xv:\2744\007\203=\271D[\275\002\022\212;\345h<\275Kf%=}|\031<\233\263\321<V\016\332<\366m\270\274\317\207l\274~\306==\207VT<\023VX=\016\326G<\300\005\261\274\271m.=K\344\320\274\333\252\202<\214sF=\224[\321\275\200\271\207\274\026\235\260\275\001$\030\274\\DA=\361\266_\274,\016\317<\370j\361\274Z\227\232\274\351\337{\274\223\223\004=\366\226\222<\334\000\\=.H\000;D\365\325\273\247o\206\273q\241g=v]\367\275Ed\025\275\016\376\214=\200\211\003\275\230\310\266\274|\337\225\274<\362\007\272! \276=_0\234<f+\201\273\252\274\020=\035*\231\273\337u+<\027\305\315<\364\371\264\274\214K\306\275\213\372w\275\\g%\2752s =\265\027\320\274\204\275R<^\t\033\273\324=V<Q*\342\273(2\225=a\320\245<\235\320A\273\213\274\244\275\225\240\375\273S4\026\275\347\ro=!\207!=\241pD={]\325\274\267\355\223<?\to\272BN$\275\374\231\004\275\301\257\003;\254-\305\272\003\301\271\273\0358Y\273\024\357\204\274\344\000\217;\'\026\236\275\222\267\331<JS\003=\307\237\037=@\346D\275X\013o\275\2572\320\274\005\265)=\341\013\325<\324\307V=:\275\272\274\275i?=\252\\q\274i\177\232\274\206)%=\325B>\273\017\266\301<`-\031\2758\313\314\274>\247x\275\323\032\277\275\343\205\226:\363d\013\276q#\336\274R\203\n=].\223\274\177Er=L\240\220=4\316\212<\267\366\014\272]\306\234\273\312\303\232=c1\017\275\246\275T<\206\243\013\274+\010\204\274\027\345\013<&\254o<X\352\257<*\331\213\272\236\242\006>~\036\301\275\327\271\372\273\367\332\200=\277Z\037:*\223R\273\237\330\210=x\325\243\274\203\236m\274\006e\317\274\221\240r=\374\216;=1<\027\275\363j\235<\355\371\206\273\243\007\257<\030dh\274c\215\210\275\311\253\223=\202f\236\2747\353\256</lK\273\203:\324<\260\212\202=\364\362\220\275n\271\005=\300=\322\274\333M!\275\024Km=\021\366\230<?\274\274\273\270\227%=K\177m\275A\010\220=Su\255<_fe\275t\367\201<4\343\274\274\200]\017\274\240\343\230;\263\255\232\275\231\353\270<\021\333(\275\026)\215;\244\177\331\275\332\371\212=\321\250\321;,d\262\273Cy\272;P2)=\t\362\034=\213\306\262<\343\256\\\275\031\r\204=\246\244\234\275m\nu\274<\270\325;m\231\002\275Ly\254=\032\371\017=\313\323\031\275\202\030\214=tL\367\2748\310\335\274\230xN=[\373\020>\234\353\216\274#\020\226<\'\'N<F\307\270:\342~@=\315\005\270=B\261\t=\001D\212=\337\262\222<y%3=J\324f;\211\271P\275\254P\237\275\226VE=\244\273\203=b\026\343:)n\246\275\372/.\274\245\243\230\273oi\';\352\240&=\310jW\275\335\323`\274\025O\301\274V\257k<\370#z\275\n\021]\275b\350U\274\324#\371<\241\371\021=\205\227U\273\240\206-=\203\235!=\236\017u\274\2125\346;%}p<&\303\251=+\370Q=\256\312\273:;\250y\272\032{\375\275\326\354#=\227Eb\275\236\003\320<\345\003\r=\242T\245<I\245\004\275^x\234=\337\305\305\274]_)\274\014\314\006=\243H\312<\344\232\331<#\200\000\275\223\324\250<\307\254\364\272\232\036\300<\206\323U=\307\356\211\275l\272\320\273M %=z\347\344\275{\334-\275\317\036\007\275\210\335>=U<\376<\032\374y\275\305\024]=i6)\275\252\253\333\2742\255$=\202\274\363\2758\234\352\273\331\'@<\005\272\n;\315\"M<3\302\344\274E\232\017\2753\365\372\272\352\211\240\273\\z\257<\234\275\264\275l\332\265\274\026\325\177=\323+\206<\323&_\275\013;s\274c\215V\275\247\326a\275\3568\252;\211\265\240<e]5;\274\331\264\275j!\272<\204\250\027=7\3075<\211f\n\275\206\216\200<\320\323\306\274\324\321J\275\320\367\222\275\316M>=\033I\307\273 \222\306=Yv\003\275vlO<\231\006\'\275R\235\252=I\372\030\274\032:\005\274\375\250\216=\217\243\017\274\235\3303\275\032\371U<\263KH=\3764,\275\354\223\034\275D\265T\273\214\331\307\272d\277\372;\366J>\274Cl0\274\3005\032\275\247\305D\275\353Y\372;\001\252\240=\272\314<<\317G\003>\365\321\266\275\302A\222<\\\204%=L\030\\\275\2324,\275\372\221_\274\2251\264\274\232\006y\275\373\314E\275}\360\224\275\026\017\371\274\212`\213=\'\337\264\273d\322\245\274X\313O=\225u\214=\373|,=m@\230\275\366\324w8!\224\204\275\304Y\001\275\243\255s=\233A\'=\311\014\n;\364\260==\310M\264<\347\262\241=tZ\021<\303\007J\274@Y\034=\303\225\300;F\235\202=\003\000*=\362N\001\275\023\020\031\274\000\352:\272i\376\224<x\356\000=\2016\236<\0036,\275#]\260\272(\216\346<\231\331\251<\276\363\314\274\t\002\352=\3671M\274\340\327\213\274\310\006o=,;X;\010E=\275hwM;\265\330K=\363\322z\2751d\222=\227\372\215\273\031Q\033\275IZ\200<m\356\243\274M\205\014<\304q0=G\\\014=\021\333\374;u\277\350\275\277\337\270;_AQ=\341G\177\274nt[;\330\203\344;\341\217\273;\324\0379=9n\004:\nB\n<\205\222%=\204;\201<\031\306$<\033\233z\274\"\357\333<\357\231a\275\007\264\206\274\324ex<\024q\220<J\270\256=\315\345&\274\253c\212<\007\314\223\275]\033\235=\t\264\231<\301\210\244\275\371\266\016=;\210\024<C\262Q=\360ba<S@\2657y|\273\274\241b%\275~\240\330\274\366\257\017<:\256\027\275\014\267M=0$k\275\264\244a\274x\037K\275\345\271\300\274\301\017s=~\2100\273\023iM\275;\274\362\274J\256\220\274\207)\221\275rs\240=\317nA<\356F\347\274$\354\250\274\0054\021;\020\002\034\275\211\375h\274\310V\031=X\357\200=A\215l\274\230\254Y\274; \217\275\352\316\362\274\"\353\307;\306\276\222\272\370h\314=\266\233\'\273\3236A\275)\231$<@\356\025=\035\346\321<\216\337\375\274eY\301<~\005\007\2750&\225=\207\224\272\274t|(\274\336\211\016=\244\252\310<\310DN\274\341-\346;s\310\326\275+\034\265\275\326\215;<\250\302\231\275\034\034\206\275\356g\260\273w\305\217=\033z\353;\244\007\266\275\200Y*<\031R\205<\206\206\236\274yV\211<\276\325\227<\225\202\337<\326\346\024\275\233NI<\367\244]<y90\274\304V\021=\356\\\013\275\326]\033=\300=\001\275#\307\365\275\321UF\274\\H\201\274\230{\255\275\361\320F\275<l\245:\226\357\023=KT\001=\003\210*<\033\t\241\274+\377\353<\006\311\210<\203\0218<\262pX<\213\303\211\275\252\201h\273\275.\272\274U\335H\274\311?\225\275\306\202)<>\326\221\275\031\340\202=\230y{<\371\002\250\275\032:\021\274\323\321\215<\344.\344<t,\026=\252?\207<-\264\025\275\275\033<\275\342B\225=!c\001\275\326\340-\275_\254\231\274x\254B\274\004r\237\2756\000\210=\036im\275\031\026\300\275\207\244s\274\313\345\354<8l:\275\032\324\326\2750?\373\273=\005e=\216\344Y\275;\342\227=\314\216\224=\243e\307<\232\330\017=\337\352\265\275{\254=\275\033\343a=\023\350x=\301\313\034\275&\364};pR\n\275\225.\322\274\301\177\355\274\371\324]\274\034\234\030\275A\374@>6\020\003=`Q<\275*#<=\344\024N=n%\t:\311\005=\275\371g\303<B\n\031\274\344\2724\274x\020\200\275\t\300\366\274c\013\235\274<\314>=4\214\306\274\242\356\030\275~N\316\273\244\256\233\275\226\261\024\274\343s\234=2\007\251=1\360\324<J{{\275i\267\336\274\252zc=\251\303\036\275*\366W\275\361\270N\275\226W_\274gK0=3\276\216=\250x\275;b \226<kc\340\274\001f\233;\233Y\214=UL3\275\303\017\216=\"P(\275\\\246\324\274\211\277\007\275\311\233n<_\204\203<%\235\375<\236d\327=\226\244\265<f\312\020\275,? =8\311\037\274\333\331\021\274\371\001\342\274\232u\027=\330\263\315;\227\017\353<\275\343\323\274\000\256\322=\353\250H;z\337\025=m\254^<\240\rb=l;\375\274@k\353\272v\034\232\274\'_\231=\034g\232=\2271\265<\372?\205=\000\350\006\274k\223\n=\313\230\340;\031\313O\274\201\274\354;\201\306/\275\221\3264\274\230\223T\275g\351\004\274=\007\032<A\3706\275\313\310\242<F#&\273\353\341#=\r1*\274\010f\205=\027\370!\275\025-\233\274\350\253\242<\231\\\351\274Q\343\316\2744\254\225\273\344\365;\273\311*f=w\215\000\274\376\346\351=\250\"\245<\270Fz\275\014\273\217\274\342\370\031<A\030m\275\255\236\277<t\273Y\275\2328\332;I[\204\272\230\017@=M4\263<\037\254s\274\275\220\337<\304n\204\274`\252\250\275\214\032U\273\267\334)\275\266\341\n\275W\323\254<\311\325b=\341/C;\352\020\027<K\r\005\274w\337\312<N\013\353\273\321\210!=r\317\234;\375\326\037\275^\3755<~<P\275\272#\002<!\336\203\273\301Bz<*\026{=86\276<`{\246=vd\277\274\001\270\020=P9\375\274u\236|:IcD=\"\202\373<t\3640<\275P9\274\n%\200;;\202T\2747?y=ZU\022<\325`R<\031-\020=e\220\221=\346N\246=\030\265\335\274-5H=S\326\022=<\236?\275\033\243\243\275\223P\206\275s\360\221<5\252.=\005\255\352<\274\351\205=\200t\365\274\356,\262<t\341\013\275\207`\'=\213\206\243\274\312\366\200\274\022\315\271=\016\022\020=\333\350\241\272I(\261\275\037\321\244;\334f\227\275\244\274A\275\247e\247<t\037;<m\205o\274@ns<\367b\220;z\003\201<V0\'=gv\347<Dy/=i\354Z\275,\265\330;\\3\353\273\327\330\250\275\307\217K\275Cd\220\274\27461=\277\357-\274f\256z=d{\231\273F\034;=\234\224b\273\261\237\251=\372\000Z\274\rG\"=\374\363\244\275\305\270\243=\266\321A\2755\321\027\275\365\014\214;\342\242\250=\252d\312<\016$\257\274/\255\240\274W\020\236<\326\342 =\002\346\302\274\240\'+=\221\306\014=\304\321\225\274\304<}=\207\350F<b\000\331<\272y)=\316B\231<?\002\002=\010\213\222\275\257#\022<\216\370 \274\'\332\n\275\354\335\266=\316\031\200=iQA=\307\353\237<\017\236\221=\271Y\315<a9+\275\227\t,=d\322\352\273\240\002\023=\037-\215\275!\244!\275\300\346\000<\314\377 \275\311\300\275\274\226(t\275N\316\000=cy(\275CP\233=\0359\313\273\026\260\321<\203 -\274H}!\275GO\241\273\205\330j=5Q[;\306\272\201\274_F\241\273n\002\002\275\242\177?<\332\262\"\274t\033<==\273\251<\355-\365=] \272:\234=V\275\355b\333<E\357\345\274\273U\307;m\373\276\274\353q\256= \303\301\271y!\376;8\315\246\274t\347\244\275\241k\004\275\032[2;\221V\214=e\353\342\274\275\317\306<+\361R;=\311\201<N\301\034=t_o=m\324\225\274\000M\177<\225\274\204\274<)\346\274X\327\353\274\337@\316\274:\2101;\261\324\025\275\311\315\373\274\347\353\302<l\'V\275H*\271\274\345/v=\321\2557\275\027\260<9\2044e\275\264\315\354\275\230|\343\274F\206S=R8\300;v@\021\275\016\365\320\274z\241\362;\255\010\225=\265\242\254<\227\0335=b\210\263\274U\357x\275\004q\035=f\334\311<W\316\231\274\267\320\312\273y9&=\366#\260<\262\007\246=\222\303\244\274\217W\261\274\307\354\371\273\354\272\245\274\"g\026\275\374\003\021\273\245z\221;[A\026=v\231\n=l\206\013\275\017\3256\274\273#\360\271\016\245\372\274\033rm=\335i\360<\234\371{<6{\242=L\322\237\274\255\'A\275\033\330\365\273Hg\025\275\021l\021=`\006\201\274\334\225\203\275\306[\212\274\0025}\275\341P\202\275}5\220=\271`8=e51\275<3\266=G\313U\275\034U#\275\236\270w<\326\332\375<\300_/\274\216<\246\275\276\004g=\003\002\\\275\267\374V=0z\177\275\340P\013\275q\247\366\274\274\345\003>\021\020=;\336h\256=\236\246\004\275)\306\253=\271\267\t\274\332\227\210\275\261\230J=\245E\364<\311:\026\274g`_=jl\351\274\250\3558\274\374\265;\275q\353%\274\223\277i<\375x\r;\252\367\265\275\216\340\360<i@%\274{M\345\274\335Q\222\275k\2346=\352\376\003=\036\363i\275\333\243\241\275\032\230\'\274\365Y5\274\231\027\021\275\245L\247<\252\0234\275\364#-=%\006\023<\276\000\017=\221\373T\275D\0340=\370\210\375\274\204\023=<\373\225\207=e~7\275[\225Y;\214c\275\274\006\304\311\272\237\206\316;\313\342D=j\230X\273\025\211\036=\353G,<g\306\312=\311Z\t\275\203~4=I;]=\373\3626\273_q\\=b\234\322\275c\376\307<\317\300\305\2754\235\354<m\313\002\275gTg=\351U3=\007\363\"\274\2042\001<5\3731=\275\266/=L]\\=kB\231\273\211%\270:\001\206W\273\3035I=\034\367{\274\r\204e\274Ad\260;\341\336\260;%\352\227\274%\302y\274\244z\242;\260\007(=\004m>=\333\n\267;\n\361:=4rk\275\3254F=\002\372\260=\333\255\001=\317\360\314<=O\025=@\361\264<\301\224\236\275Q{E<\327\277\251:z\323e=@v\267<\224u\016\274)\243\357<X\305d\274}\374\001\275\305\310<=\226\240\227\275\177\346\363<g\200\001=\361$\017<\3500\205\275\276\304?\273\317H\210<9\364\311<+\232,\275\202\233\334:\322\361d<m\363i\272P\326\212=\226\374T=\205\233Z=\245I!\275\272>\034=\002\213x\275\035A\177\275\240rY<\r\331U\275\335F\372\275=\200\352\274K^k<\330S\307<2\242e\274C\347_<\317\202\004\275IO\210\274\224\377\345<\316=\266\274\\\274\373<\010\360\000\275\204s\242;\356\226\003<\202\211o<F\346/\275\\\201\315<\22261=\257\332\264<\303\377+\275\224\321\025<\022\204\212;\304\317\"\274\244\201\206\274U\201\255;\232B5\275\202eL\274\251\226=\275\347hX=\3137\240\275\377\321\002=[\205+\275|\325Q\273\035\375|\274\372\014\317<\307\307\310\274\343Pj\275\307v\"=\315e\267<\0359y=R\314\307<\027\205\023\274\334\267\001<\217\371\351\274\'\2314=\n\323\316\2747[\024\275%\353\335\273\221\304P=\326\301\020=\214\306\224\2731\345Z\275<\361W=?w\223\273\254\033\247\274/\013\361\275\'\215\232\274\336\253\315=c\317\221<\270f\342:\270\rc\275\302xx\275m\230\312=\023\300\026=\"\3759=\270.\201\274\377[\333;\003\352\021=\014\2653=\351i\355\274\n\352j<?(\251=\350\367>=\2659 \275\376\013\322;\251\365A\275\307Q7\274\245f\271<\275_i\2751\320\367\272\206#m=:\357:=+\303(=\340Y\274=\222\232W\271%\240V\275KO\221\274G\2460\275>\250$\275\342\221\206=\215\321\210=#Ne\275\307\014/=\215\310~\275\024\235g\275\315\026+<^\220\207<\344\204\260<\343e\277<\317\245c\273\336*\225<\376^\216\275\235.\333<y`^\270L(\341\275\373\377\271\275|\021\005=ad\004\275\341>g\2735W\006<\255\357\301\2759\304(\275l2\302\27480:<\2070\023\274K\223=<\350\"\217\2742\214\031\275\014\225\200\275\270\3142\273\240\212?\275\313)A<a\310\343\273\265\342M=\242>\273\274\226.\002\275\214\004\010>7\n\036<*\325\316\274t\361\212\275a>%\274\2161\205\275O\332W;\r\255\243<&[\352\274eCD<\312\206\177\275)\371\245\275\335\264\271<\344\214\374\274\253\037$<\"0\201<\203\267\036\275\t\245L=\275\231\037\274]\177\030\273.\320`\275E j\275\224\323\213\274\351B\022\275Z\024\207\274+!\242<\177z\327<\343&\216=B\207\251\275w\252\252=f\363\245<\255\356\334\274\357Q\225\274+\010\031\274i\325X\275K-\304;p\032\333\274k\206:\274\250\352\202\273]i\271=@K\241\275\305:K\275\206V\307=\216\317d\275\272\\\200<z\333~=\245\270\225\2750\263+\274\344\177C=\356\345v\275yc\353\274\321tI\275\215\375\022=\037\271M=\246\243@=W#s<\3112c=\233/>\274\255\272G=/:\256<\355/D=oP\331\275\327\361\203<\036\324h\275\021\003;\275h\344\206=\212\232\213=c\270\212\2742\242\202\274\227\340K\274&u\003\274\253ts\275\271\242q\273\251\331\213\274\237\006\032<\237\\\225\275\006\210\266<\'\351\234<j\277S\275\253\013{\273\304-\217\275\222\210\026=\307\237\307\274M%\207<\210\360h\274x\006G=m\306\315:\312+\362<\\\356\251=h\375>=\226\306h\274?K\017=\020\004\366<)9\017\275W9\364\274\306\005\254\275\311\030\264\275\036G\262\273\035\214\016\275@*\031\2744\013\034=r\232\222=-\321\254=+\332K\274K\347!=>\277\235=\213\246\016>\n\274\244<\330C\313\274\217-\324<\377@\255\275\245\016\332\274\340P\351<\336t\255:!\257n<\305\n\340\274\020\014\211<q\257#=\364\302\362\274\345\305C\274\316\371\203=\254\304\274\272\177c\361\274\344\223\215\275\216\034\002=\333\330\201;E(\007>v\366\034\274\306\246\023<W\362\234=\3760Q;rh\003\275.\026t\275\335I\235<_N\004\275y\370\302\274\262la<3I\223\275^\023~<\313\312\223=\201\221A<\352\215x=ynH=*\216\264\275\224\305\242=\316>B<3z\371<\005\333_\275\261B\222;T\317|\274\030Q\t\272\332H =Eo\353\275\031F.\275\177I\302<\261\203\t;\217\214\241\274q\r\274\274\027\311\n\275\343\372/\275\235\017\302\274J-L;\327::=\334\357\274\273r \212;\347\323\211\273\314\237q=\316\363=\275dj\007\275jr\336\273\021\022\327\274-\340n\274\014\260\210=p\032a=\177\017\001=\364\311\n\274u\245\020\275\010\262\022=M\216.\275@{L\2759\342v\275\370g\304<*\303\006\274d@!=\237\250\260=\270%\341<\216Zx\274M\256\027\275\020\3433=\200\014\203\274\251\375V\274\273D\240<u\336\r=\364j,=\236\274O\275\010\313\277\275\002\321;;vK\324\273\352\306S\274\002i\t\274\242\206\220</\274\025=\355h\207<1\252\327;\314p\331\275kC2=1\036\022=t\274\201=?]t<\255\0052<\030\306\267\275\300\340\363<\010\263N=\304\221\n\276\260=w\274\214#S;#G\027<\005\376\222\274\224\346\031\275\227\265\231;G6\232<a\320\216=\325j\000\275\312oQ;\234&\236=\021\366R\275U\302\222<k1\335:\237\376\237\274\274E\350<\341\303\226\275\327\361\203=\215\352t\275]\226\263\274$\334a=\257\322J=\302\276\005=c\006\250\273\335>\200\274\261\013\025<^gN\274G\024y=!cO=vV\352=<\324\225\274W\251\356\273\323\232\"\274\336\322\212\272X#\006=\252\3207<%\264J<\305\'X<\266\256\325\273\356\341\273\273|\245\305\274\2669T\275\035U\330;y4\\=^\200\000<\342\301\276<\2645\221;\315\351\264\274\345`\020<8\017)\275uI\024=\204q\241;\342\332\244\274\227\210[\273[X9\2754\340\273\275\"\246\350<B\336%=e%\264<?lV\274\'&h\275\351\334\r=y\357~=K\244\211\275\242\022)\275\250\210\211:\033\3355=\016u\031<\' \271\275\305\331x\275\0229\236\275\263S?=$\215@\274\314\036\232\274&\241P=\000\'\213\274\246\0057\275\266Bj\275w\302\203\275\345\271b<\177Y\367\274.\214\350<b\214\236=\210\330\246<8\005\352\274\233\271|=\307GU\275\350\353\315<\365\033\265<\216\353C=\307?\026\275\224\365\224=Mg%=\264\264\231\275\246i-<\001\245\263\274\347r\232\275\347\361\003\274\211\246\253<\374I\376<\241\027\354<\324\257\022\275&\301\302<\362\205\234\275\213\313q=\026\207\002=3j\264\274\264\010\234\273\265\257J\274\20506\275W\324\006=\361s\372<Z\222\200\275\376r(\275\327\034\370<\373!\356\274\200\005\365<\336,[=\261q\257< \300\346:\233\362\261\273\225\273\265\274;\262\027\275\204\376\270<\252\313W=\356z\016\2756~t\275\362-\276;\353\246\214\274\003\216\006\275+C\212\273\037\372-<\302X+\274d\201\007\275\003_\246<\266\314\033<-\216\007<\206l\240\275\211U);)\0318\274\203N5<\021\311\315;\232\023\371\274\313\265&=\233\242=<\037\203)=)\250\235\275\023,~=%\355\256\275\335\325\022\275\341w\236\273\240\274:<\366E\360:\251/\035\275\030\0202\274\030$\010\275\364D\203<l\355\007=\215\r)=\370\364\272\273A\310\3148kL\001>_\363B\275\017\202\226<d\360P<\"0\371\273\333\350a\274U\214\212\274d8\355\274*\237\203\275\333\267a\275\374\\\231\274w\312!=\341\264\356\274\264\201\247\273>\364\357=\'\371E=\344\025U=2\243y\274\350\250E;\014\005\"\275}\246\214=\341\001:=`\225\203=\332\211=\274di\235=\230\307\320:-j\357<]1\221\274;\204\256=\257\337M<\310;\305<\350v\002\275\245\212V=\367@:\275\020%\230\275\000\312\354\273\r\351\305\274\300\352\312\274\302KX=\336\372D\2754@\253\275\\\264\022=%]\362\274\014\213\313\274\300z\360;\240Qv<]\014_\275XP\003=\260K\236\2746\273\236\273\375\331G=\217\265k\275s\341\202\275R\2567\275K\322 \275\2571\212=h\333Y\275T\265\247<-\277\311<6\261A=\374\372}=\022|W=\371\226U\275%L\236<E\3531=\367\241\271\274ei\206\275\234p\021;B\246\372\273Aa+</\3062<\243q?\275\204\350J=k\252\177\275\205\265\256=0\373|\274_\351J\275\372 ,\274p\262-\275\361Es=\031\023\273\274\373\2206=^\307&\275 E\311<Fe\025=8[\227\274\317@F\275\3751\023\275\331\304I\275h>o<\264\022\264<\336/\215\274 \353\224\274\337\377+\274\224\242\025\275\202\233\314\274\"\014\020=\307{!=\032\024\235\272\033i\232\274\347\351_=nXU\275\341\343>\274\356I\340<03g\273Fw\203<\232\245\316=\024A\022\275\323\353\021\276\022)\006=\214\204\307<CX\026\274\242%\213=\345\207\323\274\312\346=\275\300Z;<\346\216!\275\030z\344<_\315\236<uK\217\275\232\000\240\275\347\275\241\274:~\314=\r\324C=\365Y=<a6T=\222\220\t\275\301)M\274-I\233\273\1771\227<\237\201\023=/\034\335<Y\362\264;\026@#:[\246\365\274gL\331;\346\321+<\312l\324\274(\235.=7B\037;zS =\245\263\200<\220\005@=\327g\362<\323\315\t=OX\001\275\'\364\235<Y\001V=\327\273L=\304\262\256\275k\3763\275\315\364\341=,\312\'\275\210\226!=\273\236i\275c\300K\274a\341\310<\360\335\364\274[s=\275\315~\004=\031W\261\275T\031S\274f\211E<w0\315<P\276.\275X\001\304\274\217\257:=\226A@\274\240\241K=\300\033\211<\271\203\376\274?\330\367<k[\265<k\361C=\204\263L=0\225\265\274\333T;\275/\315o\275\224P4=<\254\326\274\367.\237\274f\323L<4\036\260=\216\303D;\262H\274\274\367\"\006\275\301\222\214\275\320\276\202< \277G=\233\026\276\274A\202\252<\367\242\275<\365T\177=\367h\301<\023\240\232<c\200\030\274\362\317\227=\250\362)=\250\327\026\273,]\220\273\357XG\275)\032\341\275\325\331\327<\3738\311\274\273:d<\226P\016\2753\242\312\274\021\364\276<\245k\021\274\316\254^=\340\003(\275\257\333\177<\200\3417=\273\313\250<gh;\275\371Mv=\004\033\010\275\014^\300<\342\177\330\273\244\201\022=u\201\242=\254\320\357\274]\305\311<3[U\274#\310\206<\302wN\274\312\023\016=\363vG=^\341\214<1\264\344<\3673\363\274M\224Y\274\374/\t=M\003\351\274Z\373\200=\\\\\220=\247\3117<u\310\316=\233\222\246\274yl@=9B\344<&\017\201<\013+\341<}u\333\2754q\036\275\370\244\315\274\262\363\377\274\215s\321<\245\210H\2757\325\225\275~>\204\274Fg\203\275\211\205\206<\370tR<s\207;\275\006\007\353\274.\240F=Y\031\302\274\321\254\371=\213\246\016=l`\031\274G\350\316=\273\205h=^,\276<\341b\r\275\252\241\264\275Z\354\235<\tQL<\201\240\353=Y\310\313<\350\010\205;k!\220<7\324\217==\036M=\264\361#=\324\233Y=,\2478\275\310\302v<\245U\200=\000\025q=J\022!\275C\037\274\275\031\343\373<\352n =\t\303\006\275\315\364\321=H\244\315<\007v)\275\263\300>\275\305\022\005<)~\271\274;\014\r=%\000\264<\n\177\r\275\322\276\220<w\032\310\274V\004\244\275K\"3=\357\301o<\337\301\231<\214\203\001=[\236\362\274\016\326\305<\245\006\247\275\033\236\264\274a\013\002<\341\376\253=\212\275T=\224\265\254<\216\022\311=aH\200\275\301e\221<\313\244\303\274\023\005<\273[\350=\275r\241\200<Cn4\275\232L\033=P\374\372\274\315\203\252\275\306w\037=\267vC\275\303\361z<J=5\275]\210\333<\254U\202\275\344\204\345<\222O\274<:\367\330\2735k\252=\000\000\"\275\355\357L;\267Tm\275\251c\203\274\017G\265\2753\013\024\275N`1\274\360\345I\273\006w;\275H/\r=\312\244\207<\222\315\\=\267\365\016\275\274\'2=<[\212\275\306)^\275 3\277<\324i\203\2727\024C\275L\255\245\274\224\223b\275\243/0\274^\013\322\273\270\363\227\2759\203\362\274H\316\006=;\036\317<\370\017k<\020\211\262=j*\213<\263\377W=\220\254 \275\311\302\306<tcf\275@!\300\273C\327W\2757:\221=\027\227u\274\374\253\211=\256d\004=\023\036R=F\314\307=\2576\264=\207\302R\275\307\235\332<\364\2265\275;\301\326<m\256r\275\312u@=P\220%=\230\t\t\275\2000o<@k\326=e\321\205\274_>A\274d\201\255<\377V\232;\2347l<\270\375\215<\361\007\343\274\375\332\t\27511\336<\204\nu<[M\3339\021A}\275\000\210\257=\t\372M\275/\246\"\275\026\2023\275M^7<\014H/<i\330\224=\211x2\274&\026\007\273\276c\345<K\237\223=\014\034>\275\324\350\026=\324$\230<\020\300\302<p\\\265;?L\277\274\247\244\343<p\362_\275;`@=\"[\345\275\"\322P\274\227&\253:\231\034+<N\007\001\275\201~$\275s\243\315<\263m\030\275([\000<R\361\326\275yb==]\265\261;\000\252\261\274\336\271\030\275\351K[=\237\233\223<\241\345D\275\241\313\024\274\205aB\273\364\252\353<}\026\237<\317et\274\013\251\013=W\257\000\2743j\261\275\373\273\031\275\212e\242=52\017;P\312\200\275\244~\300\274\016\261\002\275\035:<\274\315X\337=q|(<\\\005\013=\245^\342\273B\333g\275\007\353A\273\323\003\236=P\204g;\021\227:\275\022\361\226\275\026\001X=\033\354!=\230.\006\275\257\214\331\274O~!=\225<\001\275\251;p\275LUC\275~\333\025\274\300\010q\275\006\351\037\274\256\316\240\273\325`\202<M\374\027\275\030\231_\275#\272F\274\000\333\360\2744\342\247=\211\223-\275\253\"\234\275\264\222|\274n\367A=\n\363\347<\363\246R=2\357\"\275Z\005\035<\362\313\331;;\252T\275\216\225\250\274\342\362\256\274nO&=F\25648_D\021=\'\241\350\275\241\250|\274:y\'<FdL\275\246=\035<\257.\302<np\257<\247D#=\213\273\034\2743\000\341\274o\271\005\275\037\264\261=\r\317(=\270\2618:\245\232\366<\031@V\275\366\034`\275\320\375\351\273\331\224D=\025\325\177=\351\343\004\274\001\210\225<_\224\223=\215\255\\=v;\262\275\276w\270<\000X3\275\251mt\2752\237\230=D\235\301\275\274[a\275\365\335\327\274\2412Q\275+\266\243\274l\343\252=;QQ=\304\004\031: \257\020\274\312kd\275B\332Y=\362\314~<\3008x=J#\036=QG\273=\361\204\351\272dY\t\275\361\216\336\274\205\270r<\307\201R;P\367X\275\311\200`\27506\247=;O\021\275\372jd=\361\270\271=\275\344\245<\225\227v\273\314<\260\274\211\336;=\202r\245<6\2258=qB\004\275\203\251\254\273\266]\317<\245G\215=\034S$\2746\037g\275\273\304\326\275\333\232\025=g[,\274\337}\200\275<\005V\275\236\000\304<6\353~=U\234U\274DB\214;-\031\333\274s\3313;\033\350\260</\020\241\274\236N\023\274\351\301Z\274R\330\302\273q\232\335\275\"\031\323<\261l\341\275.X\026\275y\276%\275U\307y\2743\244\211=\355-N\275\225\343D\275FA\247<r#\213={\276j\274\245J\341\275c\025\270<\002\341B=3w\245\274!\217\272<\375yy<\r\026\273=\260s\247=\016\275\222\275Z\264i\275\004\255\313:Z\326\303<Wo\255=kf\217=\031\251\211\275qp\t;\205\302\034=\004\327V=\316o\311\274,6\211\275\037\026\217\275\222\005r=$\331X;\231\022\260\274\325!x=\357\023q;\211l\007\275\250\2629<z\250b\274jBh<Mx\202=\037\321\021\274+\036\210\275\024?\364\274\370\357\230=\345\371\222\275\255i\277<\311AI\275\252\007`<O\035S\275R=8=\205l^=\330\234\225<\275;\234<\325\263\321;W\n\241\274\311\322`\274c\230)\2741\275\251=j\347*<\330P\222\275\013\022]<\226\323\326<\355\304P\275j\014\255<.\306\003\275^#\204<\270\247\025;\330\006\014=\233\224\001<\247\310A\275\336\271\"=\006\031\205\274\344\233\247\275R\016\267\275\273\021R<E\242==\330\265\002\274\243\016j\275\256\022\030\275\264c\356<\007\342\203<\355\342\025<\034s\204<mR\203\275\354R\260\274#\031(\273\201\031$\2755;\020=\334\270.=\260kj=F\317\004\273\256\237\317\274:a\273\275\001\374\027\275U\266\221<G\013M;\374P\216\275\251\\\177\275\376W\006=\n\253O\275\370\246\265<\323x\334\274f\312\n\275\324\"\227\275J\311&\274pZ\301;\321\0004\275\211\233\006\275n\323A\275X\362 \275q`\003\275\240V\303\275\373\250Y=c\t\021=5C!\274$\313l\275\373\024H=\010\261\010=\262\252\263=E-)\275\322\017\244=\364\305O=i\010\300\275%3\351\275x\324\246\274*w.\274\371nj;\320\310\002\275n\rT=i\007\270\274\366\372\224\274\353\255\211\274\210\t\245\273\377\327\356;i\262\315\274\346\314\216<P6b\272\345\331g\275\260\245\250\275hS\272\274\340\303\032\274\222\326\323<0\264+\274o?\354\274[\257\345;>\347\337<^c~<\000b\027\276m9\373\274@l\256=#\336\202\275\177\234\325\273_\213\322<\214\335\3229\254\272\315;\363\355\314\274b\344\216\275\203}\241;\375O%\273\032\332\306\273\335\265\240\274R\266T<0\342\243\274@H\273\273[$\201\275\273[\377\274\354\2469\275\247\360\251\274\237_X<\235\351\231\275%\377\262\275Z\036!=L\007*=]A\315;[\342R\275\231\334\273\274^\251\364\274\275\245\213<W\200\237\274\261B\205\275\317\366&<\350\236\310\274B\333\207\274T\342\345=\343\275\024<\235\371\202\274P\030\320<V\233*\275\236\220\234\273\250\3167\275\353<6=\201\217\020\2742\262n=\303k\000\2759\212y=\264\271\371;\']\200<\241\335\020\275p\230\037;B\371\366<\220\233\'\274\351\260\323<.`\247\275\241\177H\275\375\034\317\274u\267\365\274\347\\\022\275\317sK\2751\202\322\274\2012\265\273\227\267\302\275I\260\343\273\204i\227\273\361_\013=\335;\243\274\333vT\274\325e\022\275\001,<\2745|/\275\317\323*=\352\253h\274\236\362$;\023\3403=n\351\263\274\357\227\360\273\302[\022;\322\300m=\276-\003=\315\262\274=\007\315\310=mZ\302<\353\344\032=/\344\375<.\236\003\275\361\331e=1\261\017\275\330c\013\275R\255\203<Z\026\005;\240#a=a\036\210<\335K~=\\\202\034</\331\216\275\301T\261<\237\334v\275\374a\206\275\315\266\006\275\253}\205\272bM\311\274\271~?=\252\3678\275P\266\303;\206h\200\274\326\\\"\275;\215\257<\227L]\274D~\310=ySZ\275?\232+\275\005\372#=\315\031Y\274\230^\200<\265\216\342<R\362\021\274^J\033<\300\032\316\274<\372\267;^\035\205=\032D\203\275\317\\8\274\211*\037\275-C \274b\026\273\274><\344<\324\320\372<\t\247\225\274 M\251\274\271\200\355<m-=\275\334\t\362<\241\207\371\274\364\217y\274\331\327\364\274l/\\=\345\212\216=\027\220\"\275\363;O\275\365\305\311\274\203\014\006=\350\246\352\274\206\340\230\274\350\203\225\273.\256 \275l\306\"\275\3351\t\275\212\310(\275\356h\331\274\266\225\232\274\306\215\026\274\033\341\r;\000 Q<\222A\306\275\031I\263\274\236A\262\274=(\355;j\337&;j\253\275<\246e\213=\024\213=\275\333D:\275\377\226\212<\277\022\023\275Y\217Y=\313\003\320=J\341\231<\262w\013<\\\3053<\\\r\034=I\305:=_\331\255\274\261/I=K\007*=S\254\033\275\312\255U\274\203\302\007\275K\"\005=\307Xx\275\323q\005\275j\214C=\330)\210=\374z\026\275\027\035\371=\341=M\274\377\n\007\275\311\376#\275e\"H=\213;\022\275WA\017\274\315\353\326;\233g\320<\'\232\324<\275=e\275\311=\005= \206\273<k\232\226\274\r65\275\261\276\204<P|L\274n\222%\275A\257t;\306M\205\275\'g1\275\265[\226\274\036fe=zp\023<\225-\027\273\373\223\":`6\246<E\221\271;,\207\366\274;)\030\274\271o\024\276?\321]\275S\262!\273\247\240\343<\316s\245\274UC\035=\225\362\r<\355\177\352<y\222\230\272\365\276\204\275w\344\204\274\200\326z\274\361HR=\034,\213\275\364;\271<\027\234\201\275\2522\035=\304\363\"=8\3307=\353L\340;2Q,\274\260\275\250\274`\304\251=\256\235\204\274W\221\357\274\177\346\033\275\325\023\010\275s+\371\274>\344N\275\323\205\317\275\022\024\371\274YIq=\276\354\377<\377]\017\275\r\337;\274\306\206i\275\2566\365<u\267C=L\303H<\240fS;\244\235\023=h\372@<$\372!\273\300%\001=\200\007v<\364\035r<\376gq\275\n\227i\274\274\"\223=\301\004\253\274\241\026*\275\032\333\027\275U\023\036\273\316~A=\014s\203<\272\360\233\275n\247\221\275a\266\264<S\232\360\274G5C=\271\270\367\275\031\335\256\275\306\365\031\275{_\303\274f\234\333<\362\310\235\274]Iz<\022?s=\350\2535\275\221\301\206\272\n\312\343\274\356\257\026<{\245\207<\315\334*=\337\335\370\273\032\221\350;\250\031\023<\271da=\007\336\303<\242b\261\274\251\276w=\326\"\265<\362\357I\275\261\005^:\231Z\265=K\311\252=\237&v\2742\377\006\2740\243\204=!\263i;\332\353\223\275]\030\253\273Q\315l\274\006\200\311=Ls\201\275\331c\256\274\337U\236<\205t\207<\273C@\274`\033\212\273\363\374C=?\364\255\274\026}\215=\242\270\233\274g9$=\356j+=\031P\310\274\324\347\310\274\2428D\275r{\372=\335\263\313\273`\256\362<T\232\2078\310\373\271\272%\376@;\253\033o\275\306}\230\271]+\245<\036*\276<`\220\227=\324\222\001>\252\204\222<S\004%\275\014\275\355<Y\2473\275\232\332\025\275}\3179;3x-=\336T\036\275E\276\031\2751\2509=\004\035\323<7\\*\275\361)\347<\210KZ\274\240Gq\274\267z\253\272\251\201n=\306I\254\275b\3271=\370\316\247\274\01402={\014\377\274s\327\032\275\203\270)=\244\267F\274\350\352\226=\022\227\316<xh\n=\262\244\225=x\255b<\032\356\214\274\315\312\232=\226V\024\275\016\336e<\311W\352\273@\205/\275E\346\216<s\n\275<\n\374O;0\r:\274OB\231=T\027\034\275\264!\312\274\"S\331\274\232\273\033\275\3614\205\274\301\267\375\274\326\031\007\275\230\211\241<\021\260\260=\r\345\231<cB\033\275\351\236\342\274\r~\325\272US\307=\334I\003\275k\3046<\377\311\241\274\022\366t\275\353\215l\275\307\2564:\251:\325\273/\213\237=N\335]<\325\307\224\274\343\2313<\026H\002\275\034\333\355\274<\0211=\217\304\245\274X\316\340\273\217\273\275\274\314\025\235=\021\302\243\275\217>\200\274~SK=\210\006Y=0\023\016:mH::\367\340Q\275\255\036\213<{P\275\275\004\204\204\274\205\222\370<%m\243\275\245\273g=\333\t?\275\217\237\370<K~\244<h8\016\275\246\020e<\022L\262;\205\275z=3@\212=\236\260\301=\210\004\220\275G\276\275\274n\263W=i\341\220=\244\306S\275\260b\204=\254h\245<\tE\375\274v!`\272\275\320n\275\363V\014\275\223\336 =\235cS\275\367+a=r&y\275\246L\344\274#{\016\275\327t%\272\213\252\225<y\213\036=O\256\033<\367e\227=\230r\237<e\020\255\275\260\340i=*\3143\274\2160\266\275\361\217\\\275\315\273]\274\2543&\275\331-\221=C\357-\275\322\257\344<\231M\333;\000`\016=d\022\004=\312\350\006:\0247\210\274\262\"H\275q\261\375<\223\262\327<#\360\007=\3670\253=\257\'\262\274V\027\276=B\\\202;\200X\237\274\"\325\250\275^\313E<\275Y\225=\241\024r\275\243\342\350\273n^&=\347\235|\275\034s\025\275\227\330&=\010mv<\322\006\356;\342J,\275\254\200\256=\343F0=+\206\201=5\031U<2\370k\275\361\3662\275K \024\275\305I\203\274Zd\245\274\224\206\263\274\354|\027=T\253\242<|Hx:@0\300=\233\0363\275p\3133\275EL\212\275\326k9\274\273\024_\275\263\255\320<\006\270\203\273\376\023\246;\201\"a\275W\243s\274\"Tr\274\027\0263;\177?q\275\356q\025\275\3561\331\274`\317\360<\374+\000\2752a\'\274\311\260!\275\361\001$\274z\254\032<8\\\037=\326\307\224\274\220\216\001<LJ\036=P\216\210=:\215\210\274L:&<\361\017\002=Y:X<\261\255\233\275\332\005\273<O`!\275\223\3252=\036`\'=>2\021<\324\037b=C\253\360;l\3207;\207z7\273\260\373\335\275\341\\\307\274.\330-=\244XD;@\037\244=\354`\034;S@\367<\217\"\030=\230\365.<\266\312\234<\032,\232\274\255\3629\275\333L\004\275G\220\236\275\026\237\201\274\355\316\336<r\342\334\274\007gI<\341B><\245\232\205<\217\206U\275\322\374\270\273Y\376\206=\205\211\352<3\004\353<^j\217<D\334\254={>\351<\310\347\275\2744\374\r\275\025\204(\275\220\367:\275\302H\260\275\013\240\227=.\n\r<\225 2\275\305\364\235\275RJ+\275\303SG\272Hs0<\276\002#=]\013s=V\261\037\272\255\257\226\274\231\021\321<P\334\356=]K\252<\235\002:\275a\240\034=\024\2441<\264\013\300<\3318\237<#\260\206\275\271\267\316=5FE=\246\246\226=\340\225\356<\311\2669\275\n\355\234\275A\260\220=\325(\000=\240\274\311;\266\352\001\275\367X{\274\"\223%\275tx\007\275\2013\370\272v\267\331\274LS\370<\013\"<;\251\245;=\367\004\330<\033\350&\275\360I\243\274\354\020\377<\267\322o\274\2008u=\000\177\232\274\245\316\377<6o\216\275B>\017\273\366~\270\274\320^s\275L/\324<\267\223I\274qb\367:\210\334\234\275j(\245\273gw\221<\370\274\010=\177\026\272\274\251\235\034\275\254\025\347\273\340\277(=O*O<\245\272J=9\316\350<z\351\207\275\240\303\211\274.\300\246<>\021\326=\016\030e<\273\237\212\274\2531\245\274\t\006v<F\"3<\350Y\000=~J\327\274x\370K\274\260\255$9wx\305\274\203>\311<\347\330\265<\2512\004\275|\256\321\275\202\201\001=\305\007<=\266\201\321<E\3615=,\335\263\274\267N\205\275\357:\245\275\347*\276\274:\340e=\370\302\246\275\021\026\331\274\000\016\273<\315\304 \275\255\326\223=\273\267\277\271\266\343\303=\276\341\205=9x\241=\205r\001\275\021\374\014=\265{V<\304-?\274\014\302\014=D\356\021\275\233\213[\275\232m^\275\212\001\212<\024\356\331=3\362\362</\323\231\274\213\344v\274\347P/\2757\310\237<\306\234*<\035OK\275\363\004\030=|\262\242\275\032Q\232:\222\355\026\275>\357\252<\366\323(\275\246Kh;\235\337`=\023\345Q\275\332w\343\2728\013(=\005\177T=\354\257T\275\344}\213\274\303\222\253=\275\245\214<Ne2\274>L\320<\266\360\214;\346\355\001\275:\356s=\342\204\252<pb\276<\244\030\274<3\374!=jUu\275s\337N<n%\215=\036\211\225\273)\330Q\274\034Ru=\231\267\241=\033\333\343\274\210\275\237<\013\2279=\337\255\235\274\221\353&<\3710\004</\022\206<>_\336<\260\320W\275\320\330}=\351bQ\275W\243\207=\34051=\303\213\205\275\031\364B<\025\024\n\274r`r\275\342dq=T\016\230\274\206\362\022=\3016\003\274H7\031\275Y\301\251;U:\201=\302\351\315\273V\224H=\337\033[=y\325\302<E,\353\274O\277\330\271e(\327\273\035Lc\275\034\337\361<\224Kg=8Y4\274wIS=\253\212\023\275\307\351#=\n\370\232\275\231\253\010=\"h\240\275\272\277F<\010\210\016\276\213\3508;i\0210\271\310i\257=\273\275\336\274j\262y\275\262\254\221<\350\036B\2750\"\007>D\371\005=E|C=\255e\366;\001$\030\274\035$\225\275\311\340^=\362\334{=\361\322><M\224\354<\nq<\274\346,\017=\365\226H=\262\355\222\275j\354\005\2748?\304\273\322\001&=\033\371\241\274\323\352\"\275s\0050=\317:\314\274\322\322\'\275V\002\366\274|\223\261=\2040d\274\361z\354\274\247\235\252<\236\025\273<d\373k\274\177\273\205\274\356,G=&]\030<\242\230\225<\244\377(=\243V\263\275i|K=#\215\223=\275wh=|\227\227\274\031\0226\275\337f\023;\213W\034\275p\345\254;c $<\272\361o\275nZ\326<\276!\300\275L\331\220=(T\321:\014;\223<\371\256\r\2743\002\035=\364\007V=\006f0\274\007\213\247;\353\346~\275n\330+=\206\3669\275\370\214l\275E%\031=\tB:=\336\362;\2755y\346\274h\022\357\273\344\365)<\231\243\246<\2322\013=j\223\276\275\302\3768<Z\331H\274\326\024;\274,\241\214\273\034G\270\274Td\017\275t\326\267\274p\341\005=2\366\352;1H\275<)\322\275=#\326\367\274r\232\220=\232\007z=@\261P\275r\271\235\274\211\272\017\274\033EH\275w\034\000\275\234$\034\275\t\013\006\275<\254\240\275\325\360^\274\2061\014\275\'\263\010\275\022\236\027\275G\313\230\2753u\254=\370\363\264\275G4\223\274\266@+\272\014\025\236\273\350\3014=\347\321><5\355\005=\353\347>=\305iK<P\036a=\247.\300<\027p\242\274d\240\275\273\027 +=4\333\304=*\261\326\275\201\303\001=\207?\270<!\222\344<\ro\022\274]\325\241<\2034\025\274\3318\2139~\037F=\374\202O=\341\226w<\375\371\260<\033+\336\274f\331\325:\t\255\276=f\350\032\274\201\225\266<\\\315)=\243;}\275\336\210\010<\265\311\240\274S\0064<\224\007\276\274\305\347S=T\334\005=&n\364\274R3\277\274\3055\255<|\276\274\2750^T=\024\nB<B[\221=G\033\t\275\260-\017\274\033\257\006\272\022`g\274\355\273\010\275\272Ib<p\005\000=H\300\267<}\206\001\274\216A$\275\320+\217\273%\321\306<\216\032H\274\263S\360\272\220\2113\275\023r==\300$\222=\r\030\251\275\034\260\377\274\250b\346\274\257\330\200;|d\210;W\230M\275\257\244\227=7\030J=\312\271\315<\245\2057<\014\r\210=\340\211\200\275!\266W\275\304\230Y\274o\200\342<\233#\006\274\025{\263\274:];\274f\267\240\275\035\230\034=\005\244\363;\373D\204\2751\217O\274M<\211\273\245L\030=\223\340\231\274\230L\233\274\264\245\242=\310\221[=\226\347\t\275PT9\275\271\257\232=\3240\206:\2246\342=\3608\252<\271U\363;\247\370\031= .$\275\036w\322=\220\357Z=\016Y\333\275\216\2064<\213\235\370\274I\255B=P%\360\275\r\352\373\273EJ\267\274\323Y\251\274\266\333\304;6,\347<\351\325\000=Pz\265<4X\024<\007_a=\034\'\300;^\350\023<\034\'\330\274\257\207\216=\227\270\022<\324\t\003\274av.=\332\232\023\274\331\370\355\274\351\334\343;^Y\036=\374I$=\264*6\274\014{w=\t\253\216\275\266\373\226=s\177\032=\207\020\n=\245\275)\275\246\014\037\274\216D\256\272s\3476:6L\270=\333V\321<\366\013\353<~)\215=>B\3749\371\326n=<pP=$\316\224=\215?\241\275\303\213\333\274 \271\256;\220A\022<\020w\200\273U\270h\274\224\211\247=o\r/\275\363\205\017=\255\375\275\274j~\261\275V\202Y\275{\002\027\275\233)\017\273\264\222\017\275zQ\020=\216\355r=\213n\230=\341n\373<\371\371\203<\351\215S<\265B\210\275\265\224a<\235\2765\275\217\360\265\274c\203C<eG\032<\271\004\217=\225\342\273:\352UD\272\2125\024\275\020\006\246<Q\234\360<\253\205Q\274\230Oa<\367\036\332<\303f\235\275\246A\257\275\177\245\264=:\246\005=\241\212\323<M\225\020=\242j\347:\302\236\\\275\254Mi\274\257g\247=\355%\253\274\272\277\017\275\336B\021<\201\337\273\272\264]\322<\351\307\255\273*W\377<V\341T<\224\006\221<J\332\224=nR\271<\333y\262\274Q\303\'\275MFC=\335\273\255=\303\313\245\275\312x\333\274\337\214\352;\370\274\032\275\\\303N=\220\200\347\274U\353\247;\227\343z;\302\346\200\274\262\205%=\334\223Y\275i\330\2419\266\2536\275\207\341p\275\371&}\274x/6=\245\347\205=EOI\275\202J\020=i\216\013\271\347\177\233=\334\324\261=\204\375\217=\227!i\275|}-9QQ\004\275\213h\005\275\027Z\355\274\026\314\266\275\302\344C=`\227\";F\225\216\274\325\300<=u\307a=\216\304\352<YP\366:?cS<\331\342?<\020FU<\317\275\313\274\355\036\351\274[~I=]]\326<\005[J=w\260P\275\276Y.\275_Ca\270\017\'\346\273\371\337\335;5\020h=\347\261v=\312-p<\013;\007\274\351\314Y<\023\345*=4\2526\274\270\204\272=z[J=\"L\206=Q\336\030\274BY\014\273\205\304\207={\023\014\274\307 \245<\230\3060=Dn\273<\235P\032;\220\270\212\274\301f\212\275\014Q\365;W\341\230=Q\325\222<\223\306\211=8\267\315;B\367\304\274\246qj\275\007\035\253=\033\277\240=\336\325\210\274\340!\005\275O\315\313<\001X);k\034\235<\211]Q=E\331\020\274\034\306\260<\212\305\231\274\214\006\322<\035`\006\275\367S\007\275tjw;\320\035\372\2748u)\275\315\204\264;\320\363-\274\306\374k=\341\206\213<\025n\020<)*\317<\351\360><\2135\214\275\213\235\031<\340Oz=\221\370\036=a\213\374\275e\220\n\275cf\025\275\2709\335<\014\242b\275\031\265m<\310\251\246\275\237\265\234=e\003L\274-\177\262\275+\222{\275\235\246:=\3172\227;\014\251(\275\000s\241=\226Q\020\275\275\357\204<`\236\330;\3158O<t\261\207\274,U\277\275-O\023=vu\244=\271\356\267\274g\206\375\273\342\0312\275\211\267^\275\\\210\232\274\264\275\375<\352\363\010\275\311\013 =T-\351\274\021\253\253\275\013\377g<\260\220\214\274c-\235<\'\352D=t\217\000\275\033\007\367=\000P\350<\245\224\310\274\271A\310\273\253\274\203\275\005E\331\271\024!\250\274\335\335\340;\373\215\271=\200\316\203<\001 h\275\226Y\304\274\301L\365\274\353`\r\275\226\302\022<\230?\250\273\320N\\\275/\'\272\272;n\013\274h-\"<\213\270R<#M\237:}:\';\263\374\030\275\322\233\210\274*\377\240\272\003>N=\337\'\001\274X\'\202\2748\377`<\017\205\274\274&\273\306\274Q\347\006=\246c\217=(\\\307<\347\260\235\274\\GG=qr\200=\377\336w\274\277D\377;\245\246O<\373L\260\274\362\336w=\257\346\315\275o\336C;KY\336=\003\034Y\275\257\306\035\275\270\341\250<\264\250\200\275\2121\n=\033\225J\275\353\315#=\206\272J=\307\r\255=\241\352\203=(\243\335\274\331,\320<=\256\302\275\035\3321=\272\227W<\023\270\254\274Y\201+=\206\217\021\275B\215\252\274\315\000\022=?\211\343\274\361\017\232\275\336\332\033:\"\203\252\275SJ2=c\305\261<\001<\202=\225\305\013\275\325\334\232=1\211\006\274N\347o=\236Z\245\274\221\242>\275b\2104=\010.(<\237r\213\275\026u\350<\265\016\027=\275\036g=\213r\235=s\351\\=b\314\213=\253\014b;\310tB\275w\367\314\275\017\251U=\335l\030\274h-\227=t\350\231<\222@`=\013\002\356\274\323\250+\274wK\202\275\362Z#\275\2023\013=\303\344;\274\'!\002\275\025\362\250<\324U\242\274{\330\013\274\335zS\275-hs\274\234\t\023\2736\264\271<\206t\241\2751\005\251=y\n\307<\324\016N=f\210\3729\377\342\236<E\013\372<W\222\034\274Ce\277=\316 v=*\030A\275:5\375\273\263N\256=\267#\225=\002T\217\275U6\3469*\241\231\274\225\214e\274\013~5\274\222z8=\260\'\005\275\231\277\025<\345\3563\275l\256\237\274\027\036\260\275\307\367Z=\001\001\330<\206A\252\275N\277\257\274\253\033\n;\373\306T=\236\2064=\357\266\331<\353\312\364\273\017\233n<ex\001=\205\003\032\273\014\202\253<!-\271\274\214h\214\271\000\301\n\275\342B\010\274,K\313<\\\345\'=\371E\237\275dS\007\275m\201(=d\370Y\275\003\177\362<|\3501\275\304\017\024=\301\264:=2\2239\274\243\202y\274\032D\325<`Hf\275\332\267I=G\301\346\272\200\365L\275Y\275\t=bi\316\274\026U\233<\276W\306=\2454\247=zs\023<\355-\'\275\220}~\275\336\361\205\274\273\010\214=\nN\034\275\351\037v\2743\277#=\345\305\\\275\037\302(\275\3752\245\273\230\201M<5\367\221\275\001\224z;\320\363E\274\263;y=\316\352\374\273\304\364\001=\265fg\275\373;^\273Ph\257\275k\004 \275\263>\250\275\237\366D\275\275IU\274\300\025\014\275\311V6\275.\220\017;\250-u=v\022\304\272\203F\245;g\347\"=\343{\256\275w\210\232<[\334T\2721M \275\341\240r\275\230\3365=\023\021\r\275\247\263K=ar\336<u\021\372<C\362\202<q\021\321\275\264\"\r\2754\2523\273\034\311\300=\310/~=\232\327Y=|\256\'={\006\212\275\365uP=<\320\313\271\020\\u\275\252\364\367\274y!,\274\272ej<\225}\034\274\315\357\034\275\037\013\240=\267-\220\275\320\237\314<\333\310\204\275d\026c\275\254oG=\223*U\274\261\351\343=\334\331\346:\315~R=\212\262w\274\202\215\201<\213\315\022\275\204~Q\275\331\247\025<e\212\256\272F\310\272\275\346\357p\274T\363p\275\257\365\341;/\247\332\274#\214S\275\202u|=\267\366\263<\253\264&\275\272\246==\230=\213\275\2202\211<8M^\275?\n\310;\201c\234=\310CF=a\322S\274$Cp=\256\277\357\274\255\\\333;Wm\005=\240`%=\262\004\257\275\364\375\240\274\311T\371<\246\"3\275&\031\031\274\245\273\303\274\303\016\220\274\227\225.\275B\270\004\275\035\202\232\274j\366\276=\242Y\024\275r\335;\275/\241\207\275\243\"\274<%2\323\274FR\222\274\335\266\221<(a!\272\n\234*\275$\345\025=~`\270=;\223\001=pPt=bL(\273\377\\\237;U/\302<\026;\204;\371\214H\274ml0=\226\367\027=U5H\275\177}\201<\324\357\317\274\357\221\344;\210\335b:\316\324 \273\277\347 =+\315\220=\352a\271<&\267\210<\335\325\325\275\273\221\243<\3712==\366\2356\274 \361\022\274z\213\007\276.\2167=\374J\363\272Fv8\275F\030\320<\000\305\241\274\214GV=\3525\215\274\254{d=\"\255\214\275\230\335\036=/\241\304\274a\224\021\274\205gS\275@\250\000=\177\273\266\274\360R\001=\256;\222;\306\2639\274\341%\245<\303\034\020\274\261\331,\275f1\336<\tqr\275=\246\241\275\216uv\275\375\016Z=\3470t=\323\020[=s\256\\\275\234@\'=pib\275\251a\021=\230\211`\275\365\234n\275\353\240S<mm\230\275LpJ\275\315L3;\247\031\202\274\216\260\327<q#\230\274\371\221\256\275<xl<\236\327\265\274\234UP<\034\243z=\323\016\n\274\000;6\274\221\006\204\2754\244\232<\200D\360\274\225\317\025\275\377.6<\217\327\366\274\377\207S<O%\243\274\224m\022\275o\335\362\274e\221E=}\342w={\r\031=.\374C\274$\"\017\272\022\321z=/\343\355<\213\345\377\273#)|=\263)\300<\344\301\231<Q\312,9\330\301\245<\313\020\275\273\230\314\344\274\356\014(<\275^\207=+\233\204<\263X\261\274\355\323\255\273\034}\004\273\034V\226\274\341\277D:)+\261\274\271D\024\275M\312Q=r9u\274\312\202 \274\334%|\275i\204m\274\261\365g<\"\036\214\275\330u\231=\037\250E\275\302b\363\273\024\242\244<l\020N<-9\267<K\214\014=\331d\'\2751Y\374<J\226\002=\032\357i=\205\342\003\275#\331\226<\354\014D\273\276uj\275\341\313\004=znm\275\335/D=\337\316\222\274K\373\231\274\021U*=\203e\206\274j\325\312=_(\303\2759,\370\274%\207\303\274`\000\016<\230T\030\273\245\335K\275\322\035\214\275\3061\231=}\3602<0\235\031\274\017\362F=e\010\366\273}1\017\275\205\264Z=\203\303a=~\375\020\274&\217>\275\274\242\211\275\351l\311\275v\213=\274k\276\027\274Z\340\\\275\222\371#=\335v\033\275\271\366Q\275O\000\235\275;\257\277<(d\231=\355,\231<\300\320E\274\336A\336<p\242\322<\023\366\263;j\364\355\274\340\271\367;\331\211\270=\261\265U\274\024\336\004\275\243\037\223<\3266\237;^\001\236\274C\254s<\206\270\201<\211l\'=G\007\020\2752\375\253\275\273\265\347\274\\\036\030\274A.\266=\233^\007\276\236D\211=\356\271|\272\276\351A=\035>#\275\3475\315\274\272\262\213=k9\030=\353\371\301\270\202\211\322\273.\350L=\216R\251=\203we\272rL\200=\214P!\275\026\004\254\274\013\227\240\274J\240\253\275\' -\275\310\313\273\273H\006\001=t\232\360<\273+\024\275\217\035\215<<\013q<\321+\"=V\320_=\n\245\337\274Y\220#=\370*\237;F6K\275\301\226\023\275\025\345\242<\366\032k=)\372\372<\251\254s\275b0\212\275\330\257I=\032\025M\275\023f\264\275F\374\203<\2053\274<0\244\322\274K\253\335\274\025\302I\274*\273\363\273\032|\262=\256\317\272\275\251\2231\275\216\366/=\343-\360\274d4\323:\363\300)\275\266\205\033\275\342v.\274\372#h\275NB\225<\005m\270<\003\276\305\273\224\'\367\274\354Z\007=\331\251\316\273\213kU\275>\364\005\274\306q\375\274\311C~\275a6\347;\342s\203\274\262]\366\274uV\221<\010\243V\273\352f\251\274}5\204=9\215\276=\244\206\340\274V\034\343\275\216n@=y\201\034\274@\255\314\274\345\250\222=\266!\t\275\325\364H=\035\036\206;\002\320\205\2731\327\021\275\005\214\370\274oX\223\275\331\2707\275\366\311\000\275QN\257\274\246#\374\273\033h\032;&F\026\275\233\n2\275\250\346\262\273\013\355\010<\031\351#\274\201\r\217\275\014f\205<m\350h:\020\337\212\275\373\275b\275\340\362P=\005\346\231\274\337\263\247<!\226\001>\251\000\033\275\033\007t\275&X\307<:\237\001\274\022Xx<A\310\256<,U\335<#p\354<\233\376Y==!\225\274>7\227\275gO\021=\301\232\366\273\235P*=Hw\221=\315@\236\274\363\252\205=\032(\335<_q\323\272\247R\304<\r\331\337<_\210\r\2761&?\275\3526/9 `\201;\307\2132\274z\316#=\016E\351\275Sf\251<\037jB\275\366\220\'\274\3712\017\275\235\331\265<)\275\t\275G\023J=\240\365\034\275AI9=\302L\\\275<\261J;\311\n\377\273\321\232H\274\301\367I\275L\343\306\275\271X\002\275\001\004D;\351@j=k\272\031\275\276\023\017<.\347\337\272,\364\226;\313\020\227\274\304\215$=\265h\254\274+\245P\273\202N\210=\271\372\033\2744\372\353\274\031\023\376\275~R{;~\270\006<\231\244\236=N\367\365\274#\'\026\275\2476~<\3754\272\274\216\221\305\274\317t\206\275\210ER\275\313W\337;d\337\207\275tn\236\275\232\250\000=2l=\275\276\215\356\274G4K\275C\233*<$\206X\274\370\263\213\275\276\277\307=\307\307\333\273\351\307y<j\306E=\366dm\275\210\350Y\275\337\202\375<\262P\350\274\372\250\016\275\021x\242\275\001\372\344=o0\330\274S\235\030\275K\351\033=\234n\016\275\204\350t:\025\357[\275\207\324-\274\232~\275\274)&n=q\315\024=3\360c<[dY=i^\r\273\210bO=\316\304\016=\204\237\t=Lo*\275u\311#=\033\341B=\272wn\275\200R\243=\n\270\274=\020\021\242\272&\271D<3\217\217\274\367\307\335\275~\322\266\274\230\013\377<+H\367\274\263[Y\274\334\033\201\2740\257\340\273\010\265\244=\254h\244\275\246\205\305\274\t\261\020\274n\347.<\236c\354\274\363\036\232<\333\233,\271\327g\030\275\177\261\205=\2777?\275\316J\034\274\302\351\310\274\020\036<\275\016\"\310=\030eI=cg\336<\373\243\006\275\230\207\304;\026<\264=)p=\275\001\373f\275b\220&\275\0259\352<\355\3704<6J\356<\267\303%=\375\036\213=\377dl\273N\326\031\273\031\014h\274!\007\300\273\020\211\313\274\371i\224<\365\027&\274DM\361\274\370\210\001=0|\262\274\036\350\314=A\370\032\275\021\260g\273\205}\223\274rA\233\275\035m\034=\251\244\217\275\226\0251\275d\200\217=R\333\037<6qe=\010\315K=\342\346+<\213jy=~.\333\274\223\351\216=!9\020=E\262\233\273<\036\357\274]y\251=w\254\210<m\016\204<\242\263\305=@\374[\275A\225\221<t\230\344<C\027\004\275\255\216\t=B\300m;\276mv<\010\327\243\274i\332l\2753\022\001<9\304\300<m\265\256\273s\023[=~U\034=\r\177[\274\346\354\017=I\242\370\274\347}\266<\234IU\274\036\036z\271~\311x\274\232\232-=\200\361\246=\264\213\271\275\364f\003\275\254\270\353;\240c\267:#\337p\274\343&\314\273\240\361}\275#\342\367\274\370\027(\275\351\373~<E(F=n\356\237\273\017\326\331\274\267\301\256\273\356\225\207\273a\231\263\273\355\262\235<cQ\276\2743\345\031;\303\301\261<\266)+</\362I\274\323>\233=~\261;=vs\312=wH\322\272\340F.\275l\347\005=\"\3639=\242\300l=\351\007\237<\024*\016\274\267\376\267;\272\214\212\274X\033_<\330\026e\274\342\3772\275\361\000g=\210C\017=\251\000\225\275\233\212N\274\3708\316<H|\224\275\026\376\177<a\333\340\274\321\364\252\274\214\335\022\275\023\363\324<z\030x<h\272\225\275\314G\363\274` \n<`50<n\272r=\034\0321\275\266\351\356<(U\t=\234\264+\273O\000\001\275\214\0322\275\030\226\260\274h\000\207\275\007\332[<R\273\314\275pH%=\203\261\023\274\035}\311\274\261\033\303\273\251\037\020=t\233$=X\275\254\2741E\360;\273[\035=R\262\270\275F\020J\275\270\262\002\274\327\364\007\275\003\351\332<\254R\212\275\232\210\225\275\031W\261=\241\2127=\220#f=\365\021\344\274\033\361\035\274_4\270<\270+\232\275\203\264\000=\247\202-<<\"\300<\'\374\242<\212(*=\365w\354<\261\363W<\010\204\314\274_\224\313:~V\332=\250\236\372\274p\200\013<N0\366\275j;9<\247\320)={\303\205\274\221fL=\037>f\275\377\314\020=\276\355h=\325\344\274;X\000\214\275H\315\201:n\312\252=&\261\\\275\274\365u= F\006=\363\206\207=\313\224\216\274{)\340\274\243\226\264<\325R\250<\310\034\014\274\325\336\355\274\010\237\021\274x\030t\275\036\310\303<\334\007)\275I`\263\274o7S<\177\322s=\032\256i=\032\377\024<`$m;\\\315L=@\252\257=\364\275k<\377\306Q=\001\275d<n\215\033\275\236\'\352=V?n\275\357\335\023;\021tJ\275\363\267];\316n\254=\330\352R\275d\320`\2752j\214\275\021e\024=\001\267\256\273\323\374N<\266\322_\275\336(\334\274\326jB\275#\315\000;\000m\213<\033\230\205;{\313\302<\232\255\365<+\326\226;\323\036\307\2755by\274\327C\302\275\2002\343<\003\255\034<\302\205\346\274\006C==1\352\246\273^-u=\371\356\365\274\365S\234;\302\311\020\275\tN\220\274i\224_=\203[\360=\315\224\326\274\'\243\206\274j\340E=!wK\275\230\034\376\274b\244/\275~m\310<\226\013g\275\234\364Z\274\314\034b\275\362\351\313;\"\302\201<H\224\333\274\325\032|\275r$\343\275\333\221\002=\022\373\021\274\243\342$<\013}\203\275H \251;\035\031\217\275\221\217\206=\022\224\256\275_\262\230\275\301\200\255\275b\373A\274\204f\252<\3734J=n\210\311;-TE<\371\2347<VB\005<k\032\344<\326\344\213;\307N\200\275\320\257\322<N4\367;l\376\351\2746\001\212\274>\351\200\2755ac:\377\251e\275=\021\345<\332\013E<\205\206(\274X\207\246\274\236\2550=\340~\262\273\032\217B=N\032_\275\360\264\226\274\251\201\307\274A\201\231\275,3r\275\334/q\274\204\373\027=\272Z\3459j`\025\275w\236\003\274\334,\373\274\237|\235=G\211\327;-jO\275@9\010\273\2614\304\274\360\217N<\336\002l\274\243j\2519\207\247\317\274e\361Y\275\213\302\201\275\r\233\353\274\243WP=N\353*=\'U\220\275\310-u\275\332\361\003==l\225=\266:\001=\376\3725\275%I\023=\t\233(=\037.<=\231\251\341\273*BQ=\233\003\260<\315\204\255<\310\211\212\275\021\207o<\302C\224\274\330D\024=|\323V\275\177a\335;\305`\210\275\370\007_\274\2523u\275\232\027\017\275$\360u=c\210\t=;\\z\275tA\023=\'\277\232</W\212;\225\345K=ib\360;\"!\\\275\301.\032\275\360\330\016\273\355\216-\275w\376\216<\375\233\254\2743\360I=l`\t\275\230l1\275#\2529\275\321\202\213<\203xg=3\303\032<\352\324\'=\"*\254\275\261\270\274\275\001\327\307\273\320\245\007=O\311\335\274\004r\303;\342\010\000\275?\250\221;O\231\205\274\203\335\016=\250\310\276\274\376\246\211=\351\264\314\274\377G4\274\365\013o=\220\207\326;\253\035\337\274\014\364 \275\022\335l\275U\035\334=\007d\276=\252W\271<w\225\372<\001\346\'\274\221\276z\274\371\236\226<\013M\007\275\005\322\266=\2329\264<\rr\003=\372\266T\275D\350\203\274h\223\211=,\330\366<\234\000\020\275N\247G\2734,X\275\334\232\315\274\035(\242={s\206\275\177=\240\273t~T\275c\365\267\272\321J\021\274o\323\246\275\242OV\275\320\363\334\274\301=.=\021\004\352\273t\365#<\266x\r<\334\213\021\275\374#b\275\345\232_\274\355M\035\274{u\006\275\254\035w=\327\002\000=\2654\314\274IQ\220\275j\236\271=\234\227O\275\2540\244=X\351G=p\312/\274\272J\205=\022\230\216<\341o\006\275\037\343\306\274J\016\242\275\375\311\013\275\"\362\261=\252\017\032;T4\200=\014\203\335<\270w\005\274\277\270\206\2759\303\221=!*e\275\275\3568\275yV\233=\356\254\037;c\224\035=\033\275\207:\026\240\005\275\347\001\322=i\026/=\036\013\246\2757(\261;\350\315y\274\023gU\275\035\037\010\276-\276\310\274}\034\223\274v\3618\275\223\276\322<\376\016J\275\2476D<\373:\226\275\356X\203\275\205\253\254<7C\336<!\371\006\275\275\035\322<\n\'\321=\211r\220=X\355\353=\002CO=ez\242=\227\213d=\"\310F=\035%\014=\202\263,;{u\'=\327W)=\214\3032<f\232\222\275$\362\222\275\333\030\005<\252\221\002\275:de\275\035\363\241=W&\014\274BDy\275U\361p\275>tC\2745I2\274\310.M\274\020\355\035\274\363J\014\2747\312e=%5\317<\2166\307\274\361v\256\275\007\227\2049Db\247=6\303\024\275\021?\214\274?R2<\000,\223\271\254\325\242<\323?\010\275\317\246!\275\215\224\377;\317h\374<U>\010=\014\372`\2713p\205\272\230\344\326=x\352\374:\251\321\013=\317\327\372\274\251\000\027\273H\262\354;\360\320\271\275FE*\275\030\364\360\274\204u\"\275\226$O\272\220\301H\275{\021/\274\237\250C\275U\003U\275\355\272,\275\344X\033\275\205`\322\274=\226W\273\305\372\331\274\260\314\307\274\303\2428\275\230}B\275\312,0\274z\326\236\272Z\0357=\217 .=P\363\024\275E\325*\274\367\226\013\2746@U\274\3032\021\275x\221\326\273\n\354\333\275\306\005z\275\314\3769=\335\311\024\274\020\201\024\275\370\251\212\270ev~\273\305\221H\275+\322\275<\002k\t<\006J\363\274\234\222B\275\305A\215\273=\351C\273\026\020\350<\331tE<I\016\236\275{\321\336:\375)\027\274\300M\242<\321u\235\274/\232\343;\024~\215<O_\025>;g\222\274\265\005*=\317T\304<\n\263\323<\210\250\025=\227\352k=\027\002\240=\371\225\024=\001$\220=E\362R<\305\275\375:\to0=\272\276Y\275K\027\010<|\006\217=\206M\316;$\361\371\273&\177\377\274\321\304\357=\022\241\335;:\315\240;\214\275S\275\006\227\t\275,\370,<;kG\275{^x=#`k=\026\317l\274\244V\237\274b-y=\nZ}\275\367\207\363<\027\342\332\274X\260\020=T}\037\275\030?y\273lQ9=\275{B\275\334*\017\274f)$<\004\373\000\275\355\036v;K\360\224=Pb\230\274\365\030i\274\026eS\275\302\301\305\273\302\205O=X\235\260\274\356*\321\275\275d\232<\231k\225\275\363\374\254\274\\\201\317\271\203\365.\275\306\336\377\274\342\023\222=D\004\257\275\004\215\227;b-l\275\365\270\200<-\031\017\275\031*\317<\300\266\347<\300\327K<\324hO=Y\202\374\274\\\375\346\274\232\177\251\275\277\370T\275\367\376\033=\301\241\203\275(\361;\275\261%i;\023\304\275\272w]\243<A\330\023<\027_i\275^\341\203\274:\274\261\275\267R\334\274\367\230H\274\274\033C\275@e6=\033\357\300\274w\264\247;\210\022c;\357i\003=e\347\233\275\002h*=\006t\021=#\373\266\274\245Y^\273+\320\252<\265S]\273\027\031L<\373y=\275\210pN<\250\0140=\366\321\021=\265p\010;\362\347\323={\371,=\177\222\003=%\016\007=a\032\'\275&\202\262\273\227\037\237<F\251\371;\212s-;_\257<\275\021\313\244;\355(\021<\324!\005\2752\245\301:\252\237t\275\337\271\236\274\231\325D<\003i\327\274\254\331X\275\3349\214;\354\243w<\353\325i=C\3118\274\2763`\274\020\307\205;@\262\223<#\214V<\227\241t;\207\335[\274\313\222\233<\n\274\350<[1\337\273k\003\020;\204x\314<4\035F\274\003\256\202=&\'\370\274\375\204\024\275\335\335\202<\200\376\344<u\345\023\275\003\314\223\274 \000\022=Cw\362<g\320\203<\234\305o\273\\fQ=\226x\023;t9\017\275\325Z\026\275\222\314\307\273\343s\265:08\350\273{\353\025\275\312^\267<\210\365\341\274\333[\010\275\231q[;\366\031\010\275\036\305\321<Zs\361<\243y\304\271\266kg\275\336\234\t\274\327\035\201=\350;\313\275\334\255^\273\221;\236=)\377\325\274w%U\275\001\006\310<\2373\327=\367\207\017=\331\\\251<\354\204\342\274\250\242E\275C\345U\275;\373%\274\363\243\234\275E\315\213\272\t\301\245<9\220?<B\345Z<\356}>\275\271)2\275C\033\354\274- \246<\263\344\343<\331\346\'\275\376\246\025<\201\242\314\275uf\016\275\334L`<\177\250\261\274P\025J\275 \251\\\274\'$I\274\221V\024\274l\253\362\274}\216\250=,\321\350;\n\313^=\313{\342<Jw!\275\263RQ<,\351\220;\252-*\273\017\360\005\274\300\330.\275\272g\340=\374*i=\236Sx=\031\333\332<\251^C\275\r\363\004\275B\021y\273\204\266v<j\224\204<\341\r\201\275aT\250\275\215\252-=vFs=\025\034Z=\363\267\356:\242kh=\'R@<\210\224\365<oj\371<K\214|=\324dS=\250\3151\275\352Q\227\275\234\244\354;s{\230;\333\204\376;\304h\024<D\353\014\274J\337\277\275>\244\217=\217\275M=\322\204K\274\035\340X=@\247k=\000\355\220=5P\004=\262{E=\347\035]=\270\217\226;\034#\001\274\3628\343=\2278R\275;\301\037=hw\'<*_\024=H\362\354<q4\224=\200N\203\275\304<\035=\010\256\321\274T}\276;\255X\244=\266\336&=M\264\250<\356\266\010\2752\225\241<\323\372\241\275\244n\025\275B,\262\274\241\341\222<\200\2076=Y\232o=\354\247\242\274=t\330<\272\220/<\014rT\275\350:\244=G\361\226=:\250U\275\302\2306=B\243\222=\200\275\261\273\355d[=}\233\016\275\254d$=\256\304\333;\270\335\004\275\313\363\226<v6*=\000X\240<k\027\207\275\315\"Q\275\223Hs\275\237D\020=\352\240g\275\3226\201\273\177\301\253\275iU\310<Q\360\201=Xe\234\275\336\315\\\274DGB<\032V\255;\245\263\342\273Z\226A<\363\203\307\274\001\022];\230\276h<+\270\013\274\231\01079~\363-=\331+`<\001E\267=\206w\301<:\301\t<\237\023\262\274\300WF<q\307\361<\255\214\353=\205\346\233<-\005\270\274\3656\303\275\302:\336\273\3212\245<\312\236\200\275\270\t\004\2753\010\351\271c&\t\274\036\032\307=\236\203\020>\213\0075<\2032\234\275\376h4\275\354W\222\274z\014\335:\255d\374<\263\177S\275\343\200^\275$/\362=\277\017\n\275v\231\263\273\373b\313;\232\024\221\27506\275=\202\346\332<\006\366\253\274\236\277\030\275S\371\361\274\010\307|=R\213p=\207:P=E3\t\275\274\030\373<m\332\366\274#IT\275\206=\336\274X\274\013\275{\326\307<\263\203\n\274\315AV\274\313%Z\275}&\214<J\205\276\275c\335l;\334\246c=\331*#=A\016%\274sp\204<p\242\211=\207\237\312<\177\220\342<5nC\275QA4\271z\300N\275\007,\325\273\304\'h=\307#*=;\260\213\275A.\321;;{\357\273\032\r6\275\211\225\023=\371%\252=\014\301r\274\327\376\235<\366@G\275\357\227\323;\325\003\304\274\211Y\304\274>\347V\275\313X|<T\237\025=sv>\275q\245\302<\207^\003<\343\351|<\226\227\202\274\305\307\246<y\301\213\273sI\200\275\330-\223<\252%@=\010q\";D\267\264\274\345\377\330<\303y\";\330k8\275\204\037]\275\016\213#\275;\213\320\274\235-+<\225\367\024\274D\027\207;\370v\222=\340\277\216=x\313\330\274H\270\312\274~\260\301=r\330\177=J\037t=X\227\207=\356C\233\275\003\272\017\275{\317k\275\353\273d=\372\273/:\003\257\313\274 r\"\2752\256\276\274c\213\206<\032\340R\274\350\271\336;\215d\212<\302\177\t>\331\025J\275\201\320\211\2750\317_\2756\342|\275F\346f=\253U\2338w\221\232<\002\004\371<\357i\363\273\017\205H<\302\273\307<c\036w;\362\371\000>\350\334\177\275#\274\345<\311\022\272;\371\357\333\273\220\324\n\274v\204$=\235\022\002\272\206\323\320<\014\004R\2741\237\005\275,g\003\275\241\n\026\271\2174\006\275+2\232\275\377\340X\274\021\262L\275\037|\020\274\344\223\211<k\000^\275\216\2640\275Q\n!\275@\225w=\017\271\216<\221Y\271=\n\334\250<\310\027\256\274\270\251\260\275Dw\351:\225\226T=\345\330\261\273\356\304\t=\335\314\004\274\365\3059\274\010\327u;Ng\312=\316\221\243<\351\350d\274b- <]2Q=[\247r:\336-\261\274(\000V=\344\331\276\274\037e\361\274\371Zx\275\241v\241;_\277\352\274\243\322*\275<\313\021<VB\251;7\003\241;\232.\005\275)\376\264\274\021qG=m\332\264;\254,\364<\016\312U\274,1\0349_l\235\272\0029e;\2725\351<\t\323$<,\241\010<R#w\274O4c<\001\337\000\276:\376\256\2740\330\016<\251!\027=&\230\364\274\037\010\030\275\265\235\311\275\236\236\'<\310\203W=\033\014\022=\034-\213\274\r\252\217\275\177\236?=\220z0\275\007\032\333<>O\256\272\3176\243<?y\274\275\225\036\344\272\320m\253\2759Mb\275\233\352\224\275\030c=\275\354\023\234=\031$\213<\274\306\033\275)\232\227\274\234+\210\275\353\370\342<\332\356\200<\233\264\200<\216\336\017\275\306I%\274Jva\275\337\241\260\273p\302J=u\207\"=\243\325\205\274F\rZ\273;\354\255=\213>\243\275_S\216\273\250\245\024\275\303\'\216\274^\234\017=\222\323w8\276\t1=\203\364\225<\222\345\270\274\352\350\375<\322\034\330\274=\022a\274\225\364(=\030}D\273\313\0227=\250\336a=\310\245\217\274\271.\242<\325s\\<+\225\306\273\223\211\246=\264\337e=\013m\322:\014d\341<\022Y6\275u?X=y\240\327\273\352\305\221=$\"\336\274[WC\274A\330\247\274@\021\243\270)9\352<2X\231\274Z\024\200\274\336\320\342<\006\033\037<\366o\267=<\235\223=\021p\347<\022{5\274r\017E\274\007J\225\274,-\355<\341]\"=\220^\301<\267\027%\275\301D\247=\207Et=0\3372=\327o;\275E\027q=\351\232\322;\363=\261\275\321\320\300=\2202&=:\257\211=\364\346z\274q\242\260<\373\205R=]*\016=c\035\006\275\333\033\033=\361\313\353\273-\030w\275\202\263\021\275\203\"2\273\226a\265\275\203\025\256;>\360j:\360a\233<\n\356\234<\201\204#<\341K\343\273\303\362q;f\270\364<\001s\030<Zk~<\373p\341\272\330\304v=\330<\'<\232j\r;\227Z\256<\205P\301;\206\247\344<\251\035\336\274\037c\341\274\343\273\312\274\345\3145=[$>\274\213B\366<\360N\333<IZ\t\2759\035:\275n\231\216\273\302\343;<\342\301\021\275_J:\275vS>\275\017H\274<\214\001\201\274\037\213\366\273\306\241\241<)2\035\275\373^\215=\306Lo;S\220\332;\r\231\010\274\241\3018=\032S~<\242p\226\273\035\310\363\274\003\210\035\275,`\235\275[\270\027\275\322\335U9T\226n=\221\226\206\274\350\232\226\275:{\276<\314\231\233<:p&=\316\362\002\274\013PN\275\235\373\205=R\317\036\274\255$\272\275 !\321\274}\224\001=&\204\301\274\301\375O\275+\316~:\327\367u=\004\006\246<\021\001X=\353\331=\275\241\206L=k\305\311\275PJ\273\274\226\035O=\250{\235\274\311\246\005\275N\221(\275\372m\016=\327\021\257\275\270\276\022=\272`\223=\261=\331\275\335_\307=\341[\202\274<\177\033;\303\264\013\274o\351\023\275#n\'\275M\364\202=\305\010R\274\034\226\335\273\344\237\257<U}\\=W\251!\275v|r=\271-B=\300J\003\274\365\303\266\275\322\224\201=\002\215\033<\352\307t=\003c\003\275\267\305C<\254[\356\274\344\321\203=n\245\014\274\327\231\275;`a6:\0040\331\274o\014L\275\010Y\022\274\0228\367\272\266(\316\275\217\272\032<\304\251O=DzN\275D6\346<\324^\261=c\023\332<\211I\333\275?\252\013=lmS<\004\333\302;\025=\205<)\313\213=\243u\256<\373V\203\274\363\036\202<U\330\252;\361c~\274\207[\003=\026\027\276=c\346<\274\352\021\231\275\221\324\r\275\2379O\273\356\327\272\275\363\313\254<\313\244\322:\247\251\210\274\346\317\225\274\017S\331\273\022\231\252:\305\2268=& 1\275\302\345\235;\371\204k\275[/e;)\022\201\275\214\211H\275N\317K=p\034)\275:\252\266=B\335\004\274\346&\006=\023x5:\177\243\006\2758\007G\274\274\233\307\274\375\233\351\274$\243\261\275N\240\036=\025\225R\274\307.\211\275^A%\274\230\247\336;\272\277\025=\334\367\352;\204\251Q=\001\223\372<\026\203\016=\225\353\262=\023\337\263=\026\264\272\275Z\335~\275+\\s<~\323*\275\226\005\201=n\276\'=\'@\306\275\203L^=\224O\202=E\036]\273\023>J=,\"/\275S\373F<R\017I\275\236\030Y=\314\336\257<\002\332\237<f\300\242\274\304\036\251\271\\\241\262<>\345;=\211\263\275\274\306=.=\001\270\366\274\"$O=\200A\234=\306\324\207=\251\ru\275\315\301\242\272\3402<=\265\224p=\272\340\204=\244S\355<\030\235s=\027O\332\274@\010\243\274b\016y\275\251\321X;c\366\n;\347L\256\273\005S\223\272\363,\\\274\037LU=\257y\037\275\306\032\254=\025\273A=\243u\253\274\230 x\275\207\224\020=\226\014*=<^\035=\314\210M\274\373g\032\275\005a\255<\270\324\341\274\315\314\312\274G3.={\010\244\274\006&t=\362X\202<\314\211\020=n\036\366\274\305>\016\274\345\362\n=\251\251\223=H\312\334\275\360\271Y=yS\347\274\025\306\354\275c\306H\275\005\006\370\274\217\303\306=\260d|\275\277\277t<\245\215\302<\231\206W<k\252\264<\250e\n=\'8+<L}?\275\256[\233\275\245\216\217\275\332\347\332=D\036\031\274p>\232\275\252\245\216<\373\301\223<\227\010\304\274\034\356\002=\305V\214\274}\210\270<9\037j\274\377w\366\274!L&\274\2353\201=\014\310\'<\250\350\225\275\322\312\024<b^9\275\256_\331:O\3042\275Ip;=\301\334\240=\362K\026\275\347\355\000\274\325}\274<\037\320\340\274\375\351\300\275\310Z\342=\255\2705\275\216\307\203\275.\233\260:$\210a\274\321I\023\273;\021\331\273\214\310\276\274\216V\030=\214-\260\275\005\253\264<\361\022U=\251\263k=}\352\265\274\255\330\336<\205Wa\274\031\006%\275\255_;=\303\236z=\320\3129\274\301\024\377<\302\232\302\274\327\355\353<s\322\213\275+:9\275JO\240\275K\037|=\255\332?=#\301M\273\004\"W=\262\271\216\273\r>\231\274\004\207\256<\004\353\235\274\231\357\032=\305\225^\271\016\256\024=OFr\275\\]\271\274er\240\274\203\276\247\275\376\272K\274,\2600=\271\320\320<\350\262\034\274:f\321<ag\333<\220\032\343<\376@\230\274\272u\005=v\202\036=\233/\260<Y\034\231=\274^\343=p\001\330;D\347\246\274j\265?\275\206\233\326\272\264\357\352<\265>4\274\333\004.\274[\235\001=\223y\217\273\271\204\t\274{\023V=\250\240v<,\336\205<i2\207\274\236/m\275\276\237\006\275\\p\310\275Cp\205=\177\325\235\275:\311\014\275\374P\034\274\203\322\334\273\016\363 \275[;J=\005\251\340\274\267\252\213<O\037\003=\010\250I\275\200#\221=\226;\005<`\351:;\305\336s\274\013\031\223\275l\037\373;[\005\005=cx\227<\002%A=r\214\323\275\204 \344\274\307\227V=5\275\022\272,/M=\014\007\223<\271\200\007\275W\005\277\274\301Z(=g\016\021=\350\214\003=gY\3679\206z\033=\023\263Z;s\347\200<M\325f\275\200\213\271\275\307\250\330;\216,\024=%\337W\273\371w\250=\271C}=\223\242\030\275\346,\223<\271\325\016=q\027\222<\353O\223\2743\247:=\351\034\033<f\226\261\274n\316\361\274\373\212\341<\304\033\360\275X\024\246\274D\204T\273\301\365\300\273\005\255\242\274\312\306V\275O\373\313\274x\334\237\275\237\210\007\275[\277\307<\3759h=\27061\274\343\210V\275S\232\312\272\rI\027\275\302\366F=<\301\232\275\n2{\275\031\253K<\362l!\275UX`\275q\033\262\274g\205\227;\270\307\"\273\315P;=qhi=fp\232=4\320R=)\305<=\330\216\224\275\260\206\177<$\211\000<\273\"\035\275\340\273.\275Xg\267\275\366\330h<\230g\237\275\266\225L\274QbM=;\221>=7{\030=9\004H\274e\376@=\231\026\252<]\355\274\275\027\r|<t\267U\275k\327\215=\211\365?\274\270\345\r=J\311\033<\211Q4\275x\2624=~\303\266\275\323\026\330;\246\356\276;\014\033T=\366\362\216=\0146\t=>\337\237\275\0243\237\274[<%\273ne\204\275$:<\275$\224\205\274s\330+\275X\240\'\275\201\246\013\275/\316\255\275)\252%\275\343\322I;,\271\211=Ee\000=\023\367e\275\r\214\231\275P\2318\2755\257\261\274\366\2030=O\303m\2758\013\207=\340\220\232\274\205:\260<\312\347z<\350>\206;\247\220\306<\315\277\217=\254\226\240\275\247q\212\275\242\315\227\274\2373\202\275\345\213\231<\333;\355\275-\346\031\275\002\014\314\274B\017\217=\272%\207\272\343Z/\272\3749\307\274\001\236\337\274+W\201\275\004\324E=r\242\200\274\3563\351\274\364m\256=\255\320\351\274\336\002B;\256n\241:bU\201\275\321\344\236\273\2216\004\275\266n(=e\311K\275\230\"\357\274\343e\371<\"\264c=.\233\201\275\242Gw\274\013\337\2718\010\3642\275(Q\032\275\311\010\231\275~.\254<\364\357\025\275`\260T<^\275==\313\346\004=;f_=\212\'s\275[x\275\275\2669U\273\270\335a\275P\314\320\274P],<\346\033-\273uR\253<\264{z<2\\\306<U\251L=\223\032\352\274\312\"\363;\245\003f\275x\307C\272Y \256\274`\203\266=1\332w\275\002\207\261<\251\224\261\2737\3051<\370\301\310=\n\305<=B\355\030\274\273h6=\271\241l\274\361\246\224\275N\032\353\274\270\004\325\274\305\372D\275b[\366;\274P\223\274\251W2=\005&<\275\213\270>\275\342Q\342<?\323\215=\263\363\317<\342\233\014=\207\243p<\256\375\302\274R\013d=5\313\234\273?wS<\227\371\256<\334\367\010\274\031\361 \275\353\342/=mf\307\274_\2674\275\243\342\033=\265\370a\275c\2301\274\204\305\331\273\335L\335<4\306\300<\333\203v\274\245\235\353<\377\021\t=\355\347\263\273\263\007\340<\251\334\244\274\206\005_=-\230\364\274\270\261\215\275\315\301&\275?j*\275mIH=h\n\232;\210\210\370<$\354\231=\300\212\314<6C\211\275\2459f\275jV\024\275k\322\216<\207\274\227\275\372\236\034\274\253\367\216=g\025%\275\321\230\036=\215)\256<\267\232\253=\215\030\025=\344jq<%\215Z<\340\376\315<\245\207 <5\351\315<\263.\270\274}\n!;z\304\205=:\362+\275\217\016H=\024q\257\274\326=\341;\334S\014=GuE\275\276Si\275V\233\361=i\366\035;\245\306\271\274\233\345\270=\r\373\353\274\345\334\026\274\370)\005\275\211\237\272<\353Gh9Ft\007\2757\034\221\274\331p\320:$=T\274\367h\352=\"\256\223<[f\323<\242\023\225<\273 \225;9*\277<\200\304\231\275-v\245<\217r\257\274\224>i\275\3074\247\274\261\317\177=\321\372\032<\336\007\335;d\321\343<\213\261*\275\230\377\260\274\230-J=q\240J=\267\244\362\275\373\314\263\275\3707\272\275\204~\223=\334Z>=&\030J<\242\'4\274\215=\033\275Y\235\312<\233\337J\274j\210\022\275\013\246\270\271\r\363\242=\001\373 =\t:\016<k\022p\272\317\356;=%\320\004=\365f\335\275\325\227\333<\231L\275:iJB\275\226\207a=X1H\274o\n\014=\343\207\377\274\277<\007;V\346\206<\007\364\356;\207N\213=n\340\231;{\313\246<\332E+<Da\312<+O\264<,\212\312;@{\207<\017\242%=T\364I\274\272p\005\2744\265\203<\264\033l<\3227\n=\036\005J\2755\251/=;\276\372\273\002%\031=G\361\003\274+\204\203\275\277\276\235</\260\256:h\211\206\275*\213\'=HQ\323\274`\223\233=)\342~=#O\207\274\275\007\255:>X\036=U\035\t=T\'Q=0\306M\2759\013\231\274\n\264\250=!\303\270<\223N\370\274\257\001\234<\254`&=(\271\033=\340\314D=\275\376\266<\036X\322;\243\210\235=\2468\270=\024\237H\275\345#\203=\300\340\016\275\314\374\020\275\361\327*\274\030oi\274\3304\211\274\251{\274;\223#\030\272M[&\275sB\370\274w\037\210\275sV\036\274\002\030\245\275\361\001\036=\263e\357:\034e]<b\342G<\367F\331<\253X:\274\233l\016\274(\362\306;\2026\210\274\320B\364\274\265\276\021\275+%\217=J -\274\222!\216\275@4_<\003U!\275\005\215\210\274\302C]=\365\342\035=\214\363@=\266\221\316<t\000\376<\206\234\251<\032);\275\325\241\035=\277\037E=\rg\241=\005\355\265\274\006\2063=\213\276]\275@>\t\275:-A\273H\0377\275%Dt=\343V!=\334\036\371\274\361\367\223\275\250\264\035\275#~\036=3?\031=\266\275n\273\320\320\313<&\007\264\274:\374\344\274\344\215\235\275\3576\262\275\277\005\221\275+\272\235<\375\365\014=[\344\202\275\247V\345\275L\262\000=\307\'\210\275\251\246\005=\2530p\273\307f\224=\207\003\267\273\353\341!\275\240\275\032\274&#,\275B\0006\275g\207\017\274I\324}\275b!8\274+\225\307\273,\314\364<\207\231\016\275\241\252\364<\314,/\273\034\237\324<\0315\301<\257\013\025\274\341\260\226\274\245\353Y\275aV\360<\324\033-\275h^K=\2104!\274\r\206\005\275\025\207\361;\261#\013=i\312O\275\316C\264<\362\007,\275\333m^\275]\033\023=\371.\356\273\275x\300\274H\344\207<K\313@<\205\276\020\275\021)\271\274\000\333G:\376\326p\272\370\026\264=/\232\306;\215\307<<\ne\336<Des\274\007(U=J\236\235=\362@\307<\002\025\021=r\373\024<m\275E=4\350\204\275k\030\225\275J9\003\274\006\341I\275|R\317\274\032\\F\275\251\007\275\274\253\023\340<\347\333\351\274\345\001D\275p5*=\177\3773\275\215V#<\234q\231=\177\272\032=j\343\220=\225\326\275\274Co\244\274\032\222O<\"\242\023=\013\t.\275.\324 \273\213\004,;(\211\007\275\357\331/<EL\t\275\317a\241<\354ld<\033\376(\275LGZ=\330\252\330\274\201N\260;\221L_=\322.>;\353)\377\275\221\362\367;\354^\200\275\332\352\036=)\330;\275}\221\030\275N\330`\273\245\267\027=u\206\263<\356u\211\2758H\252<z\260\244\275\006\014\314=\233_\374<f\237\243\273\220R)\274\247\202<=\310C2\275\347\204W=\350\354*\274\245\031\034\275\256@\357\274>\230\256\275U=\253;q\260\032=\201M\003\275\036\017g\275\306\210\251\275\3729}\274\215g\276=\253on=Em\236\273\272\373H<\234YE\272\211\t\305=\235z\035=\\\254\270=\266\005\003\275?\234\337<\\S\030\272\350\231\222=a\n\302\274\376\305\026=\223\'\022\275\3605\224<1\033@\275n\221\265<t\3134<\364a\202\274g\244\006=\351\322F=\313\005\277<l\355B=QJ\316=\257\374\266\274:\177\331<`\3523=j\262T\275\'R\374\275\357w\260\274\353-l\275,[I;\225\030\205\274\027\372\270=@\320x\274!\334\375\273\":\325\273rH\276<\003\\\316<\340Y\344\274.a]<v\255\027;\320\223\022\273GY\225=\026\244\016\2752\236\256=\017O!\275\020\332^<\002\311]\275\376\033=\275\201\224@=:\3547=\337\206\276\275\270\204\032\275\",\212<V\302Y\274\312\364\234<h?\323\274\003>\253\275\002\375t=\300\267\036\275\017\226\250\273a1b\275z\372\016=\372x\263<\033\246\235\274\314\260\017\275\026\343\326\273\275\364\230\274E\365\330<\\!\017\273\016\352\352< E\236\274\0234\265;xs\343\273\301i\251\275\233gU\275\220\264\257\275\\qA=\325\262\331\273\235\320\000\275\346\277,\275\305\002f=\0224\032\273\205\243\032<=w\204;\300A\204<}\263#\275\237\213$<f\335\241=\267\342*\275|\300\223=\356\334\237=\237\0004<g\366^=^\010\t=\226hM=\362\224d=N;I\275\213\017\257\274jQ\006;1\250\010=\374\327B=B\016\322=w\301\213\274U\347m=j\357\204=\213\361\336\272\257!\026\275b\264a=\2228%=\232\266&<\241\206\005=\337E\005\275\371pE=\233\200\210\275\323\223\321<\342\316\271\273\226\267\261\272\323K\247\274\306\364`\274\267\300K\2755\366(\275\253\233{\274\312\373:\275q\251z=\256\343I\275\337\026c\275\004}\236;blE\274\356H\375\274\004\217\227=,1O<\2621F\275\344\203\251\274FE\374\274Ir\346<i\312\202\275\213\265f\274i\366+<\240|\226\274#\341\214\275\317\364(\274\246,\217<\373\337\363\274\nU\251\2727\001\335\274x\2100<\215t:\275\304\311l=\232z\232\274\325\237\031\274\266\200\207\275/+\357<\343\235W<\207(&\275\337R\255\275\222`v\275\362\017b=\352\256\345\274\321\263\t;\016\345\201\275\325\307P\275\035aS<C)\234\273\304\346%\272\305\271Q\274\311\325>\275Y\225\236;t\323V\273\337~\353;\036J\030\275c\306\013=\0260\227=\364~p\275\346\222\035=\334*\233<\000\314\262\275\357\201\030\275z\177&\272\323B\023<\325\302\270<\320\310\032\275W\237P=\240W\t\275\213\225\023<\361!\243\273c\\\032\275\340}\251\275Q\316\303\275\200\255\236=S\222\303\275\020\264\016\274\212;\272<\2352g\275Kay=\230O\002\274\0073\024\275\343\235\031=K#\336\274K\221G\274\372\231\357\275\036+2<\276\304\017\275\334\327\321\274[8\272\274\035>\2338-;!\275Qb9\275\022U\025\275\225\331\307\274Qk\006=v\255,=\311\376\003=\360\276y=l\242\211\273\006\247\027\275\263\317r\274{$r\2742\010D\274e\205\254=\324\356\334=J\363L\275\000>\241\274K\273\004<z\256\360;/`\201={\235\342\274\231\221\274=z\\\355<\273\037\030=\035\332\275:\263\205F=P?\313<V\345\203=\317$8;6\200\225\275\036o\205=\225_\236\274\177\013\342\274GT\r=3\000]\275.\321J\274;\025,\273[\033\231\2750\304\276\274\222\375\250\274\0228\031=\037\354f=\r\033\034=t\344\303\274\001E\264\274\022o.=\2635\273<\033\303\301\274Fq\375\274\200 *\275SJ\233\274\342m&=%?\302=T\220\224\274\250\211i\274X\032a=\366\262\335<\234\340$=\331eh\275\255\027\376<V\323b\275\347\205\243\274\255\037\245\274\251\366\343\275\355\346J\275v7\037<\242\222\220\2755@\241\274\267\033\252\275\377\217?\273\022\345\360\274\201\2413\275\017\246\213<\350\316\035\274\035@F=*\251\252=<\014\210=5P\246\272W\n1\275\213v|=\304\300\223\274\'\253\223=\0028[\275\016\010\007=\234\311\177\274\261\247\r=u\342\276\274\241\205\206<\372\227\242=\317\212\255\274\017<[\275@\030t<\300\323\377<\r\365\263=Y\240\234\274|\241\214<\267\000 =\274\241\212\275\341#\220=\233t\265;\374\331\214=i!2\274\373!\316\273W>c=\2572\346\274\006\216\007\275\031\352\023=\227\322\021<L\301U\275i\323\353<\234\275\301\275\344J\311\273i\344\270\274\366<L\275<\025\217\274bW\246\275\215\021\224\274Gh\267<\341\347\315;\001Q\275<\360 \354=_q \274[R\260=\353\250\201=\356\n\345=\256C\233=f\322::~\205g\274\346\025\221\274Q\276\205\275K\t$\274\204m\215<\t\177$=2\226\314\273\303\350W\2744\352{\275\354\211}\274\3068\213==[\375<\376\021\311;)S\372\273\300\202j:K&\'=9\326\311;\351\215\'=\375S\215\275\031j:\275\335\024\352\273\271\260\014\275\335\tu<\202c\310\272\006\232\232=*\233]<MZ\255<\311\305\357:}~U<\371\205\227\273\311\020Z\275q\020\374\274\236\325\373<\326\326Q\275s!/\274\366\r\227\275\257\213[\275\234\347\014\275x\2631=\356Y\270=\206\215\355\273\263tM=\365\352{\275)\343\251<f\370\341;6\367\307\273u\340\335\274\235\246t\274\006P\320<\273\350H=\260d\333<\222\237b=\013\246Y\274/\021-<\326\214^\275\032\221\260\274\330\221w\274`\257\352\273\236\016T;\027\344:\275-\227\207<Y\250\252\274\227\215`\274-\251\267<,\317\254\275P!S<\026\274\213=\254\367Y\275K\366\264<\003\270\273\274jV\\\275\020I\331<\236\337I=`tB\274\205[\242\274\277X\242\273\311\245V\274\327\275\341<\266\356\t\275\373\307\337\274JL =\265\035\031\275\260\220\230=\362\345~=\301\032E\274\366\335\'\273Sk\"<\302\267\333\274\357\315\371\274\355\023\362;\341\217\302\274U\235\333=\223\225\266:W\212\250<;\2041=V\274\30290B\007\274T\302\264\273<\'\255\275wo<<\217\206\032\275%B\306<\215\362\'\273_fP\275G\207\225\274\006(\020\275.U\354;7\203\223=\226\\\224=\236[#<\243x>\275\246\260B=\306\240\242<\254\013:\274\210\213\005\275\241\262\243\274V\304\014\273m)\215<\207\034\367\272\337\3370\275\022:\204<#M\025\275(5V\274\334\350\356\274\374q\222\275Q4\263=la\241\274%\334\235\275oEN=\374\036\033\275f\020\r\275)\222I=\000[\264\274\252\267\302\273g\026\217=\360c\202;\331\365\022\274\250L\002\274\267\032\355;\024;\\=Xx\232\274d\322&=n>]\275\3044\217=\255\023\215\275VXH\2736\017\246=\223\224\236\274H\310\221<i\360\223\275\302\n\340\275h \211;\005\356I\275\255\335E=W \233\274{\303\235=\033\n <\'\035\353<\240\304[\275K\242q\275\343|\205\275`c\354\274\251\343\325<\r\227\220\274\332\312J\274\322\252:\274u2\004=\246\013\315<P\235\314\274\216@^\275\014\004\240=\013\270h<q\204X<\002\250\021=\327\217\007>\347\210\217\275\t\276\025\274\335\216\202\275\003\241}\274\363\343\207=#\023\310\275\241\262\253;\342\205\220\275\030\224S\275\212\310\210=k4\032\275\324\321h\275\374C\266\2751$\227\273@z,=\207\236\016\275\364\347.=\273/|<l\311\275\274\341\212\365\274{z\\<0\021-\275\034\336O\275\271\240\236;\250\"@\275&r\300\273\312r\004=#,S\275>E\223==\242\355\274\334\204\033<\304~\240<\332\201\320<\\\331P<\222\255\316<\331\017w\275\342\253\030=\352\367\215\274\321\300z\274y\244\227=Q}\232\274\025y\366<\366\202 =\211\201\271<\024\331\254\275T~u<V\254\021\275}U\244\273u\267\370\274\313\322\030\274W\303 :\262|\315\274P\013m<\352`\007\274\320\337\031=\332+\265\273\253+\265<\312\327\213<\225i\342;A\323\373\274w\022\016\275>%\241<\234\005\255=\342\225k\275~\311]=\360\357T\274\257\311!\275\2361\361\273o\237\013=\257\321`\2751\374\207<\310\310\257\274r?3;\343:\210\275\337\375\273\274A\225c=\210\265C:<\013F\274q\211\337=\035\357K<\027\221)\275\3540\226\274G\3444<`\247\203</\244\024=S\030s\275\357\377\022>\307V\311=\034_\032=\023\364\345\274\030W\001\275\"\242\225;\205\241 \275`mn;\215\314\267<V\206\301\272\321M\266<\330\253\213\275\250oW\275\377!L<\226\226u=P=u=V\221\356\275\026\267\227<\221\032|;\351!e\274w\224P=R\343\205;\0334\n\275Kg\026\273.\203D<\325X\311=\231\3439=#\262T\274\215>\\<\264\003\221=%c\221=\334\303s\275\3634\302\274A\305Y\275v\245l;\n\223/=\203\363\032\275\205\272O=\375\207A=\203\270@;)\246\347\274s\371\245;\327\361H\274\013\347\204<C\036\215\274H\375\036\2745\271\263=>\202\214=\253\301\247\274\311\204O\275\001E\377\274#\246\365\273\212\327\274\274\247\327x=\340.\250<\020\377\033\2757\010\275=&@/\274f\321.\275W\366\223;?\3047\275\202t\326\275\362]\216\274\202\024\032\275\362\233\221<\314\3366<FxQ=)\225~=\350\323\304\275\260|/=\303=\246\272\217\213\211<\007\233{\275\233\213\275<\363\354q=\331\025\"=2\013\004=3_a\274\347b\005<guU\275\036\376\026=\014\354\004<!v\276\274\327\'\027\275\213\274\312\273\311fE=\315g:9\370\307\346<\231\242\252<\252\270\327\275\224\205|=\362r\016=\324G`\275^\'3\27515\216<\0056R=?\340\025=\232\272\022\275*mj=\013]\247\275(\201\027=V\276\2536\266\256`=R=\360;V\232\323;/\327\276;5\343R\274\210\334U=\034!(\274i\233<=\214\005K=@\3524\275\377\306Q=\006\373\336\274\240m\216<\250\3659\274\260\371\241;C\377\260\275\303\370&\274C\313\231\274\311\\\207=\317\354\221=P#\023=f\264\215\275\214}\232\272V\013\202<\222\330l\275\275o\234=#\004V=\364\031\013=\270\206\201<a\320\300\274:/\333\27400}\275\305\002\304<N\346A=\265\256t=h\022]=$?\311\274\007W\264\275Q\246\037<\254\222\203\274\302e\031=}N#\274&bm\274}\307m<\346\331\360;\247\314\253<^G\004\2759\373\021\275\031HW=\027\377\355<\356w\202<\356\222\343:0\220+\275\223#\010\275\016\360\341\273\253pk\275\263\312\257\275kN\301\274e>\253\275I\3310=\206^1\274\201\036\204=\035\007\207;\260\202\274<\203\240`=\331\322\033\275_\362\\\274r\016T\275\307\234\t<\356\224\334\272\312\212a=@\232K\273\363\000z\272w\177\201<\344\016\277\273\345\234\367\272R~\366<\014\262w\275\241\2306= \244\331\274m\376\222\2740\325o\275\346\363+\275\241\3474\275\305\351\225=-\256\262\274OA~<\276\0311=\327\353O\275\nXG<t\220\242\274\255\026X\275\222\357\260\275a?4=;0\'\274\3772\245\274!\202\252\273\271\323\016<\217\324\205=\2534\325=\356f\n=i\221!\275\r\213\227\273\277!\010=\002\371\307<gU\021\275~\370\370\275\370]N:\263\001\022=\021\330\234\275\004\267y=\364\035\305\274\266\260\005\275\rf#\275\301\316\014\275\303\203\000\275b\250\253<\300\314\035\275\265\315\262=\272\241\216\275q\361\277=\234\204\241;\277\266N=\204\2731=\021\227\342\275AY\t\275\236y.=\016\232k=3e\201\275\276g(\275\233\000\r<\277\317\231\275M\217\311=\277\364\301\274Bh\225\275\006~\000=\313$;\275L\336%\275\314OQ=r\333\243=\244\351\037=+`N=\325\t\037\275R\317\266;\274\344\235=\356\307\215\275\216\200x;@]s\274/\020\205=\203\002!\274\335,#\275\215h-\275\030\250\326\274\353\361v\275\247z\360<\230@\210\274\022H\321<\210h\302\274\310\275>\275\265\304\t=\364\277k\274\266Zl\275Qc\004\274\\\010\003<\327\245\021\275\0216\331\274\344\226\035>\331t\005\271\346H\254<\r\016\244=\317E\026=\325\332\216\273c\344\330<A\247\205;\211\030i=\250\264i\273\tR\301<x+&=\230\355\335<\257\344\357<{\332\301\273\212\275_<\246\256\007=q(\306\273e\253\233=\0145!\273\257\341A=\'7P<\302\212\301;\032\025+<M\025\225\274g6\313<\332\317\264=I\216J<\322\326\262\274\033b\'<\314\242\334\274\222U =\314\261/<\360\004\226<{\300;=@oQ\275|O\017=8\300\252\2749&\360<\351=L<\232\004a=w\270\333;k<\232<a\355\t=\224\317,<\267\204\014=\204\024A<\362\316\210\274\3542\321<\270YS<m\212b=\245R\203=\275\320e\275\267~b\275\377\247d=\276\274o\275\345>\305\275^\321\226=im\\\273u\355\036\275~\3378=\177:W=\005y\r\275\345B\334\274\257F\013<\301\254J<M\316\\\275D+Q<%\373[=\352\344Q\275\002;y\274\243\345j;Z\031\237\273W:\000\275\316\227\331<!\330\246<D\035\r<\004\033m\275+\033d;)\036\255\275U\372\021=\253h\246<b\177;=\302\225\027=\202\267\331:\226\010\267;\032\024\303\275j\013\301=\370X\005=\374\312\004=\312<}\274\000\005}\274v\376-;:\314\014=Xa]=\037l =\232\375E\273\251\200\253\274\266\214\375<)D\034=G\311E=\036\337\214<\247\262\237=\277\3668=\256\325\267;\266\371\321;\316\271\222=\\E#\275zW\203\274\371Y\311\274\267\272\267\274\251\342\230<6A\242\275\300\272h<m4\340\274\315#\212<\307\255\204=}\254\224=\231k\207\274\"\354 <^\255\021<d\036x<\225\3676=y@/=p&*\274\336NC974|\274\300\342\257\275\r\271\203\274\032\203\033=\213\231\200<\272\356!<E\256Q\274\017\311\220\275\246\311\243\2751{\021\274\216\373\031\273On\205\275\3311\207\275~>\\=\270\306[=\016\344\247\274\r\340\240\274I\217\'=\01703=\036\257\247\274A\301\205<Fp\273\274v\206\253<\257\304\025<S\210j\274\305\361\355<T\335l=\304 \367\273E\210u=\003\242%\275\374m\325\273\362\017\237\275\344\214\200\273\354B\335<\360\217\277\275U\344!\275\305\340\246<l\370f\275,\2154\275\320\334\336=&\277d=\304\271W\274mMX=\233\0320\275f\272\030=\"W+\275\253\226J=l\326t=\276\3071=gE\212=\024EH\275\270\300\310\275{t9<\253\003\252=\342\355M\274\333pu=1\307a\275\260O\221\275\226W\031\274&S;<\325\324\251\274`\005>=\255\247i:\235\203\241=Z\177\177=\347\351{:\214e\007\275\362\036?=\251g\036\273O\367\024=\340T\031\274Z4\205\274C\224u<%\357\223\274\232f\021=\224\207+\275n\223\300\274\355\200}\275\177\324\010=\352\227\366\274\345R\200\274b$)\274\276\271\234<\275\244\212\275\032\037\021\274\367\344\351=Qg\273;\264\373D<.\341\225<\234\027\217=\351\335\245\275\211>\301\274\262\023D<\304\207M\275Q<*\2742\227\270;g\243\343\274U\253\364\274\020H\274;x\010\201\275\317\347\037\275\300q\213<&\035\300:$3$=Q\323\032\274\013/\206=\205\352\246;`\250\336=\023\376\005\275\311\027\227<\310\247e\275\312\221\277\272\303\017\234\275P\315f=\331\250\200\274Q=.\275B\032J;\023\332\t\275\2524\340=\241FB\275\231u\361\274\212\314\300<VV\003\275\3437o\275\361\246\245\272\024?`\275jn2=\034\260s\274Yv\220\275kf\010\275\321\313i<\301]\233<8p\004<|\303l=\371G.\275-\321\223\274\212\346\013=\314\177A\274\"v\320<\"p1<\246\021\266\274\\\203m\275\245\347P\274\302\034\203\274\204\276\204\274\357^\273\274-\"F\274\353\301\257\275\245\3137=\013W\367\273\014]\375<\312\277\235<C\200Q<\265\233g\275}\225\254=\351\250\316\274\271\215\017=\'\327\336\273\240\t\016\275\364\263D\275\232\013c=v\212D=m\'\364<\250\247\353\272\016\207n\275\362\345\034=\t~\257\274L$\346=\252R6\275+\007\323=\315\032\037\275\2527\355\274\324%\322\274\245\261`\274\031>\253;\021\031]=\337T\340<\342\220\237\275\371I\212\274\2241\000\274\000\266\203=\221\300\003\275?+\236\274\254\275\225\275\312\037\t=\231 .\274|\220\\\275\374\2524\272\317\303\017\275\210 \236=\013Q\324\274\302\375\\=\262\363\224\275\026\005\240\274`\345\204=\363\2534\275|\360\242\275\201)@=\236\262\000\274\372\231\262=\222i\024\275H\301\216\273H\037*<\340# \275\215\274\267\274g\316\006=\346\215\037\275s\303V<\204\254\332\274d\343h=\224r2\274\016\032$;;DP\273\250\371\257\273T\010\252=\247\003D<\330\363\376\274r$\310:-\024\361<\201\267g=\230VC\275X\265\223\275a\257\232\275\365\351j;\320F\r\275_R\334<\'\266\026=\253]\337<\326\031\032\275\260\276\005\275\242\023\r=Z\214\212\274@\031V\275\351\3677=\342\367\266\274\266\206%<\'\266\231;\203\322\035=\004\205+=R\332=\275}\342\244\275\327\013\232=\365\020X\275]\336\203\274\334\241\214\274\005Z\006\274\3308\300=\365\200\336<\232\311\267\274?\352\377\274m\236f=zD}\274\220\213\253<//u\274\334\333\232:\343\022\033=\265\344P=J\236\255=\031FN\274\223\3208\274\226a\014\273Ufn=\006\316\207\275mU\360;\332\t\010\275\253\2558==\373=\275\035\025\260<\343-\213:`:\354\273-\006g<`\317\211\275\372\336p\275\327\342G<\017\254\326\275\310\361w\275\316\002\303\273,\376\301\275J\350\035=\230\341\267\275\343R\245\275\356\033\225\274\000\210\332\274~\321\213\275\0012\000=\273\300\307<\007\232\202\275.\260\037\275u\364\031\274\017\204\374;B\206\t<\274\205~<\270\312\322\275\224\372A\274\246O\205\275\217\364\301\273\244H#<U\244x=\231\306\016\274\021\225\343\275\027\030L\275\2551\377<T?\016\274WA\205\274\014P\200\274\213\246\360\274\362c\030=1|\301\274\000\272\312<\247-\264\274W\207\013=\255\217\327=\031\316\023=N(5\275\311\315\316;9\270e9\270\230\'\275\357\254\\\273)\261\262<0f\023=\224e\260\274\327p\260\275\354\214\212<}\375\004\273\247\310\037\275s\223\371\273\355\251\251<\0043E\275\0319&=\330\216\235\273\240k\251=F-\367\274P9\035\273\032L\316\274\202j\213\275D\326\013\275\033\276\337<\327\207\304<\221\303*=\325k\211;\031\245\256\274\371\332d=\203\024\025=m\322~\275\301\365\200=\002\267O\275Vo\266\273a\'\201=\336\270\232<\230n@<\321[\n\275\024s1\275\227\014n=\255\376\220\273\261D`=>H\376\2735\036\232=\024\311\242=\026`\030\275m)\032=_D\203\275\336E\320;\254\320\035>\224n\302\273j\037\210\274\255DQ=\373\003\177<\240G\005\2755\371]<m\343\215=:k2=\026\016\342\274\253\3649=\000\246\013\273m\367@=\335\243b=\273:T<Y\003\344<\220Y\344<J\035\023=5\272\315=B\234\\\275\372\236T\275\225\315r\273D7\245<\202\365\210<\230d$\274\n\370i\275\214K>\2745\310\322\2736\267?\275\021q\016\274\332\0343<\371(E\274f\031\364\274 D_<f\305b\274\304O\007=\003\342K\275\231\211\330<\002=;=\025\025\234\274%\350p\274i\016\305=q\365\032=\002\325!\272\033a6\275\343&\035\273\362\263\246\274X#+\275\221;0\275\014R&\275\300\242\372;\260o5=\316\274\001\275yY\224<\254i\"\274V\252\322<\222\306\223<s\003\305\274\376\022\177\275u{\255<\235\225\234=\215\360\272\273\036\266h\275\374\312\206=\267O\323<7`j<\017U==1&j\275~.\222:$\034\200\275R\347&=\244\022\263\274\275\311\306<\002U\264\274\227x\231;$?S=\336Y\273=\214\225P=\021P{;\214\255\366\274tv\346<yW\t\275\237b\026=\364V`=\013H\026:\340c\305<\240\201\023\273\325!3\274\224\270\026\274\344\"e\275\216 \371::\341\213\274@\254\240;\323QY;\272\203;<\232*8\274\306\352\207\273\021\205$=\000\216\027\275T\\\244\274\370`\263=.\345>\274\324\003\321\274 \3040=Y\205\312<\276\004:\274UTo\275\014\211\006=\013\276p\273\177\315\301\275O\361\244\2746\315\206<~\267\225<\n\352[\275\251\255\251<K?\302\274\362\275/\274\321\361\317<\013\227\234;\321\027\245\273]\342\362\274Tw\034=\021\226!\273\242\005\304\274\"+\263\273&\254j\275\361\203S=\023_\275\271\212\366\273=\304\313\033=\311\243 <\330H\374\275<\304\243=;@g\275\277\311\177\275\014\203C=\021\343\337\274o[\225=\366h`\275Z\330!\273\013m\301\274\242\202F;~\364\312\27473\201\274/\331e\275\325\000\241;\031u1=%\364\227\273o\315h\274\341\013G\275\316u7=b\251b\275\235\024\023=RL6\275\225\247k=\274\030\202\275\205\221\200\275\275\242\226\2753\2463\275\301&\242\275\000a\022=\232e\314<\335\350\032\274,\317\312<B\036\300=#gU\275B\220-\274\3619E\273\322t!\275N\177\267\274\321\023\241<F\376\232\274]J\270<\224\302\215\275\334\220\224=\376\255\027=U\371\211<\023\220\301\274\320\257}\275\331?\355;>\235\321=\270\014s\275\365\266<\275\032\356/\275Km{\273\2072\202\275w\0030\274\217\035p=To\205<m\224\266<\036B\000=]q\207\275\210\341\320<\203\241(=\214Z|=a\003y\274\217\233\274\27426\"\275\003\354J=I\036u\272\271\322\252;K\215k\275\210D\207\275\376\006\021\275\033\0243=9\024\177=>\235\371\271\203!\235\275\262\316Y=Q\313/<\324*\031=]x\367=\250G`\274\005J?\275\373\242\326<\201#\233\275\035\372\322\275 V\024\273\252^j\274\272\006\246=\014\323\255<\222*\021\274\367\3438\275\002\254\001\275\300\0144\274\007=I\275\343\271c;\355P\272\275\276FW\275\255=*<\202\320\t\274\322\"\322;\303\361R<B\376\270\273h\010\263\274Z\254\n=\371\273\247<\013\213\0069\\`\014\275q\321\014=\303\006r=)\3176\275xA6=\210\360\n>\221\262\370<\r\312\022\275\366\320\342;\301\224u<SQ\033=+F\234=\375q\217=\375\352E\275\272\001\237<\254s_=w\242`\275\264\320^=\222\022\336;m\351\325\273p\264\203\274\320Yy\275m\215f\275\217\033\310<L>\223;\214\342W\274\273\323+\275\353`\317\274\350\032\327<\305\370\252\275\373M\230<\304*\252\274\237*\356\274\373S\363<.\024\242=:\036\226=\317\371\350;WN>\273\031\344\037\275\313r\315\274\311\335^\275\033n\001=nh\301<\271\002\3359\353\325\241\275u\262\032\275\231\220b<\377#\331\273)Q\027=\340\241\014=\226\334(=\212\266T;$#\267\2752\021\030\273X=*\274\262ZN\275%\273z\2748aN=\341\020\206<pC\367<J\357h<3\237\213;\335\002\341\275$\001t<\276J\321;\263\257};\241\345D=%\025\241<\362v\235=\203#\232\275\217\273\t=Bk\330=}T\217<\201\315\327;\"F\332<0aC\275\007S\335<w\312\374\274\255V\324<\2425\376\274\370X6<\260\027,\274\326X\271<\316\254\321:GCf=\375\254~\274\255\2567\275;\373\344\274\356\315\215\275w\207\330=\305I\023\275.nH<-w\001=\233E\233\275\014y\373\273\005\017\266<\017\261T=/p\3409qq\362\274\002\212\006\275\374\010=\274\2710\n\275\244\216\313\274\355~m\274@\222[\274\371\361\215<6\271\237\275\325\037\213\275\314\2658\275/\005\210\274I\355\217\274\021\271x\274f\036\201<\240\001(\273\200\256\362\272\246&\217=d\037\236\275{>\3128\244\366\032\274U_\027=!:\250\275\371\361k=\037\355\225=W\225\350\2745\311\235<\266s\241<O\241\311\275\010[#\275\371C3\275\273\tN<o|\200\275M\033A\275}\3059\275q\351\217\274P\334\232\275gI\304<\216\211\211\275\306&9\274o`M\275I\216\241\274\206=\006\276\273\337\021\275\270\354\037\275\177\351\304\275?\345\355<\333\277=\275\256\237\252\275tP\376\273W\247B=T`Y=\031H\206\274?\017\'\275\200\270\t=Q\263=<\n\261\233<\033\006\261<\031\030\237=\330\023\023\275\030\357\000<~\307.\275!\360==X\377\013=\342\0130\275\202R\317\2743)\332\274\245\356\"=\373m\203<Xc!<\300Z\327<\356\353\213\273\343B\202\273&\001*=a>\335<\016\246\246<\274\200\207\273\250\r\350\274:\243\221=\240:\204\267\2715\030=\353I\271\274\205\005H\274uS\350\273\316+\272\273~\363\247=e\302\005\275\316\304\001\274\227\361\211=\343\251q\272E\027\237<`\\I<X<\206\272B\")\275[\034\036=\330\\\247<\267<\302<\256\262\260<\324iy\275\311<\235\274\203K\247\275\3112\016=\356c\365\275\200\340\223=\342\016\335\274\264P\302;y\363\333\274\013\365\363<U~\027\273\210\360:\275\244\325\345\275\275\370\r=n\274E=\350\246O\275y8B\275<t\242\274[\\\270\273\r\2178=\340+5\274\n\210\243\275\215\005v\274\260\330\311\274},\320\274\233\"\357;\226\376\211=C%\205\274\265\267!\275\003@\027=\360q9=\1775\207<F\277\271<t\000\314<\331g\326<%t\365=\376\314:=\005\3548\275M\225\010=\307\263\275<\r\366\010\275\205\273\356\273\035\3103\275}\005R<w\\\025;\035\242A\275f\014\371\273EZb=\220\303\203=\302#\214;\007^\217<\260$=\273\341g\025\272\"r\276\274\345\003\310\274~\006\330:\212\n\251=`\257q<w\303\234<\224\315\235\274\346>\027\274\344L\000\275#0\r\274G*\204\2740^\013=25\333<\276pU\275\376\211\312\275\220\r\342\275\223B\033<X\315\363\273|4\034\274\\\"\300<v\343C<\244\323\365;1\310h\275\2550c=\306\342\201=w\240o=\325M\314\274\330\261~\272rs\270\275\253\203\366;\306\345\334<)\237\211=tZ\300\275\264\177\220\275\325C\336\274M\311\300\272c\266c<\332\310t<xU\014\275\321\237\004>\r_\317\274\255\237\032\274\342;\255\274L/\263\274\203\267\326\274CT\313\274\216\326\006>\256]\216\275\222\370\272\2751\212#\275\223\374\024\274S\021\013=\030\201\000\2751\032A=\362\320k\274%\224m\275\321\322\022\275\201\013\225<\031\000\204<ae\276\275B?\316=TE\256<^\010g\273w!\025<V0E\275\322.\321\274\305\336\215=N\016\217\275l~\257\272\377u7\274\375\364\017=6\200e<\210]/\275O\377c\274qa\317<\n\231\357<U\307\003\2750\351\226\274\037\3419=\373\313m<\036\0021\274\352\307\201\275\205<\313<\252\272\023=\007YT<\251\331\202=\233\252\256=4\327=\273\362v\300\274G\350\261\275M\321\362;\345\347O\275\320S\022\274\230\250\024=A\023\324\274\340\372g\272\311\306a=v\023j=\ti/<\241\3304\275\355n\311\273\274B\367:\303\201\324<\'\313\t\275M\3641\273\272Ck\274Y@*\2755O-=\315 \t\275/\265\223\274H\'\253\274\335N9=\022\313\245\273z\371<= \007\376;\343\274\324;\273oQ=\372C\224=%\002L<v\337\204<\026\347\350<5G~;\022\037U\275\205\036\334=\243d\366\273\246\316q\275\\\001O\275\357 D\274\221\373\352;\240VG=\242<\261=^\335\016\273a\345D=\\\352\246\275\027\342\036=\307~\302\274*\210\203\275\366\355\306<\313\r\325\274&V\360<\252\010j=\330qM\275\330{\244\274\007#\234\275\020\2062\275\212\337\005=\021\362\\=;\033]\273,D+=\320\010\024\274\003\024\006=\302/\200\274z\200\315\275;\237\013=a\327\366\274\272\214\264\274\327\250\014=\354\312{\2742\212n\275\204\233\024\275\200\254+\275N\036\202=\nia=5\375\205\274\353\214\001=\376\324\364<6%\213<#\211(\2752E\025>\376\032\351<}\273{<\355\"\233<\361.\271=\342\371\032=y\210\217=\313k6\273\205)[\275QQ*\275%Z`=e\364[\275\005\247t\275&\244\266<\3277\177\275\307\230\031\274Pyb\275\275\205\204\275\310A\277<\260a`=R\240\214<e\273\020\275? \034=%(E\274\221wK\275\203c\212=\023 ,\274\261\241\255\275m\2311\275\340\301\016\275\317\265I\275\026\026\207\275\357F \274;\000\005\275\344^b=\'\245\314\272\033\311 =\372`\372<\275{\352\274\205\327\2629o\242\356\275\274m\270;\221`e=Q\216\274\274u\205\252=m\336+\275\nn\246\274\376\322\221;\276\210\302<\263\335\256<\"+\252=\351\233\341<\320\302\021\275>\370\274<\036{I=b7\231\274$\2308\275\235\230\335\274\342\244\304=,\306l\275]\024\374\274\245z1=\006~-<g \036=\230\305D=\3357Q=X\025*\2741\216`\275#\017\021\275\316L\245=\344\313z;t\303I\274\223\336\017\275S\243+\275\312\316\017\274\251D\363\274\363\003\025\2740C\220<\357\212<\274\270E\333<=\214*\275\264\264\024\275\003u\244<\376B\317\273\250\034 \275\t\302f<Y\361e\275\267\211\263\273\262\374o=\333\315\205\275\217\306u=\334d\360<\367\231\277<E\330\205<\243\026<\275\242\302;\275\316\357\0309\272\256\026=\351\275\t=P\250\305\2748\267\261;?5\210\274\245\230\321\2744\224?<\246\252p=\222((\274\205w\027:\330V\267\274\257\315\214\274\350\302\201\275\330\2769\275\313\251\341\274o^\3659\254\030\346\274\350\263\277\274T\352\307\275\3324o\275\360\356\245=\263Z\210=)V\250\270u\334\223\274z\234\250=T\2118\275\360!E\274+W\376\273\360\227\016<\277\204\034=\231\245\251=\303\001]\274}\272\237<0\340\214\275~\334\267\274\314\270\027\274u\203\202;\022\2339\273\226\263~\275X\ns\274\276a\220\275\376\007e=OZ\240<\244\002\204\275\302\355\240=^6\230\274\252r\233<s_\271\275G!\364\275~\210\244\274\356e\227\274\245\234><\002\216\216\275t\026\222<X\323.\275\261i\321\275\215\231\025=l\317\177\275\237\207f<W@B=\207\013\006<j\312\374\274\245\360\212= \313]=z\206\316\273&\342!\274\332\332-<\354\0338<\034%\034<\371\321\257<\016}\'=>\301\275<6NI\275\314\377 <\272\232\210\275\377\225_\275\254\031A<\373#\225\275\243\333z\275\274\2071=\3046\026\275\263!\224\273\216\372\265=0-\003\275\001G$\275\352\250s<\026M\340;\333\274\351<\350mP<\r\017\201\273\276\014r=\335\364[\2741~\n=>}\212\275\245\235\276\274\351C\014=/A@\274{i+\274\313Fa\275\003\336\226:\355\377\036\275\254f\010\275U\332|=l\335\373<\306\026\016<<\277\255\275\032\364H<\275\3757=\317^$\275D\364\215= \236\332;\2236\036\275W\230\204\273\033,\317\274\242\014!=\231\326\373<\213\003\177\274\322\350\244\275e\363\252\274\3374`<\366\021\020<\366 \245\2749B\246<O\351S<\361\017\312\275\367\215\313;2%\'\273y\300\263;:\267,\272v\223\242=\226/c=gq7=\247\023\203\274k$\312\274T\363\204\275\020\355\360<\320 !\275\r\017\257;\021\330\001\273\275\301\201;\372d|\274\"G\373<\367\2012\274\366i \2742\352\240;\233mf\275&\340.=gy\031\275\030\352z\274\224Y\340\274)D\327\274<\346\303=\246\316\n\275#O\370;\243\251\007=x[\031=\311\377z=\204\021\231\275e\007\032\275/\025\310\273\332(\213\274\327\310^<\341\024\n<E[\356\274\'(Y<\254\302c=\217.\205=\361h\344\274(s\221\274\361\274\375\274\203\024\273\275|\317\022<Z\335\236\275\215]\314<\321\241_=\001p\202=\2670\313<\267V.=\204\016\256=H\250+\273\225\251\303\274\t\235{=\361\345y\275\333=k\275*\364%\275\267\332\363<a\321c=Cs\235<\275 S;\t\2612=\226\216\371\274\225\205\003=\265\r\230\2741\024\n\274Y={;#\2727\275\370\251\276=Z:\214\274\nU\371\2746nw=\013\203\237\274\215\312\030=k\245}=\241\211t=\007\357\037\275?\373\214\275\205\375\200\273\210\034v<\265H\203\274?\300L\275\025M\014=J\210<<~4[=@\206\004\273\356:\240=\211\345\";8\341s\275\371B\001<9\216\206<\014\303#<\0145W<\374_D=\320\025\357<\003\352.;]8K<\013e[<S!\246=\347)\352\274%\214\007=#\264\033\2742\367\245<w~\303\275\237O\025\274^\313\306=\316R\n\275\270\353\240\274\366\327a<\314YM=\302d\020\275\032\3412<%\320\030=\262\310\344\274c\2573\275\367\356\352\274\001Q\005<\236!\245\273i\214\343\274\267\231\244<1\374\355<,2\327;G\017\221\275l\227\255<k\301s=\024\226G\2758\277\265=\213w~;/2\311\274\212X\266\272q\t\335<\224\265\251<\323\204?<\251\252P\275k\206\033=\376)0\2747;\031\275\376wv\274M\321\245\274\005\324\252\275\023C\217\275\031\335\276\274\203\257\375\274\270\376\r=Do\035=;E\210\275=\347_\275T\347m\275\177\2506\275\332c1\274\373>\246<\262\340p\275\346\303\266<.z\233<i7]\275\200\336\300<\223\261)\272m\240Q\275\264 \305\274\215\324&=\275\247\240<|6\001\273\362\207\013=\030\211\372<\231\336&=j;\256\275\221s\210=8^3=\240\244\351<\352CW\275\254`\223\275\230\035.=\t\204\334;\345\205\237\2749\245S\275\367\371\354\273\276{a=\346\t\321\274\323\252+\275m\'\264<#)\016<\364\316\267=c\034?\274^\257\036\2734\250\026\275>}\262:D\213\341\2751\274m;\376\200<\275\361_3=\323qZ=\001EH\274fm \275\031I\021>\354,\007\275=\225\230;|\374\270<=W\236\274\277\022\305<1\361\033=D$6=\0019\037\275R_\006=\323w\351\272\315\377\263\274\035\342\261;\003s\006\276\360k\'\275\374\232%=\245\374i\274\356ES\275\025g\273<\311C\004=\267\277\217=Li5\275\021\305|=\376\246 \275\264\211\026=\322\345\247;H.\301<\326\"\250\274]^\316;=\244&\2741\2703\275\314\032>:\236\255\023=!\251\002\275\352*\315<R\371\021=e\341\266=\205\3431=\241s=\275\304\264\326=\247\365k<\345\3500\275\321\270`=\304\030\216=%\364X<\233\277\272<\233\266\341:\346\001\245<OGQ=A\337\200=\217\221\017\275\232\035\177=\202X\201=l\261R\275\034\257\002=\330\353\233=\317\365\232\272O@\006\275\022\017\345;1k\250\272\331\010\352\274S\272P\2749\201\207<\340\364\227\274]\322\017=\372\033\370<\007\307\377<\211\212\006\275\235\263\200\274W\257u\275\264\221L\273y\034f\275\340\215|<\322\203\006\275\365\301\262\274*\310\255\274\036N\350<\203\243\244<\213A\032>\233\205\001\2754\221@=\374\323\320\275o\221\312\274\326VO\274\243\274!\274 \220\245=\024\311\001\275\220\374\207\275\314Y\336\274t\232\217\275\231\203\260\274YO\262=\272\200\314<x\237\273\274\366L\235\273W\220c\273,Og=\357\361>\274\236\010\207<\352\232\213\2733\301\336<\005\265w\272]H\311;\323\371I=]\013,\275\250i\231\275mv\034\275\253\3148=\213\326\243\274\335\243\000\275-\270\323<\261\"\300\275P-m=\325CT<\313\373\010={\370\013=\332DX=\230b\033=F\215T\275I\032\347<D/O\275m9\356\274\216\270\335\272\205\332\306\274\254\361O<\200\315\r\274\342(\314\274\342v\250\275\233\020:=\371\351\306<\222\211\205\275\347Y\221=\353C\\=\334A\307<1\244\351\273\350\353\360\274\353\371\014=\373\037F\274\277,\222\274\230Wi\274\276\350Y\275\2462k\274*\311\205\275\262+\272=HMl\272\314\275s\275H\020\212\275V$\324\273\204\215:<\236+\022<\t\220\326<\310O\260\274\361\367\252=\266\200\322\274\277^\267<\177=\215\274\376 \316:`\216x=+\013\200=P\340\016=\037\025w\274\237\274\271\275\177\203\200<,g\273\275\016\263\232<\377\265\005=\263\nR\275T\337\237\2749\2518\275\246\225$=\rG\251\275\351\267\220<\022e\233\274\365\344\'\274$\270\202<\354\r\326<\241\232\362<\006\323\352\2749Q\276\274\201\037L\275\220\013\010>\230I\244:gU\314\274S\024\206\274\210\376\312\275\324\330\307\273N<\027=\021\374\335<Du\356=\354\025\245\274\217\372\362\273L-\226\274x\332\024\275\250@\030<\261\373E\274\340|\311\274\363d\177=\001\301\223=\003\025\213;O\204\001<1\356X\274\236\204\270\274\313\203\343\274\331h>\274\241\246\037<Q\240\246\275b\303\023\274\3127\352;\\\355\204=[\0075\274;!]\275\013\331\231\274A~9<\211Jn\272\t\357\035\275\211\363H\275g\222t\275\030TK=\200\3419;\233s\260\274jBQ\2758\356\031=\301\251C<r\216e=\254Kk=Dz\017<pq\200=[\217N<\354\020\022=\275N\371<\267M0=\024\034\001\274\324\303v\275\347\313E\273\263\220\000=\2028\022\275\261\353\"=\200\271\213\275~yF=\247\321\330\270\277\344\021\274&_\005\275\356\272`<\345>\272=\3631\215=\2601\276\273\014\256]=\341\362\261<\275b\260<\262\027\215=\312F\237=\333*\036<\277\177\201=u\240\023=4\336\342;1\233\231\275-7\222<`k~\273\014\325\222<$\001\227\274}\351@\275(]w<\334B\005\273ky\231\274v\rw\275\000i\312\274\277mj;m\351f\274\023\327\212<\216\2722<\363\312;<\264\317\273\275\014\330\264\275\243o\310\274[\340\307\274\243x#\275,\013\024<27\342\273\000\227\344\2744\177\357<\002\316\201<\000@\236\275\220\353\277\275\357\246\224\275\315\250\220<\266\345\324<\010F\253\275\234\356h;\200\306\355\274\267q\244<\260\200i\275\352\366T<+u\325=;\323k\275\034R~\271%\3731\275e\276\t\274P\246{\273\371O&\274\311e\005\274\311>\211\274\335b\270\274R\354\202<\2117h<\3561;\274I{]<\262\365!=0TY<\013\202\233\275\343\321\320\274z\311\376<\026,\260\275 \353\237\275\320,\340\274\371\006e=\300\243\267\275\250Y\217<}\016B;{\271A\275B\336\255\273\344\n\';\347&\214<\244zA\274\t\357\270\274\207\367\265\273c\276O=\006\332\273=4F\251;\201E\204\275\345\355\222=w,\365<\316\360\010=\363\005\256=\211\365B\272\353\002&\274)\325\225\274\3413\231<\262\200\260<\330\035\341\274\257\347R<\201\252\247\275\034\254A\275dC\t<e\'\027=\362\274I\275!\200\025=\374\241\205<w\014\"<\250<\010\274\022\313^\275\342\235`\273v\307I\275Fq,\274)\373^<\274t\321\274\206\354e=R[:=\237\034m;\226(\264\272\322\023{\274\030\307B=\301X\360<\030\274h\274\233g\241\275\311D\220\275\310E7\275[\254\353\274\367T\232;\024\370\215\275 \336\227\272\223P@\275\371\252\256;\025\211K\275\220\335\205=\204\307p=\311O&=\016\312\311<8\277\260<}x\260=\251n\225\274\310\356N\275`Q\2068\321\026\317\275\325xc=\360]I=\227\021B<\tQ\255<Y5\317\274\310$2\275\226Z\037=\217\005(\275o\201V=\002\272\240\273\260o\302=\223\313\266<^\376\245;l4\212<\223\334~\274=n\020\275\024J\016\274?\264\300\275\277\262\211<5\034\200=\014\211\301=\265b|=\227\034\356\274\307\310[\275n\265\240<\327\376\245;\2608Z\275\312\344J=\024\334\222<\037>j\274\0204\355\272xjm;\251\273C=\361K\222=\367\3502\274\\\001f=\"\204\331\274\375\336\277\274{-\273\275v\335_\273\000\367\346<\363\246\256\275\203\343\270\274~\000\007=\034}\212<\273\357\373\274m~g\275)\267\216\275F\001 \274s\320\037\275\226\252\n\274\267P\030=\300a\250<2\244\003\275X\027D=\003\243\207<\2435\263\274\003\207\316<\n\355{;\\\226\321\274c`\261=\302\177Z\275f(s<N\202\232=-\330\352<\363\370)\2758\023[=\n\233\346\274m\205%=b\177\300<$\311\002<q\347\010\276x\247\264\274\343\203\220\275\223\372\334\274\336ht\274\214\267\266\274\252\360\267\274\323\300\257<\0145\262\275\316\320\211=\026\251|\274\347\353\314;1A\034=h\211L\275\003\'5=\377\036\203<Lvt\2744\024\220\274N\237\226\275\233\300\013\275\377\001\301\274z\210/\275\317\373\376;k\305\007\273L\n\033\275q\235&\275\372\357\252;R\233\032\275\275\274<\275}\252\235\274\365D\273\274l/\233=eZW=\304\323\215\273\351\234\234\275\006\361*\275AgK\275.\331\243\274\331\3727\273dR\364\273\033\337\201\275\344a\336<\343\341\245\274V\207\265=J\330\252;R/\t\275>\002[=\030T\266\274\021\275\201=\031\303\226\275\225\240z\275\274\023\037=\026\267\315\274{\204Q;\216\244d=|\227K=\246\334\"\274\"\025\341=<\004\243=\264\345\003\274\215\3650\273\327Z\034\275\216\324\211\275r e\275\n\030\342\273\023\267\004;\356&#=\370\306N<7\250\303\274\0142\255<\r*.\274\241>A\275\313L\303\274\360/\350<\270w\032=\355&o\275\246?g=\336p\006=p\311\332\274\352\320L<\333\231\363\274F$\257\274\305\232Q=\027\202]\275_j\227\275\366\271~\274\024\313y<=\345I=z\250\271\275\301>X<\025\343p<\031\033\023\275\303\341\360\274#\n\000\276\313\211P\273\225\334F\273\362U\326<\277y\225:\260\233\"=\202/L\274\226\341\224<\021E~=\345\033r\275\206\010A\275f4$=\350+\200\275A\037\250<\235\024\274\274A\375\003\275\311\310\206=\003\250\034<\333@;;&\217\254\274\345\010`;\007\037\331;-\271\316<\0317`\272!!\000\275}]5=\003\305\353\275]\216\213;m\005\332;P\207\230=\205tt\273\005T1=\n\374\321<\023\236c<\212\321n=\342\202\244<\336\036[\275\201\3602\275\n\203\036=\242\212\257<\323\3419=\245\333\036=\217\262<\274- \002\273\250\265H\275`\304\026\275\325\275o\275SFN\274L\357\006=$\265j<\312,\314;\210\375\225;\330\315\177=\237\235(\274\'\372\004<A(&\275[\311\033\275\003>\230<\361\277\266<c\365{\274U\240/\274\270\036\010\274\232UK\2751p\363<\371\255\002\275\213\0309\274\362\\\303\273G21\275\366l\006;\245&\213\273\361W\257;\372\265\r<\036\tQ\275h$N=\263(G=oa\306\275\267\352\354\271\177\321\363\273\226\206O\274(\022\362\274~\007\355\274\376T\020\275\307y2\275Sr\373<\372E5\275\031iT\273\262\350\357\274\005@)\273\341\027\213=\226\031\210\275J\257\331<\026M9\275\322\034e\275\324\"\226\275\300\235\351\274<\"\272\274Q{h;\217\233\316\275nQ\234<,jC\273a\240\324=\352*T;?\365\305\274\370w\203\273\351\346\035\273$\376\214\2753OS\274\003\022\210\275\305Z\221\275FR,<\234\2314=\177\316\203=\353\265\210<\204\363\227=:V\247<\\\314<=>.\366<:\205\224<\n\325W;\036rf=3\010\232\273$w\356<b\214\276<\235\274,=<M\023\275\270\227\370\274cY\363\273\037W\271\275WR\201\274eL\216\274X\220 \276Q\277u==\\o<dW\200<\365\0218=\372\241#\274\254b\247\275\016\027a\275\203\301 \275\317>I=>B\234\273\340\000\252<^\353d=o\246l\275\025\303T<\302\202R;\342\032.;\023\312I<\227\344\253<8\342c;X\376\005\275c|\036\275\253\337 <|\035\236=.%5\275\220\202\310\274\252x\177;\224/\016;r\227\247<\301\006m\275\023\334\230\274\305\000\235\274\327\\\212=\214\t3\2750\364+=\201DC<\221\371F=\244\2461\275\301\014\321\275\265x\000=\332\332B\275\361IK=\357MI=$\203\344<\305\354N\275\207\014\214=\0332\246;\230\362\222:8\362\246;\334\235\007=\357\215\374\275R#\300<\221B\006\274[\205\255\274\206\323\217\2753d\024\275I\177\224;\204\242\230\275\236\"f=\2137\240\274\245\212\330\273\205\260U\2753r\031<\221\362\372<ZV\216\273\311\377<;\270F\241\274\224\302\222\274\304\217\024=\213w\324\275L\305\246\274\364\364\302\274s%\205=\2203]\275\375\231\t\274\260gt:\325Xq\274q<\275<)\276G\274\266rA\275\020\002!\275\323\3143\275\0218\250<\3155\336\274\230\335\363\273h\n\212\275\032\360\235\273\205z-=//2<$\212%\275r\346\205\274\177=\204\275\342\350H=\227\244\231<%\273\321:\342\2403=\371W\261\273\364\013\331\274\004\330\005=z\257m=\206iC=\221\216\370<\314\334r=\202\217\022:\234rJ\275vx\363\274\001I\205\274\001\257\213\275_\354\274\275=\351\r<Z\300\313\274%\024\336<\235*Z<\000\301\030=\276\276\010\275p%{<`{\223=\232H\212=K\270\250<O\331k\275\263\236\273\272\033\250\021\275\001\027\333\273\303\267\237\275p\220\200;z~\\<\343\000W=\023\010\243;wE\021=\351U\311<xw\034\275)\352\013\275R\265}<X\003!=\tm\320\273B\267\333<\016\261\267\274o\250\273\274\007\312\314=/{ \275\036\266\006\275y\344V\273\274a\301\274[\266\000\275\252\350h\275\2545\240\275\033\247(;\'y\245\273\216\334\236<(\331\211\274\027\2449\275i\317\034=\254\001\333\273\253\031\321\274\360\340R<\001\312n=\316\360M\275\013\246\037\274\241 \274\274\275\203\"\273\377I-\274\341\212\243=\322\203\341;\351%\317={`\37583i\"\275DC\\\275\nX\237\274%\253\212=\375\tb\275xz3\274\277\024\306\275#\tW\275\006\033\203\274\021\2508<\016\222\315<R\330\025=b\356\203=\357\206\221=\253+\022\274\242\312\236<>!\220=io\363;\300{\300;\316\337}\273\006\317\377<\371u\025\274\307\371\271=\213\350\343;\200\005\021<\240\306%\275\017E\264\273\270\030\237\273O\000>\274B=#\2744\241\200=\352+\222=\233\034\210\274\032\204]=\024\254\367\274\'l;\274\342\364\017=7\265\350<\022\321\273\274\301q\201\275.~\271\275$@=<\232\273\243=\234X\215\272\352b\016<\260\273\306<\001\330\010\275S\246\217\275\025-\266\275\251\177~\275\203\242(;r\375#<\245,~\275\370\"\216;\240\315\200\272\025\326\261<\'\n:=\251q_=\230\257\273=\325\361\232<5\371\324\274\356H)\275y\202==\230\026\253<\231\377J\274F{%\274\326{\321<\313z\001\275\345p{=\255\223\334\275I\026\273\275\251\0246=b\001~\2756\\\023\275\300k\263;\237n\005=\330{\313<\244o\257\275D1\020\275\036\337\212=\222\003D=\326k#=j:\024=Ij\001\276_\273\212\275\245\236\261\275\306o<\275\225\2226<\370\317\307\273\335\3276\275\312\004X=\323\370E=s\001S\275\213\247t=T\024\326\274\3139a=\017\331f=}\016+\272\225\262\023={C\033=\367jF=\020\236\252:\211\315?;\360\\.=<t\224=eV\'\275x\243W\273~\337\246\275\231!R=\350\016\260<8\374\266;\276\003M\275\262\227\334=\302\305\325\274\357\264\013=)\2423<\361_><\223\346\234:\336>&\275\222\tw=\322v\222\2759\340\037\275:\356\272;y\271?\275\261}\366<\305\354,\275\335\316^=\3633\201=\354\r\361\273\317\234\222\274<\346\271</\327\354\275\257\245\255\274B\253\242<\377\313\003=\355e\353<\277\225\315\273\212\314;=\225 U\275\341\025\221\275\2668a=\234\231\240<\t6\210\275X\350\207<\344\"\023<\274x\216;\037?L\274G\333\024\274\212\230\024=\373\003\246\274\337\326\023\275e\017\344\274\340\265\331\274\\\234\321=\333\346\177\274\231\004\265\272\317\261\254=\220\000\034\275\343O\210\275\345 /\274R\002\242\275Q\235\251=\352g\246<\254\336\024<6a\327<\226\',\275Y\243\205\272S>i\274\334\021_<U\210\250<~6\216\275\247\275\035\275x\220O\275\027\022\221=?\313\354;\350\026\201<\000*S\275\241\311\262<\'4j<\3705\267\274\230?\366<m\2219\275\244=\244\273\201\0360=\024\005\301\273\335\245w\275\267\000H;\263\024\334<\004\345^\275\027\317\"=\335\350\243=\223\342&\274\342\235\n\275>{\235\274\324/\245\274\020\3362<P/\354\274\032&F=\326\033\300=\341\341\256\275%\334,=\\J\007\274\332\326\202=.\364\237<\364E\341\273|b\353\273\014\202\242\271x\210\202=\354\263\331<\233YK=\334\226`\275\365\340O\274?\377y\275\250\324\021\275\342U#\276\311\202\212;\372\010\275<\337\252B=\202\371\276<\351\246\024\274\345\017\255<\275\013\202=\250o\233<\010k$\275\005\341-\275\222\337\320\274r\335\224\275K\363\031\274s\243$<\007\272\236\274\272O\304<\316\213\333\272\026\r-=.\3303\27558\320\275\33187;\021\030\256=o+\330<\006\223\224\273\030h\177=\303\263\236\273#\211\347<\277\365\363<W\213\236\274A\356\373<\214\324[<\n\361}=\217e\276<\301[\276<\375\005\001\275pI\017=G^0\275\215l\221\275\266\020[=\367o\345\274i\310\255=$h\200=\237\255}=,i\274<\327\007\023\274\374\322`\275F\236\307;\003\342\307=\345\215\t\275\257h\013\275\232\366\273<\224xv\272\362\211\221\273)o\265\2737\274\240\274\322\342}\275\224$\263;\303\n\223<J\212\323\274\364\314\005=\367\020+\275\312\354j\272=<\360\274~]E<\253n\202=;\023\201=2\324\232\275e\233\256\273S4\351\273\232e&\272W\276><\016\037\361\274!\226v\271vz\336;1C\312<+\022==\376\200\r=\314\006\370<W/s\275\327\006\207\274RL\322\274\234Gr\275\016\235\005=-KZ;\347\t\315\274\267\026\225<\330\277\007\274\006\006\254\274\256(><\013\307\264<b\324\305\273BaH\274\241/\363\273\\\241\346;\037P\222\274Q\353\337<\336G\326\273\"\020\370\274C\236\271\273\025\304;<\324lJ=\216\'\215<\200\034\274=\033\233\302:\242\316S<Zt\226\275xt\373\274\001}\266<\202n\240\272\310\351\"\275\356\371\354\274\272\031\223\275\255\313)\273J\336\010\275\t\317\007=5\257\r\276\002j\256\275\t\017\006=\t\232,<\256`C<\"C\366\275\177\213\305\274\200\256[\2755*\341=.\210\222=] \364\274\236\254\216=`\r\355\274o\207\003\274eZ\214\275Op\232\274\0061\262<\360s\336:\035\022\006\274\255v\005\272r\316)=\2564\231\274m\260\177=\211\356D\275f\214(<\223\311\360<[\005S\275=\302\026\274\307I\237\275\203\337j:_\342\250\264\244>\325:\326\271\001<Y^8\275\231\230A\275\217\346\n\274v\236M<\372\234\304:`\342\336<\252\240#\273\023\311\205=`\235,\275\322|\267\274\366\002\351\274Ddj\275\326\270T\275|}%\274J\314(\275YJ\237=\r~\001\274fH\220\275\314\263\307\274\276\306\250\275\\\357b=\326\007U\275\025nD<\023\305\324\274\202]b\273\'\253\277\274\207\272\3659pl@=\322\225\211\275\367#o=\231Z\331\273\026a\274\274\205\274\261\273\207\341{\275/2\362=U[\234\273\236\207}<\2019Y\275\332\212*= \367/=\037R\251\274d\344\016=\203y\311\2757\247j<\311z+\274\304\267|\274\303\322e<\361\275y\273\216\026\250\273\217\260\244<\021\230K\274bK\234=4\307u\274\375$\324;\323]<<\327~\257;vK\221\275^[\332\274)Y\372<q\305\001<K\264w=\376}\242=\3104L==\256\240\275\304\005@=4\362\230<\336V\022\2740\376\313=#\004\264<y!Z\275\211\256I=\360\312\"=\211Z\000\275\312xC=by\020\275A\253\340\274\337^9\275S\035\212\274\377\217\374\274g\216\034\275\331\206c\275\360\307\001\275\374v\274=i%\303=\215\314\220\275\375*\363\274\263q\226=\"M\347\274G\323\207<S\024$=\007f\213<\256b\203\275\301\032\306;~\324\261\275\210`\247\273\306\235\037=\2406`\275b\360q=>2A<7\261v<\177\255\342\274;\275\231\273\234\374\370;\205\367\220\274vd\242<T\234c=\013,\341\274\212\010\303\274\254;\020\272\265\3409\275\234#\272\272\234\244\177\274!E\323\272;]\004=\304\'W\274\320-\315\274\324\356`\274g\260\237<*\234r=\221|&=\257\240\262\274Y/O=[\321\013\274^r|<\005d\254=L\307G<\250{f\274\324\245\017=wf\344\274<[b\274\327\336\275;\265\027\004\276\2166\315;Z\003\264\273\004c\347<\021\247\253=\350A\376<|~g<~\270\033<f\214\374\274$ho\275\237F\022\275s\305;;\3416g\275\362\016\022\275g\005N;\346\366<<\273\200\013=3\371\356<\036\244b:VK\215<R\303\346\274\244\215u\275\344\0034\274d\320\322<\354\357\366\274 \266\372<\367\037\335\273m\323\375\274\177+8=TUO=L\227\270= {\246<j\026\034=H+\255<\312\227b\274r3o<m\375\224\274\274F\025=\035\262\345;\005B?=\313_P\274$\230\200\275\205\257\255\273y\351\022=\373-\220\275\035\007\017=Y\203M=\372<\004\275\315`\203=Vqo\275m\315\026\272\372\223R:|\327\003=V\266\231\271\036\210M=\231\273\n;\275\271\201\275\206?\202\275l\371\017\274\232\330\010\274\355\313\205\275/(\262\275\352\234\226=\032\3543=\256Kz=e\022\016\2750\345\264=S\351?<\204\256v\275P\244\021=\034;U=_\003\276\274\246Q5=\233\353\356\274\321\264\255\273\370\3054=\257_\327<\314c\301\275\010\316\016\275f\007\254\275\371\037\261\274;NN=+7\354\275\304\271\006=:\325N\272\031v\332<g\022w\275\251\336\272\275\355\246A<\210n\255\273\350\"\236=p)R\2759\321|\275y\356\213<1\264\006=\376\242\351<\226\311g=Y\260$\275\311\203\316\274\364\355\277\274~\213\274\274\274a\'\275\255\352{\2731x\261=9\325\004\275Q\337\000=\207\220\207<y\021\326\274\350\226\200\274\203\2472<S\tM\275\210<\276=\247\342B=\"\304\274;\221\307\201<R\226\322\274\311@\266=\322\366\250\274@\254\356\274\002\247\317<`\230\257\272^\332`;<\230\224\2750\220I=\353\226\217=G\355\n=cu\261<\314\333O<\000\375\244=\313H`\275M\222\271\274x\205i=z\255\252\275*\327\271;6=\362<\257\302 ;\372\027x<\203\366\247=\001P\207=N\037\271;:\257\323=\025\305W=\256?.\275\230\265\240=x\"\317\273p\267\303<\247\rm<V\227\032\275\274\000#\2740Q\241=\000\001\264<\017\362(<r\te\275\325\311\010\275\343\326~\275sj\212\272\257YF\275o\333\244\274\304\2600=\342\220><\367\026\310:\312qH=Q\377\312\273\256Ke;3\344\\\272\362\240t<\332\313*=bK\257\275M\251\260\275\305\343l=Wh\243\274)E\317;\313K\260\274\3374\256\274A\2556\275\014\211#\275\013@u=X\016\'=\354\021_\274<\032\243=\016zi\274T\232\300\275T3\017=\251\001\256<\307\0253<\354\201\315\274*\020\357\274\372\3134\275\350\203\300\274\3638\370\274;5(=\271\310\035\275\247E\201<\234Y\020\275Ht\276;\330\305H=W\017S;\202l\361\274\346}\252<\341\213\255\274\241\344/=KD(\273\350\203\245\274Qe\021=:\246\030\274\363V\036\275\237\232/\275\206J\247\275\215\006.\274V;X\275\246\306,\271\303\013a=1\340\217\274\\\001I\275\201\302G=\272A\216=\250L1=\361w?=c\340l\275nJ$=v\\\232\274\344V\202\275\367\345\016=\232r\306<\254k\263\274\332\335\010<\256\344p\275\217\016\263;\331\032\221\274`K\260=S\035G<\233)\231=~\000(=s\020\253=\026\334\\\275\2746\263\274\003\003\020=x\372\243<\340\327\212=\036\225\210\275\'2\316\274\255\313\251\275\247&0=\210\231\351\274j#\262\2740=E\275\360<\302\275\224\2158=S\240\354<\2364\243<\301\223\371:J\255\276\275x\306\366<\211]Y\275V\244\005\275\372!\010=zc\320\273\2141\373<D\246\023=\233u&\274\227\302\376\274\241\001z\274\006w\r>\253\367.\273\347\033\033=~y\273=>\310#=\264\332l=\252\030\233<;\351\250\275\321\037\310=\262\232+=\023\\\254:*+\306=\226\3728\275\n\277/<H\266#=r\256\343\273\237\274\326<\"\326\272;\325L\037\275\370\210\206\274\274\302\211\274\212\004$<#?W<\346\334\210\274~\2237\275\261\241V=\353\004\255=\303\312;=\215X\214\275S\3463\272\005\n\200\275\244\305\350\274\200~\345<\372i\231=\'l\242\274\321\220\211=\325>\014\275\317\004\306\273\361\267\021=+\273T<x\376\261<5\227J\275{;|=7\306~\275\004\204m<\203\275X\275_Cd=\003\n\236\275c\026*\271\317\006N=\237r\233<0\036\202<jK\270\271\n_\223<IY\222<\245\013\031\273\310\260-\275\211\333P\275\304\263h\274\0204l<+0\021\274@\361#=z\003\226=\026_)<[\356Q\275\t|B\275Y\314\256\274\016\240\000={\317\211;\276\375\237\274\302hY=G\273\356\274R~=\275J:q=\310\366K<?\240\266\272\257O\224\274\206\311\341\274\376\244\201\274})z\275\244|g\275TI\210=\234$\017\275\304M\234\275\024N>=\\\034\277\275\312S[9C6\320<-\332\005\274\207\305\324;e\304W\275\223\204\367\275\270\253\022\275\320\272(=\033\241e=~\361\r=(\350W\275\001\3472\274\336\036(<\354\030\017=\036\267)<\314\363\232=\267\341\207\274e\236\234\275\340\026\214=g\360\223\275-\322D\275\233s\232=Mx(\275\225\203V<g\2730\275\261\274\241<a\256\263=\001\254\017=`\275\006\275\342H~=\222T\206\275\005\302\222\275#`\205<2\314 \274\023\255\031:\017D\257<\267\234\251<\230J\225\275\303O\301<\205s\224\274W\221\241\275\367\001\343<\177\2255=\347\374\367\273\331\343\014<\221\367=\275=\310\255=I6\250\273\342\273=<\310\005\277\273\030,\271\274\344;\211\275\353\r\252\274\212n/\274mQ0\274\\\242\212<\270\263\274\274{\351\210\275^v\250=~\317/=i\302t\275!D\216<\242\232\224<\230A\350\273Z\362\231\271\311\256\230\275\304\007\322\274x0g\275\210w\205\275QJ\310=\277\004\022\273A\237>\274\305\251M<\304\326Q;\275|\021=j\354\245;6\310\252\273\311g\316<\3174\234=vv\206=v\375q\275\031\317\375\273\303\345)=\007l\222=\276Z\235\273\210\345U\2740\302\201=+e\221=\n2U\273Z\212\243\273\233\177\006\275\317\262\206=l\247f\274AE]<\356\355\021=\332\224\344\274\200\210\307<u\363\207<\236\253M\275\343\342\362<\327I\233\275\'\311\303\273\271q\373\273\035:\352<Sh\324\274\371-\217<\265\371\036=nvm\275\021\367\266;\0040O\274\342\303\202\274\366w\300\274\253\023\324<\310XW\274d\364\236<\237\232\261\274\312\013;\275\301&,\275\364\336\336\273C\353\300<\243$\261<\010\317\203\275\235\217\275\274S\005\\\275\244[\232=\351\034\252\274\006F\016\275@\336d=\013\035\240\273G\262\000\274\304\314\n\276\364\236\206\274t\250\n\275\265\027\253\274\237\034\317\274\245\360\r=?\017t\275\306\364\006<+gD<J\035\r<\244\006v\274\207\240w=\235/a\275\242\001K=Ui\237\274\226)%\274\232\316\313\274\223\375\341\2743\226\276<9-\355\274\356\227\224\275\323\374\326=\n?\n\275l\275\004\275v\232\373\274\026\014\323=\216j\243\274\033\344a\2733%Y\274I\r\212\275D\365\t=\315\021\002\276\310O\263\274\317b\"\275\333\027~\275\033.\275\274{\272\243\274\014\325\273=\277\324X\273\003\006\322\274L0\256<\215\327?\274\212(\337\275\255\263\226<\000<\300\274\'\022G=F=\216\275#\362%<\364\014X=\351<S=A\355\241=\271Z\217<)\177/\275\335*V=\250\000r=\r\245%\275\302\034\264=\314\234j<G\312U\275X\010\257=3\212E=\203n\'\275h\007\341<OC\363\274\003\246\372\274\220\014\363\273-\000\241\2740\315+\274Ma\255=sb\251=\237\000B\275\234-\261<G\367O<\013\366S\275\345Q\033=s-T<$\244}\275-\221\003;*\213\212\275\321\032\031=\217\275}<\237\360y<\371u\036\275M$!\275G\247\\=\002\374\241<\325\254\376;\267\314\225=\2458\374\270\201i|<\301\373\006=\035\250\313\274\216\313\204\273\022|4=\226?\332\273t\006>\275\354cz\275\\\260\226<\342\202\005\273\003f\236<\314o\270<5 \225<\227\353\317;!\250\375<\263\311e<|\027\371;\224\306\023<\357=\017\275\211\265\r\275\261_\234<\367\230\005\274\230\376\332<\343^\344\273<\213h:\347+\306\274\000\304\303\275\210I\270\274\264\3301<~Y\365\274z\266\256<\315\273M=~\233\213\274\201f\240=\357\024\336<\001\0176=f\255|:O\033Q<\347\010\314\2735\225\250\273\\\237\336=w\255W=\322`\246\274\224\260M\275\002\033,\274\216\345^<\244_\365\272u=\\\274\276\374\235\274x\270\251;l)\010=*n\342\273\237/\217=wto\2754\033\213<.\243\243\274\372\025\237<\204\022h\274\020\377\306=#=Q=IV\237;\002\037\332\274\313\277\213=m\0319\274\327,5<\266\r\210\274u\326%\274\342\005\322\273\273\233\336<\220\377!\274}\274\242\274\177D\334;\\\014\003\273z\247\010\274\246\331-=\350\362/<\204\327p=\'7\342\274O\204\273\274\017\263\204<D\353\316\274\317\252\351<\200\266V=\202\323W\275\177\332\355;\362\000~;\301!J\274\265\242\004;\227\321\010\274\373\245\344<\'tb\275\311\004+=\253:\206\275\217\037\323\272!\323X<\356\2319;i\254\034=\331)\334=\246%\001>z*?\275\335x!\274\'I9\274}rV\275\321\\\364<\220\210\234=\212\252\347<\375\376,=z\024\223<\210m\200\275L%\347\270\373\347\335\274#v\260<5\310\201\275\374;\310\273l#\352=\241\234\206<\311?/\275\254\364\213\274\352i\343=\227\330\260\271\241\355X<\030\252\200\274`\301\267\274\374\255\232\275\010\031\\=\365\346\214\275\001Rh\273\212I\000\274nY\315\274\021h\354<v\341f=ids=Z8\036=\354m\355;35\255\267\230N\237<\335\300\224\2758\3234\272\033\364K=\354\3736\273\005s$<\355,v=q}#\275\002\232\263;\202\036F\274\177\201B=Y\016R\275\\\322\010=J\016\263=@\322\324;\333eD\275\342\310\247\272b\304H=\\\221\227\274<\260\016=\234zF\275\353\213\017\275\t\304\t\275\363\340\006=9i\335\272\366\347\230=\225\3534\275\324\207F=$\244\227<C$\257\274\026H\276\274\301\\\333\274\3566\223\274T2O\274\200\352<\275\323(\337<\340\231\305\273\302)\023;\304(\014=>..=\210\217\t<\017\227\202\275\0006\303<\\\272b\275\376g#\274~\345\224\274b\241\346<\032=\371<\317Ct\275\010\214\326<\212\304\211=grj;^\215\277<\177\273\216<4/\227=Q1\343<\003\"\277\274\234a\030=D\0075\275wC\350\274\2269\371\274>\235\245\275\227\005\204\273hA+=\231\256\354\273\263\226\014=i%/=yh\277\273_\277\022>\241e\r=\014f\247=k\340:=p-\301\275W\233\243=?@\006;j3\371<\245\031\303\274\272\316\221\275\360D\362\275\t\036!\274\001\266\266\274\210\261z\275,\377l=\010\362\300<\333><<\200\006L\275\264\262v=\344\224\311\274QkQ=\272\275.=o\364\316;b^\3139\014^K=Z]\240\273\215\357`\271.2\360:\210\203\314;\303\222+\274 ma=\236.\367=\n\355\366\274\002\323\n=\'\302v\275R\226\003=V9\240\274rOp\273y(\240=2\363\250\275\315r\010\2755P\311<\345\362\272<\302\277Z<\376\311\002=j\247*=xK\311<\323\232\315<\357\242\272\273\315\305e\273\035:\263\274\304\263A=\374b\350\273\257a,\275\013Yk\275\016)\034=\363s\017\275Q\234L\274\375Y\030=\227\236\227=\263e\020\274AL\024\275\336\273\254\2758\223\250=/\022\264<%\207\371\274B\237\026=\210\344\033\275\r\035S=\367\025\315\275\020M\207\274\210\024\263;@\014\222=\236\320#=\322\253\253<\016\375\032;T\263\275;8\210\211=\317O|;f\320\370=\274\304\247=\223Z\353\274\304\202\200=\253\"\215\274z\307\351<i\2001=\264\t\242<\340\371\261=\214\216g\275B\021t=;\205\350\274j\243\251;19\035=\224\214\355\274\220\227\207;\257!O=G\223\304:\313\364\024\275\005\332x\274|\352\231<\001%h;\215\267i<\225(\262\2753qR=vS\203=\222\031R=\347\035\"\275\236\017\276\272C\356\334<Y\303\216;c\267R=\317\201\001\275&\2245=v0#=\345\326B\275\210p\031=t\343e=\020\201\244<\341pb=N\235U\275K\246%\275:\346\006<s\207\227=s\3740<,N]<\026\3620;\252;\215=\207X\201\275\007i\357;\321\367\207\275N\222\001\272\211\257\024\275\010e\225\274\237\336\202<(Aw=\245\367V\275\007\350\227=\337\242\201\275\362\272\033<\247\010A<R\261\240\274\265\021;=ds\217<r\342\277=\003$\256<!\004\246\274\310\341\005=\273\245\021\275E\253\315\275O\347\032\275\313\235W\275>\014\005\274\031}\213=NJ\311\274\221wb\275@\024~\274\247\340\240\275\233\275D=\362\257\322\274\364\243+<\273}\213;\337\262\032=\270\234S\275\257\027\021\275\325\027\024=\270B\262\274L\276O\275\252\361n;z\003\262\274]\261C\275\354U\315;\333\211\306\273\002\324\241<\254\254M\275\177\004<\275\315-t=\343=\214<|\370\217\274\352v#=\301,&=SA\224\274\347\330\t<\017\375\'\275\306\017\314<\033\035\235\274\002Q\n=\311\177e<\027\312\303\275\002:\007\275\340\202\237\275\212R\240= \357\257\275\207\005&\275\373\016[\273n\237\312<K\020\264\274\255\252\265=\020)\264\272,\350\371;\243\003\320<g\006\263\274\300\310?=\374\002 <E\223\315=\305\355\013=\262\355\254=pqd;\355\332S;\372A\240\274w\027\273<3q\001=X\262\257\274h7+=\037\205\217<)\306\204\275\026\325$=\037\006P\2750\321C\274\276\245B\274\2560y=\257D\223=\202 \200\275cS>=\033{V\273:\275g=\010W\031\275T\310+=\360\273X<\031\337\025=<\323\330;\"\317\177<C\263\233=T$\200\274>\237-=\004bW\275\036\007\362<\356\375\370\274\232\333\'\275O;\006\275\371?\325\275\031\001\317\274\0319\310;;\375\003\275\000G3<k\003,=\331p\031=\241f\260\274\263\006\356<\037\212\n=]\240\227=T\210\031\275&\365!=\273\231\305=Y]@\273U\267E=..\3609v\253\202=\235\220}=\\\317)<\312Q\037\274\330\241\201=\006\245\242=\364\370-=\245\346M\275\200\253\327\274#D\303\273\2176\216\274\274j\202\275/q\316\274$\200\354;C\344\301\274\345r,\273r]i<\347y\027=\334\376\030=\017\005\260<+\204F=\312\203\034\275~3\304<\370g\213\273\376\250R\275\231z\276;\311\006C<Q\350W=SOw<q\320\020\275\216`\363<_\002\007\275\033w\350<\241\204\017=\373B\344<\002\250#<\346\032\313\272Q3\264\274\255\014\256\274\273\210B\275\274]\336\274g\256\300\274zM\257\274\331\357\252\274\335\031L\275\350\315u\272\177d}\275\340>\234:\035D\201=\026\247\357\274\305\266\245\274\217\216\351<1\000\000=a\257\021<z\224\r=;\240\352;\016\016w\275\367\330\316=\035\377\025\275\225_|\275\tn\010\276{\3179=\352\032\206=Xm\022\274\311+\320\273\253\365\213\275lQ\210=\237n\354<v+B\275\253\213\021<,lr\275\006\'\262\274\241\377\300<(\356\027\274\361\304\207<\033w\266\271\373,\340\274q\r\266\274Wr#\275\260\032\250\275\327mE\274\312d\250\274\333\334\250\273\232$\203\275(\036\023\275\323\371\307\273\3249\373\274\264Gj\275;!\216;\324\260`<\335\352\212<\322<\021=\030<\200=\215h\244\273\335}\357;g\220\240<\304\227\364\274/\\\004\275\324e\024=S_\227\2730\357\245;\261\360\220\273\212\\F<\375e\223\274/r\014>\001\373P\275Uf\031\275\367\3002\275\301x\005\275\303\303\204\275|Zo\275\372\346\314\274\254\256\223\275\314\362*;\301\246\017=\251\'R=\300p\036\274\332\306\242<1\357\203\275\343\263{\274\013NO=:\301i\275\023\001=\275\323\003(<\200\204:\275\000\235B=\267\334\253\274W%\207;\2550r\274\273\267_\275\370\352\211\274\024Eq\275\010\275z\275\273R\031\275\262\252\230<,\002\306\275\237\243\244\275F\'\031\275@1?=J\263\257;\261\022\035<8\303-\275C\305\276=A\326x\2756A \273\261\032R<\352\200$\274A\263\260\274k\304\245\274\344\262[=\034\263\217=7MK\274\035\301\003\274\234U5\275T\035\233\274\210;\266\2754\232\337<\004=\372\274\311\017\025=\241&\356\274>\205c\275\341\033\340\274\336e\035\274\001A\026>\177y\207<>\275\212\275\324\027\317;}\267;\274+m\223<g\177\256\275\371\372\271\274\031\366\354;\250\323:=\2448\"<i\355\214\274\244\221\001\275\363\"\253<7=\350<\r5\254;iS-=\270\\\323\275\361\262\034\273\211\264*\275[wv\274\323\245_=NT\200=(\353\016<z\035*\274XO\332\275t48<W\324&\275\005\236j\275\306B\375\274\"\262,\275y\267\327\274qt\032\275=\257\255\275\230\241\006\275sZ\010=\342\233\017=#\220\210=\025\2127\275\267_\226=\005ql<\331\031V;3\251\305<\316h\016\275\2464Y\275\207\214\331\273X\223\005=o\203\253=\275\212\367<\317\341\2139\217\374\365\2741\223\266\274\363\230p<\206+\242<\212\346\377<j\0344<F\353A=\215b6<[Z\014<{\035\254\274\032\023\001\275\250\264j\275\352*\007\275y\205O:\205H\325\274\237\311=<\336Z\t>\357V5\275\212\305\303\274y\271}\275\243(K\275\002\321e\275 J>\275\\\246G\274x\317\216=\0141\204<\352\265\346\274\243_\201\273\277\211\000<\324b\010\273\235\247\205:Y\330D<\032\235r\275;_u\274h\337H\275\365{|<`\200\010\274\201\222<\275a\266\335\274\317\262\213\274\324\031\200\275Z\027\002\275\325\365\256\274\020\022_\275b\200\026=\262\035\037\274T\255k\274\021\344$\274\027\314\201\275\021\335%=*(p:\307a\177<\355\255\227<\300s\237<\373\202\022=\032\023\207<\t\230]\275\241rD=\\\006\233\275\224\001G;}\202b=i\nk\275\335a\357;\010E!=j\256!=4\352\026=\257\361\350;\023\357h<\315\252O;\336/\226\274\261Y<<\217\350\364:\237\364\346<\342\213\236<\241\300\261\274?\363\234\275Pl\230\274\023s\201<\357B\304<>Y!=\024\224r<bdW\274\020\265\247\274@\373\037=\373\200\037=}|;\275N\324\204<\377\237\014\2745\334\213<\370f\'\274\256YH=\023\tJ\274\376\tw\275\275>\241\275\274\225\334\275\002+J\275\233q\206\275i\307\302:R\337F\274PX>\275\220\232U\274\033\302\270\274\263\357{;#\273\237\274\231:\27691\224\'\275\321\232\320\274$$\032\275Zx\222< h\334\274<eI\274\343\230\316=\365\n\262<\357\215d=\221\357(=^\301+\275\\\373\037=\240Qv=\360\003\330\274\305(\005=\346\027\266;\237\037\002\275n\206\251\275\271\323X\275#\354\200=.8\265\274R\204\2369a\340\210<LJ\\;H!\251\274{\244r=\315\251\255\274t\005\317\274\220a\332<\026\021\203=w\267\307;\304\205?<\211`\247=\232\201<=\223\215`\273\\\002\315\275\203@o\275\240d\214=Z\222y=8\266#<\324,\013=\210u\330:\344\215\263=[X3<\267\352!=\014\2328\275u\2230=\003r{<^\3139=\333\220\264<+q/\275\266\177Z=\363\355\246=DI\216<\331Ne\275>\214u\275\331\370\351\274k\336\024=\337r0\275\245\\\213<\343\017\006=\247\0348\275\210\264\241\274\365l\267=kU:<y\235\265\275h\344\266\275\024\367f\2751w\233\274\006\3502<M\372\t\275~\231\006=5\016\367\274\276\272\320=d=-<\017}p\274\345\321a=\206\313\032\274\004gA\275f\265\344<\335~ =\216&\030=\224!}<\340zl=\377\353\032<\265H\303\275dk7=\032\312\257;\275\035#=h\334\016\275\000\356\220=\302z7:\310\251\n=\257\377$=\336*\n\275\302\252\233\275\006L!\270\356\221\241<t\307\301<\370T\013<V\307\205=\261\007\221\273\340\270z=\241N7=\233\342\335;M\035x\275z\371\243\274$H\010=;X\\\274\010\370\240<\364\\\031<\254\334v=&\242x\273\261\016x\273\273\022p=G\025N=\245\244\203\275>\'\211\275\245v\260=\250\256\245\274\025Ec\274D\300H=\337\352\273\274c\300\245<\000\027k=;p\207\275\022\272\374\275\325\r\225=\333\266\266=Xk\232;\005\231R=\251UQ=\273W\033\275%\311\274\274\364\221\314\273\035\306>\274\334\342\212<\275\213:\273?\204\204\275\351\354\036\275R\374\026\276\346b9\274M\000\222=I\365\227<\006P\332\273Fb\212\274\323~\t\275\035h2\274\241\365q\275\275\031\351;\322\004\314\274\266\3334\275\326!\010=\202z\372\274\356\227\216\275\300\244*\275\343b`\275\374\277\244\275\271/\361\274\262D\213<\2108\230\275\255G\255=\244Q\320=\247\021E=\365\222^\275\340q\313\274~\nX=\177\'\326<R2z\275\024|\274<m\2167\275\0238\225\275\\\016\346;\266C\225=\262,#=C^\274:\021\"2=\324p\004\275\377{D\275\n\223!\275\361)\r\275\236\261\323<\343\332h\275\302\323\201\275!-\336\274\326\270\027\275\246Q\016\275c\342\'=V%\374\274\177\032\222=\014\027\004\275pO26(0\212<\243M\201=e\311\017\274\204\343\221=s\277\026\275\260\020\331<\266\275\206<\247\233V<\346L\347:\342\345<=c\243\004\275\303\025\000=\357\242\003;lQp=c\364\346<\360\343\246\274\224 \256\272\006`5<\253\336\334\274\215\333i=\240\025\033=4F\345<JA\037\274\365\213\371<\276\215X\275\351\300\227\272\256<\207=Y\206\\=\357\035u\274\351\034\005=v\336\247<80d\275\3179y\275 p\313<\262\253\212\275\267\233\251=\300P\214=,\210\241;\001d$\273\275\222A\272\307\374\236\2743/\264\274\023\\0=)\227\201=\241\313\003;\202\264\360<\3031C\275\004AV\275F\262\235\274]Nj\274\200=\351\273\214#\026<\352\374O<\252[\005:K\252\260<\310\301\337<\231\273,\275YI\025=\377Bs\275ryM<\352\'\025\275\270*\237\273%s\234\274\347\000\032\274\030\013\306\273\016{\237\274\014!\305\274\314\226X=\320\216\t\275Z\372%=\36641\275\242\327;\275ky>\273`\222j=\362.\246=\210V\345<\373b>\273\256\356\223\272\365\356<\275,e\222\274\346\350\022\275\367\250\220\275\315\271\313\274Y\273\312\274\337\214\360;\345\357\252\275A\003\312=\330\362\201\275H\014\031=[\026h\275\332A\211=J\240#<R\3305=\017\330\245<|\273\206\275*\200N=/\007\026=\211N\017\275\367\371\236\275\215TX\275\244\020N\275\257\354\020\275c\255c<\273\'\205<\006\334D<\210\226\214=\364R8\275\336v\254\274\037~\205\274\213\370\211=\260\362|<\336,\"\274\274\261\002:\211X\254=O(O\275\3332%<\"\022\352<\210\003\022=\356xV=\235}\035;\265fx<\350\366\313\274\177\032\331=[\007 =&*t;\272\205\030<<\325\025\274\275]\213\274e\004\032=\272\314\211<\036a\371;U\"\240;O\361\224\275\302\332\364<\307\023\247;I\306\300\274\375_\364\275c\206\333<\013T\344\2740\373f=h\337\340=.\260\035=W\261W=x7\220\275\237&\226\274\372bo\275+\301\326\274\200i=\275(\254^=\374\245p\272t\247\374<b\222\226\275P\225\025=\274\255\214=\236\313e=j\237?\275)\207#\275\006/L\274\316PB\275\231\031s\273\020\322\027<\356^\212\274\244\217\006<\233\366L\275\363)\232\274\230\377\276\273Ef\251\274\177\241\252<\256\300|\274\354\251?\274\206\"\033=\227\210c\274\246\340\'\275\363o7<l\223\010\275\246.F<\235\246\n\274\263\022g\275Y\007\323<\036$L\275\022\353\203=\346\272$\2757\313\255:\276\227\016\275\261c\031;K\222&=\024\372J=<\023$\275\324\257\232;\021g\r\275\002!\202\274\014\304\267=\313\217\"<\221\210a\274\n_\n\275\030\211t<\304t\003\273\327H\321\274\356b\256\274\0075!=\177u\320:\212`+<\345\220*\274V\237\347;\226s\333\273\314\212\320;K:N=M?\257\274\2129\372;I:\016\275\"\365-\275S\324f\275v5B=[\321\304;9n\302;\030\373\234\275{\013\207\273\271\352M=\3359\n=y\250\371\2734\026E\2746C_=^\202#<\367\236t=\035\026}\273m\343J<l\346\035\275\240\336\"\274.e\243\275\367\363<\275\232\326\235\275l\362\234<@\321\317<\304+\020\275\313\360\373<\251;\232=\255\367\332<\336\324P\275,\257a\275\210\375\215:u\240\375\274\tA\356<\360\213\212\275\356P\366=\204\347+<\007\354\036=C\323p<H\302\031=Lg\325;\325\313|:\034\032\007=\336*\226\274\205\214\242=\320g\030=S\201F;z\212s\274C\033\031\275p\370_=SG\305=\323\rH\273<\317\014=\325\211\201\275E\016\251\274D\322\006<\277\207\240<~{==\300\243\370\274\337Cc\275\216\023\352<\377|%<\0103H=`\203\250=\030\267+=?\024x\2747\031\312=\271u\227;]\256\027=\340 \242\274b\237\010<\304\"D=\203\006\226\274\224y\246\2756\024\004\275^n\263\274N\312\220<\254\345&<\335\022W\274;\221]\274\016\253\031\275\241\001\235\273\224[\340\274I\t\273\274\237\375\267;IW%<\3548\375;6{\261<\207y\335=\271\0241\274\340v\251\274Z\037\032=\214\345g\274\026N\335\272\200\205)\275h\035\016\274\365\315\017\275\345J{\274\217l3\275\022=\204\275\024\333v\274d \206\275\254U\001\274$\373\301<\374\264\313<}\317\035\275t\343j<Go\201\275mP\263<\020\233\202\274\034{\263\2733\316\026\275\230oR<\355=\303\274\305\262\370<\372\245\235=\206\2350\275\337\007z\275\331\007\020\274\262\341?=\373\311 \275+\231\035\273\t\2118\273\370\014g<\311\027\204\275\242\272\216\274\347\231\354<\275\037x\275\217\032p\274\303\341m\274K\211\220\275K\025i;9\350\302\275Bg)=\276\360\033\275YN\373\274\216R\016\275\010\223\005\275\nw\n;{\001\275=#6m<\t\317y\274\320\242\227\274b\351\231\273!\272\232\275\360\231\370<\331\242\372\274\2451\002=\273\017)8=Az<\200\3373<\214o\217\275\034\032\214<\0201q=D\343\003=\003d\234\274\035x\010\275>p\241<\301W\262\273h\265n\273\326A(;L/\256\272\024u\022\275\277\231\272\274`\000\375\274\316;\304;t\027c\273\345\354\001;\023\221\203=N\361\257\275\310\377\034\274\351\357\004\275\245{\001=q\255\222\273\213\206\\\274Q\232v\273\322)Z=\202U\200\274g\230\031\274qm\212\275\013\363\232\274x\2440=\2768><\321\355\n\275\363c\n\274s\025B\274\302S\022=\343\370\007\274I~\005=9\\\"<i\321\353=Y\217\352\274\325\206\204= ^T\275\343\353\311\275\t\360w<12\332\273\311b\370<Q\230k\274\361r\032=&)&\275\340\336\030\275\216\344N\275\304vf\275\310\316\306=\271\371d\275\0332]<\037\022(=T/\034\271\244\372\236\275}o\005\275Y\373M\275\313G\360=V\310\310\275\257\016f<K\375\206=\002Y\307\274\267P\006\274\201\023\005\2753\310@\274\370\217+\273\n\203]=\004PX<s\327&=\252\261@=\356\014_<0*\330\274\326\261t\275\315\037\022\274CqD<L\034!\273\341w\r\275\343q\217<]\3158\274\334\005\214=w2n\274\005\021w=v\013\321<d\257\370<[\335\n<\222\217O=\255L!\2754@~<7AN<i\232\224=\003\274\224=F\035]=\260\367{<\322\273G=N\261P=\356\260\367\267\335H*\275!\275\253=;\302\026=Rpj<cb%;|f\263\274\340\347\203=O\364\262\274\216\3332=_\213H\275i\344\343<\272\252\340=\177\200\307\273\251\254\353\274\362\350F=\200\336\215;G\363\377;\225\364\240\274\367\305&\275\275,\027<\247jr\274k\330j<\0020R=\341\001\356;\367\343%=\003W\024\275\361\232\306\274\340a\031\275B\372\n\273\2212\306<\230^\234=\350\341\003\275\027\330\225\275i\005H=u-\234\273\257r\254\275\316\233\301\274\327n\253=\326\235\273\274\376\002L<R\010\277\274\214\360-\273\371\335<\2736\003`\273\177*\215<\233 F:\375\220K\275=\360i<\337?\203<\257\330\335\274\321\210\315\275\345Q_\274\004\351\037\276W\363G=\031^e\274\017\237g\273\341\260\372\273\363\262\021\275[\317\216\275\357\242\014>1\3112\275t\341\205;&\013\267<\357\020Z=\370\274U\275\256\262\004\276\255\005S;G\346K=p\017,\273m\333\235<\257C\247< \037\212=_\220\r=+Al\275\210\252\004\273\007*\320=\376\014\200\274\241\2447=\350\205\267=\205\325\215\274N\010M=\3330+\2747\n\303\274\345\300\335\274+\251J=k\335V=\'\223\333\274\264 \261\274\327\210\004=\356\023\342<\333H\245=<\225C\275\034\035L=\326q\013\275*\275{=\026R =\027\226\007=\365\257\367\274\024c\032=|y\221\274\213\301\224<\314\352\366\274\212dv\274\017\277\001<\3149\020\275[\253\376\274of\203<\311SJ\275L-P;|K\370=\225\"\331<<\271&\275\2014\245=.\251\240<\230^\363\274*.\235=`\326\232\274}\252\n<\371\005\241\272\371~\255\274\213b\210=\024\337M\274Z\366t<v\270/\275\261]#\275\203 $\274\265dn\274\030Dj\275\335\214\355=c\317\221=8\326\367\273N\347\245\274\257:\n\275\031\244\327<\232\014<\275\315S\267\275\215s!\275H\010n\274\205\371\000=\375\374\221\274\240\351\211\272\2446\213=\013\327\013=\206\370C\275\346q\270\275\002b\333<b\221\215=gu\r\275\357\307+\275s\320\202\270\270\340\274<\310S\027=\326\033q\275\346p,<\010\225\034=4\3729\275\247O\263<\245\030\203=\350\253\274<R+\302\272\226\332d;/\266\221<\340\221*\274\312`\225=\230\271k=\221c\377<\325\373q\275\034\313\"\275j\225\035\275\206\007(=\021|\013\274\332\n\000\275\315\t-\276\250\344\266<\233\221\020=5\023\213\275\2220\206=\016\304\036=\214-9=s\223\343=\232m\247\274\353\307\014<\\]F\275\222;f\275\334(\005=i\253\227;hWp\275\306\377\215\275\215\322\331\274\261\366\204\2752\034%\275f5\256=\270\013B\275+\177\265\275Bwc<MN\221\275\014\021C\275\345\023c=\350W5\275Y\217\023=\266I[=\240\213\022\275V\214\230=\344R\202\275\260\337\310\274M\252\367;+\366t\272\247l\202;xS\202\274\2104\220=M[L\275\0038\277;CHG;Q\336\014<\211\034\002\274\260u\'\273-\'\217\274/\341\365\275+\266f\275~D\002>^\n\026\275\213a\220\274\255\332\033\275A\223y\275\007DZ<\236V7=\266\025\020<\302\263\237\273\000\262N\275\305|\r=\321\270\"\275|\316 =\351\354\326\274w\370*=z\2517=\031\217\002<\0268\036\275\017v\016\275\350\2030\275\326;\215=\352\320\326;T\314\215\274\026\224\000<\221\241M=\333\306P\275V+\244<\234\207\270=8\337\277<\346\2467\275\272\'\346<\370\232\225=X\355\202\275\343\030u\275G\037F\275\260\016\312<JtX\274\3504r<\215F:\275w{\032\275q\013\205=U>\216<\322\274%=<t\336\273\2006&\275\t\353\232\275r\333\231=n,\010\275\343o\325\274\033\200\212={\274\222\273$\205@=BT\203=\255\021-<x\362\272\274\343\257V\275\2449r\275\030\237t=8\247\226<\032\212\247\274x\r\210=5\013\306\272\326b\322;\344\277?\274\016t\366\274\3205\237\272\316\032o<\252\252\027=[\316h\274\367\342\202\274\017O\271=j\203\337\275\332=\005<\273\243\031\276\024DB<\246\301\270= \335\226\272\374\020\244\273\nQ0\273%\312\334<\376\002#=\256l\256<\354\220\240=u\301\221=\016^\234\274\321L%\275X5\201;\215\340\237\273\213\323U\274\224]\221\274\007!\317;r\261\032\274U\270\231\275\023\247P\274\222b\024\275hZ\245\273\033\370\t=\237\265\245=D\003\t\274x\345!>\236\207\331\274\323\325\240\274N\027\030=\331K\371<\240\323\021=\242\030\311<\311Z\227<\337\277\207<Y\315\204<\343\010n\275\021\230g=\246\246y<\242\262]\274\245\227\016\275\275?%=\222\027\210\275\351F@\275{\022\331\274\224\353\355<P\303!=\034\230\231\274!\224\203\275wT#\275\350x\257=\255\275m=)\375p\274D\0143\275?{\333\274\227:5=[J\224<\017\336\010\273\241\217\232\275+;h\275~NC=+.\034\275Ze\210\274\211\231+\273\001\007\272<\251\r\231<M]\337<\256\021\330\274\225\n\034<\332HV\274#\205\265<x.\013=\035\377\256\2757\233\362\274Gn\036<\376\027\243<3\220\256:\377\031E\275D\035*<\201\327\361<\334;s\273,\335\006\275\345\236\276<\302\312\300\274r=|<\336\003/\275\371\234\206=\277\310?\272\341\3510=\353n\261\274\276\220\007=\t\020&\275X\357R\275\235\362R\274\023\236\n\274D_C<\201C\311<\004n\236\275\220\"\222\275\341f%=\355\034\247\275\206\236\240=a\010\201\275V|y\275\333\021\212<4\'\223\272\002\232\254\275V\301\035\275\365#\275\273A\230P\275\031\270\\\275\214]\261=z\314\351\274\222\231\313<\375OA=5A\215\275\373\374\312\274sb\007<\305\210\321=(O\274\274\221\"\302<\251z\027;\220bm=E\213\204;\375MQ\274&\223\323\270\262@a=$r8\275\207\035\213\274\026\272\240;\340\244\376\272\331$\007=\002<\205\275\266p\264<\014\231\264<\317\r|=\300Y\363\274\2220\r\275\020!\255\275\225\to\274\232\274%\275?\177\003=\354j\263=\276\366}\275\333\253\231\273\314c\005=k\322\'=R[0\2750\035*\274\250\267\213=\377U\033\275\203\371z;\010s\204<8\032\264=T\253\314<\237\007\014\275\202\023\252<\227+H=?\267\036=\032\304_=b\271\342<\304\224\304<\371\327I=}\311\216\275*\317`\275\240\003\233=\005\321\027\274l\365V<\311\311h\274\212\242o\273\270\206\225\275a\023\033\274\245\004j;\000\344\206\273h%\204\275\31146=\032zp=\221\021\014=\232\030\271<B\322\277<\306\232:\275\344\214\311\273tPa\275\227~C\273\212&\245<\231^\202<\214C\020=\332\232\367\274X4V;o\177\330;1Y\270=\311\001H\275G\204\031=\314\264\200:<\242\313\274\231\230\355<\205p\016\27538)\274G\365Y<\236k\251\275\026Jg<~\314\2559\2468\234\275\246\331d<\231\327\t\275\033\300\312<er\'=\035\201\204\275\330\013\004\275\341\360\035\274\307=\273<~\034a=P.\236=\273\202F\274\030\267h\274p\204O\275O\365\010;=\365@<Tv|\275s\304\014=p\325\306\273\025\014~<`\033\227\275\333\370\204<\324[\254\274\020\200\223\275\005\215a:\340)\256\274\327\212_\274}E\333<\272\207\227\274\340\245\262\275w\225\256=7\327B\275T9K=2\255N\274KRN=BD\265;v\376\226\273\"/\"=\017\023D=\003\244\235\275)$G=o<\213<g\235\002\275\306\2657\275<n\021=\252\"p\275\341\277K=\027\0225<\2739,\275\247#\001\275\004O\n=\323\033\201\274j+\336<\024\337\264\274(Du\274\253\306==\231\231\022\274XQ\240<\261\266P=\n\260J\2755\331\247=\300\345\377\275>g\254\274r\261\237\275HQn\2755C\245=|;\270\273\002\254\036=\343A\272\273\247\371\000\275\274\331+;J\353f\274\311\230\221\274\202d\223\274\262\030p<\233i\234\275:\rQ=X\223\345\274\361#\233\273_\223i=\224\030\t\275\240\323^=\010j\017\274K\3068\273vg\215\274\020L\201\273\213^\221\275\010\336\277\274\311a\304\275\243n\224\273#D\276;\204<;\275\032\2368=dG\202;J\355\333;\225e\304\274h\257\343;xP\220=\265k\250\275\001\3214\275\013\333\254:5\352\017<+\2639\275;l2<\370\277\337\273\'\352\226<\261\030\263\274-\021\215\274\262\313\257<c\202\310\275\217\302\212\274\005\200\327<\262\364g\274\316\277\032\275\200g\213=h\3669<\360\244\n\275\224\023\221=0\374C\275)\312m\274\214\221\336\274F\304\215\274\024\334\303\274\356\312\347\274_p\224<^\023g\274l\370\021\275\316>\257;\347\332a=_\002\243\273c\260\311\272\026\255\027<\363H\211=\220\361\204\274\232c\234=\315q\356\274\305\025^\275\332\253\247=\332\320p<+?\276=\220\177\307<\341\244\217=Xi\263\274@p\377\273\377\367\207=\272L\204=\350\250\027\274R\332o<^\304\025=BvO=\332s\007\275\177@\363<\277\210\010=\305\376T\275\026K1<n\017\230<\220\244P\274N3\200<\356\227\223<\311s\035=\334D\025\275\352\024\300=\357\036\007=;\311\371\274\024\014\241;iT\303\274\236\3222<\374\216\317\273\333\327\350\2745w\221\2740\266\266<\363\200\346\274\177\204\024\275\246\263\016\272\202Y\217\275\014u#\275/\351\273<\200\016t=\021\254\\<\002\024\r\273\203\013\354;E\032A\275\303\211q\274i\355\350;\200\\\327=\306\351G\275\334\346\244=\325\325\220\274\016\331$\275i\260q=\242\010\025=*\030\262;\302\256\r\275\345L2\274\366\274`=\364\034\336<\335\213\235=l8\300\274\364\034/=\332\004\013\274\312\217@\275\225\323\265<#\273\377\275\342~\264<\232\003\344<\233\177m\274\241s\377\275\363e\244\275W\324}=7\257\017=.\305}=\222eQ=\203\311\273:\223\013)\274\327;\004=C`\221\275:\274\203\275.\245V\274\221\024/=\332~W\275S\272\036=\261H\205=\261\224n\272[9\363<\250\202\024<\260\334\222\275r\220\275=}N\312\274\325\2617\273\214]\005<\244\2341=S\216\213\274im\245=\212|0\275n\316\356=\014;\323<\204\311U=\013\333\2239\354V\207\273qK\336<\024\262;\275{\017\207\275\001\245\315\274l\203\341\274La\301\274x\2468\273\322\245\003< \250\241<\357\263[;\274x0\275\235?\341<\021\267\276;\"\027\210;\206\212\233\273\177L\225\274\0358\313=\351\000R=Q\263\215\275R\3310;\364\002K\275X\2622\274W\204\036=\271\262\221;Z\321\036<@\340\365\274N\\\201=\340\237+=6\314\000=\325\321\224=RH<<5\005F=<\243K\274cri=\256\314c\2750t \275\262\035\022=\240h\322<\024\206\334\274N\346\341\274_S\355\274Y\367\206\274\321Ao=\273&\024<\\oD\273\264A\344<\233\253U\274\204\212\206<\266\267\000=w$\316<WcP=\277Bt\275B\223\003=W&\230=\260l\302\275H\226(9\340.\014=\372\024(\275$T\266\2744\362\305\275(n\254=\314\006Q=\371\3266\275m\214\007=\303P7=|;\025\275\340\275A=(Jn\275\323}7\275\026\\\322<-`\261<\221\201\206<\370\325p\275@\303\332<\000\026\203<\306\322\201=\026.D=s4\213<\2358*\275D\201H<\326WG\275K\342\026=\252\311|=\362B\370\274\334\250\242\275\232\000V<\213\224<\275yi\350<i7\242;\214\207\030=o\354\301\273\025\320*=ft2<\211\273\213=\027L%\275\023\344.=\207z,\275\275\310\345\274d\370\340<\357\025\257\274\227an=Z\025<=x\360\232\274!\304%=ZV\"=\000\0017<\223\310\027\275\240\312\356\274\351\220\326;\254W\326\2744\365\007<\341\377~\275\343|\342\273`\262\326\273\0103#<\212\340\313\274\353\332\257<\036\027$\275Lx=\275\"E\225<\354:\201\274l\333\367\2741\177/\274B\371\354\274\303\006\236\275\271\321W\275\337\006\265\274]y\003=\241k\035\274C2\256\2755\014\273\274\276\234c=t\345k\274\000\2164=_\324\356<\244]e\275\013\241\200\273\372\2615=`Cr\274t_\204\275\337^\201<\316\375\352\274\033\332U\2756\302\320\274,\242 =\323\226\200=\216\345P=G\006\010\275\024\032h=\371I\035\275mg\031=\355IK\275\216\256\216\274a\315\021\275\231`\235\275:O\211\275\310\034t=\365\211\000\276\232\372\347<\224U+\275*x\301\274_\330\301\273\223u\207<\331\323\007=^\364\325<d\n\203\275\204\260\345\274V)\256\274\344\020\267<\260={=\314\333K=\354\023\023;E\314\374\274\377\356\231=\365\261\236\275A\000y\275\354\372\372\274NQ\377<\036\241\203\275\237G?<F<\002\273w\347\221\274\016\264\252;!\331\225<Pr~;\002_\000=1\000=<\237J\017\274\301R\250\273G\000\201<\014N/<\363\370]\274\016I\322;\201g\346;\311{\252=KTX:}\275\300<\247\307\330=b\341\202=\345\260\265=k-\023<sv\034\275L\2338=\\T\311\274*G\212\275\336V\311\274\257\021\033\275\376\3150=\264Uk\274#\315\313\274\203\356:\274\271O\203\275\203-u<\326\317\220\273w6\231\273\337\317\035=$\331\006\274\2729b\274O\241\342\273\007}\206=7\205\216=\322\265\024<\27056<\"\305f=\350\355M<\330!\225\274&p\204\274\336\336\202<o\364\025=\027\317\036=\025\027\002=\033\271\016=,\363\"\275b\346\313<\010fI\275B\233\274\274\304\351m\275\244\351\037;\277\234\220<\026\214\260=C\337\374<\372l\214\272\244\235\256;\235]\224\274\363AA\274]lh\273\272Ga<W7\262\273\264\023\205\275\331\323\232<\343~2=\236\202\215=\216\034\344\274}\306*=\2003\030=\232\320v=#\271k<k\215\2419\253k\375\274\273\"]==\203.=\344\030^=\345Ru<\300/\357\274F`\220\275\351\362k\2750\353\237\275\212\241\332\274xsZ\275\020s\273\275C\t\252\274\337\236\202\274\352tJ\2740\251\263\274|D\326\275\003\314L\274\212f\032\275\313\343\325<<\336\035=\360\347\327<T:Y=.\n==\034!\231=I\215m<Z4\336<\235=\343\274\036\256\006=V\3676\274L\331\002\2723\375\341;\350\342#\275\327\302*;\034\376\037<0\345\337\273m\032\254;kL%\274\265\027e=\316J\361\272\035\035O=`\003U\275\257z\345=\314\377\\\274\373=\214\275\362\032\354<\264\027\202\275\207\342Y\275\364=6;\213\030`=\245\370\372\273\014@\210\275N\224L;\254\212\003=#;\204\275\243\301\221\275\002\323\364\273\317$\306\274\367\217\030\275~[\376<\376\221\310\274O\372[\274W\375\230<C\342\322\274\3438W=}f\\=\320\344\032\275D\210Q=\352\361D\274Bh\026\275\330W\037\275\263\3026=I\245!\275\226\344\224\274\276b\276<G\351\024=8\335f=\'2\253<\313\203\350\273\335\216#\275\207\246R=\271\214%;n\004F<\217/\326=\276<A=@\262\277=\202\207\005\275a\267d\275\347&\261\274\322&-=\311\203J=\021\227\202\273\376r\271=\316\374\356\274\355\325\337\274P\033\177=ifU=q\220O<\316\336\257=D\320\237<\352\023R=\354\371\016<\024qk=\224\022\277=\260\n\330\274\213\240p\275^\350.\275\316\360\025<\217\000\"<\330~\301\275\274\275\277<\203#\363<\310\352t=B\246{\275\325P\252\273\271\335\n=\257\366\271<\371\2501\275n\022\025=\323\215z=\220Y&==\252V=/p\213=\r9Q\274\320\315\250\275\345\313m\274\n\033\222\275\374>\277<_\223\240\273\371.\364\274\304g\332\273\352\375,<U\247\315<\217\312\336\274\230\003C\275>\345\273\274\320\275\253<I9\016<\367Tz\275\256V\337=B\357\266\274\344\242\276\273o\243J=:\356\255\274\316\353\331\274f*Q\275\363A!<\":\252<1\354K=\037\n\022<\304\330\314\275\013\335@=\325<\014=\320[\231=\005\223\247\275HS\213\274\016\223\236<\261Q\275\272\225\003\006=u\350\325\275*\243\306=\266nR\275\021M\223=t\003\312<\016\024)9\370*}\275\237\\\222\273p\360Z\275\210\360\351\274\216\204\027<\300\225\257\274\247\363E<\2459\247\275\321\341a\275\332\2730\275>5\205=\320\366\334<\373\332\003\275\327{\236<\222a\213;\334\202\344\274\033\236\236<Xj\346\2739\217\272\274\376\244\215<\235\033\234<\256\2764=\321\203\376\274\300\256\006=zZ\306;C\266\251<\214G\177\274n61\275Y\261b\275q\377+=\006D\007\276~\323\201<\360x\000<5D\335=\273\235\\=\245\260\'=KN\216<\250\214\215<MY\233<t\274\300\274\023\352\377\274\223$%=\216\353\035\275\244\017\304<n5\221=\303\034%\275\251X/\275v\277D\2747\312\320;\256\002p<\375L\n\275\270\020\250<\034\364y9@gW\275\365\256\212=7\370\344\275S~\"\275\340L3=e\365\220\275\363\367\226\272%c\021\274FI\330<\207\233\007=\306\262\215=\316:\317;\n\233\257\275\3532\242\275\353\353,=a\243\225=\245g\226<\350G\204<)\366P\275\221\333\236=\346\022\343:\"D\321<\321\224\330=\023\321\377\274\177x\330<@\007\337\273\265\334.\275gp\207\273\322\236\204=XG\205=^R\211<\263]\264\274\020\263U\273l\375O<\031]\316\274\233]\220<\3235\206<P\016\221\273\277\256b\273\257\252E<\347\3263=\201z\302\275KD\304\273y:?=\007\206\251\274n\300\337<c#2=\257n\352<\302I<=\000\360Q\274\342\232s<\346\317\227=\364w\340<\t\203\033\275Z\222\214\274\274\261\006<\250\365-\275\2773%\275x\227\261=\035\001g\275\262\250\201=PjV\273/\207\027<\372\035\331\275\346\310P\275Ot}\275>p\260<\334j\001=\373\200\277=0/\212=.\2674=m?\217\275\231\300\211<\331]\002=\324\252\222=\373\306\355;r\277\010\275\327\202A=\2142\256=\330\311!\275\022!\256<HA$=\362@E\275>q\032=v\347\272=\264x\226\274\230\207\355<R>\200<t\267?\275.\000\307<\020\321\213==\213\236=\016O\t\273\002\2417=inZ\275vR\277<\016\273O\275\331k\332\274\002J;<UL\014=\371a\030\274\376\352\210\274\n\"\346:\017\311,\275\267eD=\245Rp=\276\017\002=6j\210\274O\003\010=?\210X\272\262\204\367\274\020\353\237\274H2==V\356\315<\356\275\023\275\025\356G:\310t\'=\037\377\227\275N\025\014=\010\270-\275\236\335\000\274\014Z\363<\241\225\216\275W\230\267\274\037g4=\254Wj\273BJ\023={\313J<\312\261\201\275Q\014\241;\361\3336\275\270\030|\275\365,\312;\230:\204=\311\031h<\263\3259<\217\315f<\275\205\210\275\231#f=o8+<U\351\037<L\020\255\274\353`\266\274s\n\177\274\265\307\251=\177^\245<o\225\t\275\244\346_;\253\332\227\274\273tl\275\rDP=_\250\226\274\217\3175\274\220/\"\275!\327w\275\007_\203<B\001K=\266\277\277\271gS\240=\271\027o=y\257\226\275\344\251\224<\301\002\303;\376h\247\2756\013\275\273\335)\320<\016zc;\\\341|=j\240\213<\247\220\346\274*\376K<\315\276\356<\017g\351<\033\004>\273\033=S\275*\244c\275\2552\006=\257\220Z\274\350\366\257=#\332\222;1\200\005=\265\007\316<8\226+\273\320\322\311=\320\276\030=k\224<=\320#\303=-\337v\2758\356\241<\336\332\273=W\005\306\273\023Id=\304\250<<\213\270\210<\r\206r=p\t@\275\007\374\267<\344\364\342<\205\'!\275\361M\202=\032\007\216:\270\340/<\256\200\261\272\203\237\306<2NH=\370\205!\275^38<\0248\275\274\234!M;(\024\017\275\017\\\235;=\032\237\274\032:=\275x.\020\275\205\250\317\273\202\253Q=n$\023\275rSM\275\355\340\020<\032\206\333;Vlt<\201JK<\206\2357\275r\031\352\274Q\031\001\275\260Vd\2736j\207=\225\352\277\274k2\330<KA$=\213\215G\274\326a\025\274\024\222\271;AR\303\273\243e\300<\310\241I\273l\276\237<\342t\r\274\221\205\260=\220\304\224<\233\242n<\207\000\246\275z\334\317\274\r\202)> \006I\272\205Q\325=\0030\344\272\240\223;=\251\275\300\275\221\"\276=\210\362\322;3ZU\275W\307\217=\032\342+\275\342u!\275\325\014\303<7\226\354:\021\334\317<\333\017\375\273\225\216\001\275\2227\342\274\017.\317<\001(\205\273\374\376\000\275w\352\253<\'7\263\275\231Z\026=\033x\351\274~1\244\275/x\336<\226\242\002\275\356\016\270;\202\255Q=\307\337\270\273\007\377\230\274\023O \275\204\302\301<\3308k\274Mp@=\262\316r;u\246\266<Y\006\034=q0\371\2747>0\274\023\274\365<@\240l;\254\210\027\2754\246\200<\255\365<\275L\211\026:\177\274Z\272\277\234\323\274\335K\204;\3116\261\273\332\203%\275e5\235\273\323\353\304<\347\216\225\274C\253[<A\006\034<{1\037=wJ\n\274v^\343\275\376\364b\274\210\255\346\274\022Q\304\274\312I@=\017\325\366<\216\250\331=G@\253\274\177\254\244=t~C:\347\227\005=\203C\033<\212%m=\244\020\213\274\243f\026=\375J\005\274\303\337\362;#$}=\r\342\235\271\333\325\247\274\022\223%<\253\'\r\275\231F{\275w\243.=\265\301\235;\267\353\212=\006\"\375\273\003\333\211=z1\203\274\275\340w=ku\210\270\240\3750<\2310\322<\376\213\337\274G\3067<\345\025\"\274\211\035\221\274C\220\211\274b\214\243\274\211&\000\275\354\006\300\274q\311\014\272\340O%\275\244\250\360<&0?\275q\325\361\273\025Q\314\275\232m\307\273\345\301\236<\345\343\240\275\360\216I\275M\201\330<<\331\256\274:\236\254\272\245\032G\275\315\334;\275\332\332\315=r{\003\276\206;/=\'\241`\272\211\213\337<\302\177*=\240R\252\274\245\360\224=\\FT=E\0351=N\230\352<\340\n\365\271\034\311\332=7D\230;g\254\334\275\321\001$=\036?\263<F\023i\272`\317?\273\262\273\255\275\300\206\325\275\356\314\233\274i\214\010\275\010El;\374+k=\236\246\340<\354=3\274\351\202j=\277\242\275\275\346\351\231\273@:\356<\275\342\212<\274\031\237=;\264\330<\031W\026\273\346\255\222\274\004\257\335\274\342G\234\274v\222\260\275\327\366\265<\267Q\312\2742\331\326=\244\247\014\274rU\362\274S\355?=\017\263\324\273\257\346\273\273\270\033\326=\226\352S<~%9=\021P$=\267\021L\275\013\217\361\273\313\300\206\272\277\177\243\274ig\016=\370nK\275Zt\031=\035`\261=]\3301<9~*=\n\352_=\210\307\254\274\334\232\264\275\024\030\334;2&\267<\020\322\352<\025xd\274v-u=\242x\314<_\257\346\272\203\'\302=?A+=\235\325)\274\220\336!\275\217\351\n=\324\'\270<d\354\275;\031\033\000\275j\206\276<\301ez\275\000\301\375<q\275\221=h=Z<\241\006\301<\351\344\223=pD\267\273\037\033\362\273G[\021\273o\203o\273\277\\a\275S\3209\275q%\255<\210:\322<,j\341\274k\203Z\2745\025\244\275Y\245\217\274_\016\254;\332\373\306<E\005\007\275=\270w\274\360\203\343\274\255)\010=\275\265?=\327\203\"\275%\021\211\275\274\000\276<\234\210\370\274\003f\177=\374@@=D|F\274\375\013j\275&`%;|5\207=\017p@\273\215\014\211=p\266W\275\330\265\0269\027-\256=,0\002\274\342\230o<]\\F\275\322\ri:g\361\361<\335\022\326\274\341\225)=iD\343\275\367\306\303<\024\233+\275\351X6=n\215f=\277\372\227\274\020\203\370\274\221`\370\274\031\034\007\273l\347V=!\376\244\273\2411\216\273~\035Z=\227\352+\274\372h\253=\r\236\356;\206J\030\274[P\243\273T\301\250=\245C\253\274\261\003H\275\301\215l\275n\220\217\274.)$\275\035\202\204\275R\233\331\275}\334\235\274\357[5\274\235g\023=\336N\341<\r\324a\275\314\031,\274\252\213\216\274\245\035Z\275\307\261Y\275$jj\274\306:V;s\232\310<0\253A\2745\313\374<W\357\336<oi\373\274\256st\274\330\341\230=\233,\3519j\233\374;E\025g=\341Hn=\375VR:\264\375\213\275by\310\274\025\326+<`\237D\275|\344\347;\372\366W\274\"o_\275_\271a\275\371A\203<\213\206\247<\'^5=\230E\343\275+y\270\2743\021\234\275L\236\310<\017FK\275\227\326q<0\322N\275\271<\256<\200\314\262\273\021\234\367\275\362\250M\275\233\'\326<\355\203h=0\237\216\272\217\241\004=5\031Q\275\266\352\345=\272\032\250=.\274\207=E\014T\275\216\276\222\275zo\264=\206\2650\275\332\247P\275<\262\331\274\303\273_<\327\374\237=[\021I=\273 \243=_\032\360<\2500\335\275\035\310\256=D\313\227\275\271\314G;Z\013\306\275\373u\214;\207)N\273K\235\022\275\374IF=\245\035]=\260\224:\275\233\370\215\275\363A\301<\037Vs:\352\004\r\274\265O\013<\022\3067=\002s\345=\025+\263\272\227<\275=\360\376\327\275\006\027\224:U(\230\272L\356C\274\373\250\234=#\204\005\275\017\202.\274\373%G\275\237\020\010=\320\370\346<0)J;\277\365e=\261/&=\031k\333\273\247Y\364\273\232\302\302=\2679\\=\211`^=\033\211\021=\232\r^\275O\224\342:\302\264\022=f\261\263;\310,\\\275I\237\234=\326\r\032\275\323a\363\274\0160g\274\267\213\205=\330\267\r;\023\223.\275\373\022\033\274\327;\307\274\332\224s\275b\007\327<\232\361\300\274r9\213\274\360\276\326\273z[\360<\2732\356\274\006\261\375<\017\377x=f\034c;\227T\375\273.\034\014\274\365\017\214=\232(\200\274\317ga=|\344\324<U\211\014<Om\271<\335\2245;\204\000\336< .\273=\347\223;=\331\311u\274F58=f\026$\275\341\3706\275\247\354\014=\r.\352\274\222+p\273s\025\377\274b\334\352=h\n\366<\025\313\'\274\334G\\=\220X\360</Yk\275\314\'K=\233x\217=\372s!\275\247\024];E~\347<\373\234\226\274u\331\007\274f\200\217<wr\025\275\362A\254<\216\3525<y\371\037=+\241t\275\301\t9\275\313\202c<\366\207\027<\212\230y\275\236\243\236<z\020\211\275\035\r<\274<W\246=\211\251E\275]e-=\244\362\006<\252Jg\274\n\303\333<\341\235\376\274\037p\346<\324a\263\274\230o\027\275\251\254\004\275\313\263\261<\256;|\274\023r\214=\332\016\347<\337\312u\275\202u\205;S\327\334:\214<\017\275i\r[\275H\3536\274?\247F=\0202\262\274rr\323\273\374t>=lP\327\274\351\215\020\275\005\364c\274\021k\216\275\223\027@=\022\216\255\274\022\311X=(\346\253\273m\205d\274\004#\217\274\256\341\r<\336\252\334\274MD><7\321\266\274\305\311\260;\343&\253\275<\355\020\276|\251\001<\366\244\242=\177\201T\275b\231[\275\267\303j<\222\313\237=\330Q6<\235#\353<A\343\262\275f\375\002\274\212\016Z\275>p\343\274\305\377\366\274\373$\207=\017\245\212\274\374\326M=2\256\r=N;V\274U\206\211\275\304\244*=\221\035r\275\346\247\261<\333P\024\275\236\325\345;\026\3618=\003\024\204=\300\203\317;&\216R\27501\025=\032\330\323\274\231,\377\274\370\316\322;\335A\237\274\263\347\246<&m\304<\264\224\227\274\355\214\032\275\361!\016>\206G\337\2736m\026=\255\316\210\274\301\301=\2753\225\r=\2061`=H\272\031=W\177\200\275\024\343f;\203\274p\274\343\035_:\366\3209<\376g\035\275\377g\023=Q,Q;\2211\223=c\373?=\323Bl<O\203\024\275\314\230E\275\260\004\367<R\350\303<}\307\212<\367\006\325\2739\361\215<\365\215\004\275\366\031O\273\003=\214\274r=\014\274\372\031\324<\224Ch\273Q\020\010=\202\030\037\275\257\236\232<\331\n\347;\225\364\350<@\360\360\274\352\326f=dF\210\275g\205\357;Y\017\210=5#\332:\204U\202\274\031\212\002<Y\373\241:\262;\\\274\245s&==9\t\274\216\306\202=\243\226=\273\302\362\236\275\"\014\t>\257E`\274[\277\004\276W\225\034\275\303E\332\274N]\245<\014\244]=K\217\302<|lU\273\232\232U\274\3663\255;\t\0238=Y\304v=\366\257\344\274\326/}\275?\327N=\316\034\235\274^\265\"\274\355\211A\275\244\274\361<\r\003s\275\016\316\247\274\264\323\377;D\213k\275\353\251m=F}H;\350\360\300=\202\213D\275\264,\026\275M\263\265=!\272B\274\222+3=\022h5=D\034^\275\323\004\214=\3644\371\274*8\303\273\320\232\351\274\340Vb\275+\301V=\032!\305<\010P\231\273:,\006\275t\331,=H\211\037\275\024.\217\275\010\235+\275\202\240\302\2745\311\024\275\000u\036<L\3101\275\252\207\177=\257F\213<V\343\270=!\373\023={\311\234\2750MQ\275\207 J9\231\206\270\274\275\246\316;x\273J=\257\361:=\375u\204\274\351\361C\275\253\304\256=\324\3759\273X\034\242=\262/\243=\336\363\222=\346BT=\215\314\310\274\363\361\026\275\200~\336\273}\257)\275\337\272M\272Q\367\333;V\307L=\222\366\251\275\360;\342\273\216L\275<\211T9\273\221\\C=\257\023\227\273\314\333\303\274\237\254=\274;\033\203\274u\332L<\242\376\226\271N\267\260\273\204\253\n\275\302;\302;\253\013\023<\223\'G<Kd\275=r\007\373;\301X\366=\322\325X\275FG\215\274\204s\226<G\216\227=\3260\310<H\361+\275\230\017\227\275\333\257F<\334i\323=\n\002\037\274eE0;\351)\007\275\\\355)<%\010\003=\217,@<\214@\212\275=\317\252\275\325\007\227\274r\375\301;/\240\240<\225fS=\006\033\261<w\033F=\333u\244=G(b\275\t\212\204\274\222\243\230\274J\366%;=\374\225\273\037\201\r\274\025\035&<2\317<\274G\323.\275\216\373+\275\265\305N=\026Y)\275\305b\323\274\230\014\200\274\327\273\002\274wL\351\273\337wQ<\033\350\346\274\003\340\022\275\004D\267<tK7\275\2439\227\274R\026}<\341Di\274=1\254\275#;{<\210\033\030\274>\031_\274\211]\233<\031\253 =\'8c=\244\002n=\003\220\375<j\251\301\274\370\205\240<\204\361\334;\037\326\265<\306\340\020=\202Q\217\274\331$\356\273\000\326H\275 \222\007<z\317\227=Q@~=\214?\014\275\371\250\377\274\313\022\"\2757\236\214\275i\304P=W\301[\274\036[S\275.\317O<\356\241\035\274\t90\275s\204\333\274\023g\t=\026\232\234;c\342Y=\364~Z;i\246\230\273\237[*\275\347\007#\274Zh\025\275M\016v<t\030\267\275\354_\"=\334c\357\274\234r\360\274\262\010&\274\2243E\274\025uC\274\254M&=2\251%;\035\232W\275\3765\222<\275\254q\274\373\237\027=\341G\222\275{\346a=h\007\014=g\021\004=M%\013\275^o\352;C\016^\274O\350S\274\317W5\275\351C\314\274I\311e\274\034\332\322<\373\006;\274\330sR=\376\006\257\275\360\177\261;\300-\230\275s\305\206\274\263\240\301\275\257\247Y\274\340\274\033=\373\267\312<\374\0225\275\3268D=Z$\237;F\'w\275e\323}\274\"\032\200=.\3071\2751\334%\275\005\204M\275\274\335\206=?\200]\275N\344\273<\243\003M=\302<\341<y\275E\272\350?\337<\360\371p=a\364/<C\335\177=\271m\215\274\372\017A\275\006\350\303\273\302E\n=[\337\270<u\237w<\250s]\275a;\274=\363\210t=\326\016\314<h\365\021=2^\002\275lw\340;\307\303\312\275\246\213\262=e/%<\275\247\006\275Q`\250\273d)\373\272\003\311\245\274\014\250\022=\214A\350\274\000\207\346\274\377\244\217;}k\263<\031@v\274n\212{=j\3536:\311\'9=\003\275Y\274/\310\315\275h\260\302\272\334\366\373\274\353\236;\275\350|3\275Ws\316\274\207\250\376:Bx\302=7\013{\275\246FJ\275\232Nn:R8:\272x\025\364\274\232\366\367;\363lB\275\326\306\016\275i\365[\274P\0331=\023lT\275d\020\242\275w|>=\013}\345\274#\234\377=)\346!=>Z\206\275J3\223=\0228\210\274\336\024\025<\002f\350\274t\321(=\271\312\307\274\n\225\355\274\314T\353<\357\365\362\274\256\307:9\352IA\275X\256\200=\371\006\034\274}-\370<]\357\223\275\2702\354\273\356\364.=\307!\330:a \201\274\242<o\275\017\341b==|\227\275-:\202\275p\364\227\274\215fF=0>7<{0S\275]\241\034\275\333\232\032\274\r\361i\273\361D\231\274\365\256\305\275\3777\301<(\331\273\275{\370B<\350\377\225\275\203r\212\275R\254\004\274\000\336\211\275\377\020\272\273\036\365q<B\237_=\211\216U\275\017\037\027:\325\007\227<\336W\r=p\261*\274\\Ai\271\210\'\030\274.\266\206:..\237<\247\261;<\214\n\005\275L\260\201<\325>\020;\255\010\036\275w\207f\274\312\350\226<\301\266\355\274\340\257\316\274\017\301\216<\304\346r\275s0\005<TE\021\275dm\234=\310Mn\273j\375P=^B\036\274\321\355C=\252f\255\275Q\332\2059\251\261\031\275\253<L=s\266f=9\002\365<\211\t\363\272\305\270\301<\273\305\233\274\301\023\300<`\277{<\303\314\024\274\2339\215=\362\321\336:\367\014\204\274\340;\333<\320\266:=v\\\356=\342\037\033\275\206\302\213\273V\035\027=E\241r\274o\212\330=\347\266\226\274\362\337\t\275\013\007\273;]\271\327\274\020\235g\275\230zL=O\023\245;\300\245\034\274!|\203\275\315\217\317;\264\372U\275\037b\020\275S\244c\275\262\345\350\274B\342s\275\236hf\275qZh\275\342\235_\275\206\243m\275P\021\003\275\271 |< \315\021<.3;<4s\356:?\237M=\033\243\263<^L\260\274:\367\303\275&\314f=\r\203Y\275\222\301n=n\371}<\30313=\324\212-=\356\315$=x?s\274>\307\n\275W\221\216\273C\220\250=^N\203\275E/\236<\250.\035\275:\354>=\347^\021\276\361<\355<\324\364\354:\014+\263\274\000T\224=R\225A=\347I3\273B\314n\273>\3277=\330#\226=\307\372\353<\356\'\222=\255\360\210\274\310\343P\275G\0025<\347\020\246\274\002\352J\274bQ\334\274`@3\275\371\004><\261\221\243\274Rk@<O\366\r\274H\262\007<\270\304o\275\302\353\034<\030\212\205<\214Q\247=\350\244\014\273\221\234\200=\000\263;\274\335@\252<e\344\226\273}`\373\274\030(\253\275u\302\303<\226\251\263=(\251\010=\317\361\334<\001\224)=lo2=\306cd\273\214K\216\273\205LR=\353%\'=\337\006\312\274\342a#\2735\332\222=0f\326=\033\274\037\275|n\204\274\246R\017=J\202\300;\203\321\002=\036\354\235<|l<=\266\036\212=\272\203\324<\262\302\353\272\245\322\226=m\337\234=b?\034;\333T\217\274\373uQ\275ol\350<*\211-\275`3v\274\373P\023;o?\031\275\371\002/\2748\277\223=Z\255\311<l\254\225;/ol=\321\021V\274\356`\206\275\270\003\"\275|\352\000=$\250\276<\257\322\340\2747e\206\272\316\360)\273Q\316c<\355\2123\274\363\021Z<\277\317#\275*q\207<]\240\260<I\342\2579a*\306<ww\202\275\353z\205=27\\\274m\231\351;\315A9<\2465h<[-\000\273P\323\327\274\272\354V=\304\247i=\256K_\275U\215k=\215\236\\=\242\233C\2741\027\365\275\372W\351<\324%v\275M\221\312=\375\204#\275\313e\033=\263\2361<j\036\"=m&\2329I\006\254\273\211\236P\275D&I=\251w\035=\036\256\036=\356=\354\272&\212O\273M\343\324;L&C\274\301\000\004;\202%\024<\022\272\235;S\311\201=1\030r=\362n@=\212\351O=\346&)=q\210\242=Gp\364\274Zs\036=\033\201(\275Z\247\250<\031\243\331\274_F\267=cS\275\271\'4\020\275L\276\211\275\\M\217\275\227,g<d\321s\2757\274V;;\241B<O\365!=\232E\324\273K\306\342\2744m\341\274z\255\200<\223\353o=&\226\207=\016O\311;\240~\n=4\004\037=\3345p\275\316\r\345\273\256\300F<\202\274\207\275\3110\177=s\323F\275\"\346\272\274\r\217>\274\006\030c=\213L(<\362\276G<;\234\211<y\2030=x\014Y\275\367\212\005\275]}\324<[`:\275\232\342\255\274 \344\177\275PO\372<\316\371S<c\025\005\275Oy[\274:3\010>\'B\000<\352\355\342\275]\330\325<\264\177\027=\025#\246\274rp\242\274\263\345@<\265\201\200<Fc\331\274fP\276<\250+\226\275\033[m\275\\\024\314<\220\375{=8R\241<E|\332:\3004\341\275\254p\013=\317\321\354\274\270^4\275Nm\245=\250\230&<A\'\253=*Q\224\274\362\001\322<K\302\266=\373\372\276\275\236D5=C\321\272:\t\274+<\215\256\013\275\3138\304\274\233O\222=\325\225\270=\017\275\304=\3516C\275\001;\204<\230\345\033\275h\\{\274V\335\207<\210\026v=Yc\002=\213\376\001\275\226{\025\273\317\313\020\274DZ\031=\355\020H\275\rdF\275c\245\262<\004\305\206\275\221\345 =y}0\275\336\212\334<*R\306\274YP\347\275\276\010#=T\325\\=\255\003\'<Q\330\007\275\2641\217=\217&\034=\227\017\327;\006\372\000\274p\336\016\274\227i\032\274\375\316N;\n\377&\275C\257\276<WS\001=\332\177+=E\317\013\275#\215O=\256;\212\275\000\"\242\274\265y=\274\002u\016=\266\003-=\377\216\311\274#\346=\274yV\260<J%\035= []\273y\347\'\275\261\0303\275\341!\253\275(\336Z\275\257FM;\344\200\245<\375\200\033=\315xJ=q\325D=@\375t\275\235\372\375=\331\367M=\336\240\250<\3034\225\274#_\342<Ccl\275\353\204.=\361+q\272\036Vb\274\034u\357\274\036T\351\272M\366.\274\306fb<\022\373\034\275C3^<\014\226!=\362\n\023\275=cK;I_\037=\206\321L\273pj\237=\233\306\236\272\006\262\271\275\366&/<ZQ\254\2756\351C\274e\236\216=\267b4=\005\261\273<3\306\\=\243f5=\251\372\235=9\203J=^-><\311\224\314=\377\211\021<-\301\263\274\245)$=\370\002\216\275\267]#=<\273\204<b\221Y=\251\350\235\274\"\350\307\274ouk\275D\016!<\327\364\030=\2331h=?\325\005=\362\232\026\275u\252\301\274\321\030\031\275\037)\371\274\374R\211=\177\361\214\275\317\230E=P\367i\275\301\374x\274\213\001\276<\003\213z<h!0=\263\244\241=\344\352\224\274G\014\005\275\216\253K=cB\272=iY\260\275S\323_<\370\346\265\273\332\377N\275\240\213\325\273g#\263=\016\331\341\272aBe\275\370>\212<v\331\205=\307-\001\275j\250c\275\226\017\377\274\213\364\226<z\221\t=>\3465<B\251F<\\O\205\274\236\314\235\275\242\025z;\330H\263<9E\246=(\351\277\272\005\376\030=VK\003=\206\242\240\274\000\337?\275\223\034\225<\333|\315<Y\335\346<v\253r\274q\2314<\007F\224\274\014\251z\274]\002\035=\205f#\274\335\260\017=\224Z\345\274\364\2349=\027\363`=\322F\';\322\020\320;\371\322\241:\240\231\327\274\357\254\301<L\310\004=&j+\275\022\252b\274Ds\303=\027\262<\2750\223\246=\350\343N\275\021a\032=\035\211 :\365\373\216\274\206\274/\275z\002\245<9z\025=\2664\021\2755\177N<y\371\336\273X\352\326\274\266M\233=\225\233\332\274\007Z\037\275\357Y\007=\240vc<\217\017\250={\310\370\274\205F\224<\316\214\370\274O\366U\274m\241h\273\301\207\213\274\027\014\222<\311\347\340<M\037R<\317\361\266\272\022y\230\273\376g\t\275<\323\203\275\376\357\266<u\227\233=\3704k\275\303\362\267\273\031\350\n\274r1\206\275\024\376\001=\312T\232<,\276\333<:\014\230<\013\262\236=m\2373\275\337\004\212\275\326c\204\273\214 \301\274P\266\025\275\037\t\237;\341|\302=\275\236f\275F9!\275h\001\271\274\031\"6=<\366P\274/\365\270\274w-\032=5\204z=\215\020\017\274\204\\\212;~\3009<;\177o\272\037\251 \274\377\324^=\357\305\005\2759R+\275\216\013\314<\320\262\206=\305o\026\275o\267\222\272\017\351g\2758{)=\030\2669\275de|\275<\256{<#\234\217\273x\360\014=\327F\277<Q\253\244\273H\016\267=\323%\246<\336\257\347\273\330\022\233=@V\r>L_`\275\224\232_\273\327hN=\265\004\343\274u\301=\275\316A\200<\004[\334\275r\270\325\272~\027\177<\216p\343<z\321\312=#\025\205\274\363\224\332\272\027-\200\275\330\206[=\\\007\264<\331\223%\275\372))<j\347>\271\207\235\326=\330\027]=~\250\021=+S\300\275\270\004\203=\343\331\313\274\312\252\234\275\233\220F\272\210s\016=)}\014<\325Z\213\275\360\032\221\273\227\341c\274\252\222\014\275/l\022\2751\300\224;\013\002\333<^Dd<Cs\022\275\310\224\017\273\250\005\321\273\"\215\240\275({U<h\014\217<:\236\341<\177\024k<\001\312\\9h\2519\274\"\367\310<\317\004\025\275p\263\211\274\260\315\361<\307\253\235;)\212\254<\004H\275<\010\234V\273\344\n\313\275d\313\014<\024\327\310;\341E\034\274\300\352\377\274R\024!\275n\tm\275\024~Q<\210\272\266=\263\367\352\274b\225\223<m\373+\273\372\257\215\274\307Gm\275WV\307\274W\3049\275CW\307\275vX\325;)^Z\274\r\260\236=#\007{\275\335tz;i\357c\274#Q\245;\244\023\271<f\016==\2206R<y\017\031<J\261R\275\204\tU=\027\351 =\3602\257\274\210\006\256<\301\343\037=_M\261\273\336\2412=\022\2023\275z\273\030<\353\312\027\275{`\030=\235\370%>\272\034E=\003~\013=u\363\251=\031c\036\274\322WC<\236\271\200=\373\022\347\275>\320\276;yP\306=\004&\266\275b?\353<\3679\230=\0350\327;\207\357c;\213\tH\275H\2053=m\267\245\274\211\357\206\274\354y\250\275\323\376\361\274\2149\237=\362I7<rZ\313;\203\355n=\024\365o\275\367\336.\273\334\307\266<hC\277\274\350\354K\275\204/\363\274\004\\:=\215k\353\2745R\226\274,\361\320<u\335#\275\277.\310\274\311\203-=\007\275\373:\310\n\277\274\212^J=\304FY\275\205\010\014=\005w\370<\232$\326\274\327W\226\275M\346\034=9\243\327\274\036\007\365\274\361k\365\271*\311\325\274\237l-\275.64=\022\221S\275\006\332\320\275[\nl=A\002\031\275+\230\327\274\250\203\010\274\341rD<a\032\347\274v\231\256\273\345O\234<\312Qy\275G\021\214<\257\025\'=\345\244R<R~*;\227\023\257<\231v^<\025\327G\274!\031\211=O\265\r\273#a\362\272A\365\362\272/E3<\373H\'=\033I\250\275\327Z\303\274\241<\313=\212\2745\275\216\223\323\274\035\243\246=\356\303\303\274\271(\353\2757\304\244<es5;e5\223<\227\214\010\274.9M\275\217S\026=\022\275\357\274\321/\034<\014\222w=\326f\202=Y\031`\275\210`\037=r\3644=\200\260\351;\274\244\032\275\3320\205\272\\\2460\2750Ym=U\300\t=\235V\266\274\371\016$\275d<\236=vp\217\274\223(\017=0\305\211<\230\223\310\274\232M\243;\233 \002\276o\351\244\275\035\204\230<\\\007\321=q\256\331\274\312\310\306\275\264\2711=\361\325\007\275\0306\331<S\217\205\275D-N\273\302\244\206\275\014\361\003<U\330\200\274m\244\262\274l,><\n\3437\274\334\347\007=T\r\263\272\331\020\315<\254\177\033\274~b\014<7<B\275\202\305$=\021ma=\335U\327<\335w\205=\322\376B=\362\023I\275\252s\305\273\r\267\030=2\264\032\270?\017\242\274l<8\275U{\227<\037X\303\271\351v\227=c\227\000\275\225#S<\032#\322<\251\356\026=\346\337\213\275\001\016\203=#\322S\273\306\327S;O\234\325\274\361\013\351<\376!l=\007\354\002\273\021\n\305\274E0L\274\337\345k\275\356\017`=\2568k\275^\272g;\244\221\272=\262jm=]\3534<\373\370\022\274Cw\037=\264\252\336<95\225\275\007\026P=S\351\207:G\317\003=\340\260@\274^\271\202=\304\330\202\2746\227\014=nH\022=\232w\250<\357\2166=4\006\233\275\213\2523\2757\010\030\275U&\215\274\334\233\304\274pZ\'<6A\034;\207\023\354<\205\220;\275\202\206\347<\233M\267\274&\324\257\274\205\351F=\247\007\036;\333#P\275\346\226 =2\203\242\275\375\r\325<e\007r\275\000\200\005\272\005&\204\275\326kw\274Bb\001\275aA\036=\365Y\005=\027\264\365<\354\n\027=\024\t\034<?\315\246\272h\020\323\274\022\027#=5\205$;\033&O\275\261F\324<M\345\372\274i\212;\273\356\307H\275\350Kd\275j\346\021\2741\315\211\275\252!\030=\226\037\263\274\377j\272=\007\337=\273\216\211\251\275\346\362\265<%P\003\275\204l\177=\314\255\256\274\325\"\306\275R\021\035\274*\r]\275\022y\213\273dP(\275\240\334\224;(\231v<3\014\355\274\305\2209\274Z\020J=\377\356\r=\274\336\204<j\031@\274\253`\214<>\326f\275\326\250X=>h\037\275\023\031\270<\345U\034>\375o\257=G\3171=\331tT=$>H\275\271\t\217=s\253\276\274F\327,<\006\205m=\344\327\003\275\312\2063\275+\361\355\274\030\014\306\275\307\274&\275\353g\252\274O8\002=\375\033\020\275\217\035h\272\242b\200\275o\007\251;\260\246\036\275\014E\220\275@\347\335<\005\331X=\202\031\036\275\244\333s\275\336\250Y\275P\3704<>^\014\275\256\347z\275\013\215\013\274\026\0267<\215\233*<\350\213\013<X#\362<}\033i\275\233oI\275\272H}\275\021\304\257\274A\374\230=}`\222\275\235\225\214\275R\204\326\274})\016<G\346[\275\360,\266=\216^\025=x\230\267=\341d\226\274\231\\\251\271\261\2254\275\327o/\273J`\320<\026\2226=\257\3430=\227@\272\275\351\301\016\273+\275n=\264\200\264<:t&\275\213z\222;\332[\215\272\304\233\022:-j\256<\371\234\r\275\031{q=\016\377\224\273_\034\367\274S\227\243\275gjw\275\371\370\344;\005\370P\275\261D\014\275\227o\234<\321-\311<\343y\203=\275\0029\275\313\351\332\274F\200\260<E|\233\275\377e \273\314%\222\275A\253$<gj\353\274\377\236\001<B\036\201<\035\226a<ig\014\274\005\005\273\274\t.\217\275\304D4\274\215\006\t\275\331\357\203\274\023X4\275\246\376z=N\247\264\273\335=\335;\206{\004\275~\334\007=/\360&\275\251\344\216\275\304>$:3\000`\275\202\276\262;L%\234=\025\"\241\275\260\372\360:}\022\203=\361\201\346\273L\234\244=\204\344H=\235oT\274\0343\227\275:\315\213\274\364\304B=VH\302;\223\340S<\332\257\277=\306\224*=\276\215\255\273\203\0256\275\325\315v\275=G\031<D\320\206<\321+\2119,]\t\275K\007\226<8|\242\274\217\2421\275\341\311J=\017F\365<e\225\016=\316x\346;\205q\314<\016P%<\215\330X<\027\307\222\275\021\357\021\275\247K7=\307a\005\275p\252\352<\354\352\221\275\247\350\317<B\316\005=\204\237p<^\027\220\2742\034\243\275\251j\250=GXF<\271N&\275\220\t\363\274}\327:\275\n\007$\275G\331\365<l\217\275\273\025j\253<\302\223v\275f=\226\275~,\351;\304\267\225=\027\233R\275\352\2063\275\005\027\022\2758\321);\236\356\315\2755\2309=\2163(\274\"\261\251\275s\361(\275\362\326\213\275w\200\300\274F\220\277;eN\337\274\357\034!<\255\220Q\275\354\237\320\274\r1\366=*\205\277<\327\2701=\362(\214\275\227\212g=\306\354^=\005\215\330\274y\345O\273)\035\336\274X\230%=S\036K\275\232\030%=\327\264\331\273\206\253(;\013\032\316=\343y\274;\306m\307\2747\031\236=g\252!\275\n\207\027=\213\347\033=\336\001\031\274\261u\301\274\336\252\3419\245\227J<\217=\264:\231\005\002=d\034\"\275\251\350\331<\250S\275\275\341>\320<g\r,=S\222n<\027VL\275\215|\370<\272\264f\274k\213\264=\275\251\261;>a\033\275\234\330\201<\334\304d=\252\244\316<\367]\t<qd\3479\272\365f=mx\342\275\261P\214=\311G\235\274\231\245\253;\272\203q\275\036\377Y\275\342\000\265<\002\324\253<*nG\273\001\245\203<P\022\337\274\177\237X\274\312\027,\274\231;(\275\357C6\274\264\207\"\275`\350\362<`y\200<\360)?=\344\370\'\275\000I\037\274\344u\231=\361\340e=\204x!\275\325\032\246\274\374\220\226<\236v\342\275\237\332\210\275\031%w=d\265\227=\250\030\r\2751<\334=ldC\27504+=\267\177x=R{\023\274\026X\246;\202\377;=L\203\222=\354\347L\273\312+C=\336\240\000=\346\314y\275e\367\201;\024\204-<\032,\006\2743\306S\275\254\340n=f\003i<\201\364\341\275\351\035\\\275\\l\217;B\314}<\243\250\220=\236\320\243=\2644\217\273\323\250\346;<\351\024:\342*\030=@\344\013\275\237-+<p\261\226\274x\010U\274\2138\262<\262j\251\271\025\341\201\275\355\252\027\275&\025\252\274\323\027#=e#!=R\"\354<\202\337\375\274_\257\363<x\212\304\273\025\341C<#\324\r:K\224\315<Na\355\274fg\230<\210\224\344\274\021\210\203=\374r\026\2742\262\210\275\362\023\211\274\347\250\257<b\227\340<\364g,<\364\\\331=+\213\200\274.\262G<\357\310p\274\036<\214<\302H\353\274G|@=\001[\017\275\312\302<:\222\222\247\273\"\014{\275 \316\350\272\035n\023\275E\r\274\272V\200\000\275#\260\213:T\306i=\354\037\262=v\026]=\326v|=Q\343\033\275x\255\023\2758o\340\275\371\'\336<\241\374L=\330\274\263<\350ih=\350\325==\272\302\343<\367\263R=%\330\255=E$\261\2758\226\234\274e\243\354\274\000>\327<3\235\312=\033\203%\275\322\367\237<B0\034=l)\010=\264t\032\275.h\004\275\331K\203\275\205U\202<4\3730\275\377\333\364<IF\312<v\331W=\2470\200\272\211\005\014\275\313P\227=\025vB\275e\353,=#\271\357\275\201\306\360\274\372\323\304\274\360\366\212\275\202^\016=\237\361\242<\275Vn\274v\213&=\034\2020\275[&\362<O\237\264<#m\030\275\340y\222<\312b\005\275\266$X\275q7\231\2758\327\236\275\363\017\254=*lB\273\031\035\2079n\256\350<(G\334<+\245 :\333\326\363<\021=i=\240\224\013=e\203\255\274\205\252>=\3408\340\274{\\\032<w\006\353<\221x\244;\330^\352\274-\304\367;>\222\027=\344\210Z;\271ee=33\016\275w1\030=O\234\256<z\322\235:R{\221=\3078:\275\213v\000<\303H\240<\344\347\304\274\313,f<\177\236\001=\310\000\327\274\310\204\225\275TXE=\366\324\225\273\356\256\255<Gi\r\273\333\020\360\273\234\\t\275\374\273\304\274;\203=\274\354VU<\277\033^=\350\203Q\275\007\262j\275\312o,=\341\037K<p{\373\274RR\027=K\327]=]\203\213\275X\326j<\025\346\366\274\257\372l<n2\200<\266k)=\257\371y=0\233\341\273\242\274\252=\331Ns=\007F\017\274\245\271\313\275\020\013\000\275\024\267g\275ke|</}T<\353F\273\274%V!=\035\272\020<\262\273D\2756H*=\020\236\350\272]t\263\273\013\371\306\274\224pG\275\344\034\327\273\264t\020\274%\325\226<\267\201D;\177*\241<\030_\205\275\016\367H=}\244x\275\371T\242=vF\241\274z\347\353\273\235~\243\275%\203\245\274\313\256\224\275f\207\225:\003V_=\235%U<\206\356\033=\022\306\232\275\311\010\244\273\2603\002=\004z\277\275\266C\221;\235\352\362;n8\200=C\215\234\273\002\020~<\311\2524\272\355\300\222\275\355\013n=}\234\037=\001qo\275\023\234\351<\3525\270<\310\322\331\274\200\250\201<\232\005\002\273\037\223A: 7N=\322-N=\266\343\222\273\203\301F\274\341\2500\274\346\266\032\275C\226e<)W5\275\205\314\221\274\007\207\333<\274\201\367\274v\007\001\276\021\235\202\274\023\255D\274\"\216p\275\022\301$\274\246\235)\275:\275\327=\262t\214\274\243~\033\274;m\023=\324Y\241<Sm=<.\363\005=\370\305 <\356\252+=\323\371J=h\263\346\274\255\260\005\275\377\317\263\275\325\203\022\275\361\010\\=\024\361\316\271\241\372\301=\036/6=\024n\213\275\371\357\363<V\275\276;\210c>=\377\235\247=2\216\273=\355\365N\275_\356\210<\004\022\336<\276\247z\273+`6=\254\t\013\273\326-\210\273\261\227\363;\246\317k\275U\231\334<\033<\265\275\323vE\275\305\021v\275{\006\023<Tj=<f.\010=\"\342\251=\262\312\306\274\215\324\245=;Y\033\275\306\305\233\274\037|G\2739\253L\275\\\251\305\274\254\231E=%@n\275u\240v\272\256J\033=\324x7;L\001\226\2730\222\032\275\360c6\275\370&w\275\321\377\327<\354\000\351\273_Pm=b\313\224\275\021v\263\273\355\231\315\274\264.\327<\230@\354\274c\026\205\275\271\371\027=v\210J9\336\273?=\356\233\264\274\304\203\366=\243\373\0029\265p\370<\275\2370=o\255\370\274;#:=\215Z\260\275>\3567\275\314\0302\275\355\335\273\274\034\301<<E\005s\275P>\305;\342\266\004>\020u\211\275iw\234<\352\005\274\273\337\027\270;1`\264\275\337f\227<.\026[=\2238!\275\032\366+\275\367\270<=\277=\252<\235\272N\274\217\327~;\357\362[\274\307\360\037;\210E\204\275\342\256\202\2752p\210\274q\300\350<\304\230\221\274\006\217\005\275\323\306\240;\026OX;\006\342H=X*y\274K%\353<*:\366\273\000!\n<\215\270\363<v\034\366\274\320\216k;X\271\360\273P\020\204=\320G\370\274\266\275\204\275\265\240\037\275#\251\032<\312\206r:\340Ys=\232\031\240\274\262\262\206=\254\r\204=]\305\324\274\236f\035=\316\nI\275\017+\215\274\030\366\221\274\317\304\274<p!i\274\302$\221=\227\0005=?O\354\274\037\035\250=\002\364S\274:\374+=\273c\024<\021;\t=\233\246\247<\007\230\020;\2632z\273\360&*\2752\326\233\275\224\275\017>\240ha=\340\314\235<\2273\203=\216\230\332<\016O\203\275\360\3508\275\352\312\212\274\r.\217\275\246?\236<\\\327L\275v\330\003<U\227\013=m|\376\275\304\353\236\275\0132\342;\335\335\244\274\027\022\032:~\277p<r\342\'\272\335\312i\273\024\314\005=\032\361c\275sh\334\274\322*\213<\301\3640\275\036yo=\240O\016\275\204\327k=\326\271\262;\177\372\253<\334\223\236<\004\316@=\277\271R=\235D-<~&\263<\255\324%\274\263\006\233<\315y\271=\016\271\032=\235\202\016\275\251\326E\275\027\264\244\275\330\260\024<\350\303\033\275WB\001=HvU\274n\324\253=N1\350<\007\305\207\275x7\213\275\022H\006=\177\203&\274S\340Q9A\233m\275\372\276\206\273\371\363\216\275\253\304\222<*y\3238\2613\365<\\\276\343\274f.\r<\250\326L\274\n\200\235<\0318\021\274Y+M<\270p\267\274\221\211B=/\216\270\274s\026\020=\271\251\022\275\336\207\201=t\220\357\274\261\336\370\273\267\0003\274\343B\035\274\343\2010=<\243\314\275\020\201\265\274g/\001\275\177\277\222\274\331s\251<\361\017\023<]\310w\275!\340l=^\376\201<\256\374)=\010\033Q\274\217\343\002\273\307\203\332<`5\303=Y\224\273=\263\t\326;ts\354\273\360\236\212\275\341\270\345<b\226N<D\242G=\324w*=\222\000E\274\325\027\260\275Z\321\300<\270\315\357\2745%p<\211\321==\305\246%=\222\330\363<c\004\371\274\234,4=\336\3145;V\243\303<Dq\326\274\310\307\377<{m1=\270\201\243;\334Tp\275RN\200=[\202\253<\254\n\217<\356\010\240\275\243au=$\361\017=\362\347l=\332t\233\274\271\321E\275a\317\251<\035~\006=\270\006p=,\274\304\273\224\007c=\263\201\032=\2126\276\274\213K\223\275l\356u\275\3173\002\274@6\371<$x\311;\210\236\221<\216\212\216;T\001\031=\274?\301\275\r?\016\274\315\375(=\231v\271<\006\367\242\274\220\335\273\275\345\005H\274-\237\031\275F\225l\275E\025&=J\323\251\275\037-\250<\304\222D\275&U\377<w\363K\273\352\202P<\320\305w\274i\261\'<T8\305\272\374\253\354;F\217\210\274\033y\352<s\241P=\"\354Q\275\332\227@\275TJ\275\274\357\212\027\275\330=Z\275\341\255\324\274I3f\275[\201\013=\203\372\346<y\364\202\2713ac\274\031G\221\274u\336R\275-\0064=l\311,=\316\231\034=\3567\336\274\256\263C\275\200\274\234\275\245\322\343<^j\177\275\345\317\023=\353\302,=7\365c;\353v#\275\351\260\226\2754]B\275\305e]=z0\302<\320\230_\275il\244\273?\016\324\273\377\303\027\275_\322\224=\336\033\030=\262\262`;\301\361\370<\237\352\252\275H\365G\275\307\351\237\274{f\314\275\002\200n=\345n\242\273\247\215%\275\000k\002\275\204\212\025\275\267\004m=\301\335+\275\374\r\005=#\375G<;X\213<n\220\020\274!\0109\274\306\337\304<$\367e=\263\025\341=j\017R\275rQ\253\273\204\254S\275d\221\214\274\250?\300=\352\006\203=\245\235\025\274I\\9\274\206\nM;\205\320\027\275\233p\311<c\352\001\274\227\021\276<\003\342~\275\213\370\002<\253\313J\271Tg\"\275s\244\270;\036|\347\274C\333\371\272Kdo<\244a\256\272\355\223\362\274FD\262\273x\013\204\275A\214\031;4\377\212=\200\216\356<\222\314\213\274J\353e=\305Z3\275\353R~:\267\300`=\271\332K\275\252\031K\273\233\007C=\023\373\022=\3744E=\372\215\354\274\336\343\223\274\004\004\211\275\201\220\300=\231\013,=3\243\204\275\200\261N={\0021<\345\212\352\274\224\214d:\r\232\027=h]S\275\02075=}\024\003\274s!\\=\304\254\013\274\'\223\324=\265Z\352\274\036PF<,\352\016\275\227^h\275\027O];\363\223\026=H\002J\274\225\237\213\2743\027\246\274\371N\264=\2749\302<\200k\'=F\261\246\275%\276\'\275TC\254\274\362\026g;\372\314Z=\006\026\326\273i\202\205<\001\227\240\273\321\327\351:\310\314\327<\265\346\252<\302\3063<\217\377\311\2743\377x<=\307\346<V\210|\275l\241!\275\333\374n=\357\304@=P\202|=\357\321\227<\\)I\273\317\237\344\273M\333W\274\337\213\231\275}<l\274\303H\367\274\223\000\206\275\252.$\275\036\002\272\275\367\231\225\274\202\364\224=r\253t;\232j}<?{0\273\336\360\353\274\034\031a\274\215\0103\275\013\230\222\275\252\264M=8%U=n{+;\345|\245\275\370\027\323\275\237\000d=\233\355\023\274\240\310\340<7\007\262=\003\035\306;\305\020\313<\237\252\t\274s\217\254\275\205\003\305<\212\376\210=\377\250\375\274\254\261\264<\265\263\232=\037Bc;\336\253\247=\351\022}=\351\275\221\275\272\236\212\274S\224\221=\225R\177\2758\367\352<\337[\t=a)\212\273\036_M;Z\005N\274pOG\274\246V\256;m\277\335:k\246\026\275N\033\242;\244cD\275\366A\014\275\202\003a;\320s \274\016\200)\275&6F\271\331\327\206=\3341\347\274$\002\001<\367X\261<\004\273\351<\260\252K\275\t(\222\274\227\245Y\274\343i\026=|\034\"\2750n\020=\362A\251<\000L\313\274_\001T\274ij\240=\243\0259\273g\212\033\275\031\275\266<\247\242\253=\331\370\201;\222\201U=\224\003\310\275\225\024\270:T\261\302\2750\006\341\274I\376A\274\212f/=\200Q><\213\377\347<\324\037\275\274r\375\177\275\310\364\305\274\322\200\002\275\247\224f\275\344\004%=\027\314a<\233\336\347\274\221\310\201=\307\304\201\275[\300\204=\304\002\233\274\252pj;\237\215%\275z\003\010=\373\245\t\275f\007\026\273\004M`<C\007\273=\203\200\323\274\\G\276\274\332\257\030\274\021\372p\273\254\027\002\275/\344\307<\304\305\261=\020\333\237=\223_\264\274\273+N\274+&{=H&H\275\272\242\003=%jO\2759\360-\275\3736K\275T\223\267;\351\2048\273\002\0351\275%yq\274\243Q\323<p\330j\273\223}\237=\204\302\224\274\365t\305<b\361\356\273\230\363\030\274`9g\275\311y\255\274^3=\275\177\0067=\354c\345\274,\320\003<\335\353\345\274\236o\r\274\023\355\320:D\273\014=pr\000\275\267\3635<jxT\275\264\255?=c\375\020=IV_<(\375(<\354*\016=\365\205\352\275\377Z\204<\022\312;<\355\264\021=22\272<\255\016\326\275U_^;}\005\234\275\036\035\361\274j\261\265\275J\267:\275t\207l\273{\350\271<K\016\034\274\274q{=n?\016\274O\310\260\275\t\006\037<\360\375*\275E*\233\272\313\320\235\275\r\233\037\274*\021\005=\366=n\275\301%R=\'\371\035=\302_\002=i\263\027<)AC\275NOO=\371B\223\274\257s\374\271W\350\324<cQ\037\275m\351\211\274I~\n\275;\361\273<\307\223\231=o\3633\274\001\037>\273YO\016=\2067\237<\341\304]<*H<\275Q%\300\274\277\303\232\275\tr\216=\210\353\244<\214\276\344\273\352i\342<\344\377\233=\027\361\216\274.G\227\275\223\2333=\177\253\332=\212\rH=\037p\016\275}\006C\275\220Jr;$\024a\274]\362\234:\312pu;|~\257<\324\320\241=\354\202\250\275\\0d=G\304\301\275h\2336\274\205f\350=\276\2221=\237i\360\274\256FL\274\261p\310\274\"\271V\2755\033\014\274\252\336;\275F\\\377<\002\375%\275g\'\016=\337\364\r\275\372\242\350\274\317\250L\275\304\261 =F=\332\274\007\230\201=2E\237<\370\266\331<\351\031\231;\225\013\352\274\017\2657\274b\216H<O`\205\275Rsy\275\036\243\210\273\\j3=8]\353\273\017b\344\273\245\337\246<\017&<<\200f\373<\2307u\274\343#\271\274b\315\374<?}G=\003P\220;F\331\032\275\372Md\2737\353z\274\227\206\207\274\306\025*\274\313y\001\275\366Fo\275\203\005,=\201\'`\275\004tS<\"\330\262\273\271G\017=\253\262E=l\323\032;*y\203=\233\370\205=\341k\250;\002\000\014=A\216\264;\014\177\022<\276\317\027=Y;2\275\341\236\007=H\254\260\274\3230\312\275@\222\303\273\213\354\252\275H2\332\2757v#=\232\201J\274\257\223\211\275 `\373;\203\243\347\274\314\352\345\274\327(M\275E\275\246=\022;\265=\347\367J\275*\034N<o\204R=xv\r<\334\030\002\274Y\240\266<\334\365\270<\377\006\n\275\270\355t:\374\030\217=\223`\031\274.\000I\275\312:\277<\232S\n\275H}\320;]g\002\275\236Q\001=\236\203\377\274[:\232<o\237\243\275\363\336\354<z\017\242\274\244\327\222:\001\320\005<\315\353\003>wc\007\275\035U\013\274\337\027\304=\302\024Z\275\334\322)\274%\302\334<\204[O\275\243\3110\276\226w;\275rB5\275\301\325\001=l\2742;E\003\242=\212\262&=\005\255\275=\007j\250\272\256\034)=\251\271\264;\241\367\237\274\336v==\337\350`\274f\013\251\274Y\3700=MK0<h\351\361\274\347\242\023=S\234\034=\272\'/<%\215\252<\315\242\031\275r\206\'=u\001\236=4\3140=1c\210=jj\300\275\0140`=\026]j;l\240\234\274\331\rI=\221\245\017=\332\355\231\274\346\215T=\007X\313<\277j\324:\374\201\217\274x\217\300\274\257\342\337\272\035\330\270=!\311\344\273Ga\204\275 Q^=v\213*\275\276&\366\274\272>\306:\206\232\255\274\322{\301\274g\r\030\276\270vy<\360\376\013\2745\244\270<\315\005\315<\014\014I<\032#\031\275\'\273\201=WVC\274\343\2502<\340\364\347<\216\231\t\274\r\304\256<\330\373w=\345d\007=\273\323\001\275\223\326j\275p\034S;\370\214\314<\333\370\032\274\025\003\265<\317\254\013\275\340\230z=\324\224\006\275\244N\234\273?\202\203<E\260b=\360\331\362:\235\330\321<\005\244\001\275\373\307\014\2756\033g=\\\006\347;\234\255\370;\343Y\300\274\325\357\312\272dB\367<\014]\303\274U\263\227\273,\022\202<?_\234\2732T\225;\223\2236\275\370\324\265\274\352\220_\274\013\342\t\275\245\347\256\275\225\"\003=4\377\005\275\346\373{=%\235R\274d\344\374\274\250N\375\274U\353/\272\t\277\r\275\354\355H=\317a\034\275\255\n\215\274\206W\333\274\277\276/\275\331\205\007\275*\332%=\236Q\303\272\2179\223\274\n\010%=\252<\202\274b\177v\275\335\226\222\274\020\312H=\323\220@\275\364x\211<\217=~<\006P\232\275\222\353\205<\364\255\240=\177e\200\2758\272\013>\200\rO\275\031\347.;[i\200\275\350\206\267\274\350\2224\275\201\361\230<\\n\226=\362c\211=\3177\335=\244\341}\275\275\361.=sD\310=Y40\274D\272\004=\3663h=\201e\003\275\226\3529<\216\361N\275\372\027\247\275)\222\352\274\343\223g\275\212\301N\275`\006\036=v\300%\275\314\231\014<n\205\314<3j\250<\227\301\"\274\337\032\241=\206\372\251<v)\326<\243p-\275\356\271\020=\210h\215\274{\373\004=\255+J\275=\324\000\273|7\r\273m\021\377\274SrF\273\037#\326;\245y\'=\210\242\237\275\304\n\010\275\320\266c<\350\376\013\276\316c\220\275\2618\362<\214\301Q\275J\246\216<\217\0222=\252\210%=\002\372j=\374_\013\275LS#=(\005[\274J\265\310\274\205\336\230;@7\205;65\276\274\367\230\205\275\335o\300\273\255a{=\213\204k\275u\375\023=\231\273W=3\300\007\275\201p\225=\225\360\342\273\355l7\275\357\\\337\273\\\3653\2755!\242;\227\345k;b\313\204=\026\276\211<C\345\327=\343\357\262\273\205L\207=\320\033:=\305n*<p\340\226<#z\247\275s8\242<\364\256\247=~\270\023\275\364\375 \275\300t\313;\216u\025=eM\210\273\1775@\275\003K\346<K\002+\272\234^\304;\330\344\214\274\207 7=\373\031\313\274p+\311=\314p\266\274\246\020\030\275\320\315\233<\237E\004=\210\251\351<\257\321\215;\363\257\362\274~\367\005\274\227\274\257\275\021\350Q\275I\211\363<\235V\226\274\347\326\210<Jcu\274\220.%=\241S\210<\327z\036\275\232!\177\275\205\022\002=\374\017\027\275\363\354!\275\3369v<d\322\365\274\233Q5\275\2565~:\224R\260\274vQ\365<\326\025\210=\010\032\276<\007$\247\272\233\005\255:6\225\205=\005\262\355;X\256(;\351r\212\274h\276\r=\374\253\206<\344=\030\275\320\031\302=R\t\021<\241\252L<\367,\236\274\212\244b\273\007\336/=\337\365\204=\031\222\271\274\374\010)\275\206\203\002<\334\007\312<\3157(=\314\257\001=\317\273\263=\204\214\355\273\n{$\275Z0F\275)H\002=\033C\261<\336\364\200\274\264\340\226\275\201=\035=\377`\343<\332-C=\033\2576<\242\022\377;4w\352<\025+4=\002\277\010\275\026h =H-I=\236\243\243<\007;\266=\'\014\204=\372\224\334<#\375Y<\335\326\000=4@\266\274\316\247\023;\021j\343\274\021!\354<\256\205\031=\341\020t=\2515\236\274n\275*\275\303Z\350;N\345\266\274\212\255.<\376\265\315<\020\311\336\274\016_\002<\224\036\364\274\251o\023\275\317\031\313<\256\365\204=\\\310\303<a\204m\275(\323\360\274\r\361\315\275\317`\237=\332\037\005\274\210\256\233\274\2457\230=\177\202@\275\311\227\014=\206\235}<-3\203;]\246\211=9\'R=vM\274\274\367\211\\\275\304~\274;q~\205\274\300\362q\275iN\300<s\376W:\235\277\035\274\351\355u;\356\\h\274\300\022\274;\330\243\007\275\222P9<\244\253\226\274fs\357<a\356\276\273\360\226\336;\302\302[=\333H\025\275\001\366\312<\227W\224<\271\r[\275\250~\354\274F\360\225=\271\271\3039m\026\177\275A&\211\274\343\177\225=\347\036\350\275v:\341<_\333\255\275r\301!=\367\320\377<ch\311<R\177t:\232^0\275_\362\001\275oJ\207:\3438$=\320\222\024\274l\225\321\274\t\216y<\030\221\300=iXu=.\007>:\367L\334<k\007\267\275M{\026=\007\310 \271>\257P<Pa\030=\250\\\024\275\212 \250<\024\\\325\274\377U\025\274\3118\031<\356{\225=\326\270\'<r\201\271\273\361\220?\273s\210w=\273c/=\363\377e\275\227i\316\273i\244d=\315\303.=A\302\244\275\021\314\260\275sY5=\r\371\337\274T\237\214=\350\256\212\275K\'\030\275!\324\031\275YM$=\034\333\353\274\200tP\274\320;\321=\037\303\013=w\"u<F#X\275\337\212\262\273\254\254`\275\'%\337<F\025\217\270\333\315,=\315$h=\3340\277\275t\254\275<!\0002\275]\243F\274\027\306q=\203\214\177=\314p\001=;\233\n\273\305o\224<\311\002\203<\232\277\177=\276\253\366\270W@)=\365\252\306\274\303h\370<\325\242\226<\346\245\037\2751\300\026\275N\367\214\274\257\267\311\275\256V\205=\3351\0049\244\214\352\274\3200;=&\356R\275\231\030\005\275\223KH\275\266\306[=\\\371M<\261x\232<\343\262\267\274\271t\004\275\223\230\243=\000\244\210\275\037\222\237=\251\316\333=\002v\254<Dy\007=\003\231c=\331E\267;\250\3550=C\007\364\274\200\025\220=\322#\274\273\355\'\231<\211C\035\275qqT\274(\"\003\275\305\261\035\274H\364N\275\243\027\263<\344\314{\275(\022\313<\030@\216\275>\225\342\275\033\330\375<\201Ss=P\321\034\275P\211\336\273PZ\230\274\t\316\247<\274\375\034=\234g+\275\350\306\204\272\246\364\212=\260\020\"\274\364;\037;\030\010\303\274ln\225\275\337\254\035=\013u\245\272\242\215\214\2758\345\214=\214\225\232<\355\203\255<!\331C\274\r\327{\275z/1=\257G/=\'\357\267\274Mc\222<\016\262\234=\355\002\006=\027\325i=\376V\026<j \240<s~\024;\233r\032=\332\004\007=\262*j\274[Es\275\270\234\264\275X\323m\273\226\037\365;\2004h:K\373\3048\223,s=\260{\027;\266\325)=\333!\332\274\301\213\371;\226\310%=\353\022\200<\035-\360\274\304\035S=a4\275=\316H\254<\\U\024=\221\243$=\234\345\r\275\010\235\220=\301\337\377<\0328\030=M\035*\275(w\256=\261\230\233:`\004M\274\336\232\272<\352\220T\275\325En\275\272W\347\274\316\024\027=\244\311\021\2751\006/=$\201\212;*\323E\275\177\342(\275\024\320\240\275\021\004==\252\303P\274\311\266\222:>\001\204\273i\340D=\314X\244;\334\332\n=\261\201\003>\310\241\331<K\205_=\321Dn=d\213\242<G\021\206\273<z\255=\367p9\275\2100/\275\377RI=z\203\205=K\003T\275\326\214\017<\250)\321\273\355\036}\273\0214x:\037S\260=\016\312+\275E`\223<\223\201\024\275\221\n\216<O\325\345\274\227S\274<\222\312\207=Mn\363\273\2415\224\274V\021I\275\225\346\302\272\231\371\333\275^Z\273\274\247N\246\274\216\"\260\274\200%\211<\2767L=\311\275\365<\2476\237\275r\334\224<w\264$=\";\236\274\005\322:\275!g\313\274\030c\001;W\216\246\274P\004p= \303~<\200\034\357\274E\334h\275\314\267U\274\3214\360<bH\237\275|\227E\2754\202N\2740\246u<i@Y\275Eq\014;\004g\002>\342\023,\275\006\260\n\274\310\371\311=\310\\\215=Go\240=\251y\255\274Hq\014\275\340\333%;\372\325A=\315\010\360<\014\343\315<\374G\304\275D\315\026\275w\325\252<\220{\331\274\n\273\207<\rC\270=\302\314Y\275?\024\203=\2324\021=\374\335\317\271\023\200\263\274\373\374\233<\215\371\223\274\347\324(=sZ\206=\232\332\302:\372\346\005\275\357c\201\274\240\345\350\274\022\\A\274\234\020s\274=?J\273;\225\230=\363\206\254<\030\260*=\352b\221\273\214\357\334\275&\262\234\275\371\203\206<\347\206A\275G\221\371<\230N\301:aG\204=!\032\3259S\231o\275\314\311\374\274\307\023\221=\367\026\257==E;\274<\237v=\263\274\260<\344\034f;\372\240\352\275\276\2615\275\326vL\274\306{Y\275X\177\353\274\252\006\234\274\2213$=\220\376\251\273\301\357\330<\320\034\254<\255]\243<\024\377F=\005\r3\275)z7=\256\227\344;;5a<\273n\010<m\257\303\275iX\342<)\307\013\276h\360\225:\235\\\366\274\362\372H=\226\365u\2754\263O\273\374\356\035<\371\307\272=\206\007O\275S+\234<h\357;\274\351\260\022=t\356\343<\260C\332=\021\313\346\273\025\320$=\322o@=W\363-\275b\022B\275V\260\r\275\022n\201:\000\331f<\223G\330;dA\222\274\001\265X=D\031\r=\267\n\"=\246H!<@\347\210\274\000\251^<B\'~=^\251\276\274:\204F=zH\026<F\320\311\275\3335\323<\220\237\013\274\201\003\251=\233E7\275,\'\203\275\344\t\356\274\204\221\234\275\177\326\037<EJ\213=\317i\036=L\026\005<\355\243=;f\0101=<#\004=R \013\273\305VB=\372!\n=\350\371\033=\230\302\216<\334\320y\274\236WK\275\263\026\235<\227c\226\273B\341\031=1\232\330:y\254\254\273\024\032 =8\235\274\274%\217\303\274r^\276=X\t\022\272\271\034H\275\335U\216\274\351\370C\275\270l\205\275\333\323;\272\r|\203<h9\r\275\215\244\025=:wD\274\313\254\214\274i0\n\275\031ZJ\273\347\352\331\274kC\030\273\320\255\256:*\240n=\372\027D<\321\205L\275\027\330\304\274\316\031T=\332\312\215\274\245\367\355\274\222\350\301;@\336\004=@\200\346\274\251\005\202\274\323\337+\275\2135]=0\255\373\274\241%\027\273\324\000\007<\024 \376<9\014$=\017\250?\275\323\246-<\202y0=\210\314\200;\327\277l\275\000g\371\274N-\002\275s\301u\274\257q-=}\016\303\274\367\177\004\275\366\"\027=\234\355\0039\220c\005\275\342\307\032\273\014\000\376\275\223\371\030=/\225\025\275\270\270\223<G\271\'\273\311\233\260\275\356\013O\273>}9\275r\304\271\273!\230>=!\220\276\274\227\200w=\3628\202=\341\352\242<\362\271\305=9+u\275b\016\\\274|c::\345\037p;\010\332\020\275u\205\262<\212\304m<\237\331\021=C\357?\275\367\370\250\275\211\036\375<R\203V=\261\231\206=\213\233\251<I\316\220=O\254.<bkw\275%\337\030;\253w><:\257+=\326\n\211\274\2610k<\3008)\275\0332\t\275\233\324\322<I\320\237\2735\307\204\275\033\200\360\274\262\223!\275\257W\244\274[t;;\017\205\247<*H\035\275M\375\211=\306\321\252=#\314\211\271f\343\211=\276\311\023;\376&_\274\006\222\224=CHH\275Q\327\005\275oii<\005\261\310<,)<\274X\262t<.\031\024\275\321\254\000\274\273\200\027<\"~}=\376>N:0J\300=\261@\223\273\357\177\367<\n\206\254;\307\200\014\275\372j\214\275\251gO\274\236i5=A\316\320<#y\235=$\236\200=\'\315\367\274\240a\306\274W\006\227\274\n\021\270\274\251h\003\275Jw\017\2758\002|\275\023o==^\367F<cR\366:tD\327\274y\353\315\274`\350s=\316u\242\275\021\007I\275\016\311Z\275g\355g<\227|\203\273\316\265><!Y\215=\353;\225\275\246B\363\273\275X\223\272\024\277\003\275\310\270|<5|\352<\010\304$\274\345K\330<\366S\247=V\252B\275\0051\031\274\343S\213\275\316x6\274\342\256 =oo\354=\222\222\256\274\243\344M\275\231\221\272\273qd6\275\325\343}\274k\024\370<\027\211\331\275\225kH\275\203#\007;.\273\226\273\rW\'\275k#\250=J\237+=\032G\226\274\263\217@\275\224M\376\273\006W\374\273\276\326\261\275>VX<O\022}=\304|\t=9\351b\272~Pf<q\2140\274\324\224\206<\332\025\344;\204-d\274\312\037\007=\320\0313\273\241q\247\275F\n@\274\003B\236\275\207\326d=\347*\235=}\301N<\r\267\311\274\340\233Q<\316\301n\274\326\265d=$: =_\242\256=\320\270p;\233}\232\275\332nN<ImW=\030\025;<+\203\231\275\207\363\336<\375e-\275\232\003\314\273_!\020=\226\234\322\274IZw\274\365\347R\274\327Ta<]\352\325<\023\303H\275>\373]<\307n,\274ooG=\262k\263=\263\320\214;Y\312\212=\202l\357\274XZ\"\275,\220\231=\363\337H\274\375!\013\275F8x=.ip\275:\326!<\005Q\206=\254\252\031\275\305\005\235\273(\257\270<\372:j6\002Bd\273\206\324.\275`}\300<,w\321\2743R\003=,K\246=\357\'\333\274\335sB\275\375\032\350<\347\312\241\275mk\245=\340>\020\274\213N\n\275\202\344X\275\325\316\300\274\016cZ<\270\240\207=\230\016\342<\231\312U\274h^[\275]\332s=@j.\275\215\210v\273\002\244\022<\362\303\274\274;%u=\307s\234<k\232\017\275?\272j\274\330J\301\2754=S\275kr\025=\231\003\\\275\n\205[\275\023\334\273\273\372\323\315:J\027\312<\203\nT\274\007a3<\273x);\372Z\247\274g\024A\275\327\021T<\210P\t\275\371\3727\275\343\363\336\275\304\352\342\274Ol\305<\235\325>\275_\344h\275\025i\201=\t\326\200=\355$\023\275\303h;\275\240\3739:\272\014\226<\373\240\022<])R<k\224W=\036\274,\275\360\034\243=@2\3159\304\247\301\275g\274\302:l(I=r\376\021=Z\373\215;\265e\014=i\252\004<\241\234Z=r\372~;\245\t&=d\265>\275\246s\370<\225\014\215=L\014T=O3\367;H\252\315<\314\220\222\275\240\336\365\274\321\377\263=Bnp\275^\320H=\351\t\031\275,J\301;\255\256\307\274\317-s<6\206\332\274\022U\267=1-s<\243\230\310\274\326{y\274\000\236\214<6\006\205=l&\243\273\325Nj\275\020t\022\275|\017}=\222E =\215Ou\275\016_\272\275\367RT\275\340\205\277<Jq\007=}Q\202\275\2427^\275\226\241o=\374\332\327\275\263\312\264\275]NY=)\267I\275\354\206\325\274\rO\376\275.\270\001\275\372\207Z=\336\235k\2753\0267\275>Vo<\025\305-<\032\007\326\274\206r\341<\3029\217;V\264\033=P($=;\362\270\275uG\264\274\025\344_=\333\3058;A\214\353\274\321p\036\275\223\214\303<\006\242}\275i\214e\274\357\357\305\274\361F\206<Y\241\216\274l\376\027<*\305D\275!\365\204<\300c\255<FV\026;$\322\261=\256\377\326:\222\003>=\226\351\307<\201$ =\021\017U\273HS\021\275\315\326\324\273\300ee=\245d\211<\233\003\000\273\242\000\025=\331\032\313\274Z\201\356\273&[;=\232\3614\275\352\016\010=\352\375\027\275\277\037i\274,jr\275\357\372C\275\'X\200\274=\264\274<\204\247x=\277$k=\315\231\336\274\013\352\245=\270\325y=\341\357\235;\277\223\216\274\352S\202=\035\227\232\275]lv\275\364\300\205\2741\021Z=D\277\025\275\364\223-\275\205\325\222;$\021\253<\252Pb<-\335\251=_\341\006\274+\360\\\273\032\031\204=hd\275=/\2505:\n\343\310\273\231\253\205\274]E\000\275B\257\325\274\373\324\251<\375\235\002\275Po/;j\372$:\313\021\351<l\277\005=\010@\244<\207\301\267=\335\001\024\275\202X\376<\341\334\206=\353\341\017=\3674\021;\360\207\251\274/\005\234\273P|\243<\344j%\275\0251\020\275M!\206=\310 \020=-\356\333\275\264\345V\274!J\317\275\331]\225\275B\306\321<\332\320S\275Q\207\r=\017\t\206\275\307\213\007\275\032\337\303=\032\013\317\274^\216f=5\032$\2740]x\275\335\347\266\275\210*\300\274k\250M<,\235\272\275\317#\003\2744\223\327<\234\327\n\274\204}\277;0|\231\274\036\200[<\212\177E\275\316\2645=\243\033X\275\365\305_\275\304I\252\274\277\275O\275g\270\205=\020\210\000=\231\261S\275\232B\255\275\201\367R\275-\324i\274\3621\204=e\303\244<\247\000\021\275\034\214\227;\253,!<X\220\346<\364\220\311\271\315\203\307\274\315\347V=l&\310\274\020s\220\2747\301(\275\264\302\332<\202\002\264=g\014\270:y+\253\275\275J\223=\203\252\n\274{t\340\274\371\030\266=,\037\223=\320\230\211=\312nB\275\204\007\003=\014S\n\275\004z)=s\021-\273\'\221F=\177\237\334\274@O#\275\201\272\226\275?{1\275\272\344\026<@X\003=L\303\254\274\306\014Y\275\305\014\326\274F\377\201=\r\266\276<E`\240\275\302\325]\275s\377\350;2<\326\274/F\217\275\333\005L\274\313\365\215\274\304(\372\274\244\277-<\345![=\010\326\320\274\302\362!<\016\035\261\274\266\250\365\274\241\005\027\274\300KY<Fq\223\273ED\266;\253\3730\275R]\264\275P\311/<\260\230\264\274o\033\356<\224\243\367\275\0366\033=`e\351<h\201A=\031\270S\275v\372\210<\010t\343\274{{\364;\351\347\355\274\303[\213=\342\022\273=q\003\342\274_\021o\275U\262\323\274\004+m\275/-o<v\233\t>2\221\316\274\377q\230\267&\227\321<\023\005\257\274\336j\000=\2651\245\275\235\246\255\274\357GK=\031{\014=r$a<~7 \275%\256\204\274$\025>\274\027PQ=\321\250}\274\202C\344<\274\001\346:\377\243Q=R\235F=\244z\300<;\252\005\274A\275u<\302:\013\275\016\025\315\273\342\355\223\273\034\273{\2733\357_\275z!\032=]k\276=\374\t\274\274Q\364\344\275\206\271\036\274\210\330\201\275!j\234\275p\013s=i\303\230\274\200I\255<\212\004\252<o\253o<\033\267\276:\204\002v\274\305\031\227\275xp\"<\206j\313\275\313z\270\274\245#w<\177\355\303\274\363\010\033\274&\244\220\274\346\232\215\274pd\374=\301\2763\274\330\032q\274O\207.=M\374\216<\001\326{\273\254\225\230<\036v\033\275\367\316k<M\307\326\275J\322`\275\231u9\2753T\367\275OV\033\275\366\355Q\274\366\361$\2727\254\262\274\262\005\235\274\275F\230\274n\265\277\275\247\t*<b\227\360:\032\276J=\311m\205=[\017\263<[)\200\275\341\341\237=\n\t>\274\177\302\026\275\236\235!=\335h\316<1&\030=\357o,=\375\274U=\016\252\307\274\255\t\355\273\0010\211\273\230\364/\274x\023\014\274\364\203\216\274\275\336\005\274\351\263\225=)\325C\275T\004\352\275##\247:\260\230\370\275\006\201\270<\304\375b=R\242\034=\"n\210\275(\242\027=O\267V=\213\222\204\272\326\325\031=\013ez\274\257\206n=-d\026\274\313\355\r<Y\262\021<\2073Q\275\352\004d\274\315\026\216=\326\253L\274\235l=;\353\037;\275\340\317T;\224\264\027=R\017\247\275\261\323 =\'\300.\275_\374\225\274pm\010\275\362\304K=L\"\010\275\224\350\246\2737\324\354\275\037\230%=\246^(\275\343\243F=\001\217D=\017\365\361;\203\275(=\022m\227;p\277\177<(\014\032\273&\"\351;\200\006\236<\234d(\274\340n\237\274\376\365f\274\021\n\"= d\t\275T\003\021\275O\023`\275\334JE=\352y\324;a}o\275\276\027M\271\277-N<s^\214\2747\271\\<\000\307\010=\211\036\033=\221\177\010=\013\024\352\273\274\276\260<\265\307\361<\236\301&=Z{\216\2741\364\240=.\371\203=\204h\272\2742\226 \275\250;\004<\204\332\252=\225\363+=Pz\237:\331|\247;#\213n=\324_\363<^Z\346\274b\t\023=r\356\231=\226\t\227\273G\201,\275P\021\302\275F\307\025<\005\'\206<\336P\017<\014\300\2048\355\203\010\275\211\2252\275^7d\274\373\344\235\275\240/\003\274\000\270\n\275\345-\031\275\314r\271<\241>\010=\227\031\237\273-\212\243;\326i\327\275\246\033P<J\245\020\275\013\223Q<\305\215\257\274\371\275\253<\331\025\025\275s\0077\275\343\235X=3H~<\345lj\275\304\"\014\274\371\347\035\274\236)n\275\031\316\201\275k\256{\275\010\010\335\275\\B\022\2755\260,\275\037\303\312<B\201\'=U\353\323\275\036\225\006<\260\212\t=\356\2543<A\nR=\333\037\341;Z\340=\275\204\342\305\275\342\245\027=\221\314\317\273bTk\275\243\246\237\274\247H\024\275z6`=\202\215\354;\372\227\370\274\240\272\223<|\216\354\275\177\256\235\275\347\377\331\274F\030\256<\275\325\177\275\014\025\303<Q\236\270\274,\030(<F]\';\270:\344\274&\215\323<\375lV=\005\313R=\372\210\205\275eqS;\301\300\333\274\335\\\207=2\004\021\274\241\320Z\275\205\302}=n\013\261\274\300\024\257\273\204\002\001\275\372\r\233=\3038\376\274\272\2147\275\371\3762\275\254\317\337<\022\240\r=\013(\226<R\200R:B\t\300;2\3637\275\225\325\327\274\343\350|\275\253a\274;\341\217\206=I\3347\275\254\032s\275\311\261\202\274hb\213=\243`\246\273Kz\037\275w\271s=\227\326\306\273\356\001O\275FQ\017\275\235F)=>\236\201=+B\260\2755\302\363;\206\0032\273V\226\213\275x$f\275M\016\230\274\370\r\240=oY\016=\354\341+\273L\2558\275\326\306\232<`*$\275z1T<o\223B=\264\323\316<\"\036\222=\372J\027<\215\312\212<\231\004\000\275V\375p;<\330a=\0040j<\347%@=4\220_=\020D7=-\230A=\370\257\023=\010\337U<\203\337T\275ta\364;k\246\260\275F\014\232\274\230\242\205\275-!t\275\2227*\274\r\362z\275<\026C\275\307\244\036<\266\3574\275\373\242\214<\265\204[\275\355\322D\275\233D\220\274\340-I\275\333\333\237\274s\014\263=u\034\277\273K`\256\274\232\257\234\274\033\273\242<*\260\302=\353\350\243;n`\341\274\014\322\213=\253\252\332\274\314:4\275L\342\013=Il\020\275\344\222\261\275\303U\240=:\241\337\274\231\267\206\275\377a\314;Id&\275!\000P\274v\010\001\274\244\001H\274\366S\215<!\251\251\274\020\266\203\273\035\345\354\274X\304\343<\"\325I<\234\353\306\273\224J\240\275\232\321\331\274:\367k\275\0366\256\274\177+X\275\021\216\372\275rF\271=\267N%\275\366\247\210\274\302N\177\275\022\271\364<\243\336M=\014q\214\272\024\245U\272+\256!=\005z}=\303\371w\275\374\240\273=\350! <:\275\205<z\260\357\273\356Vp\275\2245\216\275\245Nl\274B\037\262<\201UR=\rT\014\275\017\214\335:\254\234r\273$\364\230\275\224c\010\275\035\252)\275\237^+=\210ub\275\027\177\301\274\032\302\000\275\274\340\233\274a<\264\274\236x\254<y\314?\275\253\256\021\274\372,(\274\300\010\236\274\375\240E\274\2508\355\274w\251\267\275\25389\275\353\245\334\274\311\300\003\275\360N\337\274v\325,\275yP\032\274\232-n=\347>\314\273?\003S\275\343\272\300\274\001\347\237=\245\3124<\027\311\315<<\000\340<J]\357\274=\020\267<T\236\207\274\017;=\275U\035P:-\340\350\275\020?6\274%\201\207\274\216f\312<\025\204\334<\306\226\202\274\205\253\367\273\251\346\251;\217Z$=\273\205\257\274\036z\3779\300\366\340<\"\201\013<\327\322\346<\351\366c\274\327\263\226<`\322k<?\006I\274\277\361\210=fa\223\273A\357\177=\0279\370\274\037\356\030=\301\272g\274\035\005\024\275\003\332\233<\035hG\274t\001\002\275-\352\243;\250I\305\273\305\364\236=\262\216I=H#^<I)\245\274\240_^\275+i\217\275\023\330\223\274\010pr<\032\324\025\273\215,\006\275_.\370\274Q\024\356=\002B@=w=\350\274\324\t\235\275wJ\002=\311\n\210\275\251_\375\275\260e\340<\272%$\275C\362%\275\265\233@\275\363\347#=n\271 =\205\277\277<\371nZ\275\000\324\317<\006-\237=\246Y3\275\004\230:=\016\n\037\275P\2005=3\303O\275\302_\367<\270\014J\271e\0242=\275\377\211\274\33664\275\313\336(=@\267\336;\342\204m\275\032\325?=G|$<>\203|;\311\200\244<\347\357@;\032\020\254=*\322\247\275\342b\034=/\236\034;p\240\356<\245?\013\275\036P\202:\304FF<?@\021= ,\257\275\250\347\327\271_\010\233\274<{\357\274m\254\005\275t\360r\274\036U\346\275\3032\010\275\247\352\373\274\340\246\177\273^H\034=\332(\374\271P\033\276\274/\231\303\274E\n_\275\252\000\003=0/\215\274^\200\234;\324\351\337<\312\371\031\275\210@9=a8:\274\215TW\275\202\230\267\274\331\207\200<\272\364\363;\272\267\307;\256J\202=\020\337Z\273P\324\315\274e\262\274<=\177\001\275\323\247\220\275\024\322\203\275\227c=\275?^\245\274\037\030d\274\363dR=E9\371<a\375T\274\371\230\302\274\252\001\347\2744\246z<\021\230n\275\206\310h\274>\377Y\274\r\033\211;\025\250\027\2754\272\371=\350dr\274~\257\010<J\016\333=+\337\036=S\344\341\272\022Z\004=a%\224\274\366\361\204=3R\260\275VQ\201\275j\367\272\273\207\341\320\275\353\315\024<#B\221\275\337\\I<\356&\255<\237\324n\275\216\223\245;/S\255=\033M\253<\233l\270=K\324v\274\275\351\361\274\303\264I=\035_G=\252]\323\272\001\253\255<-nQ=\344\341\324\274\261\227K<\270A\032\275\353\275\243;\252\2753\274T\341\202=9|\024<\246\201#\275S$o=\267\203\333<\326\035\r\275I\037l=Y~\263\274Nm7=\364\003\022\274f\374\245=\201\265N=\032\"\373\274\233C\272<+\353\254\275&\313\327;\306\336\313<\036E\200<\021\316E;\177\223\322\274\371!\333\275X\327\t=\230\305\321\273@x\260=\220h\233\273\020\256\240<\025A\r\275\010\200\261\275,Es<kS\021;\200-\251;j\027\210<e\022\026\275U(\014;\313\3233\275\246DL\272\251\206\224\275:r\013=\325q^<*\322N<Y\325)<\215\314\022\275\221\375\203\275\010\230\214=\377\3305\275,G\224\275E\302\021\275\321\020\204\274e\363\303<\217\007#=\324\364\205\274Y\241\257\273\304r\220<lY\024\273\014\2561=\"o\253\273\273o\017\275\031\307\354<\236\377x\275$up<9e\006\275\247{\251\274\361\202@\275\305\324\003<\027Q\222<fZ\'=dh\305\274\266\224\006<\213\233\214;\256,\244\274\272H\177=\374\324\251<\355\214\001\273>S\340\273\0224\357\274\355\236\373\274n\360\233\273\227\305T\2750\252I<\306\223\261=p0M<\340\320\260\275\301c\020=\275]\237;\033k-=w\032\254\275\224\2422=z\374\267\275\035g\177\274\232\346\200<\001\024\202\275A\226<\275\\y\231\274.\001\'\275\322\302\332\274\242\261\201<\244\366Y=\231\317\245\275\177\320\350\274x\026-\2752n\204\275\010\327P\275\231(<\275\033\356\340;\301\036\031=l2\262\273t\2233\275\033\242,=\331\205\004\275\277s\352<\340R\333\274\312x#<\265G\232\273\210\020\033=\224\237g\273\223\231\250\274+\007\347\273\3375\270=0\266\315;6\205z\274Z\013\004=\226\224\330\274\223\223\273<\354\335\204;Z\235 :V?\202=\226A\260=.~\377<\377\234[;\233\271\351\274\220\270\016\275\331\305:=\214\213\313\274A\354\246\274\332\241T\275\340p3=6\272\026\274\217\r\213\274v\231\203<p{\r=\360\360\000=5\304\036\275\225\311@=t\200$=3L\246=\022I\201\275\025\355\237\275\231Sc\275\3035\200<N\250\'\273D7\033=h\004\303=\235\354|=\264\374J=\201\201\006=\225\'\367\274\211\023\234\273O\017\206=\331\3349\275\300&\235\274I\034\373<\224\347Y\274q<\266=\347<\241=\"\226)\2755\256\r\275\255Z\334:dre\274\232+\002\275\377\344\211\275\354\231\321<\264\253\307\273\251\360\237<\3624\332<M\216\244\275\305a0=\2732X\275>\345`<*_G<Q\253\\\275@\344a\272\231|\"=|\342\345=s_U<S\310*\275\257\307{\274\310Yz\273\265\030\251=\314\006&=\232\264\220=\202\034\003\275\240\210\022\274ta\020=\264\232X=\204E\213;\361\'\010>\262Q\276\275\031\310\322\273\020\235\254;0\nP\2749\017\344\274\237\326N\275t\264\335;k\233\037=\272\200b=A\214\220;\355\370Z<+\032\215=\202\253\214<\273\272\213\274N\027\347\272\343\374\207\275HL\206\275.\013\253\274\260g-<4\271\r\274\360#A=\321B\333\274M+\250\275\341\273T=#\033\316\274t\023\267\274&\316J\273\363T\361<\006v\331\274a\225\177<\027\325\005<\250\257\343<e\232\314\275^\367\341\275\371\360$\274t \201=\313\317v\274X\350\205:\022\275`\275\303\201\007<;\254}=\240\266\275<y\333<<\223\214\255\2753D6\275h\330t\274<\377\235\273\240\2634\275\255%\251\274\032\332\353;0\363,<V\337!\275\324\265,\275\0045`=\220\215P=\246\376\264\275\341\007F=\220i\022=5\304\013\275\304\226\242=\037\016D\274\032ML\275\244\277\213\274\213\301\240==\010\025=\277\213\211\273^\024\014=\306\201\266<e\177\235\275t\327\240\274s\312\336\274\313w_\275\372\203\322\273\002\335D<\357\232\352<n\264\000<\031$\202<c\203j<D\223\023\275:\003X\274\251\350\357\274n7\0068\365)6=\311L(=\254\223.=\263\314\200=\206m\217=LD\205=1t\214<b\177\313\275\262\013\354<\350u\320<\035\365.\275\031\261\024<\006)\210\275\024\334%=\237\350\260<\017\346m\275\234W};\250\324;=\353\342\211<\223\345\002=\006=\251;\027\326N\275ucZ\275\375\227\221:\323fV\275\212c\305<\221\333\336;\027\226\033\274\350\013:<\034\227\365\275\330\202T\275\271*\241<\256}\262\275\\\256-=^\000\307=\211\020\255<\024\023\020=\215\320\315\273\327~N=iS\222<\212\220\034=8\257\035\275Z\340n<(\0265\275\314\372\240<\231M\234\273\212\312\366;\211\314\244<\2020E\275u\3548=!V^\275\276*g\275Zc\006\275l\212\247\274LU\266\275\246\357\010=\324\331\274\272\311xz\272i\231\202=D\343+\275\223^\311:\252\344j\273\264#]\275\247L*=\212\237.=n\013*\275\275_\244=\000I\304\274\232\020\352:\302u$=\333y\227\275t{\227=\005n\017=\214>\264<\222\315\212\274\200:\242\275\303\227\364\274\271u\231\275\367~\346\273\033\251\034\274\25339=\332=\246<J+\230=\253\3447=f\377\326\274\341\301^=\030\232\220=\215Y\374<\313\240\221\274\310\220\376<N\326\355\274\177\205\252=\353\202\345<\267\375*\275\033R\033=\017\016)\274f\325\237<.\327L=_\013\247\274e \366\274n\177\313\273\314\337\222\274uJ\024\274\204\254\003\276@\000\366;/>\264<\030\006\342\274\344l\275;\264\263\205=\'T>=\310\232O;\006\204k\273G\360o\275T\3217=DX\374\273\274\231\243<\"(\261\274x\334\233\275\254\375\200=b\356\220\273f\230\001\274\014\224@=t\301i<\304\2640=\332qJ\275\331\023*\274\237\\@\273\250\024\252=\027\001\035=Y\226B\275 \314+\273\346z\246\274\227\006\356<\355\271\201=\367]:\274*\301V\275\235UM=\2713\346<\321|\246\275Vw\005=x\t\230\272\342\230\276\275U\264S\274\n\224\031\275d\273v\275\210H~\273:e\307<4@\002=\000\333\261\274+kd<T4\302=P\0045=\253#$=\306 R<=\222\000=\2265\302\274\315\2019=A\376\315<\354\031\320\274ek]\274p\203\231<&r\277\273@\024M\274\272\216\344=\320_b<\357\203E\275\345\315N<%~\247;\376\332\217=n\324\222\273\037\351\370<1.H\274;r\311\273\302\337\211<\263\207\250<S\\&<dR\377\274q\307}\275nO\022\275\2152\\\275\010Z \275\260Eo<\340\331;\275\353\215\031\275\207\301\207<_\367\227\275\322 ~\275\322\364\345\273\302E8\275\\\222\246\274\032I\003\275\251\016\001\275\340.\267=\256\032%\275R\3048\275\237\327\263\275\320\t\256\274\263A\203:\206P\232<`xx=\344}T\275\221\326\260\274\177\t\324\272\325-\225\275T\351\254<\337\212d<\300\033k\275\322\254l=\037\375\004<\270\337I=\205\243\345<\236\001\227=\334\034\034=\016\017\216=\370\251\016=iJ\303;\311I\231\274\323\207\212=\216\363\031=\306\256\256\273!hO\275\215\024\035=>\222d\275p\237Q\275\253\227\310<\264zm=\345\023\234<.4M\272\316\222f\274\020\261]\275p?7=\204\222\230=\246\303\233\274bb\212=\303^\001\275\310R\264\274\361E0=\255c\032\273\233\227\025\275u\320.\274i\365\013=\231\0135\275\223RH\274\n\272\370;ho\346<*\271\003\276!\032\345<p\265Q=H\204P\274\013\337#=8|\247\273\355\024G=\266\002\244\275\242\213\241=u\024\035\275u\235/=\245\2628<\007\007\202<\031(j=\345\334\200=\260\023\227;Ps\033=P\343\024=\346}5\273.;\222=\251\363\243\275\000\312!\272\213\234\367\274\014\270a<6\342\211\275<md\274\264\017@\274fV\021=\340\021t\275\264\027\343<$O\272\274\364V\330\275\027\245o=7U\355<\262\377\026=\240e\013=X\301\335\271\255 \271\272\217\254\334\275\214Z\363\273\377\312\357\275\343\255\030\275\272k\202<\'t\213=T\267N\275\372r\376<\323WW\275\312\314\235\274\231Hg=\023\323\203;C\363\024=Z\014\025\273\2504\315\275\213\353=<R<\324\275w\251\260<uY\001\274\322\364q\275=Ov\275\326\201\234=\255q\t\274<\235r\274bI)<~\001\241<\266%\243<\317\007T=\336\322\025\275Ir$\275C&\373\274\2422`\275\345\003\364\274^4\242\274\230z\277<hVO\275\003i_<\016\2255=\232\262\226<\247\275D=8\363\352<\261\001\233<\232 \365;\033\005f=\335\n\033\274\021\315\337\274\327\364\343\274E\323\350\274\215\"\205\274 \371\024\275\2045 \273e\300\210\274\367\212\377<\014\252\373\274\350\t\374;\203\322r\274\027z7\275}\327\223=F\315\277=\272b\365<P\304L=4\215O\274\273\265\336\274\200\244$=<>R;\324\221,\275[\367\347<\357\366E\275!\232\335\2750s\330\275>)\333\274\222\245\250;f\035\017\275\314IU\275\344b~\275\366\263\024<\311\326\260\274\036\247F\275\017\351/\275\t\302\214=_\350C\275\016\241\372\274KW\027;^]\322\272\271\226\275<\351\277\221\274\243\372\034=\315\314\377\275\220=\255<\277g3\275Z\244:\273\350\004d\273\'\267%=\032\353\355<)\025C\275\344\007\311\274z\\{\275\235\3521<jG\274<\003!]=1\276\207\275\312\3675\275\263Y\226\273\207B5\274J\'\202=\304*d=\004c\254\2751q\r=:\375\020\275+\257\250\274\275\343\350;K\241\250\274\n\246K=e\263\036:\337\3500=\233\212\001\276\3536\363\274\341\207\201\275\357h\022=\227L\257<:0\0149\277S\022\273)\216\333\274r\324<\275P\367L\275h\200\014\275\265Z\233<\323\027*=f\273\231;\264\236\004=pt\312=Au\013=\021\333\214<\344E\213=V96<\256\234\347<o\275M=f\025`;\316\233\004\274\356E/\275^:\220\273\013\r\347<{\340W\2754#K\2757h\211=\307\357t=\350\230\"\274\325\016\222\275\255%\200;\262\317\343\274q}\234\273ZCB\274\264\306\247\274Z\223\347\2742\205\266\273\212\021\021\275\357\226D=]L\217\275E\321\341\274Q\013\332\272#D\227=,\346\314=\220\241\347<\207\310\273\272\266\302\t=Y5\014<\262-\265\275f7\000\274\017\353v<\320\311\310<\005>\355<A~U\275\013\262{\274\366\026=\275\035P\022<wO,\274\r\217f<\371x@\274\365\243\337<\035\340\021\275\025+\234;\203\355\225=\244\251l\274\nY\260\274\2642\002=\314Ov\274\233w\207\273\201\365\325=\030\034\243=\334\020\221\275\270V\002\274Q\177\177==\314\"\275\3731u\275\370\366\002=\001\265\213\275pV\016\273\350@{=\244z\241\275\037P\221<\253:d<\027\342\341=g\364\361<A2\264<\257o_\275\201l\034=$\257\030\275\234\355P<,\305\023=@U\265<\302\351!<\262DP;N\305\033\275.\270\204=\355\306\310\274\031 \000=\337\273\016=\031\360\210\274\354\346n\275\223\235m\275\373\343^=1O\031=0*/\275\215\025~=4\"\207\274\257\371\356;\201/\n\275\240\2606=\371Y\324\274\016O\302=\306\200[< .\332\273\277v\207\274\327U\025<\360\3524=\312(v;D\350.\275a\227\344<\361\347\304<\262g\276=\246\341\216\275\277\341\314\274\020\321\363\272\340\231z=$*\306<Z<:\275\2572\'=U\027!=\361\216H\275\244\330\026\273\336\004\231\2759\2412\275\360\2758=;\364Z\274@2\274\274^\226\362\273[\032J\274o!\350:\330\003\274\275T\331k<\220\364S=lX\002=V7\016\274_\363B\273X\033m\274\275\017&=E\222m=\331\313%;\225\317\021=\234t\214\275\267 \377<\253\361\302:{\2471\27518\336\274$8\334\272\312B\352\274\17753\271$\020&\274#\235\262\273+\304n\275:\201_\275\311\3074\275d;\025\275\027\026\376\274\222\312\201=\004-\240\275\322\301\\=LI&\275\272\265\211=\351;\316<\215{&\275,`U<Y\211B\275\230\245K=,\357g\274\317\325\246=\367bU\275\201\220\022=\215\267*\275u\323 =eg\207\272U\244\274\274\030\235C<\'!o\275\314\032]=O\026f\2752\347\\\275\204\244\333\274\2021\360\274\234\375\246\274\213K\351\274L\372\216=v\313\023=\317\017\212\274p\362l=\030\t\220\274\342\373`\274\371\204\232=^\003\224<H\346\n=\002\2421<4\271\250<\260Zv\275\267\231%=\261#\256\274\023_?\273\231P\300\275M\327\225\274\027\260\034\275\261\270\354:3\265\200=g\257\274<\002\315\353=\362i\357\274\326+\311< \".\275\'\254N\274r\327)\275\327}\213\274\360\3061\275\'\221\350<\334\236\r=?])=\263\177\324;\331\332\310<VU\022=\010\226\034=\200\253\022;E\340 =\177OC<\373`F\275d5\207\2721\241Q=K\303\241=\\\302\023<\025\213\272\274$\273~=\213\201\030\275\3166\345\274\364\212(\275\310\232R=\2570\375<\306\216y\274\335z\276\274\223)\326\274\354v\203\272\256\272\302<\354v\274<\034\025)\275\202($\27548\222;\t\235i;\025[\311<\342!\027=\370\331\244\274\336\375\203<X\001\236<%\232o\273q\027\250<}Ge\274\022\217\005<3\222\"=\245\035R=\205\243\246\274\002\241\331<\'r\225\274\224\354O<\375\227=\275\367z\323<\250S\202\274n\370\271\274\212\263\301=h\034~\275VT\025=j,\006=\333\0043=\245\317\214<\004\344\217\275\031L\305\274\237\206&\275\275E\232\275\304\013W=F\261\311\274\360\005U=\215\0138<\327\205\204=\364o[\275\311\021\032\275\226\345\342\274\005vS\273\250^t\275~I5\275\211HG\275\326\304T\275X~?=\317\343\025\275\036{3\275\375\333\027<\001\200\255\275\033\343\360<\343\026\305\274%\2004<F\2457<\000E\325\274\205s\024;*\2055=A\207\026\276\342\352\t=\033\212^<X\200\031=\316\007\253:\t\331\266\275\211\022\245\275\314r\005<\235\224W\274\363~|=wV\301<\346\326\200\274\007\345R\275\005\221\017=\371\255(=\3472#<Q\333\342\274}z\262<\023\n\301:X8e\275\211\257P=\020\321\227\2750-\307<H\346\231\275\302\320\265\274\373T\201\275A{D<\321\367\004=\327\315\275=\306\314-\273\230}6\275\316\200K\275l\034L=\002\347z\275\364+\274\274i\256\224\273\273\004V=\347\207\301\274\201!\322\274~A\331\274\026pf\274\036\273[=\221\014\341\275M\362X=~c\206=S\025\350\274\350\357 =\347\177t\275\347\325\247=,_\370\273\277t\205\275\246\232\212\275[\342g\275\'U\211=\331\257\213\274\316\333-\274(\031\027\275Vm\253=R$@\273\241C\000\274\350\240\270\2759\257#=\214\267\222\274\325\260F\275m\036\027=g\370\211=\333\320\374\271J\302u\275^\344n\275+~T=\261\323\271\275(\020\216=\324\'E\275\327\326\307\275=\234\221<\034x\253<\230\031\022\275A\226>\274\250\t\322=\354\217\215=\257X\017\274l\0072=\'i\026\274\307\352\231\274LH\013=^R\302=\242\034\275<\307\367\017\275)\330L\275\346\214\023<\235\315\004;+\343$=Md8;dN\035\274\"\377\307\273\036\276\361<Ks\025\274\006\356\301<\330\032m\274\307\212\017=\035r\253\275\214\240\255\274Z\031\002\275\023\355\206\275\213\177\001<\032\367\201=\326\010\271<\205\036/=C\331\200\275\372\371\357<o\376\234\274\267\n\204\274\303\305\373\274\303\243\314<\266=\323\274\326\316C=p\205\346\272\235\0341<\220\202\256\273\213t;\275l\003\035\275;\032\232=\253\352r=\227\305i\275P\n\204=\345)-=\336x\214:\2072\203\275\272\000\233\274+\3607=X\207L\275\355\016{\274\247\2610\275aO\216<`\343\222\275$=<=\202\346\320< \013\237\275\020\024m=\253V\226=\315\335\313\273\316-(\272&\277\r=\320\006\217<|mH<\003j\374\274\032\247\004\274P\246\004\276a\330\373\274\254\263\003\275]\037|\275|\2367=Gd\231<\242*\241=\377\242\323<\345\276\241=\300\304\205<B5\352\273\272\241\200\274\301\332\000\273\343\353\014=\224p\013<f=j=\245\005\325;\345_0<\031\215\207\275\243G\240\274\3632\241<\247h\243\274T\351J9\306\224\023=o\t\324<Q\334)\275\315\325\027=\275\232\014\275f\322\353\274\202\2102=\200\022\002\275H\1772\275\311\227\322<!\310\324\274\263\341b=\277\013\327=\234`@=A>?<\246e\360<%\226\n=\235\247=\275\364&g\274\352\342\024\275\276\3373\275\203\252\232=\'\272o\275\234b;\275\214\260\275<\'\302\316<\tZ*=\273\014y=\3160K=\315\275\306\273\262\324\207\275\300\322\255\274\317\004y<\344\257G=\343\2415==\\%\276l\244\261\274\317J\265<\362_\024=F\322+<\312:P\274H1\377<\314e\034\275~6\326\273\335_\237\274\244\337\205;\322\033n=k\257\016=\2424\336\274\222~\341<\231<\306\274thj=\201\276\310<\214O\215\275\2527\005\275\303N\036\275\367\266!=\212\261\325=\207f.\275\032(\354;\251\002\237=\004\302\265<\013t@\275\247\342/\275\262\325\013\275;\033\373=<\317y9$\376?=\035B/\275\013n\362<\362g\177\273\304n?=r\376\263\274iu\257<\263!I=\256\231\324<\"~^=\r\025\223=\205\223\014\274\356\300 \275\2532S\274\257-\211;\240\0207\275`\201X\275{\351\257\274X7U\273F\010W=U\027\362=\335K\252\274\255\016}=\036v\246=\354\213a\274QB\031<r\242\003\275\3346\302\274U%\032\275\005\227\360<A1\315\274\315@\351<\206\035B=\246\235\"\275\023`\275;&\307\257<\2102#\2756\265F<\010\205\350<\224\357\010=\355\266\357\274\360\322\274\274\273kt\275\225\222)=\312W\r\275\256N\332<\000H$\273br\334:\376\377\001<\246\227\347\272X\307\364<dv\202;\227\025\305=\251s\321<\333\337n\275$(\252\2745`?\275\210\317\262\273\204\000\035=\262\264\016\275&d\234\2740\036\274;Z\036\214\275\240\2616\275\267\264\037\275\204\300T\275|\200y\275\254\347\235\273\250\036\314\274\373\322\211\275q\357G\275=\204\r\274\305\016!\274Hx\267\274:\305\212=jAB\274\262\260k\274Hz\314\274NP#=\\\320\302\275\267\304\t<\251\2427=v\361n=#\305\222\275K\242\'\274\357\351\361\274\256L\250\274^\225H=>?;\2752\363\000<\267`T\275\261\235\265<\3758a\274\343\244-\275x\365\225\275q6\320\275&\351b=\021A\370:\340Z\000=a#\327<^\204o\274\320&;\275\227\253\200\275\177\021\001<\034\340o\275^~<=QT\222\274\222\276;;\200u\210\274\320az:7\273\263\274&;\025<\242\033=\275\252[\255\274^r\223:\365\213Q=.6\022<\314j\367<\311,\034<\t\337\242\275}\031\315\273{\275\227\275\244Y\242;qu/\275\275\327\275\274Z\034\222<^\256\007=\010\026\357\274\034\342\336\274\034\035(\275\213\200\236\275\230\305\336<C\243\355\274\3378\264\274\323y\010\275|\325\235\275h\016\327\274]/\001\275\327P\000\275}\250\270<\227\250\010\275\r\001\235\275\222`\221<\261WW=T\3251=\301\215/\274\207\276\343<\003^\323\275=\266\020\273\331\330\333\275\340]\270=\231\267\215\275Z\266\"\274\027j\24794\260f\275U\250\252\271\322\010\001\274\355\357F\275\354\034s9\276\250f\274\2535\335<\305\016\031=\372\236\264\274D\260\235=\305\341\005=\241\376\322\275^\273\222;.\351\203<\031\220\305<w\322\344;Z\335\037=\024\324y<z/.=s\330C\275\310\3014\275\261\271w\2758\351\265\273\240\366\254\274x\201J\274xcy\2759\207`<^0\310\274\265H\'<bm\360\273\305p\033=\2571\032\275x\377\007=\331\357K\273\246\2208=No\027=\354\'\201<\035\017\232\275\312zJ=S$\256\273F\333&=\344\253&\273d$Y=\000\026D=\024g\317\274\273\243`<\353G>=\314\274x\275\033\031\r\275\335\300\215<\206\246\032=}\217\021=\345\220\220\274\022\224V=A\030\272\273d\303\200=\344\304\366\274@\253];%q\300;\235\233\242;f\356\326\274\323\267\312<M\255T\274E\220W\275\022^b\275GNP\2751\361\334:\312\216G<9\271\205;w\252\200=\320\004\213<F\343\360\275\3476\n=\275W\006=\266U\003=z\352\277<\201A\321<i\3434\275r\251\t=\355D\314;\202\300\223=w\2236\274\223JL<#\001\245=(W\371<\236\022>=\301\340\206<\244Mm;3(\240\274zr\213=\"\350#=r\255\206=\231\234A=\203U\337\274\007\240\350<\001\224\307\271\245\316\321;3m\036\274\342\226\227\275\017\376\034=M\345\277<\016\273\333\275*3\374<\350\227\254\274=8\205;3\264l\274\313\240\242\274\305R\244\275&\006$\275\361\201[<\275\030&\273r!.=\013\373t9WG\246\275\267\237\250\275{\232\004=](m\275\320\t\240\274d\247d\275Fww=\\c\t=\377J\245\275\204i\325=\271\302==\001\246/=\271*+;\245\255\277=\271\274o=p_\333<\243\212\016\274w\376S=\315M5\275\223\366|<\247\377\330<Y\242x=Q P=\310\260\"\275\033\267\203\273B\301\206\274\374\177=\274}\203\231=gXc\274\325<\360\274P\335b\2744\252};\005\215q\274\271m\006\273\034\322\311;r\247\210\275\251[\322\274\262\355\276:?\354\024\275\2138\347\274f;V<\216\005\371\273\234\256\206\273\0343p<\000\265\232\274\032\211O\275\255\246\347<\010\252\211\275P\332i\275\225\304\255=\2100\315<\375\363\331<`\023I=l\372\017\274\217\"\274\273\325P\316\273JP\301\275\\+\367\274\304\377\233<k*);^\275\202=\365\205\345\275\206\315%=\025]e\274B\201\310\275\320\230\t=\335\3758=\321bP<o\177J<H\234\346<-\377\222\2748\351\231\272\330\240\220=\333\016\270;x\025\267=c\027\362;\2279k=\016G`\274\255\354\241=\375\201\253\274\300l\275<\275$Y=\035\312\316;\222?f\275L\236\205=^\017\275\274\024\323\014\275\305\346\342\274cL\n\274{^\000\275\260\363\332\273J\257\024\276\302];;\223:\247\275\260\315g<\347\237i=\306z\320\275wi\022=\333\246\212\271\2442\207\275\263f\212\275jS\327<;\304;=\264\233\004<\2632\177\275R\031\"<I\244!\274\270:R;\206\2437\274>u\252\274\274\010\017=\250N\261\275\253\332c=f\235\251\274%\322\323<\373)\\=\001\320\366\274?\224\362\274\345m \275\010\213\302<\213\376\317\274a\n.=6\265\224;\317\250\241\274\310\302\262=\201\362(9\345\317\210=\201\022\211\274\001\271\231\273\210\222\210=\343\022\316<i\3472;\323\342\200;\007G7=MLy=\037\221U<a\357\357<\345lD\275\222H\\\275\177\361\211\275\305\356@\274|\t\001=\2708T\274-\303\245=\214\\\215\275\257\014\033\275\344\254\021\275Fu\272\274\263\3070=\262PJ\274|\205\270\275\027\223\262\275\252\2020\275\312P\225\275\030jP=cI\315<\334\371\002>p\272\375\274e\\v=\241\363\036<\017un<9d6<\n\365\303\274\"\001\300;b\222\033\275\331\031*;\263\237H\274\r\360\006\275r\230\337<5t\267\274Z\231\271=\347\307\352<\252\2057\275\332,\007\273\361\263\017\275s\314Z\274_QO\275\021\027\344\274Og;<\273zG<\230\232\2059\353\301\334:\256\337\243<\247D\200=5\3661=\263\000\026\275\233.f\275N\330\375<\377q\323\273e\021r\274\004\305\020=\267##=\257\202\013\275\372\n\357\273\265\345\260\274G;-\273\346\034\243<v\001\213<\226\3405\275\334M\265\273\010T\034\274xk\200=\016\302\020=\002\256;<I\356\271<06X;\270\362\265=\273}\234\275\272.\014<\317\317\243\274\237\007\370\272\004\253\023;\372^\221\275\374\246\227<\240\237W=JZ_\275\231\033\266<\3714\315=\360j\221\275v\201\264=]&\221\275TnN\275{\177\'\274\216\220\343\273\321\215\310<\n\367\245\274E`\261\275s\\\332;\223u\016\274?\023\204<\177h`<$l2\275W\376\026<y\3227\275\022\233\212<\317\236\321;u\2754\275\350\254\027\275\222\025Y\274\200$\221<\365\303!=!5\006\275)E\335\274\372\227\007\275\013\r\216<\342\215(;5\245\316\274\006\246\214=\362\335\215\275h\333\276\275\215q\226=u\376,\275\354\031b=G\353\207<\005\313$\275\276g\325\2741\351\203<P\313\212=\013\267\036=\037\375\204\274\364\354\263;\266\235\025<\347\024\276; e\204;\t(\251\2745T\204<\344+X=\007\300j\275\035\023\355\275\243\371\347\274t\270J\275g\362{=\204\276\223\275\"\260&\275J\2552\275\366U\031\275*\342s=\347\226\365<|S\037\273\215\034\224\273\356\374\305:\244\243\365\273)AP\274\376DC\274\211\\x\273\343tb<N\325\240=%\002 =+b.=?\356C<\032^==^\265R\272\330\n \275\344\205I\275\244\266e;\331\235\301<\257\264>\275~?\207\273\250\031]\275\000\353~=\014S\"\2759\264\216\274\333\032s=\234\357\342\274\221\226\223;=\341\206<2|>=\334-\265<\322\243\017\274\322\342\r\275\350]^\273.\323F\274~6Q\275G\332\332;\352-\355;\233\205s<aq\033\275\241\241\206<Hh5=\274o\003=\357w\223\274?\216\224\2724)\013\275\375\252\242\272\371\331\037=\214\374\242\275\217\0179\275,s~\274\030\235\352\274\205\256\014<\000\312v\275+s\265=D\221^\273t\306S<w\365k;@\262J\274AZ\234<G\016\313\274i\260\n\2757X\n<U\276\n=\037>\216\275}\215\024\274(\321\013=b\023\002\276\354Vr=\330\366\267\275\312\002G=\274\234\336;\244\021\001\274\256\366y=R\332\236\273\2072\375<w\345\256\274@d\207\273\367\022\314<\036\215v\275\007\'s=w\355\022=\264,(\275&\036B=O\202\0237\302\275\005<\334\215\r<\347\353\373<b\000\201\274Hh\270\273%\007\213\274\246\242\241\2743\313\375<\345\2118=\340\272Y<Z<\023=\240\341Q\275\315\353q<\261\"\'\275\203y\365\275n\265\371:\321\345\222\274VT\373\273\037\031E\274\245\370\010<\210!q\274]\233\244\275\203\004\334\274wwo\275\007\255\203=%|\227=}\346Q=\022\tp=,\2530=\007\003\"=\345\330[\275M\336\226\2755\211$\274\230 \206\275\213\276e\275\311\224C=h\317\320\274\213s\264<+J+\274_mI\275\324w(=\344u}\274>\266\233=\361\236#\275\305\3205=z\230\300<w\337,:\022PG\275JM\230\275\211#\320\273T\254\310=W\247v=\311\006\372<\257\246\032;is\205\275\375\342*=\271\263\022=\373X\237=bK\250\271\361\"\212\275\273\214\262;\030\365\305=\262\271\n\275\006PM\275$`3<\360\320\300\273%:\224\274\376\032\311\274q\"\273;/L\217=E.l;\337\226\274\275\024~s\274\033=\274=\025:\224\274W\331\256\274%e\360<\337\223~=\272\233\006\275\221\257g\275\t\023B=\261@3\273\337\203\376;4\321\216\274\334\\C\275\013l\324\274\233\353\240\275W\313w\274$\031\330\274fF~\274D=}\275\361\362s\275g>,=\006Kl=q\023L\275\264$U\275\201M\235<\326\271\230=\226\321\024=\240.G=9\231\\<2\372\335\274nf\222=-\031\237=\264\0139<\275\360\017\274\217b\275\274X\352R\275\366{\234;&]{\275\217\302\271<\211/\274<}\271:\273\350}[=\324k^<\005\347\344\274\364\325\026\275\334+\311;\"\324\200\274\210u\235\275\324\3501;q-\355\274d)f=\225\217Z\274\343\202g=\263dh\275Rt\322;\302\013z=\365\326~\275\251\2723=\205\341\222\274\234\352\315\274?H\255<\347\335\244\275\013}\212\274\252Nm=ax\r<\254Q\2509r?\306<\005 \205\274]\332\230\274\310/j\274D\323\355\274\t\211\354<f\375\342<\310f\215=\321\341s\274!\254E=$\"\020=\344\026\332=\232\331D\274z\002\200<b\322\002\275\230\373\202<\235@[\273~\'0\275.\366Q;o\331R=+\377\253<c\226\371\273z\221P=\273\267\323\275-\3326\275\2656\224\2753\263\342\274J\366)\275z\256\251\275\316\320\014=:[\216\274\316\377\363\274\007\035\327;\021\325&\275\240\334\206=~\340B\275\327\305\207\2750\200`=H\026`\275\302\321\367<0\306e=\321\026\243\275\340\231,=\341\026\270=\244kJ=\230\246w<+\335X\275\177\350\312:^\310,\275n*\333;\027o*\274\331\312\003\275\317\016f\273H\204 \274::\242\274F\r\322\273\202\330a\275DK\327<\252\033\031<\302\251\321<\205\261\363\275\010r\254\274/E\215\275\220\031\022\275\327k0\275\351\340t\275\310\245\304\275$fo\275\024\247\240<\342\024\035\275Y{\215=GL-\273\3408b\275\317q\324\274\343\344\261:\267\014\353\274\316H\016\275\340\204d\275\330\213\225=\360A\240;\350\357\264;\340\216t\275\tl\221\275\016\204\362<\273\361\001\275\314\212\246;\245\343`=^\361\350\274\271\0373;\371\364\020\2755\254D=PBj=\231\342p=\3451\217=;3C\275\232\022\217\274\233\000\366<no`\275\214\035\211\274Iq\207\274\004\234\366\274\206\266e\275\3211\032<7\213\266=\025\333\003\274s@\220\274\312S\276<\363\004|<\004=\330\274/:\314<+\366\t=\2615T=\355\331\014\2733\377\020\275\266\355\275<\220\013+\274G\370\010\275cZ\241<\322\301\003\274\240\r\006\274\344\0244\275\027o\'\275)g\252=\"Y\016\275\230\367\006\2754^,=a\303\\\274U\237\013\276\326o\344\274\237B\032=\006\300y\274~\036&\274V\"\363\274\017\377\017=\313Z\264<\245h\321:\303\205#<D\021\013>\361\021\017\273s\333\350\274\021Z6\275\276n\\=\211D\301\275\232\361\243<\250\014\242\274\r\333#<\250\274O=\034\201@=\212X\255<)\313\240=\257i\211\274OW\305\275\247\242\270=8\275r<\367\\\350\274\231V\271\274\361\303\362;N\257#=\315\356\r;\\ \020\275\016\2709<u\204\352<\353\312Q<o=\004=\372\315\340<\314K\237=\355.\226<\236V\213\272c!\223\274E]\326\274\003\335\314<f\262k=3.\311<\245\177\006=\223\325\203;\037#\276\274\352\034\341\274X\324\035=\325\252m\274\003\230\251;\260\214\036=\326F\242\274\201\211\371\274\305T\264\273\353\320\375<\210\245/\275\255T\002\275G\010\323;88\302=[\2568=\004\260\250\273\021\327\244<\277\227\025<\203\037\226<\324(\020=\331\372\355\274\247\301\202=3k\267\274*\254V=\271\t\2749lw?\274\035\n#\273\242\271~\275\330@\206\274\233{Y\274\271\353\240<MI\341\274\351,.=#\320\034\275bh\021=\373\032\022<\310p\264:q.\025\274\332\222\003=I\262\036\275\306\201v<1&\253=\241<4\275\223\252\226<\3306\246\275.,\023=Gi\251=\364\3037=\361\225M=\224d\001=\036R\253\274)!\363\275\236\000\217;\314\276Z=n\026\325\273\303\310\320\274\021\275\241\275\302\r\004\275P\250\027<\tb\265=\201\253\302<\215Y\316\274\271\372\003\275\t\301\033\275\303\007\214\275\250\235X=\342\017\220=\216\273g\272\375@\321<i\201\222=\213\346\022\2765~\001=bq*=\342f>=\r{Y=\021\237n=\246<%\273d\274$<h\205\231\2737Vy=n\234\245\274 \316J<\270\356\274\274<\'{\275\226M\002=\230)\302<\246W\002=\225D\251\275/\036Q\275H\307\t=6;+=\321\326\340<<\263\224\275\322[\254<\346z\232<QML\275T`4=2\321\262\273\343\300U\273\234\274\024\274\265\271\003\275\3436\230\274Fk\350\274L\354\224=\310\027\211=~\002\004=M1\265\273W\2514=#\257(=\327\320\t=\374\321d\273\347\314\346:\230\253T;\346w\223\275\351\031,=)s8\274\372\263};]v.=\253!$=\nl.=s\005\300<\231\347\233=\246\264\003;\255\002\000<\263\232\323\275\371\237-=\365\3176\275\336Al=\351\367\022=u(\030=\034;m=Q\235,=R8\347\274\240\340\r\275\233K\217=\302\007(\275\3606\362<\335\002k\274\257\245T=\217Lw\274\'\244\253\2740\223\271<\222\2517;\352 \0009c\261\221=V\331\002\274\021\002\202=\311i\263=\300\224\0168\261CX\274PCl=\257(\253=\373\324\213=\031\341\r\275\332\341m=\363\322\205\273\230\362\232=9,\240\275\002d\221\273\231\306^\274\321\306\233\273O\007\271;2\3172\274]\317\237<\267\272J=\332\004a;\177a\253\274\3451\227=7_Y=h\311/\274O\211\234<\275\261<\274B\275\251=\330\300t<\3736\204\274\274\256\203\275u\240\224\275\367\206\373\273\211\243\371=5U\265\275\241t8\275\263\350\266\275\321\343O\274A& =\250_P<*\215;\273Z\270\221<\350\022[=d!_\273\224(\346\2737\257&=\221\\\217=M=\007\275\244J\225;\0319\332\274\224w$\275Dy\346\274\247h\356;e\210\333<\022\333o<1Qv\275\222Bz\274\317\304\237\273}QL\275\223\007\001=\007\367\016=\237{A\2754y\227=\362\303=\271U\207\216;\343!\024\275\314|*=#\335\304:\004X\002\275\336\263\037\272\205\344?\275\300!\213\274iS8\274\021*\006=\032Ks\274s2\300\272\371\345\341=\347e\261\275\037\036\224=\213N\264\275G\362\233=C\".\275L\254l\275\313\t\214\272\345S<<\256\226t\275\306X\002\275@Os\275\373\254\242<yP\230\275@\206\246<\356\315\327\273\214|1\274\nR\252<\004\255\200\2758xt=\026\031H<\224\312U\275\255N\024<\233\211\206=?\321\314\274\007b\217<\266\304\337\274=\234F\275\273\256\204<\232\231\204\274G\351 =\016\274l\275;\203K<\336\325+\274{\373\261<Mhl=\030\t\025\275\310-N\275\242\374\243<\250D\266\273\202\334\221\274`\326\240<fu\251\274\350\333\232\273E\274\316\274/\254\343\272+\205\351<\322/\256\275=\254\214<y}\002=\227nl\275e\003a=o\232\377\274\027\325\313\273\332\271\031\275\036\240%<\221\r\353\275\236\356\007>=0\247<\210)\227\274\r\237%\273\377\r \275\003rw\272\344\220\206=0\007q\272\033_\177=\342\236G\275\323lG=D/V=\214J\004=\330\357\332<\247Q\n\275\336\341\231\275\253s/\275\376\337\330<cxb\275\346\305\214\273R@\003<\232\265\215\274\211H\302\273w\200\206\272\216G\246=\375\035\007\274\030\216\024\275\224\036\326<}\312J\274= \306=\320\224\214:\360q\240\275\223U\034\275\372\314u<\274\363\272<\212S\271<Xr\214\275\206\346\034=\342P?\275\244\203\376<\355\227\351<\335\026\227\274D\226\014\273\300w\203\275\353\006\344\273\003\330\0309\214m\327;\330\355.=\244\350\331;\006\226\376<b\331N=s\350\260\274F\342\302\275g\342\261\2746\247\341\274\256X\231=*\373\311<\237\260\230<\264\227\265<\261|5\275\352\217\204<8\330\270\275\214\334G=\330\262\235=\032\345\004\274V\335\215<\273\246>\2751\367\320\274\332\377s\275\t\344\020={&==\037\261\n\273\303p\"\275\325\363j=t\352#\275\375\361\261\274\032\320t=<\354l\275\375\322\023\275\356X.\271\262u\024\275\346\204\007\274v\020\005=D\354\025=m\001l\275\223\255\021\274\341w\263\275\023\316\222<:C\227\275`\201\255=\343\274\004\275\241MO\274\255\365\244<\330\232\202\275\364\304C=K`9=n.\367<\270O\262=uR\267<\221>\232=hC\305\274\333\033\210\274\300\230\270\275_\027\275<\353w\251<~xK\275Jk\234<\032\035>\273\005\351\204=P\337\224<\261:\373<,d\257\275\2208\365\273b\363\227\273 0\276\274\024\245;\275\230\240<=\376\373==\333\357\361<\305\317\310\274\224\306C\275\346wK=\343\250#=\277\343\367<\317\323\255<\326\263\357\275\375\221&<\211\343{\2750U\224:\372\026\343\274l%E\275)\271\205=\243z<;\304\313\t<rM\236\274\212\362^\274\367\262\303=\365\314\017=\354\032\266\275\233\207O\275\277\227$<w\321\305\2745\335\211\273\030\376\214<=.M=Q\255\023=_\202X<r\216\367<\026#\030\275sn\333:K:\"=G\251\002=L:\232\274\004\343\354<\306 H=,>\236<\006\234\274\274d\235\025\275\006\303\266<I\246\034=\317qF=~V\226;\313\362\367<F\237!=z\361\260\275\267\"6\275\300\342\350\275\3072l<Ir)=\266\330\023\275\0324\2209)\351\317<\333\376k\274\353r\016\274\202\006==a\337\203\275\246|u\275\216$\214\275Y\t\001=\017`\246<\020D\376\274To\261<u\310\226\274\236\204\306;\004\366\232<\007ZP=\223\314\255\274\266xx;\323\203\353;o\206T\275\336)W\274\344\352\005\275\324\032\222;v\007\252\274\037>|<\353\237\305<\341\364\322<lg\207\275h\274.<\022$\n\275w\332\025\275\215\254\000\274\353\235,\275\215b\305<\204;K;\376\037;\275\317U1<\372-\332<r\334\207=&f\004\275l[\200<\206d\300<7KD;\033}\021\2756\275\210\274\210\\\374<s%U=\344R4=\304g\247\274\374\340\326<\307\304\274\275\313\361\270\274\277G1;#\264\306<%^R;\025C(;\345\220\013;\324v\363\274\177m\016\274\314\254\343<l\264\200\274\256\240\341\273\262\345\013=\206q/=Cd\213=x2_\275\234\214P\274\344&\225<\263\002\224=\227}\025=\027\266\022<\2179\205=\330\240\022=,\374\370;\323\3226<V\3407\275\203C\210\275M\355\235\274\317\266\266\275;N\305\274\350/`=m~f\275\344\313\267\273\234K\240\275s\370\250\273\003#`\275)\007e=1\301\331\274h\347A\274\347e =\3470e\274\320(\320\273\341\256\013\275[\223\177;0\010B\272\274\0061\275t\005\232=\'\347P<\220]l\273\'p\203<\213\210\033;\032\224U=\200\257F=O\245\321\274\265X\177\275\313\030R;\020/\327<\272i\331;\251\262\354\273k\366C\272\235\337\207\274X\363\376<\2478\035;\3150*\275\331+\225;\331\017\370\273Dz,\275g=\214=\352\305\300\275k\223\310\275c:\036;+\253\223;\306\0317=]p\214=\200\377\234=\2642\306\274Tx*<\215\026\"=\\`\212\274\307\362\262<?\235\202;HK\333\274\027\211\300\274Dz\251;\357\"\325;nD\272\272v\r\222\275>&\341\275;\304\327<\201\376\207\273\337c\356<\236:\333\2739a\372<\334\322\023\274\014:\000=\323\332\235<\237iU\275\253\216;=\2757\346\275\317\360Q<D\251d\275\200\274\220\274\343|:=`\377c\275+\344+\275n\204\300\274\215\016n\275\341%\323\274\206\323\225\275\006\244\003\2756V\200\275\313t\017\27599 \274\357&\307\275A\212\030\275C\336\007\274@\314\035\275\376\323\336\275h9g=q\264\204\275@0\377=\020\036_=\362d\017\2758b\242\274W\210,\274\325\224\032:\202\177=\274\204T\230\275\354\343\352<\265v\277<\317\236\343=\201|C\275\331\251\275<\250-\205=\227!5=\322N\376\274#/*=\236:\022\275\206\212a=\262\207\007\2758\256Z=\277\036\313\274c\036\230\274n\353\033=X\367\264=V\271\354\274A\257\236=+\223@\274\312\255D=T\312w\274\362\335\244:\033O\337\274W\342\302<\373\250U\274>\266\177=J\t\213=\006u\330:.\030\217\274\023\227X<\317\005\254\274\223>\001\275\222*\346<]Vu\274AN\024=\217\007B=\036=#=G\017\313<\263o\"<_q\006\271#\335\006\2753\005B=\207\236<;3\255\327<\016.y;\355L\031\275\275\006\302\274\255t\013=\377\301&=\024\241p<\002\213\214\274\225\030\307\275\323\242\234\275\237(j=\321[\215=\262\327{\27290[\275e\034\213\2753[\222=~\365\240=\215\014\341<\232\321\000<N\020M\275\343\204\037;\206H\362\272\375\360/=\346\233\216\275W$\007\274k~$\275(\206\307\272Up\014<\361\356\242<\r\016g=\311\250\357\2734\265\225<\022\347\324<\263\021c\275q\350\245=\216\352\215:\223\035\025=\236\315.\275G\231\353<\021\302\005>aU\246\275j\223\231\275\2078 \275\343\220\026\275+\177\350;\221W\036\274o\336\362\274\356k\252<O\247\316\274\007\235*\270\\\356\357<(=\235\273\250\014\220\274\266\tV=07E<\302\251\313<\330\276\214\274_`\225<\214\264\321=\016\374\214=4j\361<\275\355\335\274\036\2409\27538\324\275I\271\310\274e\340\340\273\303\2540=\205\316c\274\305\014\002\274\224\224F=\345\t\013\274\244p\221<{\364B<?\247:\274\360Yy\275~8\017\274n\245\366\274\254\270X=\2478\320<#\376t=\271\0054\275\375\265\031\273K\344:=\213H\225<\367Q\037\275\247\277\277\273\2134\001>\232-f<\214S1=\032Uq\275\220\367v\275\237O\367<_\021\232=\341;!\275M\240:\275\327\247\262\274\037:\377<\257\203\365\274\245r\027\275\261\344\270;\362o\304=\351\360\211=\033\226\367;\000N\031\275\331(\213\275\037\177A\275\006\377\353\274\337\007w\274\256\361\034\2745mC\275<\377)=+\326.;x\2011<k\341\316\275\013\2772<O\234\351\274\031j\200<\027\251C;\327&0\274\211\"o\275\374\217\327=\032\2757=\253Q\204<#\002m=>)\r=3\223\r=\247I\210\275\201`%=\000K\214\271{\203a=`_\257<r\273\344\275\355{\246\272i\365D=\211q[<K\372X\274$]\350:,\361\024\275\271\303\234=v\360\204\275\336\214o\274\273\177\016\275\3121\275:)o\335<\257\036\210=z?\226\274\030\257\240<,\336H\274\323\233<\275\203\275\033<\2064Y=j\220\267\272\360\000#<\364\341\217\275\244\265v\274B\356\002\275\313\026\312\274BV\005<F\341\202<\221\313\207\274p\267\022\275?\204Z<\203\346n\273\375\270\375<E\207\225=3M\000<k\3730\275\013\244S=\273\201\320\274\005\036D<|3\206\27585\r\274\204\3615=/OK=<\221\235\275\024\027\203\275\216\246\374\273\2230\327\273\365n\357\274\022U\002=\331\232r\275eu\263<\'\243@=\276+A=\360r\025=\321g\023=\030\321B;\017+\262=\341\0037=\231\311&\275\220\226\336:\337\305\034=?a\214<\225\333N=#\231\004\275P\351\032\275b \256\274\256\342/<\262\342\240\275\316p\226\275=\013\217<Q\204\275\27443\211\274\374\232\010<\226?C\274{>\240;\203J\216<V\"\331\273\335*d<d\263f;`\016\373;\322\3053\273*\372\355;\271\305\276\274\232\212\236;(\021R\273s{\203=\264\337\304\274\021l\021\273\372T\354<G\267\246<v\327\263<e\3762<B\262\261=}\345k<\273\325\007=\246\030\025=\007\222\361\275<\333\034=\002\3746\274\357\315o\275\036\315\314\275\207\037\255<\\]i<\232\001\262<\214\262_\272\273\366<\275\022\370\003\276oi\376;\350y\375\274P7\014\272\222\357K\275\327\350\242\275\317\177\222=\342\205\247<\300\272\372;)?v</\251~\275\365)\036=\341\026\030\275\004c\262\275\251o\205;\335\207\"\275a\325q=\254\270G\274\254\325\035=b\036\252; \\\234\274\242\373C=\223\303\342:\255\032)\274\307\'S=\026\346\321\274v\357\254\274\322Ve\273\016\351P=c\237\217:\206\360\374;\222\177G=\364L7<Su\004=\335\236Q=\327kX\275qG\266\274\274;\236\275_\034\377;\024\311\377\274\240\ng\275\242\032\201=O\310\324:\216!\265<\327\242a<m\277\312=\261\301)=t\303\212<\030\3328=\353\\==\210\256\r\273\341\210\203<\232;N\274\035\313z<\272i\255\274\224\257<\274\010\267\237<W\375\244\275\241\263{\275\275I\026\275\250\210\217=-T\240\275T\3579=iw\264;\240\302P=WL\\\275\215\334\224<\027>l\275lc\t\275\310\251\026=Q=O\275\373\365\264<\307\253\364\273E\304\252\273\354\333\355<\017\327\326\274\215\004\024\275l\"l=\351\241\264\274\003j\233\274Bd>=f)\245<DXz=\247\327\265\275]\333\223\274\361Q\025\275v_\005\273\375}\023=\346\213\024=K\330\033=\220\215\207\274f#\332\274|T\227\275\026\375\307=S8\031\275\210\361\255<\311\314e<M\032\245\275-%\211\274\032\263\303\275t\206\242<\207\366\023\275##\223\274 7\221<\321)\'\275\250\r\376\274)D\003\275>\267\212=\363\207\373\274b:\255=rP\343\275\002\\A<\212\345\005=\213\243\304<\023\034\271;\357Y\340=\301\374i\275\321\232\322<\324\353\232=\223x\216<\323R\365<\263\302\343\274\342A\247\275\217\267C<\343\033]\275`o2\275\372\024b=\265\200J=\310\301\253\275\356\214\001=R\312\255;(\021X\273\267\250\370<_0F=uXW\274\261I\301<\204\367\t\274\212G\327;\275\250\000=O\201H=\374\333 \275Q7\232\274Q\002\217\274\252\327\212<\313\374\277=\270\026\213\275h\306\003<\270DG\274p\330,\275\255\214d\275q\023\303\275\362\327\224\272\302)\031=\037\217\346<\027\210\244=S\345_\274\010\270\203\275E\355\366<2j\315\274\332rX=j%\027=\301\307\020\275{W\254<\265v4\275>E\346<\266}l<K\"\226=\374\311|\274\242)\303<R\323\014\275\221\317\305\275Y:}=#k\236<\r\033\010=\037:\224=m(\252<#\317\324\274\374\177\343\274\304\003\334<*\226\311\275]\257\312\275\212\311\263=\3719\200\273\303\323\036\273&O8<s\241\225\274\220\024\362\275\245\0237=x+\371:\373\200\351;\276\256H\275\0319\325\274\226\033\237\275\000\376U\275Ih\267=\360UB<<\344:\275\240\034l\274\302)\251<\315\007;\275~\277\002\275\320Y\260\2732\347#<?\211\335;\232\215\355\274Q\002N=h\324\270\274/k\365;\263\n;\275R/\306\274\275}\272\274p_\275\273z\310\032\275\300\307\003\275}w\257;#\252\314\272x\"!\273\304\306]\274\016\276\210\274\244s\361;\224Os=%6\014\275\245m\033\2753xL9M\315\210\273\235\035C<C&\333<R\230\217\275\273\255\202<iB\361<Z\264U=\031\260\315\275\363\273\242\274&\017\323;eT1=\333\344d=\021Z\237\2746\261\013\275\315\226C\2757d==|\245\020\275\200\'0\274\034\031\037\275\222&\331\274\363K\014>\223I\"\275\250\357\363<\037\345\'=\241\272\245\275\013\013i\274-\371\034\275\376\235\357;\340=\233=\215\006\363\274A\235\374\274\220\234(=\240\321\373<{\243#\275tQ\320\272OM\220:Iz\325<\227V\264\275\302AM\275gV\024\275\226\337\364;(\373\341\274\354\336\214<\233$\024=!\213&\272\260\366\203\275MS8\274\330b\362\273\374;\024\274\347\344$=\032K\005\275\371\262X<I\267\344<\035\274\034=p@\242=\257\210#=\245S\033\274\342\023q=\330\210;\275\316,\363\275\270g)=\035b\211\275\246K\242\273\375\274\276<8\\\003<q\241^\274<\212\314<;A\023\2754\037\007\276R;k=Z\214\240\274\357[\032<\262\356\034\274\320\235\'=\302\222\351<\356\256\'<\314\227B=\306\345\231\275\376\327\004<\245\225\342\274L\236\037<\216\022\254\274]\374\227\275<\206\023\274\306\274f<\t@\222<\\\002\223\275g$;=\007\252\363<\005\265\033<\rM\225;\342\014N<a\357M\275\330\322\017>+\371\003\275)O\236<\245|\000=\177,^\275N\333 \275uF\246\274%\017\231\274[\024\214<\220\222\247=8\322\243\275\356?\025=l\211\027\275\330\2051=D\'\363<e\254\272<c\265\214<\311\327\227=Z\374\033={\336\2529\000\274\2346\2126\202<7\031\250=\362\357\324<a\342\217\274\316\341[<\013\t\217=~_=\274\301\312\030=\314\027\264=\254\212\321\273U\237\216\274R8\203<\264`B;\377\264\234\274q\317{=\275\324\246=\356\026\275\275X\255\024=\224\310\327\274a\377$=\3300\032=\370@\251\273\355\263\250\274\273\207\306<\376D\264\274\350\3775\275\215\266\026\275%\311{\275\357\324[;\026\232s\274\373\360 <\243\314O\2756%\010\273KD\234<\246\007\314\275\242\267R\275\332^\271\275\025Q\271\271\031o\370<\375\355\036\274t\345\343\274\334\017\r<\032x\240:\256\'d\274\217oo\274\260\307k\272\2659\255;.\337\216\275\274\324\223<\227C\036:\365\r\302\274NV\302\273\243\033\257;\005\247\211=\267^z=\327h+\275\374I\022\275D3\360<\276\2725\275\366\316_\274\261j\335\274_\023W\275\206\210\207\275\307m)\2749.\257;2\244\251\274\274\330\n\274\274L\356;#\342\017=\363\254\303\274G\257r\273\325\236\231<\371\021;\275\000\244\270<S\2329\274\375C:=\302e\210\274\272\360f\273R\000[<\nz?\275U\340\025\275\225r\001;\351\251\223<\364|\022<\224C\002=@\347\244;\217G\213<\007\276\311<qk\003\275\260\001\033<\2532\235\272vh\031<\330\235\214<4v+\275\3546\007\274J\325\246<\232\235\264<\274\345\230=A+\322<\303\316j=\374\255\210<\366\361p=\330\206\251=\036\352\257<X|%=\004d\305\274\366\034\251\274\224-\226=\253O\364\273Lt\022\274`}\005=R}K=!u\206\275\336\366\2717\310\2012=q\232\227;S\2446=o\225\003\275\032\366x=C*i<\260A:\275\230\256\177\274\256\361\233\273\375\2165<\206\303\232\275\243\304\014=\306ZP<k\n\210<Jm/\275\021\372\244<\215\376\034\275x\327\373:\254\037\233\274\207\276\263<o\323\025\274\312d\277<c1\371\274\233k%=#V\242;j\324{\274e\n\013\275\232\237\017\274\211\026\222=\377\363\335<\001\210\232<\226yz;\026(\2768\006\352\265=\302\261\266\275!s\000\274&4\364<\006?\024\275@|\202=\020u\217<\240n^<\314\376\207=S\240U\275\213\315\334;\033\324\010=1\343>\274\004xc\275\277+J\275\2162\346\274\212\216\370;]\027\036\274\017\344\231;g\263\256\274\231\276\247\275\301\t\267\274\2303\261<<\331\244\275\034\022\207\274\306r\321\274\037\320Z9\314\301z\275\243c\014=\355;\327<\211\n\376;s\304\213;\371I\254<\213S\000\275\025\257\216\275\250\010\214\274X\363\241<\335\026#\274G_S\275\ru\036<\354ac\275\312\037\262=\005\230\341<s@\211<V\2711=s\310V=\261\234\000\274N\n\t\275@\355\226\275\333@\241\275B\370\245<P\370\215\275>\367F\274\010\013\312\273\306Y\327<\\0`\275\0269\316<\215\017E\275#W\333\274\016\227\326\274Z\210=<W\342$=9\334\366\275\027\230\275=|\345{=\370\331\t=\253\346(\274\216\216\003=dfG\274]\257\305<\375k\n=\330\036\257=\230\nb=\236\212n<\210\207\354\274\033\2324=\302\357#\274!`\005\275}P\240<\217S\264\275\304\221\360:n\303\001=\340\'m\274Q*2\275\331p\037\274\202o\215;\254\322V=\260\335\025<\236c\260\273\305.m\274`\235K\275\260\317V\275\345\025\230\274\370c\224\273\315]b=\310t5=\360\306\007=1\021\021<\003\026\210=\371 E\27454\027\275`\300A\275l4$\275\177\016F\274.p\001=\276\004o\275M\203#=j\226^=#t\342<5\277\245;\366\337H;l\212\213=\333\362\356<\217(\000\273\027\251 \275}xi\275Sxx\274\252B\026\275\253\000\356\274|!\263\274L\265\036=gIE=\367d\270\275\373\352\244\273B\322\257\275x\376L=\276h\013=,\036\371\274\335 ^<\320m@=\376\323`\275HF\377\275,\177\205\274\223\372G\274\033U\316\274\374\362\227\275\2731^=e\254\221=\276,\251\274\250A\361<\216I\333;0\017\325\272:H[=\374\367H\274\355\017&\274\275\014\326\274\337\257\336\274\367^<=P\"\264=\273\363$\274`\032\006\275\277\\n=\204\372\276;\253\364\016;n\354\225\275_o\222\274\324\034\247\274\277\223\201<yP\247\274\211>A=f6\020\275\214d\212:\375\207\216\2749\301]<\221\245\223\275pB\272<N\235\214;L/\033\275\2730\343\275\350\366\215=\233h5\275/\\\024<\034\347\243<\303\232\024\2759\254\204\275\2018\'<\204iM\275\367\023\310;7h\342;\024M\022\275\023U\352<\202}\233\274e\304\257\275\370b\265;Q\002\016=\371}\311\275\331\253\225\2741\226\006\274\235\210\353\274V\352\340\273\263\036\024\275P\002\210=h\267\323<\234\246\016=\313\321R\274V\204\207\272\237\024\235\275\300c?\275\227g\373\273\367\316\327<\222\240\342<\024\005\205\275\206\345\371\273\245/\200\275\235-\037=\306f#=\340\206J=ID\002=\243X\223\273\360\307\333\274\3367M:]\014\\\275\367\001\325<\342\347\266\275J\367\273<>O\225\274\205\345\204\274\311\233\225\274\375\326\030\274\217`\360<\312Q\302<\254\212!<\336M\024\275p/|:8{\242\274^\332\325=\311\241\302<\323\257\227=:df=a\363\206=\314\230X\27427\361;\224\2433\275v\355\356\273\225r\211=\337p%\275\240M_=\334\247\264\272Fo\024\274\000\033\237\274\232\023\005\275\353\330\237=\374\025\262\274\2348\304\274\3610!\273Ob\302<\327\002\220\275Z\323L=\232\374?=\036\205\223\275X#\225\2738\216\327\274OR\221\274\273\341\021=\266R\237=\272L\202\275a8\203\275\366\275I\274B\230*\274Xy\200\274\277\nI\273m\224(=\027\202\214=e!*\275 \013[\275@\006J\273\336\224\016<\036\275P\275\276\371\003\275|M\020=\276\360>\273\241\3418\275sQ\242=\211\316\027=t\377\210=\343Hn=\261=\213=\201^u=w\\B=\242\236\200\275\277A\252\275\'\256r=.\345\026=z\212\231\275\333(\021\275\034\313\022\275eC\350<\200\2744=Q\230\376<\024\373\027\275\366\331>\275\335XK=\\\307\324;\215\003r\274P:8\275PO\226\275\001\223\222\275\370\231{\272HB\236\274Z\202\323=BJ+\2757\265\312\275,jg=C\240\337\274\207{\262=\350%\327\274\016\030\027\275R\232\022\274\343\277\325<d~\206=Mr%<\371\331%=\272P\324<I\373\216\275\027\3163\276\377\312\222:6\2116<c\201\001\275U\307D=\341\254}\275\273\365\271\274\231\205S<]p\034:\346\321\035\273q0\223<\273\257d:\302\252}=\005AI=\330\261F\273k/\265=\032\324h\275\373$\356\274\236\036i=k\331\256<at><4\2260<R\326\341<M\"\033=\263\021W=\257g(\274\314\307\325<X\301\364\273\327A\316\274nm8=\004e\033=\014 \030\275\225\021\217\274=n\260\274\212P\273=]\3120=.\343\223=<pF=\213\266\025\275e6\326\275f\316\233;B4_\273\337y\030<\341x\257\275w\340\200=6nA=\232\350\254\274\242C\006=\200yI=(#\341\274z\372\204=\253/\256<kE\225<\307\305q=\033\341\303\271\273@\201\275w\205\256\275i\247\241=\010\301\032:\314\250\352\273\177\234\311\272\261\237K\275\223\222\037\276\266\027\301=\2214\307<E\224\022<>\246\236:g\356\371\274\'\201U\273\376d\360;\346\313\356<\350\360I;\200\361\264<K\306\013=\262\203-\275\313*+\275\236\245\271\274\245\202\263<\321\224\312<6\273\307\274\231\206b<\360\274\225\274\212\211\266;\322\253\324\274\031(\222;x\275{<\033 \203=\t->;\255C\255\2753\016\355=_\r\000\276\377\311\006\275\022M\200<\254c\313<\373\247\225=\251\355m\275\027\020\204<1%S=\374\211b\275u.U\275\350\302\201=\220w\276:\353Z\343<1\354\024\275\230\247\371<\341\320\306=\034\177E\275\202p\010\275(A8\273\241XX=\201\312.=\233Z\n=\251\236\005\275rRO<*\232b<R\006Y\275\374\225Z\275\347n\031\275B\326z\274\022\365r\275i\310\247<?\320\310<\027\246?\275\252\361\277\275W\224\346<\305D<=oR\234\275\257s\273<\013v\262\275\343\032\320\270K\210e=\2713\265<v{|\273\2009_\275\352B\253<U\360\237=\374\377\205\2749 3\274\272u\t\275\025\225\357\274\023w\032=^\013\217=&\376\217\273!\230*<\021\3461\275\n9\240=\203\326\031=\312\254\237=\323\316 <Xo\236\272\311\210\260\274\235c$\275i\310q<J\271%\275B(H\275\344\005\370<\263\n\021\275\326\233\003=aW\035=}\035\221;|H\274<\361&\025\2744\365\016\275z,\250\275\360\017]<j5\256\2741\337\245\274\035\322\304\274\363G\344<\204U\217\275\3444\260=\261;5\275\010~\'=\373v\344\2738r\266=\217\014\013;\357P\277<\253\330\017\275\3438\346\275@\024\325\273C\213\265\273*\211M<h&%=\203\334\205=t\261G\274\326\372\213=\236\347\273=\374\\\337;\177\332\317<\334\030\237<:\321\256=\034h\351\274\221\266\211=\256 \244\275\t\365\023\2751<\242<\210A\013\275\021\334K<\301\244\213\274\266*\207=);\274<\260\252\222\275\'\344V=5\347c=~NX<(x\214=\250oo=Z\370\030\274i0s\275\370\211\000=\300\224=<\271\002$\275\245<\224<Ez\371=\314\342\347\274>t\220<\007\214\347<\033\252\027\275\233\t\246\274\031]\\=f\225\027<$\350\262<>\230F<\232\221Z\274\375\250<\274\200\3346\275\n\232~\275l2\213\275\365\373\232\274:WD\274}O\023\275=7\005>1\240\003=\013\224\025<\301\267\022\275\277F\375\2722>\315:\216\n\364\274J\330\324\275l{\014=\250H\264<\"\345J;\027\253\363<\305\264#=i\305\256<\006p\321<9\323\213=\302\344\215=\007\016V\272\2761\370<\342\027\265\273\217\315\000\275k\231s=! t=\352y\376<Qm\262<\245]\213\275\253(\324<\271\321&=\244\371\213=\177\022\300\2747\021&=j\240\026=\352\243 \275\214 \325\274^\270\003\275V\024\263\274\240\317\205\275\307\204J\275\340.\007\2758N\362\274\r\024\357\275nG(<#\271@=A\313G\275dA\223\275\276\271\017=\000\326\300<e\334\001\273\303\272\251\275\342R/<\"\332\211=\216yY=\032\247#=\274\303U=/\314\'\274{\263\023=\327W\316=$3\006\273\205\243\264\274\216)\203<\211(\211\273\320zx=\030\006\305\275pY\233\275\016\307\275;\351\327N=w|\026=\336\034\021\275\356\2308=\025#\351=k\361\207<\017i\347;\335J\251<\227[u=G\354\314=!\230\225=f\254x\274\346\200\333\274\027\276\367;\310_=<\247\024#=p\235\226\274\302Rd\274\002A\337\274\334<\376\274\366\025\215<Q\016R=\017\370\025<_\306J\275t\246\r<\224\304\023\275\242\263\371\274\2044\261\271\332\222G\275;zl\275}!^\275\020\221\256<eH0\274u\313\221\275u3\305\274\025\244\313\274L\363\002\274\342\260g=\036\313\033\275\222?\n\275Q:\225=z\023\200\274\'\254\000<\203\274v\275\260\271H\274\213\0248<\204\024M\275cu\205=\t\345\234\274P\342Y\275\334&B=\335\007\002=W>\013;\253\005a\275p\326\n=\352f\211\273\241\317p;:\254\223<\275\013\247=\257KT=\353\300\330<\342I\270\274\262\252\212;\374\377\336<\026\251c=\232\245\241<\351\374\265\275\365\330\032<\373=\212\275zor\274\241Yk\273\n\'\221\274|{\"\275\357\346\262\274\177*_=\225<\310<\344BT\275\376\031\216<\307\351\032;\244\351\032\275B\tE\275X{O\274D\"p=\376\302\006\274\350&X<\'\036\265\274\014\374.\275\320k\352<\304\267>=\213\237|\274\265\357\314\274\\\342\031\274Q\333:\275r;\003\274x0\036=\021\266,\275\365\035\t=\303R\016=\347m\205\275\351\336\232\274>\332Y\275\033\003`\275\003\3340\275\217>\217;w0^;\374\014\033\275&Ls<<\377\373<\003\232n<\r\0105=\327C\002\274\311fJ\274\014\311\357\274\327\'\350<o\265\202\275\263\002~<\002m\217<<\317+\275\021B\306\273\245\227\304=\334\017\007\274\301\376\305=u\352\221\275\303\217\217=\234#\205\2745P%\275\272\013h\274\316\003\006\274\351xo\275\315\324\214=I\314\330\274\361A\241=$t\353<\003\335\212;\365\3026<+C\374<\024;:\275\230\005P\275@\241H\274\327\177\220=\025V*\273\204^\232\2748\372)<#\332\255\2731|}\275@d\033\274W\274\024=\224@\023\275L\325\275\274\302\nS=.~N=\036\013\024;|\213\n<\375\301\253\274>Z\325\275\024\325\213<\265\274\316;\017\241\026=\201\263s=W\375|\274\212\333\224\274\000I\204\275\033\256\301<\177o$;Xr\314=[9j\274\321a\207=\003_\255<\250G\016\275~}\221\275\313p\221\274\352\"~\275\257)y=\323\304\025\275\354\036\004=\304\235\260\275Kz;=\352K\321\272\221-2<VN\236=z\'b;\210X\331<\002vY\274\235\374\272<\361\251\257<\356m\013\275g;u\273\257]>\274)\200V=\344\273N\274[\246E\273\234\310\006\274w\276\220\275\214\246\260\2747o:<`\326\r<\345\376\226\274\223\2034\275\337\037r=\222\346\237=k2\005<o\204(\2739\236\240\275f\252\214<x\317*\272&\250\311<\227\373U<\203{{\275~\005\214<l\262\214\274Tss\2738\263\276\273\"y\350<\3527\331\274\323\347\240\275\236+d\274W\036 <\020n\342<\3743/=\2139\217\275\3747\032=\346\326{\275\311\031\272\267\035\316\026\276\r\304\373<(\030\353\274\017\201\231\275t\374\005\274S\313\006\274\315\331\216\275q*t=\210\323S\275\327=2<\377\3615<\362\026D=\030):\275\025\035j\274X:\235=w\215\014\275\013\276\037\2752y\022=\347\332\230\274s>e\275\274\211\320<\362\326\n=?\375\254\274:9i\275/R\234=\345~9=w\371\202<\0169\206\273&|O\273\276\261\205\273\'\230\232\275n\027\345<\031\376\034<\236\211\272<\212\354#<\215\205\254\275^\247\351\274\034\002a<\\\372\203\275\013\320\235\274z\254\006=\231QM\274\2035:==.\245=|\327\320:\357\325\276;m\222\321;\336\005q=\277\350\314:d\311w=NK\243\273Q\005\001\273\334\002\036\275\266\033\302\275\027\327\'=Ps\006\275\034x4=t\266Q\275\037*\243\274\355\377\227\274\001\242\371\274\356\373@\274g\005\337;\234\226\212\275^\316A=\306\344\232\275\320~\345\274n&\027\273fd\225<\t\022\242=\314\237\315\273$j\274\273D\340Z\275\007\275<:\305\\B\274\345\nJ<\34278=\263&g=\031\367\001=\222\2717=0]\010=8\354S=\014S\222\274H!\366\274\005\212:\275\360\302W\274:\001\257\274\224\372\335;\016m\006>y\204*=}}\261\273\323\366\261\274\216\324\271\273:(\204\275\031\241\363\274:\334\366\274y\t\200\274X\332\225=\206\352\204\275K\346\330;(/k\275HPv<~$\201\273\370\321C<J\356r=\244CZ\275f)\032<\032\257\371;\270\303M\275\217\013\300\272\222<\225=\246\301\024<\024*\377<D\314\234\275f\270\226\275\323\277k\275q\024C\274\311t\207\274N\020\372\273\034I\203\2752\242\217<H\016#<\010n\3669\271\302\267=\206\334\347<\214\nH\274{\243\350=\315\244\233\274\314\357\346\275\230\'\357\272\255\036\2719\302\n\030=?s\201=\243=@\275U\326u=\377\214\244<\261\261\343\274O\221\261\275b\022\r\275q\t\327\273\200\033%=\267\312\375<\307\372\327\274\271j\227=\035~\000=\303\037\242\2747I\005\275\340\017J\275\301\352\365:\245lb\275\340\362$\274\013\356\266;s\034\210=f\222\375\274\n\261G=1\213\017\275\005\035\237\273\255\220\366<[8\265;%C\261\274%[9<\254D\267\274\200\246\304\273\341\344>\274\220\227\373<\277\001<\275\302 <\274\345\221\360\274\330\267k=\034\264\357\273*\232\212\275$\014\304<8r[<K\342\375<\2135\355<\227\007\307<\rB\034=`\361\215=+X\246=\007L\344\274q\213\206=\272\302\237=\001\336]\274\233C\022=\026h\247\274\021uC\275zT\\=\261Iz<U\215+=\344IO<$\202\003<\003O\037\275\202dh\274Hp,\2757\245\t\275\021z\315<\261?\276<8\200D\274\0134\374\275\017U\033=\322\252\322\274\363\343\030\274>\217\257=,\356\242\275\333L\220=\345\037\271\273J\327\325<\031_t=)\302\212\274[\373\200=\020\276v=v\3175\275o\3775\2754J\246\273\254\007\021=\221\356l\2755)\220\275\266%Y\275(\324(\274\242##=(\372\310<\267J\016\275\037-\037<z\222\005=\341\361\243\275\030\tb\275\031\263\371<\375\005V=\375#y\274\364\0102={\033\340\274$v\355\2738\274\n<\0072;\275\005p\210\274\002*\237\274\351U\207\275\334\276\225=\242\013M=\243\241\"=\326\3043;\253\341\246\275\322\205\035\273L\324\'=\217h\256\274\330\007\245;\366\002\001\274R\300w=\273\371%\274<\313+\274\235\3107<\242/\304<\222N\347\273\265\325\027\274\216\312\232\275\230L@\275\326\0310= \234]\275\3639\231=\247\r\020;\355t\203=\244\343\247<=\355\354\274\224T*\275L\375\321\274`\203\211\275?\243J<YX\211\274\302WP\275O\304\203\275\345D`<\341\022\211<\362\327\374\274\236\036_<4)\036=@\006\205<\333\262\276<\232\371\230<\305\364{\275?j\357\274i\244\370\274\370\244\201<\232\370\007:f\211\366<\311R3\275\023\344.\275\252?D=\221\016\001\276\014^e\275l,v\274V7G=\363(\\\275\277\207\211<3[\262=%,_\275v\200\n\275##\343\274 \212\346<\204\242\010\274\374\344\002\275\022\3213\275\356+\020\275\274(\304<\026\223\310\274\263\313\207=\305&\375<gRy\275\207\206t<\301Q\030=\272[\276\274\020.\027\275\300\332\327\274\257\245\244<\237\017\237=\t\276\014<\237\007\377\273\004s\027\275\355\313l\275\235\206\273\274\337\326*\274?(\277<\376~\021\275J;\345<\224\221\037=\274\206\326:\371\3462\274\n!\210\275`d\367<\240\337\014;\246\304\024\275\306\251\277<*\311T\274!\3665=5r\223\274Q`{=\364\r\377\2719\030\214<\326t\317\272\357F\245\275K\214\266<\034\240\230\275\213\262\210=\240^\252=\272&\263\274S\376\261<.\273t<\177j\340=2\\W\275\373%\314\274{[\207\2758\357s\274R\224|=\252\313\031<\232\010\201<\302<\335;G\221\327;\261\205\234\274l\247Z<\320U\325\274\273\317\001\2751\2636\275\2045\304\274yr\252<b9u7ZY\264\275e, =\367\270\246=\016\255v\275\212]\223=N3\013:\326\310\243\275s\324\371\274z\305%<Q\274\262;\217eC=\323\200\263\2749&\331\274\210\311\310\274\2705\033\275e\324\221\275\002\030\204=\021\030};\315\"\375\274\277\275\210;\302\010\2749~\2639=4\377\213=|f\201<}\221F\273\367\303\006\275t\220\242=\335\242)=/z<=\025,\316;g\360 <-\2534\275e\227\026\275&\224\330\274q\357\222\274g5o\275=\373\320\274knI=\267\370>=\2150-\273\364\366p\274\346c\266<\025\260\277\274\333\364/=8\023\252<f\224J<\307\005\325<\277\3531=\360\t\257<p\272\332\274z\266\262;\tD\222\275\372\003\323\275\230\362\335;\310V\344<`\007*\2734\224C=[e\266\272\377\321|=m{\n\275\025\273\247\273\rZ\273;\240\346D=R\322\344\274\3002\202=U24=\362w\014<\021,Q\274A\026\275\273\315\304\232\275\232\347\354\274\006\224\007>\366\030\301\274OJ6<\323\210d\275>q\300;\017|O\275r\002\270\274\304\317\017\274iE]=/\177#\275\266[\233\275\315(\241\274\270T\242\274\006\363/\274\352u\'\275/\236\036<\021u\204=\014\337\234=g@\257<y\323\322\274\025{\310\275\345\263]=\310\375<\275%\366S\275r\032\270\2743KP\274\020p5\275\374\377w\275/\344\366\274!9\245\274\346\302\301=\255\204H\275\331\325\023\275\341\235\356;\314\310P=\004\227x\275g\276\231\275\025P\035\275\333\340\230;b\213\200\274\267L/=c\3628=\001hM\275\3404N=\235\375\010=\007P\224<\213\341\252<\355CL\2756\230\232\274\000\036M\275L[\005\275\310\032-\275@\301\315<1C\'=v\020\210=\211\330*=\244\227.\2757\323\201<)m\373<\201\253\224\2759\267\363=\231\001\204\272_\323\0019}\226\204<\254m\336<\237D\306\275\002\314:=\224)\207\275\027hC\275x.3\275\\9\376<\363\2745<\014\214\334\274Q\276}\273\305S\325;\342\n\244\275\222#\203\275\273\262\210\274?\240\267<\301\351\241\274\207\227\021<\301\022\037;=\267\251=N\216\250<q0\r<\322\267\335;R\023q\274\363\362\245=\3169\n=\262\2223=w\270\226\275x\206\371\274\010\246D=m\231\224=]\327\032\274\275VT=\020\317\324\273\230\0233=)sq=\027\323\307<:\350v;g]\032=\300\201\223<\301\031V=<\246\323\274 \243\343<\340$r\275\\K\225\274\260\305\310\274\225\372)\275\3000B=\340\017\312<t\260\275=\257A\201:(`\001=\310\252\275=\004/\207;\311v\003\275d\027\000\275\202\314\216<\363\220\206=x\312\316;\223(\303\275\215\245\320;\372=\265\275c\205X\275\361t\321;\036wp\275\177\212e=\310\235\214<+1\256\272\277\010\373<1\334\257=PoU\275\242\307X<\211\005\266<\337=\324\273~\3559\2751sC\275\377\221\361<\025S\252=.\345\245;\204L\333<\245\232K<\314\025\363\274\245\377\243=f\331f\273\034\036X<D\227\265\275\031\216\210=\336\262\307\275)\276\212<\327p\200<\265J\260<\212u\010\273\272\001\022\275\022\346\346<\027P\322;E\327M=\324\347\226\275\316\036\341\273k*\314<_w\322<i\327\342\274\330]\237=\nL\354<\273\355\323<\334\356\252=!\020\252;F\302!=\206.\330<\010y\221\274{:\202<\365o\327\274\241\3702=\214\361\203=\340\016!==\254\222<\244E\207<a\035B\274\264\325\216\274NK\r=\310\'\271<\353\260\275=8\243&=\373\262;\275\003\343]=F\317\234\275\375\301|<`\316\312<R6T=\007B\271\274*\215-\275\023\354\206\273k\n\212\275\345\277\235;\355\321\004=\245\245\235<w\203V<\362F\r=J\215\177=IS\252<{\372\242<\264\250y\274r\316\177\275\305\215\333\275Z #=S\nU\275lq\222=\343\216\034\275\250\244[=\266\314\256;\240\002p\274h\203d=B\3303\275\330\266\233<pz\373\274\312iK\275\242\005\267\275F\221;<\305\353\030=I\353\212<\213\245\324\274P\2455=P{\013\275\275\267\264=\212\026G=\334\366\251\273\332\321\212=\246\346k\273\024\333E\275R\301\264<\323\314\367<,\221\313\275\007\036\226\275\371\321\000\275\254\031B=\377\003\213\273]\034R=B<d=P.\234\274\316B\274=\344\227R\274\333\223\177\274\201\340\006=\350\226h\275\202|\177=y \026\275\353\310\257=q\202\006=\214\021\211<\247`\213=>n\017\275\r\323\005\275\313\004\334<\325\"p\274\335\024&=\331\217\366<Wy\004\275r\211\004\274\266\221\330\274fj\364\274\035\212f\275&\264\317<M\265P\2755N7\275\335;N<u\037E<\010]\374<KH\332<\254\315a<fN\212\275\274\356\373\274\225$8\275\243t\317<\016k\231\274\343{\003>\315\3732\274\021\371\210=\027;?<\212}l\273\373\224\033=t(\214=\222mN=\275\266\276\273EG1\274\335\3047=\204\366@\275SO<\275\r\327\004=&\252\337;\325m\2059Kh\320<a\367\363\272:]H\275L\303\234\272\201=\222<\240l\005=e<^;HA\217;\354\225g\275\000|\n=)\016o\275\2541u=\234\232\3629\355\262\343\274\2654\240\274\266\355\004=.\256\213=0\000\206<\237\335\321<\376\364%=\237F\320\275D\376\020=\306L\315;\357\036Q<E\217\210\275\020\202\222<@\210|;$y\353\274\035\310\247\275\300e\036\275I\255\033\275\365\315\257\273\032{L=\355Nj\275\311\317h\275p\016\006\275m\303\310;\nc\251\275\000z\244<\312\211|=3r\264=\217\252o;\341\342(\275\314\010\305\274-\330\363<u.\261\274>\227\354\274\274\353,=\233Q\025=\336\262\331\274\211I\334\273P\347\330\275\302[\301\273\001\263\250\273\370\'+\275G\026\022\276\346\255\204<\223\373\336:\344\020\365\274\337\255\'\274(\321\260\274\253\230\202\274\306a\'\275c\274#=|\337\262\273N\034k=\230\200\234=6^7\275\025\036\351<\004\313B=\275^3\275\230\272\376\274\252\304\235<Y\031\225=\020\"\r\273\336\232\312\274i,\316=\267\rA=\255Q\010<\222\221J\275\016\325#\271\216(\326;\016-P=\321\355-\275\024\311,\275\304%\277\274\241\320\240\2747\253\323\274\220\313J=p\225\230<\234B\270\274?\314\025\275\374\037\001;6\307\262\274\251\020\254\274g\224)=\202\260$\274\221\333J\274\314R\t=\217p\207<\337\035\330<:\017\200;\220\'\033\274\001tS\275\245\n7=\\)\013\275/\001r=I\032\215=\376\225(\275\201\264O\275\370\325\004=\206z\231\274x\312;<]>Y<\231S\035\274e\266\203\274\002<,=\370\220\316<\200\265\214\274\204\276\240\274\376]P=\\\205h\272\",^=>\236\274=\352\203J\275\300?\327\272<h\023\2753\032\341\274\244\253|<\177=f\273\005\221\351\274\347\014\220\275X~\237<\365\341@<\202E\307\274%\022\326\273\222\nM<\201\235\262\274\343\300\200;\230z\211\275\356\213\352\274\267\214+\274a\226\376;\020&\250;B<\327\272\024\216\227<m\217\324<\212\264\260<\246\267\305=^\374\n\275\272\273r\273\276O\007\275\006I\013=\334\233\207=\351[\244\2745\225\273<W$\313\273c0\255\274(E\220\275Z\023M=\265k(\274[\0369=Gv\021\275~\323#=2*\265;\356\036B\275\347\332\243\274\222\271\007\275\244\260\341\274W\250K<\323hd\275S\312I\274D\'\214<)\205\036\275Lf\036\275\200\3255;>i\304\272\364\240%\274\376\001/>\227/\211\273(\322\"<\214\330\266=\302\324\246\275\254\3207\275\264\355}\274\023w+=hp\262=\235\245t<\343#\r\2759#\202\274x\213\260;\033\314I\275c\245\200<\223\303{;\326\241)\275\363\037\312=H\032\001=\314\317\275<K6\226:Fg\200\273\317\326z=zm\321\274\212\317\311<\313\265:=\352\177:\274\233I5=\274;\240\274\235J\276<\354=\232<\251\257\003>d\345\034\275\221\322\215\275\223u\322\274:\330\213=\2761g<x*\020=\005K\243<\2415\n\275\021\215U\275\035R:=\000\325%<\245T?=\257\374x=\330TK\275.\366d\275\027G\330<\220\204_\275\354\365\207\275;\316\332\275\020\362.\275\255\304K<\255\337\351\274eU\255\274\253\341I<\001\363\267\274\202B^\274\225\273q\275\034\214\223<\223B\347\274\007\260 \275\245\344\241<\250U\030=\3242\000\275\213\261\205\275\337\"\017:qX\323\2742b\246\275\000\304\223<\314wq\275+*0=j\244\273\2742(U\273v\301\004\275\360\304\376<Z}c=Uj3<$\303\017=\314u%\275\267\200\235;\263V\034\275\217\0142\275y\r/=\'\241\362;\202Hz\275\273n\026=\370\220\000=\242\256\030\275\304\222\021\276\216)\243=\321\335&\275\240\323\002=\302\204:\275>\310\224=\317a\003:l\244\262\274\244\222\033=&I\312:\364\371\207\275\333\006\032<\033\001\215\275S\324O<\223&r=L\026i\274hc\211\274\235\307\200=\031\2774\275`\252g\275\311%\240=\351\037\264<H\261\362\2750\270\201\275Z\273\372\274<f\313;\317rD\275\370\234\260\275\'T\327=\205\017h<\301\365*=\252}\006\275>e\260=\300\267\224<m\333\336;\345\221\037=\006!\026\274W\313\360\274P\343\200<\023@\024\275.\030\022\272\224\325\037=\377\t\002\274\022\370\206<\371\320O\275\020\327\225\272?r\223=\264\271\227\273pLm<\234N\211\275q.(\274\372\1779=\006\370=\275\320$\245\275\032\251\366\274\013H\314\274\323\003\033\275\376\216$<\226\250\327<\342w\005\275\024\242\024\275R\265\337\274\221\217\213;\245\326{<\010\345N<I\255\302<\213\244:\2752y\246\274\243I\237<\341\331\337=\371\203P=^\274\235;~\032\241\273\355\031\362\273\020\342u\274\375$\243\275\222\017\364\274\254H^=za\311=\036\033\263<r\212X<p\213\222\274\261\245I\275\367\262\212<\2368\333\274\272m\016=!>l=\017\216\227<\004\275\331\274p;\312<f\352 ;\321W\022=J^\307:\016fK<:\n\261<\306O\325\274\230\236>;\375\342|<\216\250\237\275 e\005=\220\272w\275\3473S\274E\360H=\2530\200:\237\037\202:\301\230\334<\310\316\016\275\364\224\035\273\301\323\261\272u\204 =j+\243\275d\261\n=\262\034\003=\243\035\246<\256_\260=\220\312\256\273\265C\025;\027\345\257\273\365\375\276=CV\355\273\204;\360\275\245\'\350\274z:E=*\022c\275N!\3179\177\225\215\275|\336\177=\016\2323=\333B\332<\017\001\200;0\027\025=1\355\354\274\366\2706<d\324\227=\0353\005\272\375\216$\275M+f\274z\211\026\275\277s\037>\240\331\232\274tJ\024\275\207\322\245\275(\325\";S*\207\274N\277\302\2741G\301\274Cz%<\210\205\356\274\016n$=\"\t\375\272\200\272n\275\240\245\220;\307T\034=\025\267U<TC~=n\000\273\274\036\261\203\275<\245\357\274:\215<<\320\352A\275\257T\247\275\316c|\275)\322F<\"\375N=X\242\016\275\264\257\333;k4W\274$\005F\275\220\036t=\211\030\000\276\034zs\275tCJ\275p\326\311<\'\340\244=\243\236D=\016h\025=UI\267\274\315\347\216:Tb\357\274\3564\374\274\345X =\324\217\200<Pk\350<I/\355\2750M\005=\"\345a=\371\014\215=;\024E\274\027\345\353\274\353\277\t=A\"\346\274f\027\267;\374\250\022<E\265\014\274\263.1\273\211\232\000<\265\255\225=\231\265*=:\032\\\275\003\025\351\275fS\240\273\274\005/\275y\347,\274\222\221\"\275\266\264\231\275V\256\254\2747i\006=t\362`=#5\256<\371\311,=5\003\226\274I\312P=\355c\254;y\350Z=7\232\024=\275R\335<I7o\275b\203\377<O\200\324\274\312?S=d\020\307\273\3433\261\274-Ue\275\300\357\000\275G|\034\2745y\223\274c!D=\311\223\356\272\344\303\r<\360b\312;\372\356\033\274@\256#=~\257\035<\207\204\001\276\372#:\2754\006\355\273\003\036\317<\350\275\202=\300I\r\275\252Y\254\274i\220\340<\031\331\241=\020U\007\275\253\016\366\275\212\250\243=\361\316\247\274\311HW\275\277k\006\275\337n2<.\227$\274X\375r\275Jv\n=\364\t\320\272\207\333\253\274\256P\240\275\037\332\254\274\327]\265<B\220\212<\342,\374\274^\2630=\267#\273<\245c%=^\263\241=\360\036\005\274\005\365J\274w\272\206<\350\373\224;x\347\203\275m\316\037\274\010\207\310<u\022\324\274^,\312<~j\037;\327\315\350\272\353\323Z\274\332t\033\275\207\322|<\314\014\263<\225\023\025=\031?\223=\225\340\217<\335D5\274\361KP=-\350\356<p,\364\274V\322:\273\202\\\025\275\342C]\274\336\004\213\275 \305\251=\303}\252<\376\312\366\2737?\254=\350\221a<\016vl=&\022\374<\305\t\205=+\334(=\263\336\210=\220\033|<d\030\246\274d\000c\275\225\022\001\275(\356l=/\311>\274\2544\r\274Z\0372\2745\231\363<\261\001\372\273#\270\315\274\00261\275\t\0258\275\245g\224;\324)>\274@\245\243=\273\221\335<\365\210o<Q\316\006\275lZ\217=\333.P\275\313\267\362\274\346i\265\274\217h/;/\273`:#:\r\275\007J\372\274\005\265\327<d\325c\272\305\373\010\275\253\367i\275\030\340m\27444\235:\377q\333;\367\206\277\274+\000\036\275\271H\316;\022\356\334\274\3156l\275\236I\244\274\233\344\252=\242=U=\227\272\213=!\241t\274(\2437=\312#\350<\273e\262<\001o\202<f\017N\275\221\351D\275)\307\341\274LVO<%\344$\275\361E\333\274n\020,=\217\210\276\274\016\001\374\272n\344e=\361\036\276\274V\304)\274\211\345:\275\243\t\311<\305\363\267\274\370m\005\275\260\335{\275\\\377=\275`\033H;\017R4\275\274q[\274\230\026\257\275\354\313\022\275|\253l<$ \001=\341\343O\275\331\375o<\376r\252< ml\273p\027\030=\305m!\275\247\273\270\274v)\274=\352Hw=\032\0325=\242\334\r=\tj\223\273\231\357g=WGC\274\221\'\262={\237V\275\0147+<\037\332\\\275\233\336.\2746S\327<c\347\215<v\026h;\346\262a\274z5\232=\0374\002\275\r\361\t\275\306\020\201\275)\036H=z\025\275\274\312D\201\2740/\020=J4\216=P\'\210=\205?\002=o\201B\275\250\260\322=]\222K\275\036\331|=_\t\025\275\372*\207\275\276\0225\275r\344\260\274\036\332\027;\342[.\275\276W\033=`\232\205\275\216\344Z<Vs\275;\001\324k\275N\376\246\274\321\205\000\275=6l=\306\311x\275\265\033\320;\034\363(\273!\367E=\227#\363<\255\226\315\273(i\301=?W\212<\331\350\020;\302ab\274$\377\020\274\222Q\301=\021#\220\275\316\242\010\274\275\031\317\273\024/.>\262\0075\275\330\241\270<\237\017*=\r\274\375<\261-\261\275\223#!\275Q5\t=\325\2252\274\256\203\331;\231I\232\275\\\t1=DT\t\2754\2555\275m]\255\274\234\1778<\360\027\000=\354;\000=\313\250\265\274\327\222$=\036\374\370\275!\340\000=:\244\014=\220\317\330\2748E\336\274\270\210\013\274\326&\220<\342\235\365<\317\306\221<\034A\243\274\027\334\346<\336\234d\275\022\0354\275\331\336\025\274\271\206\352<\246\375\354=.\332\212=\350\361\224\275\354-\333\274\024\001\n=\274#\031\275H:\000=\340\032\264<\245\227?=\370e1\275\224\255\023=\315\006\326\274v$^=\375<\035\274\327!\030\275Sh\023\275\341\215\027<\346\207F\275(en\274w\215\341\274g\233M=\357\177\363<\340\034b\2742w\344\273.\275\026\275eS\274\275\302\314$\275\026\310^=\2640o\275O\317k;\255\342j<\374\203\336<{\211:\275;U\032=!6:\275\254Z\353\273\022\014\006\275\325\271Q\274p\300\235\274S\264y\274\334\235z\274\022c\216\275d\262\010= nL=X\306D=\375d`\275K\340<=g\352\027=\025T\236\274kC\000\275p\260P\274\314\016/:\355\206\320;Q-\035\275\024\020\251<\317\031*\275\322\254\254\2758i\177<\375Wd\274(\265\362<\215\344T\275@\354,;\337\004\301=A3\321\274P`\362\275\307AC<\307.\'<\0318\305<r\270\274\274~\264\001=\016\211\256<\322\240N\275\257\t\216=\201\300\252\2738a\031<Sp|=/-\304<k\013\223=\'0\236<[\253\270\274w\001\037\274dO\374\274\"\013r\273\262\3368\275\356\034\013\274\332\227\010=W\271-\273h\360\273\274\036\326\\\274e09=\313\227\242\274\367\325\212\275\215\307\210\275\340n\226<.\350\312\275\300\250\320\273w\241\207\274\213v\332\274\022\200R=\277\006\234:\033\262h\275\254\307W<\302\177Q=\257\274\243<\227\201\240\274k\215B\275\271\2669\275Td\360\273#\361\232\2743\275\242=\367\036\003=\010@7;w\020\003\273\204~O\275\313g\340;\376\340\246\274v\n9<uQu=P2\264\273\020j\207\274J\276T\274G6,\2727=\266:=\034g\275\024\361\177<a/\204\275\247g\347<\373\036U=\335?`\273E9\355=x\310\267\275\267\370\321\274t\007J<ES\301=\306>*=\317\303\021<\023\231\350<o<\031=\273\372\331<7\215\241\275\020|F<\0163\333\274\244\0132=8V\003\275\276\024.\275\242@\223\274\364Z\366\275\265\202\\\274T\3155\274\247\315\247\275\314\347\021=\037\222\247<\272\205\223\273\r}\031\275r\022s=\322\355z\275\374\231\241\275\243\256A\275\277\242\215\275d\357\211\274\277\221\304;$ZL\275\332\000\212\275 ?\332\273\310Y\235\274m\250:\274\250\033\233\275\302gQ==\275\024\274\253\311\234\274\323\370 \275\256\360.\275\3004\231\275\000\331*\275`\322\276\275\244\214;\275\245\037@=\326\220m\273\232\210\303:)\240\017=/`<=)\315\001=b\330\204<\027\356\323=,\256\262\274\370\275\t\273\364*\352<\362D\t\274Fr\256\275\2464\024\274\202\203$\274\277\260\033\275\016{\301=,\352\376<\325 \254=G\013X\275\2449\021\275\207\345\003\2734\372\317=\234q\227=\001|^:\354\310\360\274Q\266\016\274\356#\255\274G\266 \275\330\2210;\344\223/<q\361\361\273\341\225+\275\216=\375\274`V\036<\306\244\t<#\240\234<\272_\"=\377\334g=6M\251;.\313\030\275^\240\013=\351\214\370<\353\207.\274G\214\213<\346\253\336\274\t\200J=4v\223\275*O\313\274\210N\216<\375\326u\274Pj\205\274Z\344\250\274\236Y\021;w\r\237<\300$\221\275\364\005B=\214$r;sVb< \310f\274\037\253\317;2\262\375\274\237\204\213=\001g\026=%\2202=\025\215~\274\360\215\002\274XC\306\274^\360\210\275:\251\203\274\254\365\220\275\267VR\274\251\246\211=\272Q\010\275\254\234!=\244\376+=\210\027\366\274\361,\005=\357\274G\275Y\370\366\273\345o\221\274\224\0030<\321\334\244\273\252>\236<<:\312\274L\255R\274\'Am=[\373\002\275!;\364\2737\021\215:Y\350v\275h\275\3549\272\030\257=#\206]\275\t\005\241\275\371a1\275\200\253\217=\326\370\214<\303\261\000>4\277\357\274\365=\202\274\312\027E\272\314\341\306<\360\r\252\274\212\242\221=:Pf=O\220\334;\210\312\227<\242\267\327\274\317\304K\275\034E:=\374\335\307\275\021Q\354:\355\031w;\373\222\t\274\251zU\274\352G]=\267\017\005=\014\261\225\275J\324\222\272\010s\243=\343BE<\374\201\204=\"\263:<\265\236\267=w\3070\275Z\370\002\275\267M\034\274d\322>\275\277\215l=1$\002\275\231\027\216\275\232\262\342:\310\2739;\225\374Z=\346m\340<.\332Y\274V-\350<\207\264$\275\330\256\003\275\217|}\273J5v=a}\213=6!\030=\304\365b\273\005\245\234\274\247\000\303\274\375\263\267=\357R\036\275U\376\205\275\335\030\244;\371\300\306=\2758\361;\001\251=\275\307\367J=T\304\274<\177\\\233\275\245\333\256=\311\342?9\254eK=?\203\311\27425\017\273P(\004=C\332+\274\2132\007=\216\263U<\313\216j=V\234@\275$?\323;w,\307\274HP\202\275\223\210\310<]\0016=3f\"<\307d-\275\202$!\274\025\216\204\275\245\226\212\274\206/\025\275<\262\024\275\301\037\021<E\027N=P\345\310:\032L6=\n*\204<\217\021\'\275\273\202\025\275\371\307\260<\207\266\347\271\205\201\017\274P\250\265\2758\200\024=\214\2075\275\321+\017= \266\263=\000\243\240=\344\3545<\032\222\272\274\2370\013=\022],\275\307\3333\275 \316\241<~U\021\275\310\265)\275\366o\014\275\226\300&=\313\n>\274\357\021\021<\270hv=\236`7\275\210\316+\271\335\260E\274q\033%=d:\004;\233E\252=o\206\236\275\355]@\275\307)\235\274$\353[\2753\377\325<?s\207\275\332a\353=}S==\323\233\005=A\216\013\275\020\317\246=&!\302<\347s\205<\245y\312<1\230r\274\014\230\336<w\t|\275\n\222\326\274\343\226\267<\315\205\263\274V\241*<\215\345e\275\355\034T<D\261R\275\007h\363\274\374\367\032=\234\033\026\275d\031/\275\005\266\350<\216?\216=jl\306\274\207\001\033<I\036\256\272I\3234\275O\335\224=eb\342=\030\263\034=@&\354\274_m\325\274\343\241\262<=\260\003=\276\030B</\260\343\274\215\331\231;)B\264\275D\216\321<\352\000:\275\027\027\232=,6r<\333\2524= \262 =#\357\334<\235\177+\275lq\207\275-\205\244=Q\350\200<\244\n\360;\222r\032\275\242\032\274:o\005\373\273\272H3=\365\317\200\275\211\333\201\275\3752\270\272\210%\334\274+\023X=\260\026h\274\230\247\031\274o\036M\275)\265\371\274l\374\263\274q\376\245\275\325Z{=H\030\360;\210p^\274\301\263\374<\262\371\261<\247PK=C(t\273\'\025\262\272\307\026\313<\002\342+=+\322\244\274\227|\227\275\222\336\321=\273s\331;/\325\027=l\2040=\223\227\035\275@\230\332\271u\364L\273J\210\370\274\241\351\027\275b\3506\274YX\271\275Wp\270\275\220\317S<\357\263\343\275\275\311\362\273\244\025j<\311\217+\274\257\232\t\274\347\302\347<\311T\017\275\326`2=\250\372\032\274\321\240\311;\230\232X\275Y\203\253=\274;w<\224\355\r\275\241\006T=><\023=z\035f=\270fh\274si\334\274\253K\205\275\334\340\314<\301\r\221<\216\367\320<\232\352\357\273\225\321G\274\371\217g<\246C!=\010\243\266<\000\245\232\274\252\001\233\275\177\304\215\275\341\301?<9\331\204=\236;\024=\"\364l=^#\223\275]p\206;\250j\207\275\374\343\357\274a\372\257=\222UV=\000\216k=8\374\376<S\246\211=\210\271$\275\224\250\305\275\331z\025<\367\317\371\274W$@=]\303\203\2758\261*\274\216\376k;\002\032\211=\321\013\207\2725\0014<o\210\022<\017\311\034\274\220l\340\274d[\244<u\330\270\275\017\357\235\274\371F7=I\372\374<\357$\345\274\266\350Q\274\202uG\275\020V\245\274!P\216\275\316\021P;YNs;-\n\212=M\t\245<\346o\256=\362N\302\273h\373v\275\306\313\314=De\271\273\335^\r\275\010\252\341\273\232\337\304\275\243U\323<\324\022b<\200ny\275\327\271\363\273-\221\004=?\300\330\275\326}1<\347U\233\273\302\245Q\275\3200\251=\255,\320;\212\326\315\274\277\020\005\274\"c\253\274YqU\275\302\267F\274F\202,=\014\345\030=^\317]\275\363.\305\274\347\335\232\274\032\220\311\274m\232\313<\232\342\204\275)\330\222\274\315\217\345\273F\217r<h\203\"=\301\322\000\275q\177\217\274\340_I\274\356\005\202\274\t\245\216\275\273\272\203<\276,\003=\303\034t\275s\336\013=\221\376\307\274\2579Y=GC\004<\252\331\037=\373\342\207\275\275\354E;LD\273\275\202\241\226\274\007[\202\272\3464q\274\210%\255=Ou\022<\364<O\274\260\321R=\020\233\206;_\220t=\220D\230\274\371/\020=\241\244\247\275\211Vn=\237fh\272\207\216\211\275\236K\027=U\t6<\002\361\204\274\376\003\360<|C\205\275\352\306\315<X\207\026=\025\000\240\274\251\2458\275\254,\372\273K&g<:4\t\274\021\002#\273\211\342Y\274\037\271C\275\363M|\274\2442\355\273e\336K=\371\255\177\275\244S\310\273\017\035 =\220\260;=\340\302\000=\215\241\\=\253\313\025\275}\357\236=\234\035\205\274\263\330\300\2717\370\350\275\307\213\360<+\244\257=*\256\257<\311\316\250=\372\261\022<\033\334\031\274;\301n<\305U\221\275\351\037\225=\304\226\247\275eY\217<W\351\022=\275\274b\274\335\325l\274\032\037\326\274\272\366\332\272\nF\210\275Ko\013\275\245\r\240<\'\355G=\002\020\020=\223\251\352<\334\367\031<a\031\017=^\030\377\274:\221\200;d\373\010\275\006\371&=\332\205\206\274[S\"\274IC?=\t\3746\275\264~S=\354\"m\274\225h\031=\243\364\211\275\310H$=M\231\027=\353\215\271\275\201\307A=u\333\226\275\3733\324;\270\303\232=o\251\341\274<\344\352:\370\023\266\273\206\"\346\275tr\362<\311c\'=\014\014\211\274\0235V\275\264&\222\2743n\374<\251OU=\331\333T=R\366\211<\374\311\027<?\277\202\272x]+\274\274\236\324<W\314A<k\'\036\2743\001\223\274%\363\'\275\225\2600=\362-\006<\206\026Q=\376B\354;`\361\361\274\313*\031=\206\367\261<\272lm\275\320\233\036;H%B\274\305\333\273\275\201\332\177<\315~\032=\374N\235\274\202\021#\2758\034\033\274`!\307=\013\0327\275\000Z\261<\265h\250\275\307\022\242\274\204c\244\275m\235\244\274y\375\331\274\014\341]\274\361cW\274.j]=P\017\211=yd\017=\373\002\251\273\250\3048=\321\323\260;a\250\257<S\373\365<\256+\232\274\205\375\267=\203B\355;?18=\227J\240\275\271\346\234\273\202\000\'\274\272\245\246<\343q\245\273\025\216\364\274\"\\J\275G\241\222=\374\252\274\275\243\215\324<!j.<\232\0214<x}\025=\237r\340\2741\177+\275y\344U<1\244\312;\303\334\370;K\203o\274Mv\276\275\0213\314<\335o]\274\204\300\'=\003\360\251<x\347!\275\037@\316\274\265.Z<=\353Q\275\006$\236\275\000\023\014=\035g\232\274J2\204\275t\331\313\275\235\032L=\316Uv<\213 )\275C@\025\274\343\022\251\271\360\315\006\276\033\233\203\275\361\031\010;\007\357\264=3\337+=\205\263\000\275\377\240\005\275\335m\207\275!\0034\274\245\006\305\274\314C\337;\365\235\023\275\032\251\021=\313\'\021\275\247\353\227\275W@\021=\316s\035=\323w\256\274\010\027\240:Z\033\n=\337\373\204=M\327+=^7\315;)\030\235\273\342\035\350\272\263\200g\275{\r+\274\r\264\376\274\351\377\036\275m\021\307=\022L\201\275\3044~\274\247\000O\274\001G*\275+\254\2139\221!6=\221CG\275ap\361<\030oO=\354_\220\274\322\320I\274\233\356o<\r\346_=\320\207N\272]x\024=\304\031\357=\366\271\270<_m\327<\006\262\226\275\027\225\340\274\n-\310<Y#\337<S\341t\274\035k1<,\231\222\2743\356\004=\275\324\352:O\354Z\275Fr\350<ZL\024\275gqx<\202\017!=\362\374\2227\204\033\271=\210\344\022=;{\216\274\250z\327<\n\337\237\274\334\357y<&bf=\303\212\237<\335p\202=lA\230\274\337w\002\274\240\212\234=\006\224K<+\321\"\275W\202c=j!\037\275\270T\2709\236\016u\275\365\036\014\274\307\202\252\274\373p-\275F\331p\274\343L\264=\311\252}=\2170\022\274\357\225F<\340\323\037\275[\016\246=\000\036(;k\302\356;\210j\350\273}\2722=\351\001\233<m\362.\274|Z\007>\324bs=/G\212=!\243V=\314\274\355\273\363B8<\222\272\030<2\223\022=t\023\270\274\270\220Q;v\013@\275h3\252;h\234\\=V\271P\275U\335\036=\\uq\274\371\223B=}|\270;\255~\267\274\221\014\200\275\321\300\246\273\220 w\275\372\330\363<\325\242\344;\357/\261<\274\242\275=\304\316G\275\t\205\214\275\335+l\275>\346\245=P:E<\302v7=\3577\225=\206~\017=}\254\027\275\374\261i\274\217\311*=\236\033\227\274\353{\267<\341\222\212=2\301\220=\353\203\003<~\257\337<\331x\204:\026Q\005=;\273\005=\215dP=\206}\250\275q\274\224\273?\320$=A\221\374\274kX#=\330\013\301\275\3302!=IJ\201\274_Oj\274`\326\031<\274\307\241<i\227A=f\374T\271\253]\202\275\006\005\373\274\014\242\371\274\210\021\360=\035s\344:\207\354h\275\267\324\r\275l\275<=\237\316\336\274\231\235\205\275\001\2607;\310\"\213\275d\207\267\273\226\000=\273\277\354\217=l\025\346;\347X\261\275K\014]=6\305\034=\277G2=\341\"\330;V\360\212\274y\357\030<\277\263]=y\235\347\274\034\340}\274:V-\275\224\371)=u_\224\275\006\264Q\273\250\336\307\275V\250\221<k\220\307\274R8\004\274p\316n\274\242q\\=\322gA\274\1773\336\274\360\325\225\275\002\374\"<\255\243\247<\355R\234\273\335\312\034=y\205\265\274\365\317\202=EE\366;\014\203\276<\201#\222;U\020\370\274a\371\226;AB1<\347\354\014=\214E\206=\323\311\276\275\221m\251\275\271p\021\274\217\034\250\273\210{\360<\266\223I\274\373\317%=\246\014U=\306\237\352\274UF|=$\250=:\351\325\260<\014Ni\275\246\376\223<\260j\245=\321\241\242\275\225\211\271\2743F4\274\275\327::i\351\310\275\235\035\007=\332U(\275\325\n\000\274:Q\205\274\005\312\350=\375\200\276<\357\036\272\275\324\2733;\026{\241<\\\232\227\275\227+\275\275\277\213\257=%\337\245=++\232=I\343\000<\257\264\327<\301\340j=\240\267\334\274\207<O\275\227\202\206\274\321\340\345<\347\313\237\275\332n%=\300r\223\274\033?^\275\207\356\354\274\204\203\204<`\214\010<)P);Fq\201\275\344\366\310<\260\263b=\225\243\373\274``s=\371\276#<\222\233-\2755\306\2569\326\343l\275\350\235u<ol\254;\202(\207=\276\3546=\356/\361\272\355\261\374<\003 t;\227m\212=\377\005\261\274\302M\235\275_T\215\273-k\371<\326\'\363\273\"\007G\275$gM<VX\254;\351\210\025=\032@\017\275\251)u<f\347Z=\204\250X\273\016\231\026\274l\377\350:\347\"!=\241\356Z<&\025v\275\247\252\202=\377\321B\275\377^\213<\200\233\250\274\t+\'<\340+\322\273\363r\":tl\202;\262zu=\302\2040;Hn^=\251 \273\274\226\201i<\177\330\255\272\330\013\205\275\177\'\230<\031J\014;\307\330[\275{?\372\274f7\222=\322\017\324\273\355\322$\273\262H\357;\313\225\263\274w\1776;\224{\273\274\275\177\247\274rj\327<\t\345)\274\\\300Y\273\361\224\032=\320\037r=\207\235e\275\341\224\247\273#\212\034=\222\017\342=vW\233=\252\250$\275\303\216`\275\274R;\275\324|\362\275B3\215\274\2737\325<\007\307K\275l@/\275Iq\223<:YO\275\351\"6\275}\350\237=+}.\275\035\031q\275\323\257\302=\n\301\020=\002\237\242\274\306\216\013=\271\360N\275nh\n\275\034\333\352\274hz\201\274\262\002%;\263\354O\275\376G\277\275\026\302\016\276\331\212\323\274\211A\231=\355R\027=\215\341\336\274\337\3404\273JG\230=\372\350\234\271\221f7\274D\037\245;\351W\323<Q\032\303\274\265\226\r\275c\335\232<R\247X<M\003:<\217\302\266\274\002\363\025<\272\006}:\032J>\275\'oM\275\355\244[\275\336\272\r=>\225\037<\014\0078\275gP\203\273z|h<\247\373\360<lE\307\2741\214\227<\035\360\320<m\354\007=\361\247G\274\037\267\361<\014\314\217\275VF\r<\235I\231\274\027\245\371\274,Y\254<\365|\177;\330\214\236\274\252\352\346\274\231P\375<\355(v=6\211W=XB\221\273Z\314\310<\352A\327\274#\033\224=\303)y=\263%\347<\257T\356\274ROa<\035Dz\274\200\'\343<\202\321\366;\t<\301\274(\024\252\275M\202\013\275R\273\255<\331N\300\275\264\220t\275$,N\273\214\231\235=\'z\335\274\027\014\265\273\247\372\0059[\312\334\273\ry\205\274W\':=/\023\033\276)\233$=\303\212\247\2759SN\275\2068\223<\372kN\272\016&B=xwO\275\212c\r;\265\373\206=\253\352\036\275W\267\324<\324\016\313\274P,\001=2\321\007\275G\356\342\274\024\342\220<%e\300\275\353\355\002\275\261\240\364<\311\002\371<\230\310A\274\002M\210\274\237\331\245=\321\035\374\275\237\3364=\"\241\263;\352Le=-.:\275\350\303\220:^>\010\274\310u>\275v\250;\275=\356a\274\241T\235\274\263\016V<\362\tb=\330U\243<\325\351q\275\267\367\342\274\272\007\246\274\227\2446\275\340_\016=\033\177\243<\031\375{<\331\313\353<\303;\223\274\3302<\275\022\212\241\274c\217B\273\310\002\266\274\265\322\206\274We\203=\014\014a=`\354K\275\013\0132=9^I=U\035m\275\365N\216\273\360\001\251\274\020\352\031=\006\362\323\275\001\'U\275\237\203\255\274!\254\356\272v\3230\275i%\016\274O\333\244\274\251G\342<l\037]\275\033AP\274\32267<\0328\024=\333\\\242\273\346\230\302\275\241{>:H\231*\275\304\245\002<\200\340.\275\032\271\365<\370\\\264\275\274\3776=Q\374\265\273\036\370\020\274\266W\213=\010em\273$F\t<r\375B=\'\372\315<u\253\315=0_$=(\212\001=\364\220\314\273\210_\365\275\221\353\305<0\337\211\274\335\351\022<#\364x\273\010\342\316<Q\004\213\275\3616`;\233\203H\275\234\006x=6\0039\275\33462\274\225\336\221=[\307\202;?\342\240<\2707%=x\030<<\203\277\222;N\302I=O\301\237\274u\025u=\177\332\020=;\242\372\274|\'\215=V\277\301=\206w\356\275C\361\037=\375P\t=4\007\312\273\301\205\022\274\364-!=\031\341\036\2753\345\314=\023\251\000<1\343J\275\027\000|=\376\320g<S\002\002\275\032j\340;\r-\031\275\337\246\245\275\2537\273;\323\340\221<\'6m<K\342\022\2754\342\036=~L\356<\023\377\214=\007\261\022==\315\177=+7X<\273\257\314;\256\250\222=b\232\007=\224\310\320\274D8\220<\030\211\303\274\002\251\200\274\342Y \275E\200\201<\345\240\270\274\240\331\007=[\334\262<\035\317\202\2746\026\205\275+\333B\274\036\226f=6\223P=\224\323\257<\232\310\234\273\304\016\313\274\037J\316;69\007\275\035h\206\275\021\315%=\347\014\\\274\334\360\t\275\272\307\233\272\002E\372<\233\237\271<\310r\002<\025\223\366<\256\307\014=%\302O=\256\230\371\274\352\376\306\274\014\242D\275y\234*\274\357\342\246<\n\002Y=@>B<\022V\265=\027^]\274\236!k=\030\"-=\262\360X=\243\360\263\274p\0017<\344+\023\274 /.<\344\225\266\274\330\'\325\273\321g\376\272\366u\324\275g\t`=!G\370<B9\356<\016\206\230<@\331:\274\217\201\353\274\034\342\346<\256\034\001=\217\372W<\326[\025\2757\210\224=\005 &\275tA\014=\250Ji\272\313&q\272FD\261\274\334,&;\032\202\267\275\3369\307\274A\017\302\273\240\031\230\274\206\212\210\274d>b\274C\311D\275\233\234}=\214P\026<\025FN<\r\375v\274!\236Y\274\346~\020=\241\026\006=\345\373\226\273\r\245\271\274@\376\336<V]\363<zU\317;\305\345\270\275\t\300\310\274\022\210\267;\337\026&=d\263]\274\270.\203\274\355\004\303\274\001o\033;;\365\245\274\020Q\247\273C\202W\275\3467\313\274\035\237\033\272:\232P\275\231Ij=\305\351L\274\234S&\275\005\350\351\274\003j\204\274W:\315\274G\356 <\001H\342<\367W\'\275TF\234<a\004\306\274%5\335\272wo\267;\t|N\273\343\334V\275:\275\037=\263\227\177\275l\212\331\273B\207\210\275\242\315s<qH[=J\360\016\275Fr\351\274\345|?\274KE\037\2734\r\275<\030\233Q;<\357\312<\242\347\312\275\310\\\254=\313SW\274\335n\335\274@\000\n:\2638\220<\346l\211=O_\336<\024\260\016\275\351g\226=.\227Z\275\341\324\010\274\360\010\350\273\304\251\242=A\251\016=z\273\035\270e\242~\274p\000&\275;\320\025\274cO^=\356A,<\321GK\274 9G=\002i\026;l\252\267\2742\275J\275\241\246\210\274\327\364\317\274o\371\023=>\311r=\254\320i<}AE\275\025u\276\275\367\370.<\337`H\275^\035\202=5\254\307=\0349\301<K\252z=\303\204\"\272\323\253\004\274\351m\362<8\206\273\275G\016c\273\311G\032<:\253\027\274Eq\232;\002\341*\275Rs\246;hjQ<Qt\017<\020\351\264;\316X\377\274q\341\317\273^\300x;=\034\347=\341\244\250<\020\206\\\274\210\007-<\240\355\250\274Ui\243:F\017\352\274\312W\264<\020\354\204=ugL;\344\337\000={\257\366\274\261\217\310=\010.h;\300g\372\273\352J?\274\r~\247=dX\262\274\003K\232\274I\310\265\275H#\373<\323\323\005\275\267r\034\275\220Ku=<\007u\274G\221*\276%\377O\2758P\200\275s\3478\275]<\237=X\264\220;\200\316\017>\240\316\237\275\000\'\230\275\246(\022=\334\030\303\275\313\240\026=\277=\023<TY$\275\247\271\330: a\022<\245\224\274\275\266\216\034\275\350\360W\274S\026&\275e\010\033=\035P7=\311\014\210\275\024\207\350\274\261d\225=\027x.=\302\365\321:u1?\275\372:\226=\245f\314=d$_<\372bc\275\034@\234=\017\010\315\274u\312\307\272P\303\016\274\347\201\234<\300\2310\274\261\336\303<\374\025\260\274D\315\210=:\2044=\244\222\265\274\\)\022=;\375-<\262\355T=\206\335\234\272eKP=/\"\351=/N\274\274\311\272-=\017\240V=\353\005\333\2738\241\013=\336\310\253\275\224\354y\272\021/;;-\276\007=Z\354\216\270\216\3357=\227\330\230<\336\364\310;\243n\231<&\274F=+*8\275&4\017\275\0239f==P\367<\262\2645=o&j<h\204\265\274ZC\362\273\2377\307\274\300\2020=\350\0066\273\221\230l=\260(\004=D\364\275\274G\355~;\323\223\265;\304\024;=\331\3404<\341\030w\273\205>\207:I\222\206\274\354IU\275\231\315\320=t\364\363<h5\000>\273\355A\275J\262(<\300\327E\275\tM\250\274\265\006D\275B\311z\275\237\261\343\274\215E/\270=\366\335\273\242\033\253<%E\354<\214\267;\275\232+\346\274\2441\246<\2616\221\275y\010l<Y\355I=\r\372\372\274\334\225-=3\257m=\237\323\324<W\3441=\376\273\347=\257\252\317=:\337\225=\223\214S=\331\331\303\274c\022\025=,\217\003\275\267U\273<\242\036\035\275\r]\027\275>\205\245=S\000[=\307\014\211<\214\221\255\274\364H\333<\\O\361\274L\365~;\364\320\363<\366\334\001\275\206\277,\275\024e{\275\213-;;\342\255\221=8\017w\274!\347 =|\220\232\274C\2203<\370P\035<Y\035\035\274C\004\370\274\316\036\304;\re9\2752\364\343<\373\366[<`\300\223\274\270\257\003=\010\224h\275\313\213j=\366\013\022\275\330\354\014\274t\0377\272\257\340\217=x\257\013=\220\246\362\274\364\225\010<5d\035\275\2162\007=\253\032\306\273\217\274[;\021\'\315<\366]\333<)\0248<\226\333\005\273\357\242G<k\017e\275\330y\273\275^:\274\274A@j\275B\333\000=\013Y\222\275\266w\301\274[\305\255\275emS\275\020\'\177=3\315\226<\377\236A=\265\0232\274z\370\250\275\203\024\376\274\256\367\344<\233\264p\275\234\304\265=\244\226\345<Z\356\210=\271iG\275\230\272\265;\037\020W=+\366\251:\325\346\250;\201]\274<\321\354\240;zP<\275\361\354\302\273F\201\353<\\0 <\346\005_<\220\037\246=\243\356\264<n\270|\275Wj:\275]\351\250\275\340s\342\274\315G\005=\261\236&\273i\227\275\274\253F\214\273yY\372<\224\004\006=\275%\324\274\350d\231\275`\211\236=\376\261\031\275\001\277\324<\244\264\201;d\255&;\233\244\362<\312j\220=\034\227n\275w\320E\275\310~3\275\316\253\032=\324\314\216<r\270p=\202B\177\275\326\002\305\274\3436~=\303}Q<s\027!<\001\2775<$r\253\2740\223\213\275\224\333\000\274(\214\r<q\261\232\275\006\221\331\274\220\343\311=$l\r<M\254J\272\004\272\201\274*A\017=\350\017\203<\270\323\245\275\244$\213\274\220\254\344;h\337\236\274)\306\355\274\\\311R\274\212\177\220\272\332\377%9_I2\2744<\304=\036\000%\2757\266=<\265\270\216=\231U\224\275\333j\253\275\373\nv=\235\377\006\275K\317Q\275\025LI\273\021\030A=4/s<\034J\340\274\321\261_<C\224k\275\306\330\215\275\241}\276\273\223D\352<jt\242\274nO\003\275\373%{<\377\320\372<-\240n;\273\224\265=\370E\210\274\004A\273=\263Y\352<o\366\217\274B!{\275\200\237\217\274z\356\254<\025\235|\274\352\237\243=\335\215\316\272}\313\212<\362\033\\\273\212\243!=_\022N<$vN\275\004@\371\274\277\004\177\275\220\305\302\274\010?\027\275\303\203\256;\354\310\003\275X\010\305=+7D\275j\003\311\274\211O\312\274\300\311!<\3429\357<\247R{=:\373\320;\245\233t=\244\371h=0C_=XV\356\275]\n4\275Q\033\334;\333t\210\275u\010:<\037]`\275\373\021\034\275\010\234k=:\224\262<\221^\306<\340t[;\225\210\203\273\366L\317<\377\245\237\275g\264\243=9\202K<\301R\240\274\334\323)=\271\330\010\275[%\323<?\2066=a\024Q\2742\030y\275r#\210\275\363\023\353\275\245\r\252\275\351\267\357<\216z\265;\310Jc<a<v<\330\021Y<s\016\203=\250\022\231\275\250xt=vZ\350<\353=\257\272\320\367\013<\344\221\206\274\224\240\325\274\034#s\275\033S\373<R*\263<\210\200M=2\237\\\275\236\324\026=\243\344\317=\017\024\210;inp\274I\233q\275Y\344\341=wEl=$\2273\275\360\356d\275\2754r\275\216\365\r\2756\313\013\2757\271\356\273\246>3=\363\202\361<\360\000\214\274\014\001\233\275|j\365;I\245\254;L\274^=\274}\221<TDq:\343}G=\302\353D=i@\221\274rd\377\274|rk\275\324E\277\274\357\327\232=\026\371\306\273G\002\201\274\020Cy\273\022\236\033=\177\020O\274\3713\215=\205e2\275S\014\205\274\006Y\014=\20482<\275\003\277<\"\300\024\275!zT\274(O\032:\276^f=k\223\324<\276\010K\274\223\234\252\275\203\247\016=J\252N\275\362%\313\272\025\036_\274\240/\332\273\333\336\326<\337\331\251\273\217\247:<+\213\034\275t\020\200\275\006\303;=[x\220\274h\326\210<\2176n<G\322\014=?R\361=0+\240\275\026G\352;\225\256\246=6$/=2K\2519\001\257$\275\016\235\367\274\377\277\002<\221\210\334\274:\033\032<\250\345k\275\\\2217\274\330\244\3329\353s\0049d\327,\274\240Bg\275\2562\244=\200\006\255\275\"~\r=\244\346\220;\372\007\363<M\t\371;\203\266\023\275N\315\263<\336\024%=Q@\016\275\000\3737\275\362\343E\275\244\313\207=\366\304\260\275F.h<\026U\274=\303\212\276<B\276\237\275\211\3416\2758g\246=.\356\r\274\026\274P=\252\020\245\274V_\036=B\260\215\275\031(\034\275\377%!\275\277E\266\274U\271\212<\237A\016=\332\2430\274\246sq=\240\254\223\275\324\365\213\275\211M \275^M`\274\370\r\241=\'\237\033;^\376\210=\344\300g\272\2019\370<\362\000K\274\31316=\213\003\347\274\351\235w=\'\325\005\275[r\025\2759\305#\275<\303#\275\243\241\312\272\373\364\205=\300\230t\275\224\335\202<\020\312\004<\024\010\035\273\215j\213=k\2075\272T\272\006\275\333D\321\274\310l\r\275\254|t\272\204\332\210=\3075-\274\337\230\261\272an\333\274\336p\006<\311\035\204\275\022\030\222\275\023\311\220\275q]n\274\235\221\"=\270\237\252:Dqf<&s\034=\304\333e=d\006\221\2756;-\275\200\230\024<\"\013%;\343E\261\275\213\225\217\275\276$\233\275\323\213\346<\256\005\016=\316\377F=\265u\n=F\347}\275!\317\032=\rPc=\355N!=.\020\025\275u\252;\275\344\352/\275\314e\034=\007\275\035\275\376g\271\274\346\325\350<5\315\017=\271\0028<`\032\304;\007(?\274Xa\r=\032O\262<:.\314<7\303r\274s\351k\275\323\207\032\275\037[\300\274\221\002N\275h\356$\275Qt\306;\257aO<\361\245\302\274\202x\374\2728\325\215\275\'\204\350=\337\322\204=\364\346E\275\005\346.\275\225O\206=`[2\2751\344\317\274\025\202O=\232\350\242=Iu\'=\3628\210=x\r\215<\267g+\275^u\210=\223h\365<i\266\364<C\004\245;\303\376\333\274L{A\275\327\372\251\274\240\232\014=\237O\277\274\236f+\275\203\246Z=\265\260\027\275\013A,\275\261E\304\273w\357\000;\2310\021\274RP\214=\374vd\274\216\342\013\275P0\362<\260\253*\275x\020\335\274>\252\253=Gl\213=\032\325\367<\352\225\217=\3709\323\274Uk\206\274k\273M\275\315\373\277;\324\257n\273\353\027t<-M\205=(\365\236=\256\036\004=\233G\031\275\177f\360;\337\214\027\2743h\032\275\243h\272<\227\215C\275\371\010\234<\250s-\275\331k\033\275\306\252\265\274\031\027\220\275\035y\322\275\260>\035=\265\254\026\275\355Q\217<\242\030\236;\343\251\224\274\020e\023\274\260\314(<\222\261\233\273\237\366\344\275\346\001\345<\303\337v<\232\230E=d\351\020\275\265\356\217=\271\275\036=\334(\217=\342\352c\274\203\ry\274\004\336\217\275mNx\275w\227\312\275\334\366q\275\004\200?=\327|T=\231\371\270<8R\004;\3678a\275\324b\357\274 u\337;\243*\336<\250\\\017=\"\031?=(\374X=\223b\200<T\352\251<\275\356c\275\323:n\275:\025\337<\271\345 =\255HJ=\370\265\007=\325\345\260<n\362\034\274\306\234\221\275\346\177#=\004\177E\275 &p\274@\317\345\272]\276\236<\342\321,<\250\351\t=\010\220\301\274\247\210\025=\361\325\355=\'\226Y\275\231\325\235\275\240\343\000\274h\237\031\275\026(\263<\255C\303=\232\323)=C\224\005\274!o\005\275?`\210<\301\032\250\274<,\214\270\235\034b\275 #\267\274\006\340a\274\300\2535\275*#\024\275p\327\237=i\325\375\274\013\022\204\275V\360\203< \261z=\000\360\227<\317\026F\274+]S\274\024\005\035\272\014\022\344<\340\324O<N\310\310\275\2246\363\274E\242\2468\257\202\214\274Jg\304\274b\323\300\274B1W\275\006S\222<\353\023R\275.\030K\275\214\037\277\274oB\313<Qn\247\274\335\307\363\275\210\323\024=\3513\265<g\330M\275bK\226=\031\'\220\275\222$\016\274g\236j=\002\253\277:\023\371U\2723\231\312\274\232\221\t;l\037\236\274~\360{;\260\t\246\274\000f\336\273\223Y\201\275&D\314=\343\0108\274\346A\n=\335\206\237\275\257\326\324<`\377 <\256%\352\274\003\374b<\276\031\317<thJ<-\374\254=%\242G=\245W\023\275\2219\243\275\225\322\223=\307\233W\2756xG=\025$g\274Z\344H<\002\326\037\275oE\210\273\004\345\272=$\"\006=\362\271\301\274\223\201~=\335\324!=z\234\337\273\210N\310;W\344\006\275\245\342\210\275\026\256X\275\313\024-\274\263\031t<Fc.<o\372\225<#w\311\274\020`x\274\316\261B=5\271\357<q\263J<0\177\027=\024\212\222\274z2\271\275:\023\342\274\013\206\227<!\253\256<#\311x=_\'\323<An\221\274\221\325j\273\374@\001=LNt\275\306\357\030\275\236\365\220\275\205\202\255;V\241\357\274\014\204\020=lF\022\275C\013\217\275\355\226?=\276\321\r=C\303\356\275\030B4<q\203<\275\225e\346\274\2118\267\272`\261\252<\214\2132\274\345\236\336\272\304\330\225<a\037\036=(\363\334<\312\307\323\275\2021x=\204\226\221=\216\214\361\274\366&\306\274\317S]=\216\202 <\326G\240=\320\177F\275)\213;<\241O\204=#\257\353<T\025\340\273\265,t<\022\027l=3\005\341;{\'\337\274\\\003\201\274\336s\322<\371$\312=Vyc<MV_<E\206\266\272\352\301,=\324\372\320\275-l\177;\276\240_\273\030\377\331\274\\d\340\275:%\352:i\031\034=\010\013\367\274\356r\020=\016\260N\274X\265d=\345\362\031=^\001\243;\024N0:*\306 =p\276\372\273p\272\013=\013:\263=\035;\n\274T\246\267<\034\356\276\275\326!\344<I\331\206=\245\353\316<\177\350\010=\377t\340\274p\217w=\267\300/\275\330o\007=\023G\301\274\007,y<r\370\235<\213%\242\275\221o\327<\001\r\221\274\rWb=Vh\260=Q\347-\275\205E\243<\020\223\206\2746\245S\275 \025\305\273\224\365\212\273\225\246\245<\t]U\275\322\317\212=\350\213\377\274)#\037=z~V=\207U\330<yR\264<t\275r=\311\005\017\2753T\214<\251\207\001=\212\310\264=lR\354\274\271\240\\\2750X\371\273n\263\213\274\364E\371\275L~\227=\354\0059:\320\317\317\275\n\206\340\275\227\254\205\275}\177\251\275\355\031\212\274\3230\034=A\340m=\354\004\315<u.J=\224\224\241;*o#\274\r;\202=\275\261\314<\025\223\362<6B\221\275:]\304<\246\310\372\274\236[\200<\266s\332<\036\254h\275\245dk\275(\225J;\205A\336\274\323;\216<\364\025\014<\223\003(\275#\340\206\275\341\010\006\275\324&\253<\230W\323\274\376\233F=\304\375\020=\3470\000<Q\260==\203\275\232\275\247\\\227<\266iB=\021\r\261;D\2173\274\373Oc=\246.\r=\031\307\004\274i\355?\275\3324\271\274nz\363\275\372\030\325\274r\312\346\274\202\353\027\275A\362\025=\033\207\275\274s\365\3559:\224\255\274\206\252\206<\261U,\275}\035[\274\201\033)<\326]H=0\'\t\275\014\343X=\3009\333<k\232\201\275\\\230\222\274\"\340\035\273\3603z;z\253-\2757!J=\272m6\275\022\016Z\274/\033\247=\213\242\016\275p\214\037=\303\214+\274\004\255\315\274\207\313\332=rH\r=\200I\307<\3748\035\275\034\273%\274\245\nQ=\365`\326\274\272\200\227=\202L\n\274\014\005\266\273o\026\223\271\360\367\316\274N\273#=l\251\202=\377\320\241<e\r\251\272\344\312V<\367;\234\273C\033|\275c\272B=^\375r=\353O\036\274\034\252q=\370\372\311\272qM3=>\242>\274\271\350\013=\n\377\250<\005}\241=\032\262H<\216(V;\376\322\232\275?B\200=Ih0\275\023$\300\274\243\256\307=\233\335\244\273Y0\226\275M\254\327\275\005^\\=w\025_=\256\017{<\374j\003<7S\342\274\204\224\216<F@\220\275J_\321<,\204\275\273J\222Y=\352\303\217<\344\013\n=\215\3378=F\rW\275\273I\322<&\214o<\"\246\317<\3178\314;\206\250\220<]\002\007\275\274\217\237\274`\341\255<\332c\022\274%\1772\275\032\'\033=\355\007\246;\213\370\214<\267\345\023=\361\216\326<\263\350\264=\210\034\2019\252\376\010=\205\374\000\275F\310?\275\224m\014=\372g\201=<`\261\274n\0270\2757\364\026\275\203\344\032=K\212v=\r\267\350\274\304w\203;\035\264d\275\304\327\\<\372\236\206=\336R/\274\364\035,\273\014\313\352;`~\260=\230\314\220=\204U\021\275\323\233h<\306\374*\275\332\207\362:)I\362\273\364\212\256\2753\010\275<\256\274j=\227\323M=so=\275g\201;=\032\224\013=/\202\251<d\352\224\274\354\021i\275\352\n\273\274\010A`\274ow\r<\367\266\351<Ai/\275\367\n4=-zJ=\273G\333<H\300P\274\022\'-\274\002\206j\2759\260\267=/y5<Mw\026\274\317\204\n<\260lQ\275\366\301\243;\214\025\273\274<t>=v\227\362\274:\024\241<Xj\006<\226\207\027\274\245\357\221<&\0363\275\221\266\375<\245\013\217;bR\210=u\3351\274\204$\350\274\376\252;<\325\344I<\2309R=\233.\322=\263`?<d\362+\275\243r\016\275\236\026\014\275\r\236f\275n\362\220<\036y\271<\200)}\275\240\245E\274W\235\010\275HT\333<\276\316\236\274\022?\224<\360\207\250\275\021!\\=s9\210=\204\3435\275\233\344{==\351\303\273\367|,\275;\200\336<D\200\233\272h\000\346;Gp\r<\345X\244<\226\204\274\274[\025\307\274o^\227\275{\r\026\273\\?2\275\2232\374<\307\237*\275/\231\233\275\217vN\275\214\375O\274\351\377?=\216\342\005\275\257R{\275=\325B\275RQ)\275\032\310\362=pa\217<\300m\036\275\337\213\026=\027\372_=\374\216<\275)Q\001\275\362Q\373\273D\004<\275\np\214=F\335\r>\003K\026\275\022\337g\275\3021\345<k\277\007\275\035\233\230\274\224\202Q=\365\n\024\274#?\261\274R\346L=h-\267\274\320\227_\274\361P\233\274G\255\000=:\314\342<:\322\370<\230\333\246\273\345\0030=\254?\361<n\317\251<\305.&\273\307+\265;\303\303}<\3053w=\003\205\203=\007I)=`)\322\273\214\215S\275\277\031\250\275 i(<i\324k<\027\354/=\346z\351<=\t\007\274\260\271\302<\365\307\364<\216\2117=F\272\212\274\236\375Z;\3076\374<\237vv\274\252\2666\275\224\016A\275|\010R=\263\243\263\275\222\234\264\274\2674\276=Z-\316<\225\344U=\304Y\353<\326\316\350<)\235|<\233\271\221\275g\330\256=\214\260o\275\257X3\273i\307\'=\033\n\247\275\274NR=A:\251<\202\276l<i\017\240\275`gr;\272dm<\321\230{\275\262\373\373\273\221j\211\274\004\237\324\273\036\004e\275b\323J\275\340*\256<M\017\270\274\364\205y=\224\032\273\275-\313g\273\362\021\201<\204PV\275(\377\017<NQ\220;6,\317\275\230&-:`0\000<~\353L<<+\226\274\207c\244:\\\227\263\275\026\361\270\275\327\200\236=095\2746y\231=ZA\211\275f\331\004\275\227\210\304\274(y\034<s\305)\275\232\343\310\275v\216\236=\031\304z<\235\275\201=!\321\321\273k\367c\275\346x\250\275m\325\224<\036I\250\274l9X\275a\317O\2750x\r\276}\353\224\275w\030\010\275\030-i\274\263J\022\275q&Q\275\205\233L\275\353n\027=>\265\r<\333\362\341\274\306W\200<\352\334e\275\356@5\275\013Gz\273,Z\261\274\214NS=\026\206\213<a\027\215=\312\250+;\261\271g;\203\005\r;\351!\032<\373\371\244<pu|\275E\375V<\312\0340:\270\305\215\273\235\026\261\275.+\021\275\314\327r\273\2214;\275\027h\257\275;d\357<Z\006\353<\016#z\274\303\277\314\274b\341\315\274 \304+=\245\261O=99\204\274\364I4\275\320\277Q=?\255\330<\031@\244<\3142\236<a\347\251\274\374\241W<\014\031$=\320\323\202=J\277\344<\272\003\215\274\n\311\243<M\273R\275?0#\275p\221\016\274l\201\351<.\244\022=W4\312=\370\333$\275\331\230V\274\253\305)=\262\252\\=\231\246z\275Sce\272\336\261a\275w\344\037=b\370\217\273h|\364<y\271y=\320\212\335\274\242\347\275=\024\372\000=\277\235\223\274\341\240T=\245\024%\275\205fS\275\276\037\354\272\351\254N\274\2540\246\275A\276\013\274\360\026\372<\022\264\230\274\267\255\034\274X\200\377:\352K\274\272\206#h\274\300\205\232=`\'I<[=:=\344\226\250<p\032*\275\340K\232<\"\355a=]\034(;\233\342\233<y\224\030=R\026\031=\342\0368<\346\366T<;D\204=\320\003\316\274\263\365\r\275\0003\216=\344\246\251\274\240\372M=>).=(\036\254\273Ag\241\274\202~\255\274\017*\231<\377\234\214\275}\320\002=\353q\001\275\311\024\253=\271 \232;0\257}<b\230\t\274\035\371h\273?U\025\275\261\337\236\272\034c\000=\344\202\235<:KB;,\360\234<\222\216\317\274*\206:=\315\237\033\275\024\023%\275\235\367\220\274D\350\253\274(t\266=\313\215\324\274\355\t@\275`\243\312\275\202\261\334\273\037TB=\371\022\224:\351_\022\275\356\0302=\271\366\363\275\020\364\346<\362\271\353\273\240\2008=\201\317C=\347H-\275w/\003\275\027\316\016=\375Z\275\274\363 y=>6M\275\204\237\202\275\277\226\222\275^\230\211<\263,\223<I\366R=V\222E=\275+\331<\221\311\005;G\252\030\275yn\030=\207\355\274\275\340\367\266;/\274s\273\\,\333\274\306+d<\r{\257\275\213\215Q\274w\256\211=s\006\032=t\013\213;sS\272=\021H\003=\265\344\226\274\255}\203\275V\271\357\274\336R\017=\374\017V=\017\312f=\265\276\005\273\253\020\201=\202\177E\274d\331t<G\004\230=\335B\373<\364\345\374\274\302\260\223=4\224\010\275~OU\274\242D\244\272\037\312W=o\020\233\275\004Rq<Vr\343<\236=\231\275\261\372 \274&\320\002=\177\227b<C\335=\275\377\351\003<\316ON\275\205\262L=n\006\352\274\215w\370\274\242\005@\275\2602f\275\244\3662\275\351o\375<;\246\004\271qS,=\266Z\000\275\027$\177<c\nG=\357:m\274A\231\226=\2379`\275\335\2235\275\317\301\304\273\220`\t\274\033\237\247\274\022d\217\275i\201>\275\277\345\276<\031\323*\275\270\365\346\274\005f\240\274\372\361$<\237J\227\275:\"\030=\243&\327\274\247A\003\275\334\247\001<8 \270<\306\305\235\274\207\302><1\302\031\275\332\242\006\275\231S9=Z:\244=X\206#\274\275\340\033=\244\246\002\275aDG\275\361\206]=\360\312\264\275\337k\365\274\271\361\006<\257\253\361\275& \262<\267\351\301<\274&\227\274?\345\315<y\304\252\274\346\204]\275\000\2246=6_3<\364\224\037<.\'Q\275_\237\036<\250\226\251\274\217\353\340;\360h3=\005\352\217=\035\361\352\274N!(=\2705\263<\361\270\314\273\273#y<*I\023<m\253==B\261f<E\"\036<\266\264\277\273\373\241\263\275\355d\327\274\333_\312;\361\306\303<\300@\200\274Etk\274N\264\261\275\351\003\002>\272l\207\2743\037\211\275#W\273\274\253\247\213<gZX\275\2375\214\275\265m\221\273\211f\317\273\002[\216\274\221\216\305\274*\244\212\275\003\234\005<\343Y\344\274\236\032\026\274\031\034M\273\024\277\275\272\265\3364=\371$%\274\264\272\020\274U\344\230<r\3619\2758I\323<\275\313a\272xpc\275\312\367\031;M\025\275<\330|{<\355Q\255\274y\377\352\275}K\027=\245\235\216=\372\333X\275\017\\\001\275\224MD\275f\210B;l\302\003<\036\223?=\311\354;\275,\236\014=\013qe=>\363i=\025\030\301\275\316DG=V\220|<|\325\211\275\312f6\275\373S\246=Nq\345<]\251\014\275D2s\275\3074(:l.\007=\302\2425\275\236\247\034\275\002\231\205<-\214l=|\276A=-)\223\275\322\352^\275\3129\235<\273\302\252<~y!<\256\307\005\275c\311r<\372`\037\275\n\002!\276\206\211Q<\245>t<^3\007=\331e\023=^\022k\274\234\233\367\274uYr;\311\031\'\275\335\222\212;;o\210<R\276\005\275]V\023\273oh==\000dr\275\2228\311;\224\240!\273\017:V=\346\334\333=\374d\337<\355R\r\273\250\203v\275\241\n_=\220\242Z=l0\"<\376\3767=B\3706\275\211\243\027\274\345\245V=\365YJ\275\264\014\025\273\262:\345=RH\277\274\247\231\202<\241O\253\274\330\032\241\275\243\220\367<\373\241h\275\256\272\355\273G\244\002\275\216_\310\274\304\245\013\275\335\244\230\273\343\301\263\275c\3162\273[\337\202;\333\353\202\275\361\"\211\275\260\225\320<\245}\222=\333\223-=\231y&<\"2\226\275j\274\216\275\327aZ=\366#\026\273<,\250=PD\207\275XN$<\212\305Z\274\020k}\274`?\345<\321B]=\013\314m;\353\337b\2744\027\032=\331\023\n\274<\253\026<\264^\\\275\027}F\2756L\215<\367<\245: df<\027\252z\275\370uf=Q\251\335\275U\272@\275\037\307/\272!ju\274\332\356\007\275\025/\241\274\347I\264\275\355S@\275\203]l=\230\245\371:\342&\002=xA\300\275\306\001\322\273\n\306`<\032{\343;>\002^\275\200\267t\274M\000\347<\"e\267\2752\230j=\231\235\027\273\222v\320\274\232\232\332\274b\333\214<\"-\224\275\217g\220\273\37313\275h\274\210\274p\311\305<\373\251\306\272hJ\227\274V\335\261\273\355i!<\t\214\223=\215O\030=\3652\022\275\331\351[\275\271\367\310\2743\311$=\274c|<\271>\365\273\320\243A<r\233\024\275\225\016\305\274@\244\r=\357\302\254=.f\275\275dq4\274\235\232?<O\037\260<\375\250\037\275\257\216\323<I\250\035<b$\031=\347m\300\275\324k\225\274(n\202\275a\305\036\275q\315I=x>\243\275\226\036\035\274oW\346\274,\246\231\275@\264\336=\276q\367<\342\230\027<\010h\213<E\356\325\2747s\271\274/\262}\275{!\233=\362\352\250<V\205\202=\316\014\230\274\343\356;\274%4\264=\\\207\375;:{\217=\253A\013\275\272\367\222=4\255i\274\305\241\333<C\021\200<NJ\262\273\003\266\266=\231jp=%\360\222\275b\024I<a\212\212=A\212&\275\331\302@=\313\343\021;\362!\254\275[\221\361<\315:]=$\027^=\373\202\212<f5\365<\356\363\247\274\270\035\261<c\376\342\273$\337!<\376\321\014\2747\237\270=\301\257\205=\375\022\363<\261\362\014<%#9=\022{K=\222D#\274\310\375\230<\335BV=\337>\264=O2\305=]\317\215\274J\370\032\275B\014\034\275O$\033=\333S\243=\333\004\215<\022\3537=qN\360<m\345\225\274\\\302\200<\247\321\252\274O\026\304\274\224\260q=\241\214\353\274%\362\276\274\312\270Q\275b\347\270\273\277of<\007\313\245<\311\236\260<\t\370\224=x\t\334<\247\366y<\363;~\275.\220\037\275e^\257<y!\n\275\333\033\302\275S\000\007>\366\332\020\275\214\211o<\037\335s<\013\031\025=\016\375c<e\350O\275\223\257\332\273\\5\220:\351*\252=\036\004v;2\310x<4\231\316\274\304\321|<\21246=\004\331\272\272\215Y\306;TR6\275\2146\340<H\004\236<@+\013=U+U\275\333G\200=\204\246\225\275\033b\343<VcJ=\326\214]<\332\343\007;.n\204<\215\324\035\275\366\177\203<\010\364s\274\310\234a<\311{\020\275\200\225\253\2742\345\327\272a\"M\274\235jc\274\372Q\200=\204\337\205;\023Vd;\335oE=\224\303\037<\370\366Y\275\303\241\033=z\\\3249\036\211<\275\3742\245\275Ss\242\275\246\272\363<\'\306\263\273j\035f\274\365j\206\275\320\020X;[[\206\275\363\3600=IP\n<\317L\001\274\267\276d:xU\353;\234\205@\275mE\235\274\331\035\317<\321\t\206\273\343\343\005<\246\302\262=1\3524=\342h\273\275\337\r\236=\022\023\320<\226\326\320<XQ\271\274\370\306>=!\037\250\275,El\274O\007\327\2738\234T\275\340\350\035\274\3558m<en^=\201Y5<\316Bb= 3\266=\202&\207<\200*c\275g\202\245<\026\355.=\201VQ\275\361\366(\274\346\255\237\274\265u\347\271T\220\244;\016[\201\274\274\276\264\274\235\352&\275\204\372\234\275?}\227\274lK\332<H\252\243\273\265\204\376:\334\235\005\276\006\014\r\275\233\272\230<\265\300_;\365\301\373\274\254f\202=\206\343\367\274\366\036\316\274\375@\010;+\370\210<\212\241\326<\342\034\227;\311\025\204\275\241qf=\225\252&=\344\023\211<\3172=<\317\256\222=\2601\214=d\037\253\274\212h^\275<s!=\201]\202\275\221\333\234\275\013\3374\275\307U\037\274R\022\225=#\206\213\273\224rn<\211\t\302\274xg\256\274\373\203\210\275>\345\030\275_\r\240\274\252\306\304<\201\205\313\274\"\260&=x\351\301<\014A\31296Z\324\273\301\261\346<v\353\344\274Ds\223\275&{\323\275&\376\364\275\305E(<\032\350\010\274\326\350\200\274XM\254<\260\007\210\275\263\n0<\317[&\275u\036\254\273\320\351J=\261[\273<9qI\275\3533\273=\323\324\030=\230 y=&\036\243\274t\025c\275x\017\262\273\rEC\273\225=\010=\021\022\031=\332\364O\275\270@S\273\030\343\r=\241\273E\274\357\324m\275\363\3533<\325\271\017=\2341\220=S\2256=p\320\317=\004\330\232<=\037\305=\177\3007\275\341\267j\275\353D{\275&H8;\234/H\271\035T$=\313\226\320<\252L\277\274\265\351\203=\017Sa=\262W\227<uid\274\256M\247<\270\244\222<\037\223\303\274\214\230/=]\312q\275e-J=\000\313~<\354\307B=\330\001\362<\320I\315<;\261\246<\213\017\214\2745\327\302<\235\n\250\274B\363\037\274 <^\274\2155\274\274\370-\223\275\322\255\201\275\016;\202\275\024\276\220<~&\324\275jT\317\274\t\366<=\244\331m\275G\200o=\025zY<\204\233(=pFQ=cR\217\275\346\010r\274\314\375E<\034\274\"=\305\177j;\256bI=\276\314*\275v\373\t=A\020\215\274E%9=\277\211#\275\234-\225\275\260\265\246\274(\243\031=f\262l=g\036\235<\363\326\236\275\220b?=$\332\212<\343\023.=u\203\213\274C\246\014\275\315\032`\274M\313\276=\351\353\n<je$<&\355s\275\210\311.=\234\353\325\274\327\367\350=y\000B\275~\362W\274\234\235\234\272\265 !<R\376\027=\230]$=\241\020\224<\213;\233\275\213\373{\274b\262m=\355K\246=\212\327\215\275\200\314\252<\364I\020=\201\251\306\274e\246\000\275\001\201\021\275\253\"\245=\200\032C=\220X\033\274\227\242L\273*\256\202\2742A\231\274\035G;=]O;\2751p*\274\t\3755\275o|P=Q<\270=A\020I=\255\200\245\275\324\255;<\n\202\320\272\354\247\217=\256\304\344<\255g\023\2755\370\341:\357\261\232<\001\004\366<\317+\032\275\217\372\335\274`\243\r<\031\350P\275\250le;T;];\331\262\245\275\272!\363\274k~\210<\335uH\275r\010d\275\250\352\271\273\207D\317\274|\244h\274 \346.=9\332\204\272A\n\260<\273\251\025\275y\234\337<.D\304\274t\004K;\350\375\261<\352\031\221\275\243\202\006=\232R9=\'J\305;\211\332\257\275\207\0013=\332)o\275\01353=\177\344\302<\252\212\257\273`\213\374<\302z\264=?&>\275\365\023\020=z\021:\275\026\033t\275\273\316q\272\211\225\017\275\2537\201\275sdQ<\203\032\366\272\372L1=\202\201\027\274\314]~<\357\031w\275C\000j\27461$<D\0077\275\273o\247\275|_\237<!\217\233\274\364\025\341\274\301\272\344\274\307(\335\270\222\212S=\317\017\003=]\014\203=\203\n\264\274-}O\275N\301~=\\\343o=\375@\241=\325A-\275\002\271\252<\327&U\274\274?\037<\333\352\264<<C\233<\226\243U\275%P\371\274\344\177\210=jw#\273\333\205(;\303RU<\231:4\275\016\267\245<\022}\212<N_0\274\214\317\231\275.\006p=\247l\226<;<\022=\035\024\203\274!w\202=\242\273$\275\221-\256\274^\337n<\241\026\300<k\367\346\274\1778\336\274~\217\014=\016o\243<n\364\345<\320+i<\364CM=\344\315\257<m\261\216=^\013\204\275\355V\032=\006\364\317\2748\274\273<2\304+\274>\217:\273\270Q\233\275\023\303\316\275\346\201\003=\307\202\204\2751\267\002\275\317\245\036=\002\362\212\275\226\0306<u\310n\275\263\326w=\007\201G\274\235[\224\274D\2501<\200A\342\272\202r/\275\'\246E=\224B\261<\213\314\264<hM\372;\237\275\247\275\212d\250\273\014\307\201\275S\260\0239\021\352J=\033\025Z=X\024^=\"\372\003\274\t\331\206:\252\323?\274\363\325\010\274F4\322<0BC=\024\301\204\274\332\362\235=\005\321o=\253\362e\275Y4,=\010p\240=\375\331(=\1779\037=\02169=\r\236\222\274i\3726\275n\303-\275\255\255V\275U+l\273\251l\212\274w\205T=\325\323\214;*]\023\274f\224%\272k\335\020\275\276\352\000\273\370\016\021=\3132\230<A\301\244\275\177`\371<7\240\035=\230Z\244=\217b\235\274H\314t\2727\234\217=%\006\225\274)g\327<\023\177\342;%\307\335<,*\'\273$b<\274\016l\341;h\211\013\275\234\236\326\274\256\027\304\274Ee\r=\336XD\275C(\203\274X\022\034\275k\317\246;\322\022p\275\227\211\243<\247\023\t<h\302\r<v\264\023<\277n==\322ve\273l\272.\273e>\224\275\234&\204\272\347R\342;\n1\245\275\275\344\274=\261}\206\275\200n\303\274o\013\375=\317\270\'\273.We\273\353\214`<;l\300<,}{\275e\272K\275-r\242\275\257\017D\275\233\357}<\353\332\274\275\310\227\205<$\\\323\274x<\010\275E>b\273P@\336=[\024\301\275Ig\024\274_\010\240\273\347\036\022=M\231\222:\315\017\210<\264\215/\274\334\200\025=\246\271\257\274\241\303*\275\214|\032=\363\3138<\357?\252\274\232\372O=\020<3\271\257\004Y=bh\324<\204\377\241\275b\247u\274\361\320\022=hf\341<h\201\177=\\\354\310<\263\254\203\272_w\005>l\331\304=\323B\344<\337\226\026=[id;vMh\274\\\206,=\214XU=\262s\007=\361\2159<\255\220\224\275^&\351\274\261{B=\306D\232=\027J7\275+=\346\274\252\340\222\274\234\247\205\275\207&\220=Y\260\200=\350s#\275 =\222=\236\351\357\274J\217[\275\306:A=\262\r\010>\225\374\354\274b\344\243\273\301\206/\275\224\221)\275D;\347\274\230\031\005=Yf\023=\313\242X=\032F\221\273\356q\376;w\334v\275\204\213\r\275\007o\211=\250J\001=\215\202p\274\025\317\234\275\006q\324<\356\241\330\274\2329\305\275\030\200\271=\237\220@\275\306\206x<\204U\272;\000\225\252<\\U\313<\312u7\274h\225B\275m\340\201=\371\013Z=k\226\020\275*\373\354\275\270\335\301\273L{\\\273h\036\264=6/\035<\177(B\275\241:\325\273\031\275\033=\252\224z\274E\177\"\275\313\223\221<\204\372k\275\207\302w<\302\336\312\272\006\214\263<\320\032\177;\256\304><\034\254(=S\243:<`2\252<h\354\024\274OR\356\274\265\211%=\323I\262=\300\262$\275]\341\202=\340\212,\275\302e\212<\353\325\347\274I\346\366<:\334\t=\340,M\274\316\224\215<\007\255J\275\271\024R<\234\222\n\275\314\244l=\027\r\020\275\200\271\321\274\320S\031=\001\351\367:\030\231\241=\025U\270<t\253\'=Uh\032\275\372G\025=\201\271\302=\341\201_\275\265%T\273\027Y\201=\243\343\007>\357[\225\275Y\370(\273\263\372f<\255\223\207\275\324\325q\273\220\311t\274\313\027\345\272\347c\\=\242\233q\274\224@\034=\034\000)\2755/\345;8\274\276<\317\357\n=O\2035=e\031\347<H\2749<82V\272mf\206=\335y\223\274\321\234\232\275\341\t\211<\306\323\306\275\265=,<\307\350t=K\027\216=\264[\326\272\267x\213;\303\307\357<\357\232C<\324&\222<\0160)=\322q\254<A\313\n=5\264C=^\322.=a>L\275w\263@\274\273^\207\274\005\013N=\355O8\275\020\013\320\275\337{\377<u\266\036=\274?g\274\311\031$<C\007\240=\355y\217=\3451\232<\033\320\010\275\330\3377=J:\005=h\264\373<UwL\275}g\331\273\316\300v\274\356\232\203\275\350,\276\274\233\017\343;\277\211\267=\263\216Y<)}u=\325\026\264\275\010\003f=u\375$\274\275\215\315=\362\227V:\2054\266\275\366;\203\275\335\336~\275\242\371\333<\271\314\t=\376\022\344<;\n\243<\313\250\037<\256\253\204\273\317\366.;\016\026l=\224\216|<w\"@\275!.\226<\217\272\"\273)\365b\275W\252\346<L\243\206<\2227E<rF\375<\272\373\253\274LpU\274\322\247k\274\236\316\265= \217l\274\2548\210<`?\'=Y\031_\274\220S\213=\363\322\227\274\231\364}=\227[I=\035LC\275Y%S<\223f\343\273\254).=\324\035\336\274\203\\\214=\215\334W\274\271\031p\275\013\265G\274\335U_\275Q\371\241;\000\034A\274\336\241\004=\234Q.;\026\343\017\275\366\334\326:=1\206<\333\232\357\272D\231\202\275Q\245\377\273\341\235\333\274X\334}\275y\303t=\224\353\376<t\205\004=\000\345\307<\203s\244<\3623q\275ym\025\272\221\305\244:=\232W\275\007xG\274\004q=\275\004\004\360\272\230\341\326=\243\335\376\2735\343r\274\022\311:\272\365\313\202\275\262\252\202\275\342\205\030\273\274\356&=\244\002\017\275\252)\006=R8\237\2737\370p<\315\255_<\253qT=q\216<=\367\234\3668o\331\233<\276\227\337\2744\\\001\275\356?\007=\242W\005\273,\354A\275\370\337\305\272\317l\222=\234\276\301\274\230j\'\275\027\276\213<\265\210\2179;Q\247\275l\225\243<\230,\252\275\244\275\004=n\272S=\250\230\251=Q\332D<4\302\003=0\317\233=lu\241=\365\352\005<8\316\234<u\372\223<l\034\255\274\024k\014\275\351\232+=\321|\215<(\242\303\274\016\342\303<<p\204<&\325\231=\340\031\\:\353R\r\2750\367\344;\333\224\003=\222\371\221=\272c\343<\361\262\346\275q\224\315<O>\232\274\321\233r=\312\014\350;\300,\211\274\240\273\300<\016\231\020=c\177?=\313\3564=\313\321J<\000\305\025\273\314\022t\275\226\025\264\275\204\312Y\275\0079\216<\243`2\274\0350y\273\252\353@\275\246\304c<U3L\275\356\256`\274:\321\351<\364e\n\275|\376B=\364\014/<b;\364\275\006f\007=N\200(\274t\364\255<:\316]\274\264\234\270\275\303R<=\347Y\200<\023`\244\275X\\K\275\214\362\010\275\236\306\003=T\244\005\274\244\020\031\274\242P\204;59<=G\022\230<\361\350\222=\335\262p\275oS\320\2723\246o\2738\355\013\2757\305u=3<\264<q\226_=\270.k\273\003\010?\275\3663\032\274\345J\201=\336\204\213\275\265L\003<\321\211\250\272N\306)\275\313\243\341=\256I\305<ia^\275:S\003>\010\337O=f\023\262\275q\322s<\255\273\202=-5~\275;t\227=Q\'\205\274V)\254\271+=\275<\013\000\217\275e\245\262<\010\032W=\250_\371<!\376\035\276\250\3042\275_l\210<\342\357\312<v\216%\2736Q\271:\2276X<\342\215\205;\224\234\356\272\337\037\270\275\273\334Q\275\321z\373<\354\251\213\274\036\\\006=JR\020=-3/<\230&\022=\0241\236\275\203r9\275\005\235\342\274\023s\016<\377p\275=\316G\254\275_`\032;\273\203\266<5\343=;\210\3703<\353O\206=\231\324\007\274!\210\231<\320Q\022\2747\307*<\250\232\250<f\243\232\274M\244\227\274cO\207<\212u\315<\255/\233\274\024\215\334\274\203\340\246\274~8\203=\027\215\254<\337O\255\274\010r\256<g\013\355\275)$\031=Hr\224<vMJ=\333\325\224\274\361gn=\206\352\215<\345\362\270\274d\352\326<\272y\367;#\247\236=D\013,<\305)5=V\342\026=\020\020\037=\357\227\r<\033\233\316\274\363\366s\275\033\373@\275\3460\240=\342m\242\274\253\223\214<\0176\006\275\230\004\374<\207?R=\206\034p\274\345*\231=\352{\222\274\267\275\371<H\245\273<@V\'=\034\367,=}\nG\272\341\207\267=\215\000v=\323\320\026\275G$\033\275\272\371\036\275\374v\235\275\305>\225\275\231a\274=\202\306\300\274\016s=\274\014\001\214=\036j\235\274\262.\000=d\304p;\271\202\270\274\024~e\275\306\';;\210\256\373\2740\003\244;,\241\014\274\232\234x=\217\213\001\275\331y\367\274=]\022\275.g\216\274\216\032>=\351\222\007\275\375\220C<9\223\020=N\314N;q\252L\273{=\373<7\335\202=`@f<j\033\207=\200\334\320\274v?\306;\344\337\272<\221\240\013\274`\265$=\277\357\205<\246\210\342<\372\300\226\275\027\202\233\275Q\037\034=o\252N\275Y\327m\273\327\031.=<\036\220\274\272\004\256;h}\027\2756\216A\275\242\014\260=\327\025t=\212\224#=\217\265\211<\342\317\017<\261?\010=e[+=\226\255\016=z\373\021=qy\360<8\023F=\334i\021\275{wH\274]\244Z\275\221\270\245\274\351\235\224<\3649\026\273\357\001\240={+\251\275;\361\207\275\371\335\300:\271\247\320<\202\224\214=\344\016\013\2754\203\273<Q%}\274\271|\001=\361\200\013=@ \225<\251xD<\313\353$=LF\025\275F\022\250\274\362B\222\275\316\343\342=;\3426;A>\335\274\0254^;\257r\n\275\364\364\032<\010\373\024=\203\233`=\2612\020=\227\202a\275\271\226^\275\331\204\207\275\370\343\222<X\021H\275\364\205@=\263\2246=\\\035\217<\'\2114\275J&\213\2736\304\':\302\010q<\360\2016=m:i=\307\022p<Z\345v=&\314\201=\275\236{\273\275{\030=g \345<\203\323F=\332\203Q\275\206\021V=\037\303\026\274\316\341Y:\217N\200\274!\317s=:A6=\300\335\320\2753\370\255;f\016X\275\033\307 \275+\313\316=\260ya=\341\344\234\274{[\036<q\231\250\275\272\261+\275\345\250\020=\311\324\367;K\315\262\273i\024\312<d)K\275)w\205\274#/\345:^\237(\2751\216\231\274.\361C\274\0208b=\"\020}\275n\202\271\273\224`.=\r\rw=N\020O<\200G\231\274\302\201\203<r\n\324\274_\370\271=<\027Q\275@\200V\275ly1\275\363\335/\275Z\335n<\231j\273\273]8\200\273\367\270\360<\016\306\302<\337\265\200\275\360C\267\274\353\304L\275\362\370\250=\021\026\252<p\347\020\272\245\3778=\253\371\234\274\254\022\362;\374\332\253\274\205X\014=\250\232t=I{-=\'\177\223\275p\356&\275\276\343/<\326\032|\275\020Y\032=\327\305!\275\266\310\223<OS\245;\356\321t;1\237l\272\344\305T\275\307;:=Zn\035\274\2443\365\274m\345\237\274@j\202\273k\225I=z\360\333\274)\363Z=J\357\017\275\300\211\337\272w\3615;\233*\000=:%\253\275\320t\304=\237\316,=\313\002\033=\355\222\005\275\322\030\224\274Y\376\262\274\356\036g\275\260\335\220=\374;\373\274\336mu\275\230HF=HJ\260\275\213\354\367\273JZY\275\035\002\353<6\330\030\275\200\237\210<\226G\265=\307\300n<\016\266\236\275\257)F\275\265\022\362<\231\301\225\274\203\235\210<\326\310;\274\244\005?\275n\346\351;\276\360\200=\372\031\332<br\214\275\301\3129\275\370\377\245<T\253P={C\317\273\027Wz;Q3Z\275\215\307\022=&GM\275ZF\007;\201d\006\275\002\013k\274\275\320\342\274\241K\r=\246\362r\274*q\215;\366\203\362;\346\0313=\274\022\025\274\321\241k:\253\177\333<sgx=\242\262q\275eR\r\275\367\350\\=\026r\002\275\202\270\272\274w\0042\274\'\332\247\274\'\317\362\273\026X\372\274\327\"\t=\343Ce<\275\032\032\274\246W\253=\327\241\361<\221\3631\273>Q\201=\275\342\017\275\256O\302\274\356g}\274\343\203\253\274\tb;\275\357\356==q\353<\275\253V\236<\355\364*=G8\033<B\314\272\274Y>O=\021R$=\r\256\231\272\327j\023=\000\304\332\274\213\021\037<\037T\262\275&\241E\275\311\347\022=.L\262;u\224\022\2756W\250;\325\244\324\274\212\2507=\332\315\004\276\205\036M=\217e2<\314{\222=5\332U\275W\377\276=\334\234h:\323\243r\274\211\373\355\274|YF\275\260l\205=s\021\027<6\213\330\274\213\0001\273\022\r\207=3\303\317\274\222\375a\275\266\356\232=\\\332/\2745\276~\274\224.\230\274\341Od\274\266%\245=p\030\307\274\353B\245=\221^9=\326v\212<\n\345\257=\241\264\272\274\333\034\354=\345\212+=T\364\267=\225A\377;\375\0011=\265Q\264<\330\302\354;\254g\261\274\227\305\343<\254OH\275\372\233W\275\035\006.\275Vf\347<]\017a\275\356\3772=\256\344\313<*\317\227\274\345\035~=\227\277\034\275?-%\275e\373\244\275NPu\275\366\264s\274Ty\000>\306{V=\377\021W\2754y%\275\212o,\275\316\020\004=8\335\365\274|\251\315\274\355\017n\275\352\032@=\036@\343<\215\340\352;\360I\214\273\ti\r<S\367\330<D\375\024<\260\324\007=5Z\235\274U\265[=\370l\006=a\003\177\274\263\201\227\275\206\230\257<\260\350\264<\244_a\273\'R\306==\t<;$\332\226=\311\035\214\274\253*>=:\273\245;6\312\254<( \024\275i\245\344\274\232\022,\275_A\035=\3012\036=0$\242\275e@}:\032\r4=Qz\304\274\310W\366<\354\256A\275\237.(\274\262\250I\275\204+\354<\266l\014\275\317\230\213<p\243|;Z\314\210=\221\"2\275\022\342\232\275\347\303\222;\315\356\234;~l\260\275O\310\"=\034\247U<A\')=\363ZS\273|\233(<>\215\316<B\214\234\274g\240\236\275\224y\006\273\300\223\260=]\215\305<g\354\014=e\004$\274\370\2004=\331V6;\361>\"\275\223;p=\3522+\275\r\345,\275:E\364<\rgT<\241\253\236\275 /\356\275\256!\340\274\354\032\227=\325\0374\2750M\004=\210\353\266<\372\010H\274E]\200=|\371G=\343\341\337<U\243\223;\365*\331=&\332\\=\337\210\326\275\334\030\233\274|\332j=!a\026\275\000{\226\275B\005\335<*\372\244\273\"\345c\273\026\211\325:6M-\273\256\021$<D\031|\2756\"\313\274A\337\027\275}\227\342<\324#?8\363\333\277\274\0170\234\275;I\'=\t3\340<\324\004@<\330\231%=bK*=\264\270\227\275\255\253\217=\206\277\n<\n\014I\275\213\226\207\275B\343\361\274\273\325\004\275D\344;\275\324\0162=\300\037+\275\225\344\241\2753\272,\274\347\254\303<\327\331\022=\031*3\275\013\371R<Z\277\330<\343D\341\274\017z\001\275\005\023\016=>\327\252\274\206E\212=\016N\212=\032,\362\273\322\027\334<\346\3679\275mF@\275\266F\037:\262\373k\275Y\364\262\273[,f<\337\316\265<\214g\210;{$\207<h\3213=\245\352\020=\303<>=u\'\273=\376\277.;\030\311\275;\214\235\016\275\004\321\236\272\210\364\245;\006r\355\274\273\354c9l\341_<7\327\245\274[!\230;(\342\311\274\254n\246;\335gR=\217@\274\275Q\374\004=@Y\221=\037\"\202=,p\020\274\200\274u\271\337\351\254<n\335A\2742\276\t=j\372H\275\002\t\367\275\002L\003\275\232\366\376\274[@\030=\254\344\034\275\265\260B\275\252\024\344\274\177Z\003=\334\205g\275;7c=\201\266&\275t\247(=Z`\254\274C\322/\274\\L\020\275`\246y<%\246\022=\t\277\310\275\260t\371<\020\2456=A\246\001\2754\000\265\275_\2655\273\201+\230\275\337,\312<\377&\017=\351b\337<\341\302\334\274\226\004<<\352M\247\271_\253\225\275\246\262\244\275\242Ig<\271J\334\274\315(\313;\304\307<\275\353\3409;sum\274{5\330\274\363^7=\275\243\264<%\260\247\274\200\207\335:{X_:\224F\017\273\177\211\261\273\312\022\352<!\261\201<\033\300\231\274\032\235\331<\356\254/=2\307\"\275A\200\310\274\020\244\223\273\3526\366\274\267\334\325\275\030\372\243\274#\377\200\275\260\331D\274\214\320~\275\262\t\210=r\341\023=9\226\232\274\351(\231\274\333e+<\014b\326;\037,\277<\237~\n=u\373:;K\374b=r\375p\275\206\034\230\2744\340\202<\2547\320\274\266\341\277\273)\231\363<Bp-<\233\260\017=\205\336\346;\241wv=\031\331m<\251|\264\274\262\331;<\307X\303;&AS\275<\225\235\275\024\204\307<\325w\025\275\365\247\261\274\321\215v<\354:\300\274\243+\335\274\313\nz\2750\014\347;\214d\214\275\354\244\244\274\223{\002=\204\270=\2752\315\243;\006\t\0239\205\206?=\032j/<K\251\347;\254\357\347<q\343\022\273\263\303y<\251e\314;\320\332\342<Q\326D=e n\275\364?\342\274)d1=\'\024\367<\277\215\321\273\200\027\222=\345\037\3509K\310z\275@R{\275\206\3066\274\375VN<\365\353\034=2\311\375\272\336I\357\273K\246T=\033\257*\274\037R\034<\243\346?\275z;\300\275\221\276\247;\220{N\2747!\241\275\312\247\374;\341\237\321\274\330+9=\201#\223\274H?\330\274\337/\262\273\275\224\322\275\357^\200</B\240<\207\005\025\275\021#\302<\226\266\220<\337\214m\275\327\203N\274\244p\254<4c+\275\350r\350\274\316\020\244=\321\311c\273\024\244~\274\3303\322\273\024\223\273=\322v/<\003r\002\275V\266\272\273\276\"*=\205\021\034;j\343\021\274V\255o;\232CZ\275\221\352\244\274\"`\363<\332\362}\275\034n\275\274\315\027\031\274>\177\026=\031\266\340\274\364?\325<\306\230\265\274\354+\301<\027\200\226\275\375(\274\274O3B\274\207%\321\274\271\026(\275\265\".=\316\0160\275\247 \216=\033Xu=\346\306\006=\177\237\256=A{r\274\203\342F;m\230\024=.\246\314=\237V\003<\312\212^=\326\021\314\274l6\032\273\nc\225;\262\225\236<\340\331\320<\244~\312;\213\322\234=ri|\274z\367$\2757{j=\273\373\364<\221\310\275=`\302\242=?\213\244=^i\212\274R\361\r\274\362\177\315=A\221L<\334\365m\274\347\2148\273>o\027\275G\034\320\274*\373<=\312s\310\274\347\265\277\272X\374\300\274>\253\232\274\361\277\005\275\216\017.<\247\273G=Cab=\202\023\000\276F\034\256\274\311\032\257\274\352\266\224\274\255\225r=9\273\023\275\255\353\330\274\025\235]<\006\344\224<\024\354\037\274>z\321\274t\210\203=`\360=<\245\212.\275\374\203(\275\266ou\274F#\376<\255\323\323\274\027s\205\275\245\363\274=\300\002!=kA\305\275\273\232\227<9\331+=/\200\013=\214*\262\274\227\2153\274\022\377\265\274Y\224\363\274\354\237\026\274=\343\214\275\322\031\226\275\034(?<A\254\300<Rp\327<\273!\321;|\026\315=\2703\273\275\330\235\307\274\216]9=/\332\026=\213\237\321<\253\304\n=\367x\032\274o\010\225\275K5\326\275\244u\000>\t/\243\274bk\023=\210\324\033\273H\351\264\274\252\020S<\235\200\233<\013\230\267=\246\221\034\2751Sm=<]\353\274S8e\275\225\374\215\275\317\236H\275@4\010=\316K\022\272\206\237\222\273Sc\321;\026\244w=\013\270\366<\033\217\226\275\331\216Z\2727\325\377<$\273L\274/\'b=\037\370c\275m\355T\275)\017\330;\024\264e=\253\334\030\275\254A\225;\375\177m\275\331\234-=[\3013=:(h<\273\327\032=B\337\230\275\314\262O\273\267\365\337<xj\005\275\370\375\213\274j\254\201\275\327M\255<\323\2037=\243\364\252\274M\177\013<\314yK\274\023\2070=s\216\370;\305\266j\274\265\374\354<\247r\033>\352\230\231:>\367o=\354\351z=\354\020\207\275\024\341-=\310+Q\2744\245\253<@\206\300\275\312L\271\274\346.X=\"\367\213<|\207\"\274gS+\275\373,\024;6D\353;8}\260=w\005\014=\037\003^=%^\313\273>9\342\274\007\3736=if1\275P\336@\275\234f\350\274\203\326@\271\257\\\247\275p\205\247<7)\242\274r\256)=\025\010\307<\006\026\277=\266\235T\275\242e;\275\031\305\017\275\367\000\212\275\370\266\002\275\2174\321<\345EK=\352\357/\275s\016\222=\343\023\"<d\304\301<Qm\001=YH\235\274\364Y\000\275\021V\241\275O\275\256\274\210\312\215\274\337CZ\275\"*r<\251n\262\275NH}\275\177\'\212\2742\320j=p\3508\275\370p\356<\377\302f<`\203\270\275\3544\230=\023~\367<\317\203\206=\353\371\003=O\340\"\275\254\247;=/]\255\273\000w\320=?\3064\275\340\214^=M\346\177\275\014}\031<QaE=\265d\227=R\240\030=\352\246\325<N\220*\274^\367~=A\217+\274\315\"w\275\007/\271\274\264K2\2744t\237=\260k\247\275\315\257\256<\336\'l;\333^\257=m\177\374\273]\007\205\274\3172\247\274:\203\352;\373\"\r=\036\222D\275\033\034r<\035\276p\275\010fd\275~\t\332\274\037\376 ;\346\262%<\277O\317<\270\373\245\274UWQ\274\216\266\325\274%L\212\275\344\017S=\206%\026<\n\344\016\274\250\037)\275\304\024\023=3\243\216<\325\353\207\275\177\354V\274\005\274z\275\364\005\261;\227eV<OM\021=\260Xp=X\274(\275L\363F\274Wa\271\275\253\374\231\274`\014\263\274\350\n\224\273p\374%\275-XD=\243>\232\2751\010\243\275wi\002\275\371`\253=\243\367\251<\031K)\275\2209\245;\265\206\021=\036(g=\253&R\275]\335\004=\240>\354:\304\356\355\275_\341\005<K\225o=)\372\236<\3450\016=\245\325\335\275(|Z\275<\357\335<\357H]\274\3536+=\241y\320\274C\243v=R\271\034\272\354=\017=\336\033o<\003\206\360\275\037\362\177<\355\371\242\273\337\260\014=j\251|\273\333h\017\275Y\227\373<\277nN\274\202!\240<\243\251\227\274%,\'\274\001\324\350<\2579\361\275\236K,=\327\360K=aY\322=tU\266<\254\346\211\275\360\3632\274\363n,=\371\210^\275\356\266(\275\322\327`\275\246\273\207<\n\210\230=\366\333\256\275s\241\002\275\374\221d\275L\007\250<%\007\027=\355,\\\273y\245\356\274\213\210\361<\n\316\341\273\3007\316\275\2129M=\246\272\300\272@4\030\274\254qf<\322R\212=8@.=\361\362\236\274_Y\373\274\313\225\215=\360\207\242\275\344N\321\273\002\245\362<\375\355\251\275\200\366\r=t#$\275\361; =J\347\'\273F\210\237=v\026\226:Vm\202=\243\232\023=\261\217\003=\350\002F\274[yG<R\237,;L&\346;\374\321\237\2758\210\213\274\251F\276\274\357\010\270<\010\351d\275fZ:\275*Z\020\275\006\372\025;;\203\323\275\231\023r\274\326\340c<\310\276L\274&\374\361<\307Sb<\006\3358\273\021_9<\034\352?\274\\\204\t\275\361F~\275./!\275\315w\250\274M\323\202=d\234\205\275\3619H=xMG<\022N\r\275V\025\255\275\231L\371\274\307x\025=?sb<y\276\022\274t\254\022\275\362\230*<@l\"<`JL\275-&\334\274\360\2505\274\344\273_<\362[\230<\237\245\260\274\374\255z\2755\265\207\274}\304$=\321`\260=c\030e\275a/D<E0\372\274\251e*\275Q\321\207\274\333h\001=f/\277;\253\274\223<L\226\016<4\250\314\274D$\202\275\351e\r\275\010`\001<dU\227<[?\234<\244\\\005\273\177*\336\274\207p\305\274y\317\032\275OL\320<\372\343\246\275\354(V=\214v\377<\223X\242\275\304k\205<oD^\274\341\256\354\274W\343v\274As\242\275>\322\001\271\274\014\372</\001\264\275\013\263\241\274\265}\203\275\230\354\025\274\275\025\031=\t\214\370;\026\241\002=$<\222:\251s\345\272\000\343\342\275*\2769;\332\016\351;\307\212%<\353\252E=\202\335\304=\236\374\256\274\315\035\224=2\030M\275\357\277p;\266\333\270;`\337\022\275l\017\251\273\236`\304\274{\354s=~eE\273\220+D:kIF<\362k\240;\236\247\034=K\337\n\275\336\351\346;\226\230o\274\\\340D<\333\322\255=\020\214\230\274\323 $\275\364\232(=\375X\370\274\0130\017=:\370\244=\245D@\275>\202Y\273\364\206\357;7\n\2439\236L}\274\345>N\274\304\354\r=\235\225\360\275\013\230\023\274^K\004<F\231E\275\177\266b\272\022`\340\274$d\030\275\366x[=[@\t<\230\372u<\326b\004:N\325@\274\3606\004\275t\337\247\275\267\035d<\212\321\343<{]\037\275\tB\3329\232;\211\275\375d\233=\260q$\275\033r\"<\342\0061=H\301\245;o:\034\275\316\260y=\361\037\023\275\306\355\206\273\257b\360\272\263\315\306\274\272\023\250=\177\317,=~\t\t<\355\261\360\273|\372\303:\201\007`\274\030\223\216\272+\217J<\320\027\221<\247\214\207=\377kx\275\332J\245=\331\363K=\202oA=\375\322[\275\021u\350\274\336B\010\274f\037b\272-\277\200=\250\030{\275\177h\236\275\271\275r\274+\001{\275\020\326\032\275\233\326^\275\305\020\223<\342\253\342\274`K^=\271\354\325\275\236\355\222\275\334^\013\275\376wf;\004\200\312\274n\261\225\275\271\315\247;\3441\221\275\022\247-=\253\003t\275\342\030\215<\237}\222\273\221\252e\274\363\026\004<\022e\250=y\020\205\274\370\242B<\321\326|\275\306\217-\274\300{\306<\340\234\033=\250\\\315\275\343w\206<\031x\032=\356t\276<R+\361;\253S\337<\346\nA\274u1\245\274\003\237A\274\267\300\335\274jd\276\274M\236\247\274\005\307W=Azz\275EE\331;\224G6=\373\003M\275\371ET\275$\241\020\275\006\020\037\275)\026\371\274\027\3455=\n\013\200=\"QY\275\024W\016=y\223\251<l\363V\274*\234d\275o\212\301<RL\234<)\255]=\301ng<\365\317\220\272/\343u=6y\021=\217\226\016\274\225F#=\205\205\206\274\026\204\362=s\216\355\272i\034,\275\303k;<w\346\022=G\005n\275\276\376\\\273\256\263@\2755\303n\274H\303\036;\312mx\275(\n\206=&\355X\275\326S\271=\200 \235\274dU\227;\322\036\001\275\307\030E\274\367fn\274-O\252<\"\236\225\274\327\302\023<\311\344\205<\016\210\033=%\037b\275\317$\236<p\2742\275\347\361\240<\343\250><\356&\377;\220\"\006;\371 \222\2754\004\031=\3071\020\275\305n\271\273\275 ]<Q\206\353<\233:\360\273\305\252\251=\350\021\006=\243\316E=D\265\233=>\300}=Co\225<\322\016\217<yZ\222;\037?\206=c\001Z;g\021\321<\331X\223\275\3156C\272Yj?=o\231:\2742\366t\275\213s\035=\243q\234\275P\t\032=\247h\002<\3359\035<\017\200\314\273\213=\263:\006\255\217\274x<\327\275\300\2526\274\366y\227=\314\247\236\275r\321\327\274\'+\302\274\027\217\224=s\027\022=R\252\037=?E\327\275\331\272\'<\223!d<\362\005l\275\0022\247\274;T\321\274\314t\r>\rPS=\332{9\275D\337P=\221xq=\230\243-<\264\205\n\274\211\331\255;\003Vx=>ol<P8b\273Ow\352\274N\356~=\tx\375\274\243s\024\275t2\221=bFH\275\033\376\010=C\r\353\273sJ\220<\020\366\211\274\206R\376<\344\352$=\035\023\242\275\274.\'\275\033\263\230<\021\245]\275\310\352\334\274SD\204\275p\334\023\274u\371x\275;\222^=\224C\226\274/\300\026=&\253\031\275\037\240\225\275\321\321\037\273\300C\371:1\345\250=O\250\224\273\347\247\014=\305\227\\=\237\275\032=\305b[\275Yq\245=\363~.\275\217\230\246\274\344[O\2755NP\274\":\032\275\266\016\346\274%\234\221\275\233\000^\274ao\254=\371\254\260=\272\350\276\273\350\006\273=\265\213\345\273S\337I=GBW=\325\313\023\275w\314\260\274\223\227\357;\003\302\220<\343\254\014\275\252\204T=\303\3448\275\205\232\275\274*5\311<\037\247Z\275\345\314\267\275\217,X=\217ng\275}\216\226<\367\305\002\275\0322a\273]NW\275;\304i=\227\317\321\274\n\340\324<M~\035=\362j\246\275\\H<\2748\033\240\275\233\017==}\361\232<\2035]:\346\322\t=P\211f=\207\202{=\347jP\275\217{\323:\306\364\250=5b\027\274\346N\321\273\036{\275</?\201=n\233\033\275\334\300\231\2744v_<\377\357\023\275D\322\315\274\246{\261;~\320\216\274x\214\334\274\\\t\005>&e1<2\334\206\273h\352\262=\330\220e\274\003\203\351\273&l\364<\366>u\275\261\303\r<\230\255\275:\237|\251\275ts^\275\221\313\352\274\334\372(=|\332\232=\216\004@\274\275-[\274x\2038;\323~.=L\216\227\275\251\307\305\273I\353\r\275\216\233~=`q\036\273\201\240\276\274X4\243<v\351\354\274m\334]:\210\340\206\273S}\212\275\003\2269\274\321\223b\275\245\301\217=)\247\200\273\270\267\006\274\037\355\367<7\265z<mbB=\221\256\243\275\241\261*\275\014\0333\275\306\rb\274\327\000\264<\246\022\030\275\021\022\353=y\006z<<T4<\245xr\274\372\233G\274KW\006\275\312|\275\275=\334F\275\210\377\375\273}r\001\276\033g&=\350\224\001\274j\367\217\275\341N\177\273\217\332==\001\321\022\273\361\016\374<\315l\034\275@\344\226\275\325W\353\274x\024I<\002\277\242<\325\'\315\274\214%\211\275\222\254\235\273\035\242k=8\204\023<Y~\016\275/\013\020\275\010B\271\275\3629\020\275\312\030\354\274!\n\265<\347c\t\275e\232\317<\024\215\253\274\206\210\374=\030\212:\275\024\277|\275`\275x\273%\210m\274\257\330\235<}\362\021<R\017d\2756\362>\275\246R7\275\241\273g\275#\032@=\257+==n\233\245<\245T\210\273\234\266\210\271\005\303P\273\367\350\227\275.C-\275#\001V=\353\361/=EV==\350\270^<\300\264\341;\251\274\363<\201M\\\274\225s\306\275\363>\0309d\311r=Jo\333\274?\214\227;\273\327\276<Y\362\257<\243\007\224\273\304\231\377\274\2775\241\275\0010!\274\212\013u=\312#\276\275\261@\330\274\251\255\n\275D\245\201=q\313K\272\0272&\275T\025F=\337\ni\274O\030\027\275\237c\201\275\367\266\342\2746c\035=\230|\312;[*\362;\315x\210<F<T:;-\352<1\352?=\325\235\220<\366V\220\275\003\304\326<R+\265=\316\3172=\201\363w\275\217\255\272=\216[\344;\333W\257\275\332\026\343\273\302_D<\353\001]=_^\226<\350\360\343\274\306_H=\334\260\202\275\275>5\275\202\344\242\272\263\223/=\266\201e;6@\226<\333\014m=a\235\275\274b\235\243:\363\027\266<\367\230\361<\305,P\275+\245$\274\211.O=\365Q\221\274c\362\367\274\311\362\226\273\252oZ\272`\177\304\275\217\024\352\274R\226\223\274\244\202`\275\006\241x=\357\257\331<X\035\013<\205\321\242\274\254\020\004;_\341\034=l;`=y\214\303<\273\027\235\274\301\235I\275\252\374\317\274\027J\243<\320\253D<\0069*\272d\031R\275\220h\233=\006\264\224\274\354\n\212\274\215\032)\275q`\370<\371\316\215;A\246J=H\266\275\274\222\333\023\275p\317\027\275\0019\025\275mh\263\2744\277N=#\241~\275\207\345y\275\'\253\311<\267\242\202\273\306jn=6\364\243=\241@\222=D\214\013=\204a\341<\013>S\275\027K\307\275\207\010\240\274\236\271\271<\305\254\201\274\237\014\247<\000\356\277<\330\2436\275\020\236\266\274o\272\332=XX\250\275\263\265\251\272\024\200 \275\363=\345<\177\031W\275]\320z<.\2257=\"+\270;\230\037\200:\353~\206<o\266\353<g\246<\273$\302a\275y\222n\275\201JN=\002\257\261\275\344\361\256:@E-=\264\361\320;/\370P\275\306\303%\274&@\262<\203\362\257\275\310A\004\275\003\"\225:\362\2676\275j\342\365<\365\267\205=\021>U<\036\"N=d\336\024\275p\014\033\275\003gX\2748\2317=\3043\367;\021Ir=V~\365\272\225\334=\275Jv)\275\016\341\232<\273w\346\274\236C\202<\356\361\204\275\322/\230;T\"j\275\245\265D\275+j\305\274&\256\367<\236 \363\274\236\232\024\274mT\035=\255D>\275\260\252y\274\211\027X=\340\361L\274yh\253<\354K-=\374f\022\275P\337\210<\344\'\337\274\271P\344\274F\2557<T*Z=\034\303O<E\262\001\275\266\034\350;FZp=,\316\025<\330Eb<\363z\236<+\252\007=*Y0\275\201\021t=#\330\223\275\\`\321\274\256\356\277<\245\005z=q\022\375<\351\213\211=\013`w;\2259\035\275\347\214\343=-\177\3769\'\214\270\275\242\270d\274\016\374\003=\210\262_=\364\311\373:?\023\205<\364\325t=(!\255\273\252\'\350\274&|C\274H>\024\274\301_O<\223\324N<\017\217\231=\354e_=\0174\036\273\327\334\317<\003U\224<\026\024\326\275\241n\240\2757\326\204\275!\333\215\2750\231\231<U\000\346\274\253\016\224<k6\000=l\347\022\275\343>;<\201mV=\360\247\246;GH=\274\215\236\230\274\322\'\321;\032\334V<\020\035*=\332L\241\273\235\322\002\275\230\336*=\245\013\201\275\336S\257\274\231p9=\277<\037=f5\277\275+\035g=x\274\033\275\302X9\275q\227\345<G!7\274\207I\n<\261\202l<\366\356)\275\271\322\326\273\357\323\315;\265\263\370\2748\354t=\210\343\350<0\316\025\275\235\345\343\2748s\360<b\002\004>\223#.\274\004w,\275\362\266z<\"\314z=\246\273\224\274Z\317\301<F\246\016\275\022\234\263\274r\005;=\256\311\021=\274ns;\235\331\027=\263e\032<\202\316\376<\002\245i\274O\030\267\274x`E\274\335k\334\274/\356\371<C,\215\275f\377\346\273\261BO\275\221\213\204\274\331\347\204\274\013\250\222\274y\251z=p\327x=\322\301\010=\350\324k<\217\332\343<@\217\213=$\017q<\344~\035=2\341\370\274\007\t\007;E\363\262\274\275\356s=\303C(\274 \325@=\314\217\306\274\243\227\336=\271`\270\274Lk\222=\204\227\025:D&s\274\2041\223<bO\357\274xf\"=7UH=Fr\203\275Z\301\000=\306d!\275\224\016\265\274\302\335\177=\345\000\037\275dN1\275Q\324/\275Ms\340\274\270\357\026\274\006d<=\270n\026=j\034z\275 \275\032=\340\334$\275\256\033\361<\212)\003=\211$\013\274-\212\343;\252g\"=`\267\361\274E\315\240\275!\221<=-j\213<\220\245\260\274\242\037\033\275\330\246f\275C3\326=\364x\241<6+\247=\201\035\023=0}\264< i\r\275\nD\321\275*\233\203=\230\024\206<\010\026\r\275\302\211\035=\215\021:\275\332\263\214\275\340\345\243\275)v\022;\234\001\201\274\316\243\202=\323\305%=,\023\343\275\226\252<\275F\262\220=\242HB=\272\216\026>\22778\275\325k&\274\305\236l\275\371\033,<T\261#\275\357{\004\275\362\033\026=\227\262\243<2L\335<\327\255\237=\023\300A=F\003\001=)\r*<\001\370\203=\267\371 \275uVT<6`\001=\2038\230;\016%\261\274\321\364F9\354\020\n\275A>\370<\355\026D<|\003\312=-\314\034\273\375\0070<m\236\250=\271\211\017=\351W\275\274?y}\274\336\016+\2744\017\n<\004\267\'=\257\360\257<\222\357\025<x\002\010\275?y\344=G\252/\275a\310\235=l\034m<A\314*\275\225\027\220:\330%\003>\027\310\021<\t\332\016=\267\363\352\2748\236\007\274\255\260q\275\313\322\257<AP4\274q\016\353\271\177\243m<\031t\241=\360\245\234\274\004-\035<\257\221\303\274rEB;=\245\327<B\334\333<\206\225\356=\262\240\303\272\027K\313<\337S\352<\246\375\030\275u\022\305\274T\0014<\016\352e<9)N\275\031\342\003=9UZ\275[p\240\274q#\251<\227}\227=\313\021s\275_\356w\275\274\007\213<\367\005\207\275>p\306\273/\272\"\274\307\020\247\275W-\234;Q}|\274\004,\203=\010Z\014<*%\357\274o9B\273\005X%= \323[\275}Tt<\234%R=\352\275;=\\+\242<?\213\376<\365k\302\2747\273l\275e\377\313<g\230g\274\034\324g=%\027j\275\227\215\334\274\356b\365<\005\207\225<S\222\n=\366\036Y=\2663\337\274\240\035D;E\253\335\273vJ9<[h\013<\006\034V=\316\263D\275lU6=\2020\2145\2356\206=\024\177\235<`\244\206\275\274G\302=\0006O\275\023S =\r\364\254\274\371>\n\275\351>\205:-\324\206\275\304\005\204<<\363\200;)\247c=\240\021\244=\323cU\275\tH5\273;Y\367\273\254\322E<\363\014\010\275\344+\271<T%==\177X\244:\232\220\253=\331\3753<hrj\275\336P\265\274\323?H=\246\332O\275\3614*\274\242U%<\223\017x=\007\264\237<\312\330M\275\253\233\262<\334B>\275\211:\233\274\266\373\242<\016\346\004=\227G\246=\202)\247;OM\213\273\013\036\206\275hO\244<\024\332{:\255\206\237<\315\302\276;$\n\346<!\260\252=\022za\275\274\224\237\273\031\030:\275\"\032\356\272\243\337\241\275\274\225\017\275\2660\037\275c8\360\272dca=K\322\001<\000KA=y\353\000=\367j\"=\254\245\000=\344\"g\274\014\025\022\275\0368w\275\256\364\202=j\222\022\274\223#\026=3\344\320;\230\237n\274\270\005N\274\353p\032=;\226\200\275\251\370q\275\035\352M\275\342S\242\274\':\373<p\235K<\246~\214\2754e\364<\266p\227\275\220bg\275\2704O\275=\355\373\274\000\302\347</\277&\275\340\351\235;\307R+=\371\031\217\275\037\271~=d`+=\334MC=\245\310\212\274xb\315=Z\307\204<\317\003\345;\'2D;\327\351\277\275x\316\245<\314lY\275\310\010!\275^\272~=\017\375\243\271\351X\342<\235\032\004\275\003vJ\2751\331c9CE\352\274BZ\310\275\232\305o\274\240\324L\275r\326\224<b\027\"=\204y\363;#h\225<\264\017\003\275K\371_\275t\3357\275\341\253)=1\302\013=H]\032\275\326\013w\273c\031\377<\212X\005\275\324*\211;.\212\227=\014\234\305:\217\177\346\273R\304,\275\311j$\274\223LE=:v\025\274\267\265\315\274\277\216\213\274B\014\222\271\241q\023=\361\367\361\274\267\004\252\274y\021\264\272\274\301*\275:\316\022\275\321)\030=Re\020\275M *\275&\014F=2\261`=\2050H\275\000|\027=!\007\023=\362\311\215=\270\256o=U\226&\275z.\355\275\205qt=$\216\231\273\007E7\274\373\334\204\275\314\235O\274\225*_\275\264e\264=\266=R<\031<^\275 A\264<^<\357\274\247\020\342\275n\252\241;k\207\231<V\344\030\275\354\246v\275lv\333<\232\024,<\217vi\275\327\233B\274\253\277\230\272(\375k\275\250V\352\273\025\207\021\274\372\270\264\275\275\227v=D\2357;VX\216\275\246\312\332\274\013\324 =\264\217\223<\367\253\007\276\223\265\255<l[\006=\316\\\377\273\3042s\274w\302R\275<V\010\275\250\262\010\274>!G=\325\025\252<p\025\343<a\314\247;\365b\026\275\315]\357\274\236\033\031\274\305\326\006\275\340}s\275\217z\036=\337\330\344\274H\313\255\274\023\311\'\275\257M\213<\306\036\346=\351\001Z<p\330V\274\262\nH\275(.\313\274\354\324\375\272\373\2742<i8\227<\324\347\373\274\277\345T=n\301\361\275\314\027N:-\363\351=\022\234\024\275\374\200\262=R5\024=\254\222\200<\33397\275)\302\302<\265\305\276\274_\014\351<z\351\\=\006U$\274^e\351<G\035\326\274l\311\224\274\252\346\207=\305t\036=\274\326\201=\231+V=@e\202\274\002\366\230\274\021\240\325\275g\366~=%\235\365\273\364=\375\2749\027\034<\217\356\217\274\201\006\326\271\322\245\303<!\314E=\240\302\213</\256h\2730\305$=\030\315\272\274p\027\315\274\tz\344=Tg\277\275!\300\020\275\300J\217\274eb\240\274\213\027\005=>\017\361;\'\230\002=\202<\240:\350\324\333=qy\030\273\007\235\r=\246\242\221\272~\253\216\275\033\223\246=-7<<M\242l=#\265\006=\320@\210=t*,=\275\203*<T \225<\306(g=\003\271\207=\353\370\340\274DP\016\274q\211\024<~J);\312\'\256\272;=\n\275\004\244U=\270\356\207=\227\244\211=\261\255D\274\331\016\303=8\237\020=E]c<\206y\226\275\005v\337\274\227P\266=\313\213\214\275\350+\220\273\021\227S=l0\302<\363L\231\274\230\255\242;&8-\273v[\006\273\331\014\004=\230\033\251\270wo\237=\014c\010<\324<\346=N6\006=\254r\220\275`\357=\274\354\334\177\275\346V#<\247\372\273\2751\353y\274\353k\240\274\226W\325\275\035\362^\275P\203k\275D\021\367\274\360f\312:\001W\221=\250\354\311<\271j\005=\376$\300< \344\r=\301%\305\274\3558*<\305\321v\275\235\264\376\274\000\230I=<\000\'=\257\305\205\273\244~7\274\376~\314=\360\214\242\275n\2341\274\332\346\033\272\023\307A\274\201\002\214\274\351\307\317<j\220j<\325\333n<\322\311-=iW8=\310\340\322<-\205/\274Z\242\260<\233\022\002=\352\211\317:\314L\021=\243\023\211=n\302>=\311\355y<\374\257\260<\3209\206<D\001\263\274\241gD\275\006\0169=\210k\252\275\207\210d\275v\252\033=\304\212d\275\023.\255\275\376\2608\273Fm\304\274\223\344H\275O\0257=\024\232$\275/~:;\tpe=\010\n\267\275@\234\227\275\001j\271\272\337 \217\274Vf\265\275Q\021b<m\216\243=C\320{;.~\206=>\"\212\273\0319r<:\371\207<\335\303\r=\021\021@=\321\202\301<S\305V;\232\037)=\214\226\177\274t{Q<{V\233\274\"%\201\275.\001?=C\350O<\334\373u\275\333\347\373\274\345\271A;\002\025\003=\374\323Y=T\234o\274A\333\322<\2353a\274\3146\224\274\264L\003=\007\377\375\274\324KK<h0\025=\250v$=\230\354r=p-\221\275\316\021,=\234\355\323<D\234\022<\022\313L=b\253,:.\333\321<t\007\274\274Q\307\253\275-O\273\272\237x\367<\010NO\274]\033\245<\"_\307<\375_\305\273\313e\230=;\033}<\344z\331;&.u=\303\332\202;t\302\311\274\3749j\274\0073W<\222\214<\275\324\261\327<\006\212A\274_\034\034=\355|\023\275:\010\276=\203P\232\275\203*\366\274\002\203A\275T9\345<Y\302\322\274\326\246`<!\342a=S\322\\=j\004z\275\240- =\016\305\262=\002\353\'=a\214 \275P\275\016\275W\023\314<\221K\026=|\271\344\274\371\232\360\273\317\322o\274$\367&=6s\036\275\017\325\213;G\200\025\275\214j\217<\016\303&\273\225k\322<\247\362\214<\221\025\223<W\302\336:h\356l\274\355\245\032\272d_\314;\333\332\316={2\333\274)h\265=<0s<09B=\300*\374\274\342H\r=\377\312\020\275\035\237@\275\261\032\301:_\255\214\274\220\324$=\013\031\014\275\226\363\310=\022\245\213<\246vC=N\370L=\232xg\275\331G\337\274\013h\343<Ba\225\275\370\353\375;\302\212\215=4\217\337<\214b\273\274t\260\241<Sn\235<:h`<V\354\220<\244\335\217=\317\034\"=\2713\323;\365\265\007=7\005\264=\037\005u:\273Z\277=\023\233\215\274\257\017<\275\364\370\255<\243\220\337\274\303n\375<*\370\034=\365>\354<\313\256\207\271\337\343\201\275\262\306\034\275\216i\232;\302t\354;\030\335\026\275R\340<\275\326F1\275O\263i=\347\'A\274*!X\275h\276\254\275\244\240\307\275\037n5\274\235`\027\274\033\206\203<\223\016\036<\r\322\227\272b\004\327\275\233t\005=\005?\022<\215\303\017\274f\272(=\373\030\342\274\216\203\n<\322\2419<=IO\273\347=\'<\3228a<\263v\267\273wLX\275\010\244\210\275\234\014v=\224\234\t=\n\332-\275\247\231\250\274\177s\246=\344\253\000\275\326\226r\275\265\360(\275}s\336\274\020\202\004<\260\365\231<\310\262\334\274k\030\013\274-\243\037=\236\224@\274/s\202\275\006}\217=\014\000\030\275\372#\032\275\031\036\325\273\237\217\334\274\326J\036=$\376\002<\035\316\213<x>\327;\277\217\002\275\234\212q=\017\223\334<H<}\275\301\003\264<\226\212\021\275\367\3330=\267\366\356\273\245\211\220\274\376D/;H\037\324;\276\344\200\273-\"\\<\220\301\004\275\336\320\304\275\250\355\324=\302Z\236\275\314\307\036<{\273\240\275x\367M=\262Eu<\305\267l\274\206\2234=\2738\016\275\206\030\356\274\002\205&=\332Y\032=\222\027\221;\013\353\275\274\263\"\233\274k\211\035=\326\225O\274#6\211<N\250j\275O\n=\275\250\242U=z\203\347\273\222U\265<\366\353\007=\3778\004=\321p\255\273\'Y\216=\211]Q\275\024`\255\274,\006\005=CG\256=\215\263\213\275\rPG\274u,-\274\'5N=G>n=\210\352\365\274\345Px\273\356Y\337<\355J\017\275Be\225\273\315\020\340\274\276\306\r\274\356;&\275\307\331\332<\020\253\025\275<\254\330\274u\002\031\275v\344\010\274\214\265u\275\256\260!=\226P\367<\230U]=\347\207!=\026\203\267=\0072\226<;L\\=\212r\327\274\372\210\312<d\355$<N\033\212\274h\234e\2741r\001=7-\202;!\344\251\2751\010p=l\221\027=V\327\241<\301\335\314\274\351\314\202\275\007\273\215\275\365St<\303\265\332<\201\303\212\275\006\306}\275_\000\304<+Px\275\225;\256=\255\223\367=\004\021e=\214Y!=\212\370\000\275,9\232\275\261\305B\274\245\376\225\274\371\271\266\2754\013\217=\240\215\010=\014\245\013=!\354D\275>\277\316\274\350k\343<#C\331=0!4<\303\371\204\275&5\000=&n(\273<\003==\212n\224\274#y\252;\r\344_\274b\374M\275\342\275%\275(\375H\274qg\2228\'\316\227;\305=\204=(Nx\275\355\024\306<\340\206\321<v\017\020\274\332\362*=\034 }=|G\237=\312\375\026<\333\364|=D\241G\275z\356?=\363 \336\2745\316\016=#\314Y\274\310\273\324<9\213\254<O\375\241\274\366K\304\275\200I\267=\025+Q\275\016^k=\361I\257=\356\016\230\275E\233\205=\350\233\223\274\030\237\325<Y\243\016\2753\t\220<l\262\204;*L\306\271\014-R\275-;\337\273\307(a=I\260\251\275HJ\366;VX\251<\323(\352:b\365m\275o\013\226\274\003\220\204;\362v\215\273P\356+=\255\301\307=\364\001\322\271\357j2=c=\226=\024FT<\304+\324</\203\310\274W\351\271;\024\222T\275\364\233b\274q\347;=\373f\230<\261\022D\275\237\273\270= pG\274\347\212\326\273\n\344H\274\035\000$=\313\037\276\275\240\327\\\275V\003\201\275\003\210g=\001\231\000=\r\314\341;>\346$=\271\026G\2751\0318\275\001\3715=\263@9\273c\'\033\275\251#\001>\215~w<\3713\306\275A\331\031\274\262P\321<\357\242\342<m\257\244<\352\203\231<\240\"\307\274 ,\371<\343TA=\352\320\370<[\267\204\275M\351\177\275\003\202/\274\023\030[\275D\344\366<\023\334\361<\3415Q<\272w\207;\002v\303<\360\302\213=\237\034\232<\330\022[<\027-\300<\247\351\r=\232\350\242\274&\014,\274\'\365\216=\nS1=\245{\000=0\223\375;sK\232\274\310\326\364=\367X#<_\203\371\274?\330%\274\203m^8\035LX;I\205L\275GI\303\274O*\';\035v\211<@\022p\275\337\236=<\r \"\275\275\367\214\275\364\322?\274\307\3770<\312w\032\273\256\313m\275\223\367\334\275\363*\030\275\343^g=\235\307a;\251\337p<Z\316\014=\004!\307<\352IE\274s\2544\275\333\371\311<\205\373\212=\345-\200=\016\240\000<\222d\230<]R\311=\314\004&<\336\217\256<+\034\321\275\3332\304\2749E1=\264(\021=\001<\326\274\226-S\275\374.\261<.~P<\270\177}<\375\022\263<\021\355x\275ip\372;\356\235\001\275q4\230\274\363\0276\275v\0048=t\215\306<8\022s\275y\231\202\275\341=%=\373EJ;Vp\345<\355\361u;/\343\330=\002\306p<\247?\220=\177w\255=W\214x\275\323^\370\271\242\"\002\273\244}/<\277z\033=\251c\021;\022\221\007\275l\302\326\274\213ph\273f\210B\274-\301\021=\2652\224\274\361\347\213;\007\n\207\274\344\261\004\275_\201\305=\232\001]=f\302\255<fg\322\274R\267\035<\010\323.=\255M0;\370\210\310\271W\352:\274\207g\200\274\033\212\371\274\362\3742=\364,\220\274\032?\257=}\372\215\274\304\207\371\274\263+\201;}\020\342\274\022\236G=\252\001Y\274\311\035\356<\333X\373< SS<+w\313\274\255G\002=\306\304\004<}\241\304;\350\254e\275\033\203<\275\377\303\313\273\376\334\214<\355\024\313;*\'\373\274\343\356\027=jS\226=l/\306\274=z\370<f@\242\273\341\006\017=I\'\257=\233\010==\223\333!<x\025b=\\\255$\275\264Y\023\275\251[H\276\2562\237\274\211\336Q=\241.%=\331g\345\274\247:\254=\333\274\374\272\2216\207;A\355-\274\257\246\245\275\207b\261=e\177i=\215\357\202<\344\371\363<E\000A<c\210\210<c\033\204\274\335m2=\313\273\204=\320VT\274\271\1779;`\352\364;\346\316\263\274|\324\372<\361\'\260;d\304\335<\034\272p<\234Gu=\203\363\007\274\325\314h\275\374~\276=f\021x\275[\254\273\275\323\362Q\274\216*\255;\205\2647\275\305\202\237\274\'\0053=\204\016\n=:vK;\354\337\214<j\023\005=\002#_\275.\262\004=\220\376/\2740\355 \274\351\320J\273\363B)=\220+\240=v\335\023=L\316Z<$A\004\275\"\251\220<+\251\016\275;\302`\274dkQ\275o6&=\254`\352;h\242\033\275\010\241\'=\023\255\252=\241\324\001=\2510\274<_\305\036\275\353k\301\275\033i\221\274\317\233J<\351\301E=z\320\302<wn\317:\334\255k\2759\322k\2752\275L\275\031\252B\275\367\314\322\274\267\177\302\273E\t8\275\001\245\016;\343\355\227\274\237\252P=py\362\273\362\001\"\275\253\324%\274nd\216\275\362:\240<N\277\242\274\367i\273<.m\246=\305f\333<\016;\000<\313!\243=\326\323C\275\3451\246<\317\301G\275g.\204\274,E#<6\377Y=P\366\266\274}\2003;\022\000\304<\326!`\274|\264\204\272z\213\326\274\255\037\251\274L\330\t\275\"\r\300;\372\343\202;\263\213\336\274\326Tk\275\210\020F=\"\301\204\274\351Tx\275\335\016\330<\276^\373\274ZM?\275-|\242\275\321\247\247\274P\022\230<\227\035E=a\301\274\273\362\246\204=\215\254\203\274\245\263\006\275U>e\275\352\031\231<\027\324\245=5\256\371=\222\376w\275&\370j=\241\314\252=\340\350)\272\261>\274\274n8\020<1\245\215=:\"\310\272=\344\255=\315\254T=\317x\207\274C\367\321\274\305\001.\273\207\342w=\325\235\031\275U\261p\275\374B\017<\260\243O<\312\361\r;\'\364\225=\211\332S\275Y\022\024\274\006\010\021\275\304L\021=4 g<A\364\017=\215\374\006\274\252\345\332=\021\346\331\274\036C8=\242\227\014\275\2710\242\275q\266w=\n\3469\274D\3171\275\233\335z=\360&M\275\270\225\244\274I\\\256<\006\234\217=\370W\214;\322\234\201\274\270\313\177:D\346\346<\347\323/=;\313\022\275\342\017 =\315\226\331<\253y[\275\307\263]<\306\314\021<}i\237<\257\303\320<}Q\204=]\036\316<\"\201\005=\337\030\227<\334J\240\275\216\307\313;K\362\322<f\345O<\037\233\232\274\351\223@\275\221F<;\0039z;qD\272\274\233}\267<fC\203\274\343\307>=*(4\275\023\311\221<|\213\350<uX\234;\260d\023<6^5\275R\354X\275\226C\027;\244\027\2558A\344\027\2753\242\314\274/F\253<\214\026\265=\326\310\033<j\357\303=x\222\331<42{=$\034\004=\334\342\251\275\277G\300;\376j\257<B\2613\2740\327-=\336\004\327=(\332\032\275\032L\004=\031\370\265\2725\361\216\274a\251\014\274Rg1=j\322-\275\232\t\003\275^j\212=\277\330\244\274\361[\201<58P\274a\003\376<N\320G\275\373\202\001>\256p\237\275R\370\204\272E\354s\275+\240E=pg\265<\033/Z\275YV?\274(&+\274\323/\350\274\322!\273<\023Y7=\032\350\010\272\025q\305\271\224{\253\274\302b\260\2759\242#<\267\301F;\t:\220<\253c\262<\351x\006;/\034A=\325B\020\275\210\337`<\343\350\233\275)}]\275WK\036=I\376\342\272\255\366\315\271,R\266\273x\007\260<D\311Y=\213A\313\274\273\274\213;\r\245Z<i\237/\275%\026!\275[jO\274n\352\327<@\310\212=\324\374\223\275\360\264 \275\267\333m;\260\306\020\275\233\236\323<\026d\201<\t{\232=\260\020b=\037\305M\274\255\251a\275U\037\212=(\362>=\036\030\217<\337\017\366\274&X\340<]Y\262<\306q\376\273I\371\3249rq\372;@\331z\275\371\264\307;\324\330m\274\025\3538\271\244=\300\274x\220==mN\334\2745\324\354\274\277\035\026\275\313\007U\272\326\243x\275\346\354\356;\331I;=,._=U\355j=\035\221\374<M\364\004<8!%\275\324\222\243<\367\346)=\371\305_\275\223\256\313\274(\312\n=|7\021\275f\306\366;\246\323\321\275T\032W\273T:\223\275f\235\200=\024\344\236\275>\330\221<b\365\004\275U\317\332;\347\347\307;L\252\"<,[3=r\214\222\275\024\n\343\274xE\216=\3163C\275\377\236\201\275]\032\364<|g\177<\026\022\005\275\333H\325;/Ll\275^k\230<W%\224\275\t\263\271<\277\203\211\273\357g\244=\354\r\364;Lc$=\2328\212=\267(\223<%\253o\275\223,\2729#v\300:l\262S=i\347\217\274\327\273%=z\341\247=\337\270\336\274\365}\205\273\331\314S\275\364\255\000\276\307Y\226\275\314CR\274B\355\244=\002\253)<\217\241\272\275\031vN\275\377\311R=\225\351\322\274\260-1\274\026e!=&;?\273\251+\260=\276\030}<\255\350\212\274#\321\355<\313xK\275Y\277%\274\267;\262\274\324M\245\275r\240\373<\312\377\315\274\246;z\271W\202\016=j\025`\275GZ\016\275\357]\n\275\210\213\320;\3645\n<\361\357\216\275\'\227\017;\350\213\335\274\260\377*=f:g=\315M\313\274\236\265e\273\256\264\235=\r.\260=\363\324\214\274\226\354\\\275\014\333\231\274\330\231\257;\203\r\036\275\204\330\227=\313b\372\273ZLl<\001\256\217\274\340\371\240=W\336\003\274/?\201\275\256j\335\274\336Q\204=\372+D=\363\221\312\273\253\366\341=XD\265<C(\270\274\330\355\352<\361\262d<\232\032\201\273Y\245#=\264-\366<\000\316}\274\345\343\356< \303\203\274\277\222\205<\315F\262<\363\264\022;\027\374P\274\316\350\217<\321\316\316=kg\346<\342[Z\273\305\313\251=\001\373\232\275\232\\Z;h\2779\275\247%\006\274\215\360m\274\310;\030\275\233\2450=\370\350\342<Q\212\303:4U\263=\337\267\273;\237\241\301=\t\023f=-\316\213=+\232Q\275\316\036\204=Q\025\255\274\323\246#<\301\312b\275\354=\257<\344.\260<~\010.\275sT\032\275\340cx=f\304\332\274\322^\356\274\024Y\276\274o\217\245=\275y7\274\351\300\210\275\366\026M=\267i\265=\t[\361=\004H\033=\013_\002<Q\n\225\274\2109j=?/\003\274\366\372c\275\024\375\210=\347!6\273\304\377L=\375\337\025=\227\301\235<c\002\345<\002}\221<=\372\327<!\231\265<R\370#\276\275\311X\274x\257\230<4\237\326<u\000\200\273\337\232\177;7\215\\\275{[\025\275\215\213\230\274)\230\004\275_\204\217\267uBE\275{\365\'=\363{.\275\224\247\023\2754\351\325\275\254H\006\275m\210\023\275\014\263\232\274\006I@=\177\363\357<&\037\254\274ZI\204=<Nn\274}K\205=\327\354:=\017!H\275_$\364\275LT\356\275\310\201\246\273:D\232\274\225.\271;;Z\253=\232\212\306<\331\317\242\274D\022\274\274\311m\246\275M\370\027=\330\254q;\024Vv<\214J\316;\351\202r\273\017\016\233\274R\242\020=\214\373\010\274\037\\\251\274Z9\206=1\270W=)\2569\275x\361\260<sj\274<\261\344*=\037\365-=K\346\377<y\250\001\274\033\244\021\275\037\327\234\275\001\374%\274R$0=\361F@=\357\261H=\206\366\003\275\267\200\330;Z\021\305;\343\025c=Dy\230\275\227\316P\275AU3=\261\007b=0\372&<\244\323L\274\324\276\341\274\335\211\356\274\3451\017=\2139\251\273\017\303\236<\260+/\275\224\264\331</\033T\275\251\222\311\274\'H\253\273\337`\221\275_!W\275\207c\237<\223\273\302\274N=\2259\276V\307\274\326A]=\\\331\363\274\021\216h\275\025\264k\275|D\254=3\373\177=|BL<qat\274]k7=\312\203\200\275\237Nj=\316h\177=;\021\206\274\226N\210\275\000y_<\010\037\345=\220\215\362=\331r\263;p\211m<C:p\275\356Z\033\273\302\000*=\262\311\315<x\3512\275\303\345\232\275\006}{=\367\362\007=\317GL\272\026GK=>\202\025=\021\224^=>\210\215<\313\306\300<\254\345\237=\271%b<\016\2244\275\200F\256\274\276\247\207<\222\024}\275\3302]\275\230\020\266\2741\006\250=S\247\325\275 \227\205<\262G\202\274|\036\234\274dK7=\344\362F=\256\243\377\274*\2170=Y\211\035\274\227\355\237\275\371\202\014\274^_\010\275R\010\230:\302J5<r\326\r=\377\277\273\274c%-\274\001\237\275\274F\377\232<\036\263z\275\013p\017<y\023,=To\r=\356\302#\275 \010\330\274No\341;\214\004\205<\206\353\237=\002\200\"\275\233\216\225<\212v\210\275\005yh=\317\207\212\275~\1772\275\3274V<\326W^=\325\302\257<|\341\223=T\227\257\274\031e\231<V\251&\275\220\002\227=b\322o=\223Ph=\036\r\216=\316vw\274\241\212\236=\226\001;\275}\006|\275?\267\363;8%D\275\244\3209<\251oH=\241\210X=~\301\347\274\306[\362\274\364}(\275\253\223I=\010\r\211\275\013\215\002\275\026\005a\274d\004\324\274\024\035M<\232\300]=\363\227\350\274\235k\250\275\272k~<\374Vd=\335$\323\274\247\311K<\233b\205;\225U\375\273o\307\221\275\211*\326\274\3551\352<(\272\207=\245\326\321<#\307\274;SG\334\270\211\204\023\275\230\374\360;\241j8\275M\276\037<fm\243<\251\336\030\275G\364\270\2751aO<\005\211\204\275\227*\002\274W\212:=\253-a=\266(n=FH/\275\016\365\335\270w\231\226\274`\324(=<I.\274\262@\217\274WR\262=\311c\374\272\230\001\303\275\035~Y<T\247\202=\321\177\371;G\366O\274M\033:=%\324\275\274nzA\275#\336\034<yu\222={ba\274y\361\202<Nj\263<\230$\212\274\345\263\216\275+\241#\274\324\205q\275,|\214<\362\235\352<w\273\207<\236\t\240\275N7\336<`i_=\362\276?=\35154=Q\211S=\373\350\243=\267z\305<J\374\221=y\265\251<\346?\256<\316\325\215=\247\307\231;\317W\330;\010H5\274\036\237,<\216/\031\275\013\032^\275W\256\251\275!7\177\275\333)\315\274r\272\202=\247\320\032=]\321\327\274rO\272=\253Mb\273\353\372\205\275Eg\252=l~\232\274\334%>\273\350\345#\274Z\004J\275\313V\007\274C|\247\274\236\251\201\274\352^c=m<5\275n>2=\231%\357<\0166B=40\253\275B\274\356\274\367l\215\274\241\301l\272$3\211\275A\324\251=\201\225n<\324\001W\275\035I\270\275\272\363\340\274\032Ep<\201\343u;x\t|;.\320v=\t\310/=\304\245\254<\333\374N\274\254\266V\275\240\021U<$!\212\275+\340V=\224\275\236=\366\326\266=\235{\314=V\032\254\275\013\207\225\274i\033\037=Z \021\274\354\360\354;\222\340\216\275V\327\227\274\035NQ<]\365\225\275U\3138\275\'\230\316<\322\341,\273\225\021\341<\255\215\341<\235P\254=\212\030\216;B\234\262<\374&\013\274Am \275\252<C\274\274\033\r\275(\023\032\275D\354h<\332,\007\275|\234\332<@\300\351\274\226N\330<\253\231q\274\254\243\342\2743\305\371\272g\250\031=\222i^=\315\2675=\237U&<\344\323\002=i\363M\275\306\035\007\275\273?$\274\303\374D<\020i7<\035\235\253\274\260\376\202<x\230\345=}\311:\275\032F\230\274m\374\365<Y\026\205\2737\340\027;\202\231\361=\250\207\225\274\036\262==@ \212\274\247\032\202=\222\3762=\315\227`;U2\027\275\327\313\277=\320\022^;\224\365\225\275X\243\n=\313\340\n=\270\n1=*\201\243<\206\035\t:\236bq\272`=\302<\242\2169<\316\203]\275?m\206\2748\\\331:u\337\250=Tc\376\273*\264\235\274\203\325k\274\216\332a<\336$2=\251C\017=\316\330]\275&\311\340<\r\336\204<\027R\362<\354\354\225=\261n\246=\266#\223\273\344\266\233\274H\037\037\275`n\333\274\226n\023\275lL\017\275\226\277\326<\375\336\316\274Yy\375\273\024\344\270\275\242\333n=\235xu=,\000R=\260\020\204=\203\023\027=y\357=\275\311\207\275\274ps\356;&\325:;\226=J\274\267\235C=w\313i=a\257\322\274\331\230\004;\036\300\325\274S4f<Ok\320<lQ*=Nkp\275\200\013\217;V2\231\2757d8<\334 \255\2735\262\330<~}?\2754^G<{\022\273\274Y\277\216\275\316~\006\275\214O\'\2749\335c\275\225f\223<\372K\017\274\250\276\330<\333\336\264<\037\266t\275|\034<\275\177\261\355<\261K\217\273\245\273\225;\206t5\275\373\376\336=\344q\225\275\002\206\213\275\263\320\263\274\033ij\274\265op=)\221(=\301\r/\275\352*\262=\n\300C;Y\306g=\305\222\273\273\315\357\242\275a\326\343\273\254\271,\275\362\270\211\275\247\033&\275\327\264\323;\244E\333\274\204I\'\272\035\252\352\273x^\261<\2030\"=\200-$\275kZ\336\2744a\333<\323\257)\275,\271t\274$\020\256\274\376\316\224\275\225\375%\274U\033\025=\326s\327<\262\2658<\351N\245=\002\3527\275\305k\206\275\223\010\212=O\004\333\272\250\332+=e\364\240\275\021S\311\275Rb\354=6jr<G\267\250<\234\245/<\204\331\212\275R{\277=l\301\2149V\353\224\274\306\225\242\2743L\255\274\316\363\014\275\350}\274\272\357e;=\025\377+\275\333\351\241\274\367\014\270\273\225\335 \275\310\005\265<\261\240\024\275\303\263\034\275b+\347<,\240J\274\252\345\233\274\221<=:\353\244\024\275\376j\306\2759\'\020=5\030.\274\3471\023<.\200\004\274\027\225\204\275\306k\'\275\325\020\301\274\223\026$\275\321\014\314<\305\222\240<\321E\363<c-L:^\257\354\273B\217\261<\036\341\254\275\014\265\033\275\226\347\001\274\031\005\205=\375\225#\274\346{r=\331\204\263<?M\361\274\177\344\201=\216\276\215\275\030\013\267\274I\347\213<\247\030\205=\232\036\276;\2262.=c\242J\275\240\261\t=\224\271\033\275e\"\212\273B?\025\275\\\205%=j\233u\274\000\324\266<\021\033\002\275$B\267\274\365\021\201<\036\227_=\241a\322=\366\341\360\274\225\232-=z5H=\333\305\321;\207\343\204<\241z>\275\325\007\317\274\216z,\274t\020\035;?\314;=g,\332\274\325\266\023<\001\230\226\27421\312\274R\332\r\276\277\255T\275<\266\010=\244\312\262<X3\317\274\235\360\032\275\275\016\243\274\254$%=\246\007H\274\306m\315\273\262?-:v\031<\275\225\234\235<)\330$\274O15\275`X\232\274Sa\002\276\307Ba\275\030~)\274n\347(=\234\033]=&\202T\274[D\372\274\242\223v<\001*\025=\314i\235\274\300V0=\266\211\326<\007\014\207=\037\345\014=\216\\\323\274/\220\241\274s\324\242<\313\206\033=n\226\010<\262F\347\274\340\371J\275\002w\325\275)\317\243=.\244\034=CVG\275\375\331g=V\001\265<\367\000Y\272U\300s<U\315\237\275 p/==\253.=r\342s\274\375h*=\312\024\207\275I\3121;\225\323\376\272\220J\346\273io\251\274\233\036.=5\217\370\274r\036\205;\352W^\275\222(\353:;\337*\274\334?N;\372mo=\030\3033=*K\200<\037-\213<\244\326\000\275*=.\273cw|\273\266t\303\275\250\'\302\275eG(<\303\010\364;@%\351<~\317\333\274\001X\027\275\270P\211;\371\016\034<d\317\237;\354\017/\274C\214\257=\226\254k<\336\024\374\274 \340\372;`\232\302=n\233\233<\377\nZ\275N*F\275\231\202p<\247\253H=\264\363\233\275\332\202\354;\374\020\275;J\274\213;\323\035[<1\372T\275\300\204\236\273\261\375\275<]L\032<\276\317\330:\327\210}=\336_L=YO\270<\030\271l=\371\273\037\2751\250\253\275\260\3700\274\232\312O=2\274\037\2750z\352\273\'\331t=\3462+\274\374>\014=~\262\027\2759|v\2759\371v=W\373\212\274t\200\005;\203p%\274\311i\376;\301\243\226\275\320\277,=op%\275v\257\235\273\201C\222\274\345\341F\274\313:\202=\025l,\275\230s\240\274\023\246\265\274\3350\314\274\010\253\327\275{`\254;\004\344!\274x\223I\274\277\266[;\263\332\306;\300\322\346\2747\203\242<\222\327[=\234\177u\273\231<\234\272\361\272H\275\2610\000=B\n-=r\001R=\210\244\010<\205\246\201<7\317\037\274\343\314c=\350\220f\275hEL=w0\340<q\200\257\275\333\005\364\274\001\r\237\274\267\010\234=\377\230\016=3\236\326<\335\211l=\\\272\024\274\310\206<\275\256VJ:\357\002o\275\212\220\243\274\345;\275\274{\017<=\033\353\032=)\265\345<\005\231\214<\350\376\"=\327\343&=#x\301\274\244\200\241=\340(];m\344\356\274;\014\016<5\026\231=M\261w\275Gl\307\275\275\034\217=\252\227A\275(\005\200\274G\363\203\275\330Z\212=-\020\206\275\220\207@=n\254F\274\006u\030\275\207\205\002\274@\234\363<V+\242<y\276#<w\321\322<A\327Q\275f\277\t\275TNK=g\001\005>:\004\'=?\203`\275<\242O<\267}\241\275\314~\030\275\304V\014\275Jp^\275R\014\205=I#\006=h\231 \275\212\374\232\275\343&M\275\003\201\346:\255+\223\275i\301\323\273\2364p=)\272\336<?\177#\275g\037\205\273(\270Y<\346\2700<,.\346<\336\370\254\274\007Y\036\275\241\237\254:\312\004\023\276\302m\225\275\205\236\021=\017\230\237\275\221\235t<\\\326\030\275\207\200\030\275\206_\177;B\370U<\035?`=\016\3158\275\217\036\370:s\273\022\274P|+;k\3033=\003\3578<u\000\222;:\245C\274G\351(=\367\270\267\274\320\367.\275\\\306\025\274\327\2322=v\377\247<7\301<=\326e;\274\351\021\336<\026(\037=\273\267\016\275\377\303\200\274\022\026\300<\033t\360\274\231\"L\275<\333e<\0206%=\220\265\221=\243\334\n<\177\306\227<\227\322\351\274\177\224V\275\327\3348=;\324\302=\214\336o\273\255\330\031=@\354\272\274\022rb\275\270\340\n:\005\177\007=Y\364\242\274\254\3438\273\246\302%\275k\341\310\2744(\200=\'\035\362\274\226EQ\275\251\375b\271nW\261\275\270\241\306\274<\226@<\016P\253\275\242\337\302\2759\335Q=\215\313\336<\331\000Y\274h\333v\274\324\025\206;U+I\2721T\235;\013)C\274\177\226\177<\030L\2459\313\236u\275\365~\"\275\340K\205=\226\247\311\275\371\213\322<\\\246\323=\254\200&=\373\217\301\2745\315\205\275\017#\237<\264\235\361<Y\304\227\275\033\004t<W[\264\275\356B\221<\351|\231<m\234\207=\261\200p=\006\365\t\275t\375\375\274\245\005><P`@=\233\354\373\274\1772I\275\303\307\300<\237+\002=\245?\322<\212\346\362\274\344\206\275;\0350\325\273u\346\304\275\351\340X\275\033_\351\275A\037e=ZO\345\274\2706\317<>Q\212=\232|R\275#\222\"=\251\220\261\275\376\312\010\274\230\273\036\275\331\346 <\301m\230;\343o\205<\2009\351\274\210<Z\274\330\010]=&E\003\275 \213\226<9L\177=\206f\215=\002\354f=\253\207\323\274\325\215\014=)\302\302\273\267;\266:W\354\264;j\ny\274\277c==\307y\253\275v<T\275\214cf\2758k\241\274s\305\234\275\215(\202\275\332/`=bF\217\275[\240\033>\224G\324=\001\372\010=r\337\214;\037)e\275\014o\316\275\271\325^\275\3350\315<\0010\313\274\224\242t<\013\016\232\274\373Y;=\276\310g:\361\372\206=\263{\006=o\255R\275WV\361\273\2409\023\274iw\242=\242\3720\275g ]\274\3522\373<1\221\\=\376\"\213\275jB\241;D\275F\274\317\020\253<\366\241\021\274\216>(\275:\243\255\273\034\335\344:Q2\276=xg\342\274\017-\275\274\376s\216=\220\005\036<D\317\340\274\270\303\316<\206\215\344<j?\261\274\367\214\221<\343\354\322<\"\240\037=\020\215\330\274\316y;\274\"\350\223=.\230V<^\347u=\034\342\212=E\341\313<\310\225\234=e\t\321=Lg*<\'\231\232<\203O\264<\356U\201\275^\330\206=@O\022:(\314y=D\264Q=r\277P\274\034\234\240=lB\353\274\376\344\202\275\260]\022=nbX\274\221U\344;\267N\261<\205\354&\275\021\366\235\275\213\321\023\275\004h\215<\336\020\232:ez\n\275\3730t=K\214\372\274b\220L\274<c\022=\242:\267\274\267s8<\014*^=7k\210\275\337}\003<\274_\241:\250\226\240=\014.\233\274\220\004[\275\'\177\260;\025\004\242;\351\214&=\304\262\003:\207`z\2730)2=%\332Q=\224\231\201=\007\334Y\274\226{\320<\245\0076<\036\353\314<\242\304\273\274\347F?=\032\232\200\275~l\256;\357\361\270\274\245\272\2238\325\322\246\274\204\206\347<3^\236;\231w\337;9\017\214;\347\235 =\275\226\021\275\027\240\000\275zo\266\274\222\032\006\275\037\t\005\275\322\000L<\025\372\\<\177W3\272G\225\206\2753\255\215=\030\003\205=$\334\301\271Mf\210\274\326\361\303<\240\r\361<\207C\217\275\255b\241\275\261E\307<\"\321\222\274L\345&=\001\325\221\275\327\364\025=S!\261\272\034\323\332\274\230\316><Sgj=\361\375_=\315\235\227<\232\3237=\016z\022\275:\345\221\272\217\t1=\\t?\274^`\375=]\034\355\2730\250\214< \300c=\014Nw\275\274vG\275I\014&\275\260\333\'\275bc\330<:xM\275}v\'\274\032\373w=\314A\243\275!\251\257\274!\372\335<[\351\261<\246\232Y\275H\233\356;b+\303\274\364\325{=:F\217<Ia\331\273m\223!=\337=\006=\360\242\002=\261]\002\275\000\324\000=SEl\275\017+\255\273\363e;\275f\237\242=\352\301\233<B\201\210\272v\264\261=\216\365\376<\027\317\334<\001f?\275\233jF=e^\2759\277\344\037=]\250\236=\215\217\013=Ex\253=a\341\264<\231Z(\275\3113\313\274$\375\277\274\311-\000\275\332\375\236\273\001\234a\275\2333\211=X\260\243\275\234{:=\315\236\301<\r[s=*\003\374<\323\272E\275\031\260\231\275\230\2401=!\263\227\273\237\2740\275Ik\034\275\314\376]\275\221\366\205\275\3741\240\275lV\262=\371r\215\275\033\362\253\274\235\335\027=#\374[\275\000Dk<\304J\'=Eo\021<\372\220A\275\324\356\242<n\375}<\014\213!=y,\347=\354V\\\274(\201V=\230E/\274e\357D\275\tV\n\274\320A\215\274\376_\034=\023\373\n<\t\361\036\275\031nY=\036\266\030\275\016\300y=\201\253\206\274\2146\345<\234>\214\273hL\346\274\033\016\342<\240\177\274<i\311[\275\234>\024\275\262l\240<u\373\225\2749\355\025\274&Vq=\374AZ=X\3329\275T\251\236=]\315\014\274{*\274=\277\231\036<\371us;xm\017\275A\376\256\274Pdx\275\253!\265=\024\243\225\273\037e\320<\304l\246<\372\325\335<\366\314\204\275\267\031\024\275[\335)\275\350\331\235;\3439\026=\026\207!\275u\266\353<&\233\004=\253A\355<Iq\315\275o\355b=+\206=\275h\255|=\341\003\355;\013\266\202=\200\240\207=\036\234\362\274\364\345P\275\252\346\265\274uD\"\275\2565\334\274\337\240\017;\253W\277<\236\204c\275r\301`=\031\233\212\274\306\"\177;\274\003\006\275\342\341\250<\312\253h\274\0216\255\274l\240(\275cq\346<\242\343k;.\332+\272\236\035\320<\\\256\244<\014\013s\275(0\024=\376\346\010<\006\217\'=l.\241:\267\367\250<SY\233\275^\341\226=5X?\274\271+5=)y\346\274,\241\204\273\241$\342=\267\022%=1\036Q=\314*\007\272\001!\226\275\"{N=\341\230\330\275s\221q\275)\021\230=\223\246\236\275.\350\222=I:!=\032\376\244=\343\206\366\274(\313\265\274\356\226\235<\327B6\275(K\006<\247[\226<X\330}<t\246\025\275\271\346L\275:.\255=\216\241&<|ve;(q\005<=\246\232\275\340a{<f\024\212\274\353\2004<,\233B<7Z\235\272\322\315O\275\241(z=U\023\035<\307\325\023<\023\372\210\273Q\225\3109<\371\201<Asm\273\r}2\275\200\303(\275Z\243\202=\200\310\022\274\277\342=<\321\263\206\275mC\251<\234X\225;f:\204<\314\002\252;*\224 \275t\n\027=\014\255\204=\033t\265=\347\307\237\273\022_\350\273W\325\001\275fW5==\253P\275\022\363\345\275\217\3615=\032\364\353\2746\363a\275\253\357s\2742H\324\273\005\327<\273C\257\004\275=V\026=\250\370\024=\007a\243;\316~\314<\206\214\231\275\313\260\354;CT\244\274\246\\\022< \255{<:\324c=\251u\362:\234\225\006\274~b\234\274\240]T=<v&\275u\0218<\177\327g=h}\213\275\332\243\340\274\224\347\354\274YO\203=\000c\223\273\207\"\201:\3758B\274M\017m\273$/>=\246\201\367\274\224\024\330<\233m\216=2\374\013\275v\307\255<\234\212\210=\235\270\344\274\016\305\205\275\344\305\212=kX\325<\'\010\222<\311\365(\275\375Vg\275\225\240q<@}%<\206`\224<U\313g=\321r\342<\242`\275<\274\255\252\274\242\360&=G\200(<\203\265\244<*\321E=\225\306\'<\036*\200\275_\031\370<\305\232\251\274\341wn<\357\244u\274\266.=\275\226>\225<_cU\275\355g\026=\031{\'\275\031\200\026;\232\006X=\243\224\210\275\367\345R\275j;g\273?y\327<{(\037=E\216\236=o8.\272Zx\007=\361)\314\274\356\243b\275\352\0227\272\301}S=\005tG\275d~\241\275\342wi=\032T;\274\370\333\033\275\231\266\303<\325!R;\266O\234<\272\357\276\275\350U\000\274K\362%=\004\240\267;\205=\373<\'\n\265<\036\307\372\274\264\234\021\275\350\336\274\275B\177\000\275 l\211\274\206C3\274\317`\037<Q\246\363<K\330\031\274\3657$\275\202\2569={\311\257\274\310\275\344;\\\253\236\274\tG\020<#\377\3259\370\272o=\237E0=\241\202\013=Q\363\231<\020\252\211\274\33494;\266K9=\223\264-=Dt\313\275\373\376\374\274\324\207k<v@\276\274\021\345\271\274t7\301<\377\204\302;\237\223\n=Gl\036=S\207\023\275\213<\020<4,\336\274\273\204R\273\3340\000\275\365\245/\275\335\016|\275\"\244\002\275 \224\316<\315W\353=\265\356b=L\222\330\274\262\304\257\272\277\272W=\203\250\021\274\306\224\322\274\343\207\363\274\223\267\023=\3641\250\275\237V\001\275\276\212j<\235\003\314\274l\006\261=\342\2574\273\033 \266<\247\374\355<\343Z\313\275\rD\037\275\324!\236=y\335\245=\203\021M\274\\\330M<\010\337=\275\260\302\340<\347\235\'\275\311\354@\275~n\020>\021\245G=\302\207\273<GW\244\273+d\305\275\333\337\234<\201\n\000\27508\016\274#\363\032\275\346\316\274\274k\301\265\275\367l\271<\332\316f=c\366>=\324\204\221<\3566\236<@\2518=\035\342f=\230\340&9\2010\276\275\004\313\311;)\026\310\273$\0060\275\030-\217\275&\201\033:\304\243\315;\351=\371\274\321p\005<\230\037\004=\274V\244<M\001<<\230=(\274\0360\032\272\'\267\322\275\007p\213=\201\325\220<uJT=\326\366\227<Q7\n=R\377\004=\323\001\277<4\300X<\306R@\274]\034L=\200\231X\275\313[\335:Su\032<\256i\217\275\021^,;\226d\221\2751W5<R\267\252=\\\260@\274l9\273\275\372c\252=nO[\273\306Y\353=O75<\346ep={\036\226=a\355\316=\001]\236\275,L\255\275\232\214\370<E~\223<E\266\276<\312\027\354<\2101I\274\335\362\037\273\005{f=>\306\204<\374}\217\273~\341\274;8\331\333\274\300*\"\274\224\2041<T\001\337;3\227\265\274\370a\234\273\210zP\274\3520\032<\\\003T\275\262\312(=\242Na<3$\222\275O\032\013\274\302\2144=\335\314\205<\371\231*=\370\241\322<\232\207\226<\0359~\274\204\024\313=\n\344\022\275!7\363<I#\004\274\375 7\274\2264\350;s~\001=H\221\240\274\035\345m;\312\305 \275\375v\"=\025\001Y=B\204R\275\375\261\001=o6\32793\001\247=\323\214P\275a\303%\274\336\333\016\275n\374\303\275<\022\301=\343J\3508\367+v\274yd\330\274O\001\025=<\214\214\275%\275F\274\340\2263\275\270\024\006\274\315\001\310<2\343\002;K\327\347\274\006\252 ;\377\223n=\216\257H\275\344|\235\274\013t\360<\366\262\311<\376\326\241=o\024\316<\312\221\213\274\350i\363<\212\343t<\\\017\203\275%\255G<!\332e<\234\336O=W!\217\274\274\354\222\275\261;\201\273\257\323\246\275!_\n\273&\372\256\274\025v\217<\322\022)=\276\001E\274\317\374n=\236c\014<\254q8\275\234E\267<\335\341B<2\223\220<\302\001\304\274\t\030\207;\227\244\201\275\264\032\243<[\343i\275\217\322\246=\354\240\201\275\370g.=\316M\206<\0147Z\275\311\031,=\246&q\275\303\225\336\274\354p =\346\272\375\273<\215\244\275\005z\246\275\001\255T<\217\002\224\274\347\023\354\275\323\017\007=\312\227d\275V\227\354\274\256\270\r\275FU\315\274\323\022\351\274\222,\002<\367\375\241</\347\025\274f/\312\274w\244\021\274~\366\222\274\267\010\346<\203b\005>\201i\341\274\215\265\031\275[fe\274P\036\241\274\345\306\313\2740\2703=-\242\324;\343\306E\274\220],<\320\003\320<H\211Y<\033\377\230=\243\313\t=I\223I;\005\036\035\275\200/\010<\207\000\007=\240Q7=(Ik\275EzY=\021\374\242=\263\363\247\275\317x\325\274\231\016~=\266\241z<\333\207\232<&\216\027<E\200\037\274`\216\241=\366Xw\275\005\224H=\244\202 \275\233\214\262<\331\202\t=|!==\332\373\224<\211\341\365<9\006K\275_\177\006=\322!<=\002X\316\274}\305\017\274K\260\007<\322\255\217\275\021\230(\275\365\230t\2749I\217\2736\313l=\211\374\277<\357D$\275\344\370\001=\337\334\223=vv\016=&\'\303=~j\324\274\023\r\000=\237\013\311\274\023\233\236=0\240\032=\316\204\333;\2152\211<\226;T\270\243\314\271<t\260?=5\266\255\274\346\023\003\275&Q\373\271\221\225A={\351\272\275p\230\322<d\224\265<\220\036\276\274\n\317e=NCe=\177,>\2748\314F\275\263\000T\274=\257U=\257\362G\274\007\016\232=\"\236l=;s\206=\230\242\342\273:~2=\225\217\227\2758\323\340\274[\373\361<j\014[=\037\364{;\342-G\275.\n\203\275$\033^\275\027\310\177\275O\223\230<~\024\203\275\315\n\225<K:\033=\014\035W\275\227j\205=\2778t=\213\2630\275\375\260\370<$$\333\274\236\202\254\275$xD=\0054\033<\326l\312\274N\2115\275\267k\201\275\231\220\332\275|\337\017\275\365\273H\275\204}N;`\030\350\274\257\0361\275)\n =@\317\017\275\204&o\274\014\212T\275\365\342\274<I e\275B\336\n=+\r\223\275SQ!=\372\314\377\274\007\210\022\276\371\327\323<\226\332\272\275\223\007\332\270\377\355\260\275\226|\005\275rG\256=\277]\353\274\304\211\372;\357\027c\275pB\032\275g<%=\277\016\265=\306\'\203\275\377\303F\273\003\202\001=|\335\023<4\000\373<E\2115<a\347\013=\300r\267\275\r4.\275\247\345\253\274u\340\177:1C\027<\266.\021;\374\312\342<\003\352\016\275\273t0\274\365\"<=\232F\262\272+m\0279n\233\026\2751\004\\;\322\203\311<e\026\001;\020<#\275s\022M<\345L\316<\344q\344\274-_f\275\307\027\335\274\300\334\335;\035.\333<\3470u;\314\236y=M\356\013\275\364\033\214:*\250:=5@(<\275\032\264=\361\300\207=\3326\n=\231 \372=a/V<_\206V<.\001\321=C\372\207<\222\n\032=\243\241\030\275[\005\310\274\374\212\037\275\351\251#=)e\004< \336.\275\330\306\331;u4\275<\344\202\317\275\247>\222=\316\234\372<({h<\231\006\250<\033t\205\275\315\362\247=\331z\200\275QB\235\274\345i\256<\275:b=\037\205\213<\352\217\241=!\321^;\370\365\307<\367\275\2537 \213X<\355\3127\273\325\234}=g\255\206\275\327jk=\345+\352=b\206\250=\t=k\274\033\203\376<\177?<\274\263\315\242<L=9=\310A*\275\334+=\275\r\234b\275;KY\274\205\240\007=\016\342F;\252\323\223\275\013N\037;\241#\n;hA(=\360_\002\273U\366\257\274\304\3450=\347\312\236\274\007\000\327<\232\334\243\275\264\003\013=\016\031\332\273\317\352)<\000\343{<e\221(=\372\323\215<MU\212\2753\330\303:a\222I\273\264|\221\273\274A\326\271Yg\242<5_\206\2754!\347\272\241\365G=\274\360\r\274\035\357\254=\243\2506\275\241\242\214\274x\210\260=\014\331\243\274\251\037\235\274U\246%\274t-\374<\264^\177=MY\373\273\014\207\r\275\272\001B=N\241*\275\004\373\355;\355\247\245=[T\352<8T\026=\007\302\317=\021\221U=\275\007W=Ar\311<=t$=\326_\252=-TM=r\256x\275\374Z&<\017.\332\274\3231\006\274\204\247\354\274\036z\226\275\344\224%\275\201\325\031\275\212xa\274\350\245Z\274\341\263\355\274\020\035\016=z\276\201=DR\010\273uL\264;\321\212[\275\211,>\275o\365\316<*&\241\275\031\220s\275\332^\213\274@^/<z\032\373<=x\013<\032i\257\274\331\250\357;\346\245P=\322\035\360\275v}3\275pA\020\275\323r\002\274\246\317*=4\200\202=\343wS<\205\342G\2743\217\010\275\2425<\275\024\341\233=\331\363\334\274\236\007G<\345R\217=\206\010*=X\233w=\033K\326\274\254\206J\275N\244\203\275\201k4\273\n1\266;\261\233\327\274\214\362\301\274\317T\376;^\333T\274\3607\360;\267\\\001=\243\233\'\275\253\326\240\274e\325V=4\245\250\275\035\276\355\274j\252N;\306\037\023=\372\267\302<S\344M<\266h\364;\324\240\232\275\343\205\031=\027H\266\274\375R(=\022b\314<\326\333\237=jU\371<\373\363\220<\205wZ\275\260\245\267\274\254\013\035\275\232\277\360\274f@&=\227\267 =\227g\016\275\354\272\026<\000\210f\273\025((\274\217@\361<K\023\302<\221\215\n\273\266\207\233\274\341?\223\275$\246\267\273\232A\377;\023\321\305<\034\277\254<\024\365L\273\\\305\225<\255\307)=Iv3\2744m\222\275\251\251\332<\024\242f=O\316\277<\020\004\202\273\346D\271<C\007\370<\006,\263\275q5G\275\315\264K\274@\343k\274t\322\277\274\200\010!=y\307M=\354M)\274\365r\013=M\315\253\274\320\326\204\275\270\314\345=\363i\317:\366{\307<X\277.<\340Xi=\t\254==( \242<\374\016\200=U\231p=\262\365|\275\355K\222=/\247\303<\022%Z;\241\210\224\273\251\260\321\272\337\210\311\274\376\362\010=\235\007\344:aC\024=\301\257\005\274 \317j=\371\003\245\275\303\274\354\274w\316\215=\216m\210<\273\221M=\311 \227=O\353[\275U\366&\274\205d\225<\347>\215<l\304\326\275m7\033=\274~\260\274_\307;=\337\032\224=~\343\\\2752\t\304;\363\331\203=\253\225\362\274\007\304\026<\276m\236\272\305X\357\273\376c\331\274\376\330O=\322\316\002=E\364\253=:[\003\275c\257`\275?L\006=\234\210c\275\017\267\272\270W\323\031\274\305\267Y=\333\016\267;\354\025\320<\032\334\201\275\357\360\221<\026\302\332<Z\007\230\274\270\213%\275j\277\024\275\366V\006\275\013\010\206<\367\r\302<\224\024-\273\357{H<\221\305\346\273\376\267\240<\375\313\213=j\357\265<\257\231-=U]\271\275\206\003\213:c\2441\274\311it<\234\366\031=\035\300\2619\237\213\201=3\340\201<\215\236\254\274\277R\242\275$\245\222\274\347\356\'\275 \0018\275\271N\352;\377}\372\27466\023<\310\034\241\275c\271\363\273\220\342_=\251\372g\275\260\341(=\314P\324\274,\347=\274\023\223\350\274\210\224\310\275L\305Z\274|\037*<\314^Y\275\21660=^\026\226<!c\243;M\307F=\217y\321=\256a\206=9r\371<\032\353\317;\374\275:\275\321~\034\275/\251\224\275S6\302\274$\006\265\274u\232%\272\371\324\233=\232\273\371<\307{!\274\354\020\336\275l\327\252\273\267E\247<%+(<\'N\215\275\237QY\275\351\241>\275\224\352\002=v\303z=_C\367\274J>\325<\204S\312=k\354\255\273\024/\353\2727\335c=R\372\231\274\r)O\275\000\016_\275l\201.=/\212\t\275\354\022|=w\025\226:\273\377G\275\312\025\003\275\233\017\270\272P\336\035=D\222\204\275\027X\275<$\021\246\274\177\032\021\275\312-\253<\260*\250\274\241\037\203=.\360P<\033\340\026\275p\253\344<)48=\317\223\222\273\024|\t\276\365op\274\3577?\275\276\322^;P\313\006=,\t\346\273\204\307&<\334#\t=\231Nk=\317\027\310<=\263\350\274\320\033\264=\034|\201\271\275\013.\273\311j6\275\177\235X\275\3461d\274=1\245\275\376\"\207\275\251\035t\273\332\316\035<\225\030\035\2740\302\217<\353i+\2754Ln<W\361\255=\324qs\274\276\034\213=\201|\205<\355\375\356=sy\261<C\025a\274\205M\032\274\274\023\273;\241\2779<v\3243<\006z\\=1\313\000=\261\334\347=l\360\254\272\202\213\007=\352N\232<\213\372\221=\364K\250=\300\344\233\275\373\345M\275\006D\326\273_\2666=\026r\352:r\213U\275\330\360\220<\303z\225\272\\\334\306<pQ\200<n\210\230\275\275\325\273;\277\373e=xz\271\274\031\214\312\274{<\002=\177\370\021=\250\230H\274]6@=\301\320S=!k\221=X\217\276;bI\305<\300\2311\274n\023\000\275\377\263:\275S\356\300;q\224\362\275\211\353\252\274\361#\346\274\217x\336<\334\341\307<\211\t\206\2755\241\264\274\321\343^\275\235\200\004=b\315-=KX\032=\203\276<\275LT\303=\'\263\026\274}\330\231\275\376h\001\276Gb\224\274\332\033\351\273I;x<\235\313\264\275\2400\210\274b\277B=(\220&\275\216H\263\274\275\024<=\247e,=m\263\362\273\3336\004=\223\360\000\275*\007)\273!\014H<\232\007\330\274\000q{\275Z\031\021\275H\240T=\225\324\200\275\036\360\271=\373\266\251\275\001*\211=\034\020\251\275\253\035-=\310[\311<-\321Y<z\354\317;<Q\010\275\343\251h\275L$\035=X\r%\275\307h\257\274\314\344\002<\211\0175=P\236\031\275\000\353\232\274\257\326\211<\022;\261<aB6\275\217\376\237;\n\"\024=\372-\200\275\360\3621\275\240\260\267\275\356k\330;j\237\232;,\316\206:~\367\244=\322\274\305\274\372qh\272\323v \275\232\214\225\275\313*\345\274\267\276k\275\260\324z=\225\3268=P-`=VN\327<\313\n\261\273R\377\264\274W\301\'\275gew<b\317\n\275\331\034\301<g\"P<A\321\216\274\326\243\021=}\326O=4\267*=ucO=vNE\274e\303\231\274A8\207\275*\351\265\274\037\242\007=\277\3634\275\021\210\245=A\214\331\274*\213/\275@p\004<g\000\023\275#\376\203<\341\225\230<\035\312\217<\333\262\t\275\013\266\334\271\227\031~=\240\337\237\275w \340\274\362S5=-\303\220<)v\037\275\275Wq<&6\205=>\214\315\274\360\365\205\275]\201\307;C\277\006\2744\207!\275E`\003\275`\'\315;\333\327\"=\351\352\341\274\026\027\252<5yL\275m\214\307\275\"R\006=\354\202\202\273\017o\335<}\235\215\275\034!\\<;J\226\2751C\232\274g~(\275\346\237&\274|\204j<\343\353\211\273!\'\260:\260\000\226\274\2333Z=\030\241\263<\222\376};4I#=xu\230\274+\221Y\273\213\330\274<\006\371\361\273\223\226\003>0\332\\\274\245B\207<\227\302=\275Y\347L<\'\227\331<I}\211\275o\263\031=,\0264\275>\227W\274\036\345Y\274\010\323a\274\004.\035\276z\"\013\274\301N\243\274\206=\252\275\302\026C:\203\237`=\037\224^=\215\312w\275\225*\000=\370\356\324\272\301\323\206<Du(\273\257\353\270\274f\276\262<E\346\277<\277\026\217\274\304\007\014\275\243%]\275l\304o=\265_Z\275\0358[\273\026\\\003\274\376\267\026\273g%\352<\324\322m\275w\244\276<\236\211\036\276|\206\340\274Y\324\311<\272\275\350\274\300\274m\273\'\213\202\275h_\200=S\215\016=\262\377\004=\266\212\244<&\225\220<\017\332\036\275\016\013n\274~Q\336;\007\346\352\274*\301\307<2L\242\275FV4=\201W\026\275\344q\363<xw-\275\353\033\213\273\310\261\022\275[|\331\275\333\212\375<\351\365\351\274<\317j=Y\307\304\275\322Y\277\272\003\264\257\275\324\nz\275\350\004s\275\272i\361\274\037O-\275\010{P\274.\332\0149\202\302\365<\" \3538\242\023\207\274uA\254\273,{\003\273\007\261\r=\240\336~\2726>;\274\006\354\306\274\001X\203=\000\204\017=M/1\273!D\237\275B\215\247\274Ra\360<\347\246:\274\017L;=\2450D\274\017\226z=\222\037y\274J\243\301<\222\361\247\275\236UH=\256\0264\275\224. \274\005<f<\325\213\203<cX\331\272\322y\001;!I\226\274<\200\252=\034y\017=\010>!\274[mf=\2049h\275\230G\005\275:*p:gI,:\204 \224\275NHh=\007c4=\001\323\343\275\254[\272;]\223\202\274z1z=\221\024\262\273\227\t\244<\201B\243\274\375\032/=6;\266=p\320\312\274\275\347\246=\225\202\340<\354\235\321\274\360\002\034\273\346\343\372\274C\376.<B\325\331<\366D\202\275\025\024\227=\004F\237\273\370\336C\275\201\365\201\275|\362\007=r\330\225<\310Y\023\275\250r2\274\354\203\220\274\355\374I=\205p};\257\037,=\376U\265\274\240w\312\273YU\r=M\245\034=\305m\234:!\320\215\274Bv\014\275\210$\247<\325\256\022>\013\034\322\273\215\222\016\274_5\241<\235\306\016<\3678\326\274f\223\360;\016\023\230\275\3631\313\274\244\313\226<3\211\210=\351k\023:\005[h<\022\267\t\274c:\027\275\336Q@=\225\010\342;\033\273\233\273X\246\202\275\261y#<\337\265\246\275\300CS\274\005\371\205=\370`Z\274\234\204\367<#G\003\275\2131\202\274/\315\236\275\265\335\007=\312X\201=Jx)<\216\273P=\270\260\230;\247D\227\274\375\363\"\275\027\206\211=\325\374%;\312\330\001\275\212\007\025\275\307u_<Z\006\370\2740\341\303<\365\367\253\274\333\301\311<\315\254\000=\343=L<wN\272\272\352;i<\321\023\200<\217\376h=\216>\201<\230\204\002<\330\235\202\274<\252\\=\222 \227;\032vK\274\235^\204\275\310`(=\247j\013<\032\206l\275\'\025\262\2733\212\023;\317u]=w;\003\275\340%\"\274\226H\264<& D<\031\332\345\272g\276\341\273\334p\342=\322\203\304;Hva=\234\n\024\275g\231q=\036\324\317;l\017\255\274#\001\276\274;\237m\275\222@\231;e\370\201\275\340\257\023\274\323\352\363\274\037#\216=\224YN<pZk=,\330\306<Q\230\226\274\236\0134=$\272\233<\376\357\366;\034\257{\274+\257\371\274\230H\372<\275)><\363\223%;&i\242\274]\252K\275\241.\371<\316>L\275\013\3054=(?a\2758\352\211\2745\346\335\273\251\nw;\331\3708\275\227\245\250\275xC\244\274\306\362\310\273\220\263\336<\342\245j\274B\031Y:f\316Z\275\010\373\361<\212\256v<\335I\001\276I6c\275\206\306\357\275\267\333\377<5\232o=\000j\261\2744U\254\274)\317\365\273\"\355t\275\273j(\274\273\373\000=i\003:\275\344\260\207=aG\315\274\341\351(\275E\r\376\274\205~\025\275\366vU=\334\244*\273\243.\310<\340>\214\275\362\017\014\275pU+<\325\352\245\274\271w\021=R\010:<\255XH\274\232\355\374<(N\311\274\330\300t<\337\371\224\274\021Y\254=o\307%=\327\365\336\274%\027\202\274\262\336\375<4\355\"=W\200\360\274\314\2354=\200\330\337\275\251\341\310=E0\246<<\363\006\276\372\230\016\275\200\202\247<Xi\211=\333%A\275\254=\317<\225}\251<\330\357\243=D\374e\273\216es<b\020=:Y\372D<(\331\307\274I.\261\274\334\245\203=J\211\177\275\267\000\010\273}q\024<\330p\246=\t[*\275N\311Q=,\267\221\274\020\355\023:\311\350\203\274\021\321]\273]\267X=\3545\360\274[V\220<\ny-\275\37219\275PO\261\274\334\001]\275\322\230f<#\361\002\275X\236\202\274guD=\024\216(<\212\227x=\323\323\305<{w\023=~r\225<\340\354z\275\373\321\235\275\216{r=\236>\005=\230\353A=2\233=\272\267\272\325<t\021O=T%\250\275\200\251-\275Q\\\217=e$\235\275\321\230\224;\226&\307\274-\t\200\273\342\277><\207LH\274\232\332z=i\025\211\275\256\337\241\2740\022\003\274\326\331\224=\340\005\203<\347\312\260\272b\r|=&\220\350\272\256\264\326;\234\247<\275\013Nd=\301`\227;)l4=\016\250s=\252[*=SA\035\275n\337\213\275\3272\001=&`\262=\200QT\273\351\263\332<\204\256\n\275\303\360\233\275j\376 :V_~<\225\217\002=J\314\035=7\353\000=\022P\224=w\r\377;\005\213\330<\205}J\275\313%\224;\036\035\223\275*5\247\272\231G\251:\306^>=\247m\241\275GH\003\275v\317\267\274\273\235\241=\n\017\206<\005\232u\274\331\000\221\275g\355K=\210\334\035=B\010@\274\035\027\247<\243\345\034\275\313\236\006=sH\273\274\323\252\3279\347`\264\274\362x\250<r\326\226\275\026&\323;L\372\325\274E\'\014=\363\324\337\274\264\365\347<4\3251<5|\346\275\246~\030\274D\200\256\274\"\243\202=o\r\277<\303\341u\275\240\020H<\267;\204\275\366\274K:p\251\331<\017f\014=\017I\014=\215\275\240\2753\261\233<\235 |\275\311tH=\335\203\026\275wp\025\275[\240\250\275\376\253\336\274\231\202\\\275\206\333\003=\\\275\234<B\313R=\366H\367\274I*h=\306~\337\274\302\n\375;=\3633\275\362\312\217\275\350m*\274\354\246t<\202]\301\275\026;\344<\315p\035=\304\333\363:,\350\354=j\\5=\213D\364\273\204rY=\344\177\332;R\266\031=\2535\207\275J\325&\273\205}\323=\375\237]=\030\321\222\275s\2517=\001\'\031=\342\261\257=\337\227\270;`f\362\274\223\230>\274\200c\213;B\373\212\275nZ\260=g\313q=\223\t\306<\347G\222\274\203\206\251\274\234\227\342<]\302\216=\202dT=\316\307\372\272g,\002<\033s\276<\265\365\355<\336\363\346\274xs\217<\013&Q=\275\007\346\274c)Y<f\010\301\274\267\362\206\275C\330\016;\360\237\345<\017i\360\273A\214)\275\352_\375\272\"\371D\275\037v\023=\007\304k=T\233s<yN\377<U@h\275\235\347\2719\302~\267<z\303\313\275\200\257\236\274\347\256\024=\211\333\354<Gdn\274\325\372\221<\257\322/<\025\220\227=\307m^\275\027\377_<?\351\210<>\247H\273|kt=(\225&\275\360:\032\273vU\273<\234\314)\275\313\364\352\273\255\276#=\326Ow:Y\235\304=\362\251\274<\370/\253=T\306\360\274\367h\033=\273\211\006\275\026\254w\275s\351!\274\220}\202\275$\321\204<|\304&\275\223\303\314\274\325\340\177<Q\216\260\275\2656\010<\242\316\020=\324O\026\273\374\300d<\214=E\275\016\246\022=7\222\350\274\315\352|\274\"d\231\275\252Jc=\023\245\227\274\232d^;Y\013l\275\007\332\034\275+oS=\302uS\275P\373q\274a\t\013\275p\232r;I(\007\273FkJ\275\326\364d=\\\025\345\274\273\245\225=\273.\366<\022l3=\373|\023\273\231\257N<\275\301\361;\343h5\275\010\264\004\275\3304\255;\366\005u\275\220\354B<\313qm;@\312/\275\226$\214\274\353\325\210=\324\322\247<\233\373Z\275\315\204\253\275\024g\004=B\020\207\275\310\3712\274\341cO:\373\211\215\274>\213\215=\326AO:\265\352\257=\030\304\311<A\027\\<\235\233\004\274r/\270<\301\\\024\276\035\206\264<\221\345\252\273\r\213?\275\332\031o\274\226\375-\274\365\305\237<\215\n\221\275\214W|\275Z\177\n<\273\332\244=\017!\236\274\332\222/=?\272/<\242\233\223<\277\202U;*\320)=\004p\233\274\230\243%\275X\334\240\275\275d\353\275\2536S<\'W}\274\361\226\036\275o1\272\274\035\365\322;\342\3703=^\r?\274fY\201\275\260P\227\275\313\242\177=\236P{<\215\240)=\253\212\021\275\365\236\222<\206\276\030=c\030J<$m\276<\301\301:=h\351O<\371\323?=\371Sd=\203b\253=\226\263\260\274}xA\274C\223\305=\202\306\217\275A\363F\275\265\332\222=\367\214\310\274\231\275!\275\255\357\372:\231\311+=\336t,\274\005\222\242\275\206j\000=r\r*<p\317\210\274hgk=\311X\274\275\0319\337\274oy\250\275\216\312\355<\016\332K=\267n\256;\272\270%=\310s1<R\304\'=\220\364\304\274\016-\317\274\231\304a<NjO9B\217\226<\037SN=\361\372\307\275\255\247\227\275~\220\322=A\366D\274C\346\377\274\245\372J\275\261G5;\027\177\377<(Gr\275\365\204?=\326\310a\275\241\237\266\275T\334W\275\375d\023<\014\327\363\274]\315\312<f\326\016<\032(`\275\351t\215\273\211i\002=G\212\020=\250\221%\275NGI=;\223\263\274\275\0008\275\334\255{=\302\364(<\310 \013<\210\220X<>\320,=t\220 =t\241\247\274^)\221\275,\237\\=\311Ro\275r\2160\273\351\nO\271Y\314\210\273\205{\r=\226\354K\275~\327\016\274\327{\362\274I\205\250=D1b=\242\242P\2759\254\374;y\372\345\274so\306\272\245[w\275\001[s<\303\271?=\215\364z\274\n\307\264\2745\334\021\275<\024\010=\251\217\247\273\346s\231\2756:d<\330[\017=\347\034\024<\335[\030=0-\251;D\ni\275\000\307\260<\210\017\201=pD\264;\010:.\274\310\010l=Lp\017<\1779d\274\225\274\377<\036\316<<\242\353\330<xxg=p\346\233;\2728\036=B\277\237\274w{\207\272R\223V=\304\007\220\274\342\023\013\274\343-\307\275\210\030\251;t6\230<h\367\245<U\276\213=\2671Z=\221\2511\274E^&<\352&Q\274\031\266\"; j\336<\\\246w<\223\035\005\275\245\311\306\275\265\302_=,j/\275\341\201\322<lY\347<\250Ol\275`\355%=/\306\342<rI\215\274$\017\n\274!\035\034\275\225\261\005=\244W\'\275\310\327\022\275$g\310\274U\256\205\274?c\206\275a/\223=\355l\320\275\022\244K<\266q\322\274`\271\300\275\220\315\r\273H\326\n\274]\351\202=/\272\243=\313\3126\2722p\023=\371\257\224\275\274\246\027=w&\334\273\312*\241<\225<v\275:\252\211<;\355{:.x\r\275W\010_=\036\304d\274GD\354\273:oS<\030\273)<m\177T\275\272\332,\275\315*S\275%\367\035=\r\0011\275r\300\257;\377T\326\274\320y\214\275\332#\017\274\257dI=\352?M\275\342\235\250=]\026\246\274\322\201\214\274\231\262[\274!\303\'=\325\347\254\274\361Xq<\313lC=\006o\356\2743\226s\275\035 \n<y~\317<\377I\226\274%\226\237\274\323\264\304<\216d\253\275\307\325I=%\327\213=B\326\r\275\266\310\356\274\341\r/\275\355\037\237\274\213E\021\274\203V|<E-\235<G\347\333\274V7><\353\270\271\273cV\311\273w\312\210\274\371\026!\275\245\261\345\275\232B\323;\236f\303<\236\365\257;\245=\211\274i\244r=\2159\305=\237\036\234=\3377w=\343\035\246\274\033\204\234\275F\236\335<\310\034s\275J\235\246\274d\304@\275O!\262\275\257\332\320<W\211\311\274\266\257\306\275\\\254\222\273\302\311\234=\"wK\275V_\254<s\254\024=\026[\231\274\2063\314<\350\211O<\027\214\207=j\303\242=z\252\266:\300\307\025\274\352Zj\275\321]X\275\355\005\266\274N5\271=\360I\'\275\232\0325<\r*]=58\225=pR\200=\375\267R\273\274\177\003\275\314\341\323\274\213mz\275\323\254{<\000[\003\275G\2671\275\201\2428<|\204\372;\032x\376\275B\271Y=\271\352\255\274\332\373\341\273\313\217&=@\331\326\274ww\027=\267v\233=q\361E\275\340\013<=\336,b\275\007bT=\341\024\350<\017\324};\2465\312\274{\370*=4\205>=3\367\r\2758 6\275\376k\301\274 \215\225<\340I\204\273\303\321\307\273\222t\214\274c\314\031=\341\214\024\275\376h\014\275\311\323s\274\246\240\\<\341\236\277\274^\322Z\275\023\346\024<\345\036\002=\207\260#\275\215\373\260<\255\373\264\274~`\345\274E\300\214=\020\257v<\341u\202\275\200\333\311<\026\300\221\275\350[m<\361l?=dQ\304;z\003?\275\341\202\310<\322\362\212\274\216`\020<\177\2313\273\244\253\230\274\272\013s\275x\272\010\275x\216\217<3\351\311\274\373\225>=\357$<<\242\017\243=\203\323\276<\213\255\321<\316\335_\275\337\272}\274\2738\275=\202\242(\274X\272\347\274\252\240\260;\235#O\274^uj\275\260\370\322<V\211\005\275\t-\371\274\025t_=\262D\374<\266-0<\313\0130\274\036\366M<\354X\337;\250\210\026\275\353\246Q\275\362\022\031\275\370\236U\275\263]\211\275_U\'\274\013d\364\274=ed\275\350qT\275D\240Y=-\266\021\275}W\276\273N\206e:\254\355$=c8\367<p*\233=\371N\315<|\253\231\274\2447\202=)\343\301<\225\342<=m\357\257\274\245xO\274\330\321\007\275\323\211<=\360FO<\261x\264\274\336\225\243<\221\002\002\274\347\325R<*\375\327\274s\232\250\275k}\267<\350{\250\274L>\017\274+K\n=\365\233\351\274U\363@\275ur\326\275\233\363\346\273\1772H;\313@}=\026W\341=\345\240\210\274\363.d\27439\205;%k\241<I\306L=\016\373Y=\355CI=\013y\325;lA\303\274\363\316B\275#\221\366<\372\354\346;OS2\274C\236\216=\010\241\270=\345e\251<\211\260\310\275\227US<\205\315\333\274\010\025\000\275-\2536=\234\027\025=\2453\234\272\344\271\203\275\210\037\224\275\352\2371=W&\346=\271\343,\274\207\241\237\275\'d\020=\023\231\257\271\254#V=&\345\315\274\366\261\005\274\246\333\371\274\223\372\264\2754J\271<\027\364.=\326jX=>\367\221<\351\307>\275\303\220#>\364c\270=\007\337\207:\214~5:\336\375\202\275\233\030z<\t\341~\274\320F`=\010HA\275\034\345a=^9\367:b#\226\274\241\242\'\274T\014\243=j\371v\275\305%\312\274\274\266\251\274\306k\240\274{\247\363\273\355R\253\275\233\334S=\340%|\275\307Q\203<\321\347\230=\215J =o\202`\272+4@\275\213\316Q\275\252\365?=\222\321\325\274\300#\033=\231\250\241\275\230\245v\274e\303\361;\243\247\302\273\307f6<\272\341\355\274\256\253\034=\216V\330<S\355z<\024\376\245\275\t\375\000<\"g3=\013\325\022\275\224\305y<D\273\004\275\320:D=\206\334\347<\203pE<E\336\254<1\000\334;f\250\234:\004V\264<b\200q=\0378X\275\266>@\274sNl\271\246As\275!\361\306<\247\363\265\273\3053{\275\004w\344\273{\033w\274\017\317\030=r\013\227;\365R!\275\370\3258=\006\253\001\273\317\020\220\275-\257\305=\3240\273<\210\220a\275\022\223\277;\332\242\354\274H\332\251=}\312h\274\037;\226=\273)\267\275\311\340\226=\217a\222\274\326\336\202=\210\256\004\273\022\032<\275\360\223\031=@\312\361; \326\322<>\317m\274|E\374\273\220W\r<j\005\375<\336\242U\275\352\210\344<0N =W\245\271<\036i\020=q:\006\275\335\317\'=\363\025\n\275\322\363\260=|\272\323<\034\221S=F\225t;\034$)=*\222\356\273\354K\326\274\230i\315=\265w\246\274\324\370\010=,\024_\275\321\004\213\275([\215<\017}Y<\'\372\236=\225-,\275\323\236\024=\321t$\275\033\362\227\273\313\213\222=\314@\262<l\243\006\275\204\216\341\274\302\366\230;,\277\250=P\\\\=\325-\341\275,\251\307\275\374\031:;\243K\026\275\345z\021=\262d\270<w[J\273f\372\021=\273\203\021=hoq<\233\361\210<\241X}<\320\375O\272`\225\224=\3428\027\274\244~\374<=>\257\275\374\300\240=H\331\354<\366\226 \274\274\010E\275@/s=\3100\020\274\nl\316=\016\205\371<\\\247\231\274i\014\272\272?\364E;\212\310\363\274\354\tY=\220H\233\273\323\020D\275\305\264\335\275\247+#=\0332\216\274\3556\240=\025.\324<\367\315\347=\200\212H<\236t;<\"c\324\274\363\315\026=\311\003\314\274\315n\374;\177\350[=OJ\311;\236M\203=\267\324\004\274\014\226\270\275c\301e\275\336\354P=\331a$=}-\264\274\343_M\274\366\252\314\274s\250E=,^\356\274\336*[<]\321\317<\212\034`<\304\365Z\275h\255(\275u\222I\272(\020\255\273Q\332\220\275\303e\304\274\321\367\206\274\253\352\252;\006\330\343;\004Zp\273i\221F\273\306\321\332<T\nd\275\352A\310<j\331\246\274\"\2418=P\'\014\275N^\371\274\244\342 \275s\036B<\2376\316<\266\337\222\275\301\177\226\274lz\253\274\27023\274\377T4=\022\244\247\273;\244\275<@q\365;\214\356\016\274}z\014=\271),=\310\273\325\274\247\025\271\274\0341\007=\210{\223;\223\221\302\274\016W\227\275@&U\275\220\316\202\274\027||\271!\'\310<G;\004=^\373\217\2748N\343\275\216\362\233\275ex\223<4.;=\371\263\212\273\371\223\312<\\\003\367<s\272\006>E\354\357<\272\323r=\200I\306\275P\016*;\234\317G\275\307O/=\367,(=?TV\275o3\035<L1\320\275\374\237\263\275-rR\273\251\261\275\275W\224\362;\303\036\253=\231C\306<\3729J\275\275\3050\275\237\261r=@\224V\275D\001$\275$$6=\230\355\255\275N\220\244\272\002\277\311<!n\203=\300\222[\275\350\254\361\274\334R\357<\010JE\274\364\337\353\274\323\354\276<\336\317\317\273\253k\347=\022xO=vB\244;Ql\305=6h8\275d\247e=\362\347\216\274\2669c\272\337\003i\275\230\225`\275A\323e\275\022\213e=#\277\266;c\326:=\010\024\355:\010\317s\274\275\241\230\275\323\346\345\273\326\362\354<\350\274\350;b\252\264\275\205\252\201<\243\214\376<E\215l\275\216\n0\272C\352\252\273\264\243O=n\314\024=\372\312d<L\337\027\275\244}\305<uFN=\212V\356\274\031\350\316<\330\232\007=\254\211.<\317\371\231=\017\232<=\311\202-<\332\331\005=\336\315\303<F8!\274\027]\356\274\354\033\215<\325\024\363\274\310r\005<\375S\326<V\326o<O\337^\274\367K\214\274\023\246Q\274\311\343\212=\020\314v=\354li\275Z\327\354<\223}\333<\253pX\273\242[!=\335\340x=L\3104\274\004\033\234\274\213\251\313=\346\375\360\274\r\024\371<\254\336\177<\330P!<\210kn=\206(i\273\\=\025\275\243\203\350:\2178?\275n (;9\010;<\373\301V\275\364\277\223\275\366\014\373;\035V\025=tt\007=\207Z\376\275\315C\301\273\026V\226\275%a\252\275\233\357\320<*\347\200=\362\244f\274\217\276\2406\356\025\r=\366\360\221\274\213[\037\275)\366\303<2&\216\274\331|\256\274\025\022\016\275:\216\246;\273n\310;\036t\023\275\362\254\227<\241\tA\275R\321E\275\242ej<\234\305\313\275\207Q\n\273\364\2273\272\346\264U\275\367S\276<\227\267<\275,\334_\275(c\255=0u\330\273\236K\272=\030\215\030=\312\337\236\275\315\305*\273\273\326\276;\263:\357<\016\217\177<\253\355\316\274\230\260\330\273\352w0\275\230\016\000=\031\212\255\274\264\017\032\275\253\' =^0\r\275\333\307\t=\374eb=\276O\310<\277\001\213;\006\230\005\275\033x`\273#\255\010\275s4\004\275OW\023=\251\264\t=\367\366\227\275\235\313\016\275\023\240C=\345c \275\375X\022<\"Q\247\274\331b#=\034,3=6\373I\274\265Y\002\275.\025q=\303\000\n=\363Xi\275\031~/=K\2370\274\222<f\274\212\330\004=\242\307V=-\373\"=\303\222p=\177\322\335;O\317\367<D\356[=\376\025\241=\023\024R\275S\272\203<{L\345\2748T\3209\201\3509\275\tW=<+\005k\275\270\024\254\275qdK\275?7\244=`\237\265<\001%#\275\227\223\031\275\256\210\361\272\002^@\275m{K\275,\375\034\275I\237s\275{\236\010\275I;A\274\371\014\237\274\316\277\273<\014\241\333<p\253\255<\264\006K=\026\r+=\tm~\272\301\003\002\275\200B\220<8h\264<.\001\247\275P\343\232\275\374\202\345;:\323\226=\203}\356<\224\\\213=\272*\222\2745\364\034=\265\036\"<_%\204<\267\177\n\275\005<\214\2758\221\205=\326N)<^!\326\275\331X\316\274\267\241\275\274i\322j=\344\t\031<\245\340\374\274\017\3746=\021\341\277=\317^_;\234\303\212<Y+\222\275\035\020\306=@%\016\2742M\312<2\275\256\275\207<\367\273R\2567<\3349\346\273,\362T\274b7\306=\026(d\275\r\210&\275\307\254\224;\022_\202\274\037{\207=\266[\342\274(p\221=\351\317\235\270\372k\263\275\364`\261=.\014\274\275(B\023=c\204:\274n)\006\275\354\375e<YN\003\275\311\256\304<\214\277\332<\231L\r\2755<\255\274L<5=\014\232t;Z\215\206=\233\320\022\275\030\251\314\275*\270v\274r\265\006=A\177 \275k\2001;j\236\036=\350\033\364\274\310\220\360<\354\254\360=U\355\332<\241\236\214\274\342\200\355<\246\357\341;\025K\022;\221\201\r\273\226H\347\274]\\q\274\345\310\177=\026\033\216\274\034\233\213\275{\346\273<\304\306\307;\021\315\325\272\355\347\203=\330\034z;\302\007\274=\243\363\215\275D@F\275\026\246\305<\222\203\360<\222\230\346\274@\253\017=\016\367D\274&\027i\275\341\260\340<)\r\202=~D$\275\274\253\016;\246\322M<n\227~<\177(B;\252\352j\274d\026\313\274S+\027\274\210Y\037\274u\345\343<\301-\020=b\273\003\275\251\335\022<|u\245\274l\335\024\275t\024\244\274\316s\264;\261\017\364\274\247A\363:c\326\240\273\226\013*\274\303YQ\275e8\301\274m&}=\224\230\206<\302\254\340\274\363\001\373\273/\336\013\272U\250\324<\246DK=@\313\260\274\245!\316=\237\244O=\200\243\021=\006\231V=\204\201\005=\257#\202<$c\360=\016\036|;\036IX<)\306\005>\304\260V\275M\332#\2756\0324=\204\022\263=X\356)=\301\030=\275N\360~\274\210%E=.\365\200<\n`<=k\017\344\274p\300n\275\224!\317\274\305\344x\275\343(\250\274\270\035\021<+5\030\275\226\232\271\274\273.\277\274v\375\260\274\223\335\000\2758\207|<\t4\"<\352\2538\275xGP;\n\340Q\275\306M\232<\311eQ\274\313R\244;k\366t\275\204\315A\275\317/Q\2746\0318=-\332_=\330\264p=\354\010\212=MJ\337<w\325\330\273B\rA<v\331\227<C\240\332\273\217C\264\275\t6\230\274\267\327S<9VH\275R\242\003\273\305/\206\274b0\006\274*\303i\2749PX=\256\377\260\274\377\250\210=&\250\203<cnq\273\373\365\217\275\245\226\033\275\231\345\342;\357\3429\275\374K%=\352\227\234=\013\177H=G-\r<\322I\031\275~\272\320\274\354\001\205\274\020`\327\275\217\316\311\274DH\366=\257I\337<\177$\206\2749\\\275\274/9\270\275\374\305,=L,\314<\371,\263\274@\350\224=9\004\370<{!\326\274\364\273\350<\000I\205\274t\226=\275\014\310\262\2756\265\236\274,4\360;\327\326\311=\037nK\275\214\274\203\275\276\224\237\273l\'W=]\341\202<\240\363a\274\010at\275\3268\256<\2707\203=iz9\274A\254\300\274c\231s\273S\202o=\335\032A=\023\237;\274<S\030=\022\034\026\275\001\321\221\275\216\244h<8\016\313\275\374!\201\274\032L\266\274\031\344\377\274\364Rc\275y\016#\275\217\336;\275\333*\024\274P\347\200={\223\021<\010\343\307=&+\021<-\025\004<8\225\201= \341`\275\014f\016<\325)Z=\250Wt\275S\221\203\275\355\3248\275e2\215\274\305\267\021=\223\322\307\275O\347\345\273\\\271\247=eJ\316\273g\373\233<\321\271\227<\302\013\\=\037\267\200<v\370\205\275\013\337\263\274\377%C\275\306\206\n<\315\346\024=U\3427\275[\0369<\000\264\200=K\375\003=EV\004=\013\277\307\274\335\251\312\2741\272\002\275\327t\340<\366\020C=-X\302<\250\025q<~\3529\275 \224\004\275\245\036\215=\261\037F\275b\rI;bJv\273uK\236\275,\250\027\275\033\261\227<\032\253T\274K\322\n\275\261\335\273\274\272\276\366<\253\322\325<\334\235\261<^\363\234\274k\334\351<\022,\031\275\265\014z=\256\003\235\273\362j\000<\344\227;<\224%\236\274\206Z)<\013\326\"\275\326\220p=\003\246S;w\271$=Y\302,\274\212\356@<\033X\327=\356}\230=TU\222<6\377H\275^c\311=\312_\220<\230\205\201=\220\273(\275!UV=\022\312\246\275\304\314D\275~\000/\275\302\351\265\274q5\030\275\361_\263\275\201\351\273\273\327\003p\275\222\336~\274u\004\010;\370\261?=t\211\017=\344\306\273\274\023\243\313=\332\036\200\275\245F\211\275\232[\373\2734\034\006\2763\210X<C\205\034\275\2746\231=\326\356\033\275\336\300\265<\332\001\317\272\030\304\313;]\340$=\216~o<V}\204\274\323\037\300<\0064p<\'\377m\275IGC\275\316t\216=\316=\365<\362\231\304;n(\323\273\'\247\210<\374\001\207\274\013z\016\275x\022\360\274\021\304\263\273\301]\'=9\005o=\200\266+=\375*\031\275R\265\'\275\336R^<\221^\250\274\334\224\026=\363W<\271\220\276\374;\024\230\302<\372U\245\274R\364L<\nI\222\275l_\372<>J\203<L\330Y\274\362-\347;\305j3\275\316G\216\2742\354O\275\272\327\320\275)q\332;j\'\273\274$Q\016\275(\207P\275ZiZ=\253g\302:\031\303\326<\376\247[=\217D\201\275\353\275y\274{,\306<\346q\320<\005\352f=K3\003>\"\257\352\273\240\260\327<d:\333\273\375\005\201\275\342g\251<4\221\256\2756\037\326=\026-\024;\340[\276;a\3413\275\2648H=l\225+<\377E_=]1\365<#\244\302\274\002\247)<V\301O\275Gl\233\273\365=H\2753\014V;\221\204\354<\007\377\226<\200\025\241\274\254\326<=\220\361\247\274h\255I\274\242\311\206<\007\354:\274<$\n\275J\340\351<o\333e=v!I\275\3352p\275m\021\276\275\310\370^\275\243\027\373<\242\367B\275r\220c<TA\n\275\222\204\362\275Z\266\210=\033\344\327\274\272\271\252\274Qdm=\304n)9\234\344\365<\355\375\246;\204\207<<\251\215\227\273\322i\3376\350i\217\274\177\212\357=3N(\275ne\206\275\321\236,\274\273\2024\274x\220/\275\204\332\026=O\255\237\275\272\361?\275\224<\223\274n\301\351\2744\014\345\274k\245\016=fb\\<@X\374\274{D\242\274\txJ=\356\214\376;dF!=\233\234\320\275\0140\037<a+\004<u=~\274\375c\322=\270\314\017=\240\036:\275T\342\255\274\200\255Z\275\037xT\275>\245\271<Qo3\275\224\025\251\274\266\306F;\204h\203\275C\304\316\275,iG\275Q\212\344\273\006\271\205\275U\210d:KX\217<\3242\006=\304i\324\274\257\260\206\274E\244,<\237\222\237=\177@\2648\3204\207=q\342\275\274\241\035\264\274\324\336\222=^ \335<\372}\354\274hn\330;\003\\\241\274\341\2117=\2123\311\274\226\031\210\275\004\027\223<\357\0237=B\341\210\275\261\270\354\274\321?7\275 \033w;p|\212\275c\004z\275I\254\253\274Q\217\021=\274T!\275u[X<)uO=\300\317\206<_D\025;O\230\330;\007\014O\275\033\007\210=at3\275?\204\267\275&B\020=\271\031\330<\020t\211=\311x\220\274\370\247\226\275^tg\275OU\230<+ \306\275p\253#=9:\235=\330\253A=\212\272k=\374\251\276\274\033[J<\335\364\020;\016\327\224;\201\216\227=\262\260\336\275\004\351\210=T\213\354<j\350\322\272\334a+=z\370!=\271h7\2735\363t\274\305\346\231\274\031\021\207=\022\324Z\2748M\367=\220\321\223\274\000\240$=\215\332;\274lkE<P\n\315<\362)\250\273X\337\273<\257Eu=\017\177)=\236GR\274\257GQ=#K\332\274&\256.=\221\017\243\274\\\201\004=\036\240N\275\013\242\254\275\217IA=\223Q\021=J}{\273\242\202O=\317FE=D\n)\275\277%u\274\t\365&\275\014\245\363<`\274\214=\227\325-:\003\361\000\275)\226+=\350\001\331<\262l\245\275\036^o<\002\257\205<\324\254\024<\2128k=]\310\240=\340\037 \275\346i\225<\327X\217\274\276\303\237\275.\254\025\274\346h!<\254\177T=\256\264R\275VH\017\273\307\2731\274\007\006\321\273\010\233\241<\254.\021=//\253;\014`#=\036\310\216\272\002\224\374<\270/\256<\002\321\000<G\272%\273\000\263~\274D\037\013\275\350\323\242\273D\373\227\275.!V\275\360\260\327;\354\336\t==\"m<\343X\037<\362\000\304\275\"s3\275/I$\275\214\236\240\274`B\352<\377\246\245<\001\311\332\273\24322;\252#\311\273\207\270\306;;\000C=\215\367\372\275B\275S\274,\352\2308\326\375\331<\35096=\013a\316\274\272\236\"=\314\303\304;\361\276\233\274t\351O=\371\302\337<!j\231\275\307\316\311\271\263\"\207\275\235\356\316<_\225U\275\266\201\214\275\225\273\236\275\017t1=\266_q<\261\201\032=X\327x=\231;|\275\366\356\237<\317\371\034<\345ez;\354e\272\272LU\232<\'.\341<YX\006=\301\371\233\275\253\321o<\315\217\002=\270Y\236\274&\367X\275O\201\"\273\213\275\"<6\301\327<lR\265\275\247\357\251\274if\\=\004\364m=\357\264\257\274\202\017c=B\021\013\274$5\336<6j\023=\256d\313=\277Ad;\257\361\365<\244t\024\275\317\013\257\274\020\214F\275\267\020[<uL\007\275\353\032\276<\301\267\252\274\3073<\275\002\365\320<I\251\355\274\255\177\237\275\235\367\345<v#\001\274l\354u\275H\362\005;\327\304\354\273V\275C=\014N]= \303\316<D\347H=0bN=\246G\310\274w\324\207<\241\231\223\275\276\261\265\275\300P =\324\317\206=p\306\003\275\325w\251=\344?\243;NI\321\274>]\200<(SW<EZ\365\274F\340\204\274\316\266\353\272\227v`<\267[\230\274u%\203\275J\340\250\274\264#3=\217\247\225=4\310\340\274\036\267I\274\007\350+=3\337\306<o\216\033\275\021\221\257\274\304\016\225=\300#W=\034\000\332=\333\225\020=\2671\330\274\310\361\034\275X\370W=H1E=\271\333*\275\317/\025<\356\010P<!\351\246=\377\370\334\274\352]\003\273w\025<\275{\265\310=\2671\033\276\233=\002\273N\264X=X\270v\275\322$\223=\311\300\203<\241w0=*\017\304\275\3501I\274\206\306\342<\250\247\014=\242\265\"\275\362E\303\274-\232\243\275\016\322=<\013\301/<R\220\033\275\204\027\264\275\016\021\037\275\305U\024=/.O\275\013\301\032\272(\205\340\274\316a\024=\342\026\254\274@\004A<\204\222\235<\336Y\025=\304d\325\275VD\244\274\235\0256=kc\376<\n\327\026\272\214k\323\274:\027\324\271\324\333\200\274\274\253c\275\016%\203\274\355\326N=\2345o=\324|\361\272i~\220\273\322a\004\275\020\371#=H\222\227\274\024\236\232\275y\316\202;\261\223\331=\355\323\305\274\036#\323=\032\r\313\274Z\331\212\275\234b\266<^\327_=\000P\031<\'\345\211\275\312\301\237\275\017\314\355\273\357\021\036<E\213\017=<\312\215\275\230\013\215<\177\214\343=\371M(=\3062\247\274\342\200\313\275\304X\003\275\277\2172=\272\344\354\274j\370\206=\263-\013=\253\246*<\0249\222<M5\036=;Vj\274\002\330\344\274]\321N=\212\277)<=zG=\254\370\035\273~\246\274\274\330\262|<\234\230\207\274\036\276\016<\233b\001<\224\331\207=\240+\'=]\177&=L\245m=\307`\247\274\005\225H<7\032\0148 \375\234\274\256X\305\274)_\204\274p\201P=P\270\347<\306\234x=57:=\330z\274\274\322a.=\262{/\275\34596=\246\034\237\275;o\241\274\200\305\033=\354\025M=\350\034\244\273\200W\321;?\262\035=\035B\246=\010\0176<\251\020\"=ZC\311\274/\343\203<\264\307\260\274 \276\350<\244{4:\003~\006=\354<\267<\252\031==\216\251\014=>*I\275\264\361\272\274\316\301U=c\033z\274|\027\306<\357/\006\275C\347E\274\0067\361<\020\n\227=%\000\244\273s\210\322<\010\361\003=lv~\275\207>?<\366\036\361<J\262\226\275\245r\326\274qy\200\273\216\374\246=\254\022b=N\323\010\275\024U\017\275Ef\325\274s\001\217\27541\247<\361\0061\274\n[@=\250gb<\223q\366<\364\033\367\274\325\256g<\215\203Q=\371\356\205<\265\007\362<\357\347|=\335\3640=\027h&=\3217\003<\030\333\257<\273\2610;k\262C=\036\351z={\320\247\273\r,\260\273\307$\017=\347\025{\272U\363\031\275c;\213<\201y\263;\036\372\241=\367\252R<u\033\276<\231\370\200\272\365\023M\273\263\217?:]SC=|\265\342\273\366\341Q\275ch\267\275\004\322`\275\200\304\226\275\303\257\204\274\3754\361\2743\201\013\275&\253\324\273L\240\217\274\362q\035<\031pW\275J\224\254<\311\306\255=pC\240<\377\236\347<JG\333;\024\342\367;\254\016\226=\207\227#\275;X/\275\3724\223\271\234^F\273I\371\013\275\224\033\024<V<\275<C\205\027<p\303\001\274\256M\2149y1\245\275w\361\364\273\264*J\275\237 \301<d+3<6=\004=\343\200,>G\265\222=\252\242;\275dV-\274e\225\013\275\\B\333;\213\260\253=\007\"\252\274Y@\215\274gl\036\275\353\n\\\273\322%\212=\222\024\020\276\025\270\310<`G[\275<\200\326;\317\304\007\275\237\305\236<{E\323;pb\276\274\006U\241\274n\220\326\273\205\262@\274\211 =\275\301\256\002;\216*\352\2752^\205\275\010\373\361\274r\027\317<\020X\305\273\206\201\225=\324H\353\274=\265\365\274\303^\013=\313R\311\274\251\352e\275\000O\247<\313\315G\275X[\267\274OG<\275p|\352;\211\367\021=\336\264\302\274\315\245\237\271\232\034;=\370\372)\275C\350\237\274\240\243\t\275\356T\244<Dq:=a\n\345<\223\014\203=\317\357+=\252S%\275f@g\274h\377\236<\222\030\242=\345\r\361<\250\353W\275F\001:\275e\n\271;\314\331\227=\005\r\030=\014\357\300\274\223cO\275\366\007\016=\300\206\013\275\375Q;=>*)=\265\360\313\275\037vU;R\253\210\275n\327\330<{j\357<\365u\232\274\241\376\222\273\027\2654\274\323P_\275\035I\010\275]9O=Z *\275y\307\202=\350d\272\275\026bs<\272\305:\274\331\210}=\033\351\027\275\336\236F=\257+\007<R\321\267<TL?\271\237\354\004=\025\006k<\367-\210=\213_\206=\202\340\354\274b\260\004=(!v\274K\334\305\274\026N\201=\020\376C\274\213\367;<\351z\316<wJ\213=\371\237~;^x\321\272\033/\003\275\235\325\300<\322\312V=u\224o=\32448<5\367\227\275\240\345U\275\276dM\275\275a\367<A\031\344\275\211\307\324\274\261O\251<A\276\242<\020\275\370<L\372\254\274\375\343\326=\312CJ=NQ\336:\014\373\262=\364\214\007=!\374\"=\321\314 =%\371\371\272\230O]=\340\025\322\274\254\260\252;\005t\217=\034br=[gd\275\260\302!=-^\203=P\357\r\274\233\351R=\201r\030=\013\374\255<>\007\371<\332\351\362\273\032\017F=\271\331\210=\222*\t\275\032\322\032=4\036r=bL\246<y\030\264\274\271J\331\275AK\315\274qF\257;\321\257H\275\330eY\2757\220#\274]\375\245<\207C\232<Z\010\3479=\236\240=\257\343\r<\010\253\017;t\337G\273\311\033\304\274SH9=Cc\320\273\027!\216\273\210\230\265;]\236C\275\315;\221=\201ht;r\252 \275=Lg=A/\253=\266 \222\274_\362\251<\321\316\220\273\320\363\253\272N\311\243<&\273Z=\r0\216:\000h\311\272\226RV\274\023\215\204\274\253\305\230<M\303\321=D\235\353<[\354\020\274\330K\363<\247\315\323<\333\013b\275\266\350\256<\235\370L\275\010\034\346<\034\234@=k#7\275o\366 \273\264\210\233<a\000!\275\350\244l\275\242\024u<x\033\201\274\322b1=\247\362==x&\n=+\307\206\275\021u\331\271\374\301\350<\006\310\230\274&ts\274m\376$;\356\340\333\274\001\014K\275\\\032R=\213\343\'\274\220\"\211=`\221}\273o\261\254\274\364E\243\274\"\304\216=\'\365\207<\316\250\320<\322\005\351<\216\023\203=\242\246\016=\364\025\332=\343L\222<n_\273\274\202i\226<uH\021=0\354I\274+L2<\254\330\017\275\340\352,=O\031B\273\357\2105==\377\223\274\331BN<OoJ=\334\241\225\275j\277\240=\t\314\003=oM\352<\276\362\035=\362\177J<\247\202\314=Zf\225\275\251$\240\274Q\030\234=\2272\224:\257@\033<e}\244=\031&>=\306\202Y=\031C\201=\306]2<\353\337\273\273\371\010G\275\357\353U\274\320[&\275\023\275&\275\035\376\315\272>\303#\274\317t\006=o\r\022;\336\275K<\275\232l\274\256q3=\212z\301=]\313\340<,\370\251\275\333\306A;T\n\265<\030{\002\275\314<\343\274S\335\270<\364-\340\275\r\0320=\351\000\201\274\272\277^\275\336\343G\275\333g4<W.\377\275\000\337\017=\366\036\261\274\370\313]<\272\315\354\274\321\352\262\275T\355E=\257\200\023\276o.0\273J\342$<\022i\034\274\330\226\343\273\221\260B\275?\302\367\272\353]\230=\227\023O\275\376j\026=Y\342|<\314\243\252=\342\t\335\274\277=\364;S\333Z\275\000\342\325\274\310^\'<\342_y\275=WD=\0071+=D\224\206<!r\265\275VZ\370<\026{\220\275\037\265)\274!\217\006<\243/i;3-\361<\333\330$<\220\304J;\024={<]\207D=Es\017\275\017\257\004=\005\325,==\346\266\271I%@<\330X\275\274\2768}\273\205\245q=\004\260\230\275\371Y`<l\271\274=c\353/=\017E\372:\220\360=\274/K\362=e2e<-\0275=\330\351p\274\211\006\213\275\354\030 \275\217\255R\273e\376\220\273wC\312\274\241\367\337\274}\033C\275\322\006-\273\345p\255:\370o ;@\362L\274\215\355\330\274C\316\241\274\'\305\215=\375vd<}\321\017<xJ\213\273\366\206\206\274\251C\021\275\332\357\223=k\035L\275\250\"k<\314\341\272<\337\211L\274\241\021q=\t\361\203\275K%\221\273\2617\017<c0\213\275\201c\236\275\207\331\203<q\303\204\275\202\350[=\356|\273;,\030\033=\240\355\004\275:&\212\272rl\250\275\027\225\347<\272\023i=a\237\002=\255\235\273\274\206;\205\2748Q\340<\241\234\277\273\241Q\030=\206#\225\275\251\356\'\275\010\237,\273\201\200\326\274\262\204\013=\2722\261\275\025\010\374;rl\343\274Yme\275\375I\356\274\325\250&=S#\177=\221\"\202=\223a\265\274\244#\363:\275\032\221=\314\204\266<\316\002w=\343Q\270<\355^\n=\302\n\206;\273.\306<f\027\237=\242\270\037=-\354\333<\302+\327\272h3\366;0\024\026\2740\275\301\274\024\214K\275\341\303I=,\247f;\350N\210=Q\3233\27594q\274\243\315\005=\223\350\024=\271\t\337<`\313\365\274\215\375\242\275\244j\275<\233%^\274\233fG\274\276\333C=\241\225]\275\342\365\'\274,\246{=&\232\276\273\242$\235=\357\371\025\275\004p\325=O\313\315<\251\331\026\275MC\201\274\013\256b=9\364\037=\003\246\265\274\212\260\222=n.\030<@Ll\275\341\030\326=\3027f<EUP=\356\016\366\275\314\344\305\275e\020\277<x2Z=\251f\337;\324\242\247\274#`\364<\034\372\201\274\363\374\240\275]\2037\271\215\303\351\274}\\\224\275J\005\302\274\344\024\"=\364\3648=\361\316\013=\331\216\022\274F\000\222\273Z\222/=\345\014\215=3\272\274<\"\037j;;\300>\275\214O\303<\212\024\242<\256\346 =\023\231\255<J\326\260\275\006lR<\203\004\311=\271V\210\275\303@f<\221>\331\274;\021\'<?\343\263=$W\233\274\275I@\275\372\\&\275\244\270\230=z\030\217\274\220\014\265\274\253\330\335<U\262\003\275Q\373\322<\022\3440\275P\376\272\274E\210f\275N\246\302<\230@\037\275\204i\325<\2350\212<]\374\200:\321f9<\250$\247\275\327\365\200=V\330\226=\317k~\274\346\352\327\274\0360D\273J\372\2639\361z-\275.\301V=]\254\213\275\332\261\250;\272\202\341<D1 <\220}\251\275T\2645\274\346d|\275\236\027T\273\326\324\244\275\266~\201\275\324\252\263=\305\350\261\275\317(\343\273\370M\305\274Q\233\267;\367\240\r\275\242\365\000\275<*\"\275\205\205\302<\271\241\n\273a\302<=\210\025\231\273\"\345\361=\2133\241\273\314\005k=\r\256f<\236\232\002=\014\245\200=\274\263@\275\264\322\235\272\337\025\335<\033\273 <\331L\216\275H\343\252<+&\313\274\005\224\347\274\216C\355<o\216\006=\306\367\374\274\236\036\325\274\235\215\221<\t\235J<=\244\235\274\027&4\275\313(|<\316\360\272=\372\217\000=\022\234\216=\324|\002=R\210F\2753i\230\275U\034\301<\275\337i=\375\357Z=\204V\274=\"-N=\023\342\305\274\243\232\361<_\311f<j\342\320\274\210\363\014=\337\256\247<\2122\263\273yC\233<\262|C\275\020\033\277\273\271j\237\274\340\230\201\275\236+\201<H\001\212\274\024\324\303<\'\037\026\274\304\247W\275\037\230\033\275x[\023=\334\335$\275\306\212$\275TF\232=\3124u\271\001\363h\275B\220\353<m\\\002;\276U!<Z$\227\274\022R\354<e\252\242=\214\210k\273\3537t\275\333\267b<\004(\\\275\002\034Q\274\372\'\267;^\366\210=\002\352~=s\335\004=A\2107\273\323\tN=\313y\303<\342O\200\274\323y\227\272\332&\277=\257\322p\274$+\316<\235t\232\274\274\216Y<\027\006<=q!\\=R`\323\274\306\\\334\274\0074a\2759g\262\273.\207\2029\210t\007\274=\025\010;\336\310\253\275\276z\214=\035\365\303\274\013=0=O\022U==[\365\274\242\036\237=\300\2756\2756\357]9\373\0359=\361p\311\274\027/\211\275mi\326\274\352\370I=\342)\200\275*6\215;\r\330\010\275\247\221q\275:\305.\274~\223\267;\332~\331\273yn\372\274GT\035=P\346\372\272\032b\327\274\336Y^\274\304\275\215<t[\343<\344\003)\274\370\247\276<a\002c<\357\300\226\273,U:=\3731\205=\364\220\216\274y\240\301\274\326\362\343\274\343\027\306\274\252\036\330\273y\210\316<\3069R\274Z\373\223\275R\200\331<\225\330\026\275\0103\243<\244+>=\334\335\323=\350]\006\274\031i\314\275\351\032F\275B\232\003\275:|\341<\315\005F:\252{\376<\3429\366\2740c\214\274\221\241\265<a\263,=\200,J\275U\303\202\275\325\344\367=\202G\222\275\022K\201\275\311\264\221\275:\361\240<\331\375\267\274\337\231\002\275E\032\221=\251j\246<\001\231\256\273\353\234\203\274\322\003E\2742\204\025\275\211\234\254<\331S4\275\n\014\235<\037\217\203:\342\263\273\273\322$\003\275C\236V\275jb5\274*q\261\275 \301*=\215\2626\275\201\334\277<\005\211\213=\320\335\222=\\\261\003\275\266\0105\275}\025\200\275k\266\005=\210\206\371<)\333\000\2741\323\270<6\022\t\273\217\324\230\275\253\005\212\275\371\027\247\275\334\255T\275b\251\t=;>\211\275?+\004\273\225=\347\274L\216\356\274\261\371 \275/\350\310<}mV\275\035\256\215\274\035\272)\275cp\005\273f\203\372<D\002\323\274\2545\"\275O\"\267<`\220\006;\333e\036\275T\377\024=hNQ\275\010\241\317;(\302\250<\210(\370\274\000\317\003=\253\207\003=N\341%\275\360\311\373<lm\217<\004\177?;\363W\033</\255\213\275f\244\213=\313\373}\275\036\207\262\275\220\017\270<L4W<\232U\032= \263\030\275\023\245\266<\023<\262<7\347\312\274o\2259\2738\002u\275\225\273\216=\010\312e<\005f\232;\215\223E\275\\\344)=\367\236\034\275\036W\253\274\270i\211;\300U\220\274~S/=\266W\266<X^/\275\22327\275\027\210\347=\324\364\313<\032\2652=\021 \204\275\360\264\024\274V?\201\275\310\347\266\2742\346Q\273z\364\347;>5K\275V\225\276<\331\334\374<#\030\377;wA\240;L\032 =\235P\035=\024d\\;\257\035\215\275\025\276\'\275\203\036\001=]|\264<b|\372;\310\233\353;3\303\024\275\251\251z=\001FQ\275,#\243\273\343\345\002<?Y\275:\375\356\016;=$\224=^#\225<\017\260t\274Y\030\311\274\363\006\370\2740\2501=\315\363\321\274\366\006\235=N4\031\275aRy<\267a\267\273\017\016\351<\010\210\361\273o\361\327<L;\031=\223\243\213\274\210\014\310<\307*\016\275\304\225{<S\204\302\274\0232\305<\212\307\235\275\323\357\030\274QHl\275:\007\017=\324=>=K\234D=8%\025\275\337\002\267\275\205\335:\275\346\3132\274A\320\247<\010$\313;\375F\257\274\3524\346\274\366:\242\275\017\247w<N\234\300\274\251\227\237\273\033]\002<`M\323<\330\023\246<\347@k\275Z\324:\274pi\027\275\376\225\n;\3561\027=\3554\217;\262\260\346<==v;\206\222A=\200\023\263\275i^\213=\214\314Y\267\223H\021=\276\271O=\347\t+\274tb\261=.)\225=A\210*\273\2525w=DW\375<X\223\273\273\253\307\236=t\231\253<f\316\374\274\353\364\264;|\2777=\023\033\213<F\301\302\274a\311!\274\203\220\n>\347U\341\274\334d\013\274\207\337\247=S\234\024=-m\004=rOa\275\374\262\233\275\333\033\031\2751\000\353\275p\256d\273\277\305n=D\366\341<F\200Q\274)\014\025\275\344\244!\275\312\246a=\252\022\304\272\\\216@=\325\035K\275n\t\277<`\276R=\234\340\020\275\352K\224<c\346\005=\324\240F\275\377Z\252=,+\246<\306dP\273\036\351\3369\027\327\242<\261\272S=\334Iw=\370V\330\2748\224s\275\332\372\204\275\211\232>\275\023\220C\273\177\032\256\274\257\267\332\275\251\221\257<J\305\364\273\303\335\234\275C(\326<U&\230=\315]t\274R\364\021:\004\376(\272\3701l\275hG\2059\257\255\023\275\325\t\340;\031Cq\275\325\340\272<1\2470;WC\226=\022c \275\205\267\331=\207<\035<\"\000w=\030k\270\274\260\247\200;z\352\000=c\246 =\3406\227=\321<S=\363\r?=\301\374Y\271!j\216\275D\255R\274\210\307\261<9\275\377\274\225C\013<n\026\210<\244J\233\274Dj\034=\027\255n=\013\354\221\274%\3063\273\024\344\001\274\275\304\270<\370\234\";e\204\302<\007\366\323\274\345\310\245\274\004*Y\275\236\222\t\275\347\371\310<b\265\247\275#\'\001=\267\313\023=#&\036\273-\205\021<\247$N<;\306\212\275u\026p;om\'=\2455\226<e\212`<^B\204\274\213\210\027\2758\030\200\275-\356(\275\312uD=\365\034\375;\037\177\003\273\205p\"\274><\243<\275\006\276\273k\035\031\274\317\3606=7\320\022=\002\000\004\275\267\201\325\275\220X\362\274\036\350\214=g\216\020=R\250\377\275t\323\325=\r\270\310\274\250\n\274;\035\354\324\274\323c\357\275\223\242\356<\254\337\270\273\301\371\346\275\270\210\255\274\024[\2069,\tA;$\347\250\274\355\037A<2\3447<\016\036\221\275\266)#=\016\247\223\274\241\367\r\275\305\342\033=n\3530=\337\203\215;S6\222\274\031\222\177\274:\251C<\241\361\250\2742\303U\274\221\356\234\274\3323\200=\300~\230\275\253\301\361;\3310\247\274\273\211\032\275\0278\374<\020!\361\274\016\214$<\305\021G=\344e =\270w/=\247V\204=\244\336\260<\213\354\242=\010]\277\272\207j\202\275\001F\307<\212h\330\272T{\017\275\263:E\275\242\216\212\274\306\230\362\274\331\213\356<\211\021)\274)\360@<\271\233l\275\323\025_=MF\234<m\302\227=\200\364\210=\205\344\017<!\273\372<\202\252\005\275\200q}\275\353\304|;\214\3531\275l\306\311\274\205\205\214=\215$M<\255\277\340<\242\226\270=Hv\t\275\200B\231\275v\215\025<q\312\306\275\356\323\305:n\242A==\2451=\274\231\032=\341\022h=P\ty=K[\376\274j\240\203=x\250+\275\200\326\277=\001\"(=\334Q9=\327\201\223=9!\220\273\250\320U\2757\305s=\301X\334<\344>\213=\375`\353=9\232\026\274\274d\246\274\367\364z\275W\322\221=3\213\250<\222\304\270\275\3068\010>\374\207\002\272v\375\211\273\353\004\201\275dGm=\303\256\243=IO{\275Q\320 <z\273\316;\3551B=t\243\270=\250\321L=\303\026\221=\356\266\306<\336\342\257<\324\350T\275\216\206\246<sr\245<\242Q\033=\211o\250\275\347$\232\275C\240+=\020{ <0\355\230\275e\252\r>\022m \275\243%\255<\352\305\214<\256\320n=\323\306\365<\261J\013=@\002p\274c\377\024\275\245(\321\273{:\325\272!\274\307;,#\365\273\230V\207<\277\357\276\274G\237\226=\211\266\355<*\347\231:}e\241<,\351\274=\337:\274<\231\336<\274\213/1=\273\267{=\344\336\354<\344\250\242\2740\230\024\274\306\341\212\274\000= =\273\334\363\274$\355\031=\2128\031;\372\326\204\275\253\t\002=\033\210\270\274X\035a\275\366^\224<\032P\217;\202\201A<\236\230/=\375\017\262\274\3745n=\244\323;=}\255\205=\270\246\021\274 \326\352\274r\220D<\330\312\017=[\351\206\274\200\312\326\274\257\232\020=qm^\275pX\376<\020K\274\274\036\270\007\275\311\344\220\274\034Y\352<\313\362\230=\331\202\234\273#\376d\275\"\277\023\275\221\234\361<\210\271[\272\317>D=\263M\224=\377M\355<\316\035\010=c\243\300\274\224x\360\274\036U1\275)\256-=\322\2405\274\337\374b\274\205\371\017=\304\352\211<\022\021F\274\033S\337\274\276\353\032\275[\'\331<\001\217\013\273\312\317\304<\377\344\223\273\302\233E\275\221\262\254<\325]\215:a\272R=\234\207\204\275_\277\037\273\336\252\355<\352\231}\2753\345\226\275\001\"\247\275\233\032{<\017=1=\"\267\n\274-\351$\274\0235\343\274\366\340\025=\352/e\275 \224\256\274xU\251<\331Bn<\325f\2669\002F\016\273\026Qb=\231\207q=\305\205\305\275\342\2052=\'h\361<l[V=\265\013\260\273G\215\200\274\"\342Q\275^\321-=\336\314\223=xa\322\274\242V\003=\335JE\275\217\375#<\351\224\276\274t\2072\275\210\251\215\275l\234\203=\333\344==\253]8=w\200\211\275\277\205\347\273\265\366\376\274\317\256[\275\361\032T\274#DV=\233\351\004<\255y\303\274\330r2=FR\217=(mq\273y \234\275\313\032\'\275\347I\265\274\'\257P<\230\350O\274N\264.\273}\014\351\2735Z\266=\345*\253\275lx^=\230\345\010\274>\353\207\273\261wu\275\260\204\006\275\273\2711=\213kP\275f\333|\274\223\236\355\274\346u\215\273o\305V\273P\001\245\273\317\364\244<\324`\355\273\200h|\275\356\204\251\274\274(H\274\377_O\275\346\2465\274ZIj=?\246\017\275`\341\325<6\275\272=c\254\022\2740h\021\275\232\362:\273\324\330b\274\354\244`=\234\301~\275Dwy\275S5\376;\340=\240\275\276\265\203\275}\252\205\274\230\257$=\017\004\277\271\364\016\204\275\3715\036\275\nt\016\275\246\241B=\374\323\n\275\311w&\275\0243^=\004\334\246<w\251S\27567\202\275\263\345_\274\221\217\211<)\347\216;\212\214\032;\366.\217\274:\267\207=l\306\202<\"\231_=y\035\037\275\304(\032<iG\016=p\265\212\275\271_\302;\302\251\302\273\000T<<m\221M\275*\026\307<\335B4\2743\316F=Qj\342=\007\213x<I\005\214=+N\352:3+S\273\236,\036;\030D\005\275\r\213p=-4\245\275Y\235\211=P$_=\324M\230<\356\000\000<h\321\361<\226\226.=\225T\220\275.\232^=\003\242\211\273\322\230H\274\034h\217\273\227\323l<o\206n<\244)\000\275\255n\305\27566\331<\373\2026\275\001\177\027\274zK\220\274;\243\263<h\247N:\374KF=\226y}\274M\234#<\257\347\250<r{F=\311\360\030=\216\240\373<Q\0059\275\305\221\307;\032w\346\274\342\303\"=\271\242\023\275p6;<\245x\223\275`r\002<\247&-<\027\002H\272\000\311U;\024@\006<`\255\003>\0170\267\274n\177\250=Z]q\274\275\266\027=\n\367z;\340l\265\274I\307\236;\207o\312<N\017\270\274^w\210\274k\200\323\273\010\236r=\366\370.=\220y\365\275\232\344\032\275\305%\201\275F\365:\275\266\267\240\275m\013\242;\371Q\217<\314\2031<\351\212\256\274\302\177K\273\010\027\246\274\024\266k=\021G\226\272o$|\274w,l\275F\340+=\311/\250<^\r\024=T\267\260<\266\025\346:\214\\\375<d%X\275\320\262\215\274\345<\305<^o\212=\014\271(\275\020\235J= \014H\275V\221\375\274K\2759=\247F\"<\253*\246<\323#\360\274\313K\233\274T\317\005<:\211N\274tG2=\376M\014<\341\221\212\275\0015\307=\377\034\177\273\251w\t\274\001J\212=\300\342r\275\265\307\216\275\273\031\206\274D\322-=*\007\245=C\311\233\275\210XA<\206O\373\274\334\261\376<\0354\203\275\331\353\275\275\325x\271\274\222O\210=\324{N<\234\203\026\275\310V+:\212\222\r<\221km\275\344\266\003\275-\243\033\275\230\345\251\273\035\257\304\274\"\375\274\274?+/\275O\257\346\273\337\010\263<\265\375\205=\217\"\336<\001\247>=\347\247\255<z\266\241<\323\257\r\27455\000\275\264\370\241;\020\260\222=\277Tz=\n\363+=L\033\365<\031\033\316=g\313R=\202\354y\272\356\316\204<\004\231|\275i_\006=\257\302\362=\275Y\027\275.\323\\<\237,\277;M\367/\275\263\314\350\274\321\002\2576b\363;=\260\204\250:0\016\315\274\273\341\372<\373\010\025=\352_\002=\366G\246\274I\332\360\274\350\\\251=\366\360\260\275\263g@=\331\240\300\275\347\003\333\274\351\316\223<\341\201.\275\2665\361\271R\302\201\2739}\235=\013O\t\276\213?\247\275\027\211\213\275\375\375l<\223\307\021<\317\203\004\273\030K\031\275\2520$=g\334\217=\361\301-;\255{_;\035I6\275\030\307\261\275\014\317\237<c\036(=\255\267 \275\313\210e<NR\220=\310\265\031\275x<\017=\211\207\232;\013\'D\273\027\323+\275\3452\267<\3432\241=S\241!=j\3402\275\350\336\334\274\347\272p=4~\016>-l\230=!\027\205\274\230\036\\<^w\265\273\231\037\177\275\036c\362;\230\210\003\272\255La\274\350(H\275\236\356\221=\266\023,\275\336\276\205\2737\375\034\273\335\271\307<\207\222\'=\350\351Z<aNg=%\234)\275\202\355\354\275\037\177\327\274V\375\222<\r,\204<\302dW\275\205\2558<!\0053\273\355\372N;\223\201\336\274\2239\373\274\314\034\r\275\324\006\001<\244\354\"\276\311\237S=\203\010\263<\262)\"=a%f\275\305\2242={5\342\274\030+\014\276\224\2133\273\247\253,\275\262\244\204\275\233W\234=\324u\261<\355\320*\275\017\305\222\274\007\026\217=}I\355\274:\020\316;\371\362>;\361\254\232\275\325\207\321\274\362\016\356=\005\346\202\274\ny\237;\337\3116\275\263;d\275V\376K=\367Z\034=\327\332\300\275\031\2371=aq\265<\275]\270\274\276\211\364<\311B\226\275\216#\334\2745\36309\303\345\301=<)\341\274\266\336\021\275\355\331\016\271)u>\275$\035\323\274\331N\314;\r\001\016\275\301\374\354<\026\3021;\200\372\026\275\227i\332\274\237DJ<\033s\024\274\240vB=Q\216\361<\225\2177\275\230\376\260\274,\203\005\274\177{\004\275\266\313\354\274\t\363\004=\342\2404=\3758\021\275\374\375!\274r^\010\275 a\377<\020\032\006\275Ri\240<\336\030\276=\002\355\267<W\032\006={\345\347\271\\\tv=\013G\243\274o@\357<l\205q<\375&z\275\313q\362\273\220\355\257\274\206xm=\022\266\030=2 \277<\345\211j\275\'*1=.\217\254\275$\252J\275\010\374\233<\221*\r>[\n\322\273\207vx\272\016\230j\274\030\221\343<\262X\267\274g\234-<T\262b=_E\202=\001\362\240\274\250\202\241\275\023b\005\274\352<\353<x\346\244;\272\365h=\234^\214<\031v\031=\357\331y\275\310\005\222=\035\375\314<+\350\324;\311U\320\274\0318\013\275cZ\206=l\357\320\274\223\240\036\274\212\353{=\365\323D=\347&`=}\3750=\260\267\250\274XN\265\274b;\300\274\375\023\216<\255x\303\274\341\"\342\274\222\305\360;\366\277\270<\261L\263\274\251\350l=\303WX=\023\363\t<h\030\372\275\2750\323<\026\235\000\275[C\302;\354\224f<\216\307(\275\321\273A\274:\313;=V\277\242\273\222j\232\275\025\205\021<\226\377\221\272\251{\326\274D:\177\275\234\276\243;\030 <=\036\200\225\275\365f\355;\022\267\210<\212)G\275\330\341\007\274g\377\242<\017n\001\275\221\345\266<\312\201$\274\314\235\"\274\365}\366<\233\371\372=O\2343\275Cl\226;9dK\275\275\307_<\376\357\307\273\370A\351\273\314\354#<<\357\004\275t\016\364\274\357O\215<64\327\274U\312#\275F\312)\272=\006k=\303n\356\274\032\3266\274\270\000\275\274\335\246\301<\254H\206\275\225\200(\273\247\335\231\275\036\253\316\274\267\353\215=\365\266\227;~m\014<\325\326A\275E7\217=\324G\315;\276_\227\274\302\000\233=\337\030\277<\222\257;=\320lE\275z\013\201=\203\266\002=]L\331;\330\\E\275D8\336\274\252\271\224<6*)\275r\245\t\275\333\354\021\275\370\tR<\236\215X;v\235\"\275]\021\254=\027\177\364<\230*M=\220NQ:\000\236\n<q@\234\273~\2501\275\2077\330\273\206\353\254=P0\327:ueu\275&\257\004\275g2\203=\210\266c=\327\344\246<}G\010<\227K\'\275I\247\372\273\345\356\006\270\014\2356\275\006\222\327\275\201_\006:\313U\326<f\323\270\273>\350\316\273\226\353\320<\301\215K\275B\210\016=L!\014\275_\220V<\365a\201:\026\345\305<\273\303\351\274\022E\217\275\035(\005\275Zd\226\273e\266\032=>Q,\275\362\257\203;\030\360\251<\341]c\275G\004\264\274hM?=\004xF\273R\237\240<V^\350<^\271\305\274&G\002\273\031\343[\275\301\274!\275\255\207\233\275\352\360*=bU\325=\037OD\273\370\227+\275fX\252<8dw\274\357\232\237<,fU=\372\255\367;3g\341<2u!=\361\373\346<vZ\225\275\232\311\232\273.y\"=\372\030\242;%\377\257=\004\023a<\270\255\022\274\364\244\306\274\202\2313<\031\354v\274\367\305\302\274\002B\221\275;\000\037=#\321\004=\364\340\303<\213\202\r=\200u\354\274\311`\033\274bi(=\254\363\306<\331\304\207<i\217\260=\257\264^=\246z\237\274\2164C=\376v3=\377\030(\274W\210\266=\026I\323\273\034>Q=?\022:<\321\270;\275\033M8=\217\255\204\2749\364k=\333$\262\274p\376\272=d\t\000\275\214\371$<\216I\246=4h\213\275\'\302\r<\\\301\273\274\010]\010\274\316\263\211=\260\263\265\272\351\312\352\274\241\224\033\275AR\211=\335m\373\272T\241\307<Z\347\211<\326\307&\275\344\217\361\273\345\246\200=\225Fi=9\322}=(\260t\275Y\367\005\275\322,\225\274\373\tk\275b\010\211\274\342\002Y\274S\274\t9=\263\231= \213\033\274\016\016\203\27547\307\274\356%\262=\n\302\r\275IH\220\273+\340\030\275\213\267\002<\2269\177\274\334\227$=c\335\025\275\351\274\211\275\254\317\035=\304\3333\274\351\221\020<G\350E\275\235\201\357=\276\2001=2M\221<>\032o=!\202\024\275\264zh<]\207\020=\251a\206\273)sT\274E\334\340=\205F4=\010\212\317\274\025\036\236;\024\362S=\335\032\363\273;~\304=!\016M<\266\220\031<\361\326\001\276XN/>\377\271\036=\252\341T\275y\363\376\274\032Io;\255\t\207=UB\257\275\220\237!=G\302<\275T\247\204\274dG\302\274\217\274C=\324\213)=\334E=\274Z\377);#\217(\275L5\002; b\263\274\253\006>=\336\201\330<\272\343\217<\267\376\317<:\226\341\274\034z\013\274{y\215<WM\\\274\351\034\261<\344\007\320\274yH\004;\334p#\275\245\373\216<\327q\335<\022\322\220=\254\036\323\274\211\232\354\275\266Z+\273\020C\337;\\I\007\275\320\002\340\274F6_=\021]\370<\210\237f<5\203\326<\202\006.=L\037O=\354\265.\274\336\237\022=Q\365\240\275\3410\273=\367\327\255\274%\272\214\273T!v\275\333\313\351\273\365OU=\320\316\211<p\241\016\274\316.\331\274\345\331\223=\270sF<\"`X<\266\233\342\274\255n\022;\224\211`\275\366V\273=\3345\247\272\016\260Q=$,M<>R\003=\224%\"\275\344{\005\275\246\277}\275\363?\271<{\220\260;\376\361\3469\335.\025<dY\023\274`\212G\272\377g\341\274\255Ye\275\027:\346\275l\270\021\275\311\0214=<\204\311\275s8\240\274\320\007\230\274aTM<[k\273<D\212\013\275\251c\206\274IfW=\274h[\275\330\323\205=\242\321\265=B&L\275|>\n\274\257\203+=I9\226\274&\0313\275[c\031=@i1<7\323\324<\205\253B\274\371y\266<\310\216\243\274[\362.<J\317\370\273\363\377\t\275\020#\341\274 \243\251<\032\305\207=\221\371~=\263\243\366<\242\233\030\275\307\241h;\253\253#\275\357\317\257\275\260tJ<R\217\223\275\206\013m=\314F\004\275Cl\204=\017\304^\275\273;\335\275\267\235\273<\034\002\232=\263/\347<\345\211\240<\'!A\274o\264\"\273\342r\303<\244\311\211\275\326aT=1i\036=\332}\230<\2561\362<a\033\t=\336\331\270<=\251\017\274\265P\257\275sI\355<2d\364\275\233J\303\274&\303`<\217\374\035\272\273\177\230\273,\037\241<<\343\371<\0356==\201\3000\275\355\355\367\272n\3615\2720\246Y\273p{\005>\315\257V\275\232\025\344\273\352w\200\275\204\370\036<F\022n=o\251\025\275\246%\2309\200\225F=v\335\242<x\324\364<\017&\223\274\377v\310<\211\307\017=\021\037\200=\325cA\274\0314v\274\245\256p\274\351\006O<\033K\220\275\326\000\232\275\203\311\253<}\261\340<\236v2\275}\317/\274\002\324\007\274\210\000\270=\327\323\233\274\007\231\036=\247\026\"\275\016\245};\264\322b\275/\300\304<\211\033\331\275v\310\262\275\262\235\277\274>J\204<T\344\037=\334\226$\273\007\364\257<\315\272\221\272z\375\277<\000\234\020=\027hX=</0\274=0c\274&\305\251\273\027\375}=\250q\203<\226\220\224=%\t\320<\222\006\241\275C\250\300<\355\221\030=\026\262\355\275n\214\336\273\354\t\221;\n\221\222\274V\370\'\274\264o>\274\256\362\223<\025\215\316<\236\313\\<\310Ir<\324\326\305<\004g,<\311m\305;\233=\202<\201d\032\275\267l\352<\201*\005\275q\262\251\272\345\367\001=\002\224\304;\001\253S\2752\360\205\275\230>$=f]\230\274/>\367\274\355\306\3538\253\272<=\227*m\275kS\302\275\363\377R\273\244\3138\273A1\004=\262L\020\275\213\270P<\362#\300\274\351)?\275\020\226\224=lG\226=\3458c\275\232\334\340\274\010\354\332\272\202\031\3178\026\201\324<\313\342n=V\360\333<H\3427\275\034m\316\273\365\376l;\367\232\264\274\237\327\233:\014\243\257<\343S\251\275\363\374\017\275BgA\274\325\224a=\216\240\001<~\002\327<\037H\027\275e0\204=\305[\252=\250\326]=s@\032\275\034\277!\275{T\365\272g\217^=\'\'R\274\250\225\005=R\004Q\275\037\302/;s\\\326<\230\200\256<P\3278\275\300\363v9\310\026\215<\003\210|<&c\310<\020\'c\275\340\220\343\274\213\346\366\2744\013\006\275\357\203\201:\344\345\017\275\304|\244\275\374\261\032<\206:\312\275\014\325\353<\214\313\231\275\344\034\205\275\217`\204<u\303Y\275\331\367\201<*gC\274\312\021\201\274\262\034\246;@S$\2739n\r=\244\323\003\275\0253*;e\273v=x\3513<\311\004\017\275DM\252<\242\221\326\274\340f\260=\365\212\020\275\005r\342\274R<\326<\333\275G\275\227T\231\274\253\253\325<\275F\315<Nju=\220}o\275r\3102\273\257d\216<\027\376\266\275\367lQ\275\321;\211=\247\275,;C\353\362<g\315u<\266\271\247<V\351E\275\364p\201\275\031]y=B\216\214\274q\3723=\245\222[=j\327I;\260\0210=\232\304\001=FR\347\275%\256\256;\336\340.=o!\024:\333\235\230=\330)\234\274y\263t\274i\311\001\275$\222!=\311X\014\275\370o\265\274\034\"\235\274\375G-=\247:\305<uA#=\271\212\200;xU/<\266\302*=\000\367!\275\305;\021=\037\003I\273\376\256\365\2737d\336\273\302\367\315<i\304\323=;\\\370\273Vy\313<\r\3658<\376Q\003\275\220\262\313\275pZ\020\275\"\262\213\274\265\026\035=1\243\241<\250\376\371\274\030\200\311\274\230=\213\275\277\373\025\275}\027b\275,~\355\275\302r\301\275\213a\234\272U\220d\275\313\274*\275W\243\327\272$\262\204=/\247\r\274\243I(\275\220\251B\274\237\204\217<\235Q\376\2740\323\377<\023\377G<\235D\r=\235\2709\273\337\374&=,[\270;\310N\215\275\355\235V\275\223\2508=0@g\273\200\225\206\273#\204\214;\376\325\254\275\273\274|<Y\251\233\273h\237\002\273\332B\216;\300\366\244=\257^\r\275\024\010\277\274\027s\205=$iS<\326gw\274~\322\333<H\340w<)kP\274\271\1779\274V\025\000\275\014#*=w\231\312;\327\236\005<\377J1>t\223X=\241\375[\273&\203-=\224O\005\274{\252\253<\321\361w\274w\200\205=%\026\321<*j\r<\030\260\233\274\254t\026=\307\265\313\2741v\255<HcL<.2\354\275\316O\005\275Z\316D=!^2<>\207\362<\317\335\003\274\001\357\364<\215\375\220\275\231\250\340<\314\352\'=\350](=\263\255\023\274\016\233\215\274\320NV=z\006S=\302d\257<\206p\000\274w\rP\275\013.H\275\233\210\317\274=\214O=ytP=\275\026\014\274\275v\200=\374\300\030\274\224x\351\27450\000=I\377\030=#\307y= `\035;b\215\332<\355\342\231\272}\205\016=\223B\226\275J7\215=\035\307\273<(\301B\275p\n\023\275\277Gh\275q\241\245<\001\323P=\357\216\017\275Ph\000\275\321\332\226=Z|\267\2744\"\341<\n\247v\273yp\236;\034^\006\275H\347\305;\376r\334\274I\354\253<\233\336\000=\004@J\275K\314 \273L\237e\275/*d\274\004.\017\275\314\306\303<\275\'q=\260m\336\2742\204\300<&T~\275\305\354\001=\225R\004=\326\n8=Y\234a\275\305)\202=\016\211\304=\226\336w<\320\372\265=\314\253b\274\221~\030\275\356Y\323;\301Yq=\372)\252=N\234M\274g\245\013\275\004\343\311<\212\355O\274\302\236,\273 w\331\274\376\311\324\275\000\341\325\275\337\010\036=r\307\361\274x\354\023=B\377\026\275\002\340\236=\257\327\210=f2,=\222\231\277:Y\317`<U\276\022\274S\342\264\273\267E\214<\341\307a\2757$\264=\3468\202\275P\376\201=\023\033\343\275\331b\004=\320^,\275\027\374\260<\225Hg\275U\006y< ,3=\347\211\204\275/1\276\275`\341\023=\327\340F<7\231W<\036J\002\273\236\253\217=2X\321\274GS\350; d\003\274\200\352\267\274\204\336r\274\031(\014=\274\306M\275nlj\274\376\336\356<\270p\020=.\330\"\275F\317\342\274R\304\"\275\316 \007\275\354\2226\275\034}#=\013)\002=\205\211:\274e\252a=\326\374A=\362*\303\275\234\004\007\274H\023\243;\210\241\205\275m\253\260<i7&<\216\317\202\274\212\360\013=\026\n\2769T\310\265\275OR\275\274\331^\241=?\246l=!\303\356<\0260K=Q\276\256<$\2210=:\227\006\276\t)\317<\322\311\014\276T\021m\275B\244D= e\277<\355\243\231\274u\341q;H\214\217<X\\K\273\262h\246\274\206N\210=[\027(\270\247\n\\\273\367\016\366<b\270\r=\247\002\363;\361\317\345<\223^\226\275\370R1\275\203&\203\273\2343D\275\223g\016=1\003\037\274Oz$\273\020PR\274w^\247\273\003~\323\273\235\020\207<~\017\010<\213\274]=\230i\214=l\275O\274oPH\275\310\342;\275\354\221\204\2748\220\205<\371o\004\2759\356\340;\321\244\310<o\372?\274,\267\270\274\'\203\266<|\336[\275\267\021\210\274\347Y\006=\377^*\275\352\377\300\273\036L\353:\3009\205=^\211K\2753\216\261\274?\233x\273\200\321\241\274i\367\023\274(\225$=\236\360\035=d\035\256<#4\031;\324\247@;e\307u=\304\336\002=\236\353Z\274k\311a;A\207\350\273\344(y\275\037\255 \275\335\201\225\274\200M\337\274\260h\346;/c\r\275\341\362\203=T]==\203u\253;\302T\270=\212K\247\274\035\225\005\274\232/n<\004\3004<\242\274\302;\241\317\000\273\300\032*\275\221\013\244=\351\274\232\275\2658\251<%\026\017;\356\020\345\274r\005\252;\0377\314;\226\022\255<\2171\224=\312\326\215=\025\311\000=\2265\267\273CZ<\275\301f\244\275\300\261=\275\346i\354\274K\252\r<\347s4\275\300>5\274\230\303\3519I\316k\275\231\246\006=}\271B<\2300\226\2751\023\233\275S^/\274m,\003<Y\302a\274PQA\275?\023\342=e\323\006\275\376\217\240=BmF=\363\3127\275\214>\254;\354\212\232=4E3\275\006\010z=\355\347\207\275}I4\273\226b\032\275\203\207\375<\212W\024\274l\217\003=\340\031c<\022\031`\275/\344\005\275\371\226\344\273\034\227\210\275\372\240\323=\330\001c\273\004N\026<\016u)\272\202\026_<(r\275\274\341\326\225=o\312\261:\371@\260\274\372\274\223=?\026\313\274\201\206\002<\271?d\275}\205E\274X\236*\275\336\236\024\275\323\332\016=\332\241[=+\225\300<\336\226X=Z\307\263<\230\340\020<\231:6\272\006@\367=\355\337\234\274\002\221\257=\210\336Q=T#M\274$\340W\275\215B]\275\355y<=\017\252\263\273o\364\314=\030\212\251\273\360\245?\27428h\275f\367x\274\022w\341\275!\256\300\274F\201\273\275\010 [=\215\n}=R|\212<\215w!\272\014w\211<\203\312\017=\310\265==K\313\310=\263\247k\2758\312\031\275a\017\360;)\022\213\2741g\\\274\345^\244;\313\227\035\275\035{\021\275Jz\322<\030p4\275t\317\220\272\317\023o=\242\002\240=\n\266\220=\204A\346;J<F=\263\346\340<a{Q\275\250m\274\273T\202\036=9\001\300;\000f\365<$L\346\273\000O]<a\t@=\334\204\312\2748\031E=UT\216=\330\334F=\342P\275;\315h\373<a\323?<\242\212n\274\252\247\026\274 \237\243<\256\000\336\274\252rm<c\031J=\007\242\334\273L\032m;\375\205\364<24\201\2755(;\275X\262\356;\313\316\r\275\021K\206=\216\274\024\274\242\377\207<\343vu\275\324\314;\274_z\301=\374\230\350=\231G\317\273V\271\316\272\241\021\211=\rJ\336\274\257\264\223\274\212\345K<\t[\223<\334\276z;_T4\2756.\263\274-\373\361\272\221\313\362\275\204^\260<d\372D<\321y\313\274\231\372\030\275\325\325\246<\225\224\022<\226\341\350\273\255\242\025=\211K[=b\303\330\274\025\333\261<\362\252\341=FM\200=o\361\027<\260@V\275L9\266\274\375J`\275!\231w\275An;\275b\355\246\275\0069\335\274\310rk\275\332\276\365\273\360\377\022\274\225X4\275\032\225d\270N\366\243=\351\246o\275;\200\014\275VN\232<\206\266\003={\010{\275\351<G\274\262\201(=\261\032x=$\370\244\273\013\352\315\274\277\337`=\24036\274p\224\201\274\374\222\037=\222\201w\275\271\321\261<\366k\034\275!r\r;\205\256\243=k\340\036\275e\306\230\274xA\022\275\226{\224=3\002\372\275\342\\\244\274\264\370\373\274\264aH\275\362\370$\275\3679\204<\325\345\350\274@\302#\274K\203\331<5\365\267\274G\222|;E\"\0169\363\301\214<l\325\204\275z\"K\275\374j\345\2734\224%\274 \302\300\275\331\254\002=\n\343\023<\raZ=\227\317\257\274Qh\014=\\`\031\274[\031~\274\232K\006\275X\r\216\275\016Z\037=)\204\363;\370\276\021<\350fs\273\301M\314\275\037\222\004\275\374\232\326\274A\277\327\274\342\324F\275\230\271\226;\037\017\010=\031\207\217<]\220W=\227#k=\244Uj\274,Y\300<T#(\275\265\340Q=\004c\270=;\306E\275\351\252\203=\242\337-\274\373\200\312<h\265\306<\310\220\024<\316D\341\275e\210\234\275e\217\373\274q\020\352<6T5;\240\030P\275\233\222]\271\3353\327\273%\242/=g\267\304<A\342H\274\251\233\275=\nG\203=\035\ns\275\036\253\201=\302c39*\352\013=zH\336\274N\377#\275_:\002<\263\261\211<\005\344\035>\342\276?\275\326l\273\274\003\357\245=O\335X\275\263O!<\276B\"\274_,B\275|\247\251<\367\024*=\332\220\002:]\003Q<\367\356\316\275\202\201\362\274\310\207?\275\"U5<n\257\r\275\006Wk<\026\363N\275\341G\373\274]\365:\275\007\327\234\274Fx-\271g\236\314<\206\257\346;0\324Z\274\201\3476=\206\370T\275\237\325\234=o\225\006\274/\256C\275Y\010\376;\377h\363<\206\266\206\2742\234\242=4\037C=\261\213\354\274\254\177c\275?\332\235\274\333.\205\275x\335\034=7\341\204\273\365u<=\274\273\027\275c\216\325\274\203\352f\272\240y\302\273\322e\264=\327\275d\275a\216\355\273\234\027k=\373Z =\300\021@84\277\205\274ik\004=Z\331\021=\024\273\242=\300\241\257\274(\3156\275\346\030O=\351\305\223=\030Mw=\241f\010\274\216\373\013\275n\005T\275$\030\256<\361@;<\375\342w\273\371\310\367<@Y\377<z\321\243<\343T9\275]\267\267\274E\231\017:\363\314q\274\316!G=\310\346\223\274\247\014\234\273\007\030\270=\025\236\\<|\003\260\275\"\216h=\242?\352\274~\205?;\336(\341\274\320\203P<\227\311\002=\037\243]=S-\257=\023\205C\273\2164\307\274qE_=r[,<0\361\013;5)\r\275\337\331\205<Vx\314\274*\2726\275p\271f=\021b\013=\007\377\000\274d\240\227\275\034\304*\275\215_\233=\374j\227\274\221S\316\274\000\201?=U\322o\273 \316A\275>\216\260=\322r\326\274(\250\025<\237\266f=\232\323\321\274\220B\236<\020\204\212\274\255[)=\236x!\273s<d;\027k\344\274\001\260n=\354\335\355\273\254^j=\033u\332;\347\300\300<\363|\021=\301\207r<D\213\331\274\333{\013=\001\223\024\273\334\245\215=\346bU\273\340\204\373\274\254O\325=y\2577=h,\370\274_\324\027<\303\373*=I\253\234=\250\365\005=\211B\305<D\002\340<\223\035B;\216\251\212\275\271\001\372\274\215 \242={\215_\274\313\317n=O\232}\275L:0=q2\032\275O\257\001\275\303TQ=[xJ\274V.\230\275\014\311Q\274\003\304\277<\327\373P\274\244\305o\274L\036\257\274\361np=\366uJ\275\336\024\035=\314/\355\274\227T\312\273\3512\211\274\335\242\352:\tzR\275d\324-\275\244i\241\274\336\225\203<\233\251(=\331\034Z=\311\'\311<\310Fd\275h\335)\273\250\344\235=\036\301\214\273o\"B=\361\200\220\274\332X \275\024\311\224=3\025\217\275\315\274\237=\233u&=st\307;\251\271\002<\221\246\232\274\201~]\275z\360\312<\257\323\224\274\235\013\241\275\377\264\014\275\314\203`\275\3532\240</\246>=\305\301\210\275X\223P<\237\327q=H\313;<l\215U\273cS\221\275:\262\233<\330\315I\274\023?\035=\356\\2<\266$\223\274;d\347\274Z\326\316\274|\363\343<\316\216\272=\0259\200:C\213\034<b\224$;\027\350\244\274F\353\024<\320\336\004;\272\010\274\275\244\214w\275\006\023?=\206\017\242\274\354$\214\275{\317\022\275\033\'\227=\360V\023<o\271\304\275\374\237D\275\210\201\334<\013\204\266\273\017\013\005\275\314aJ=Ao>=MP\257\275%\207h\274X\211\021=\273\356<=2\211c=O%\270\273~\370C\273\215\227\261\274v3Y\274m>\243=\010\355\351\273\212\004L\273\325\213\335\275\023r\210\274\244\267\003=\326\017\021=yq\343:s\003\223=\206\006?=8*\336\274.\323\t\275\231\244\345<i\344,=\317\230\240\274\251\314\250;\014\203\304\275a\306\305<8\205}=\265\351\005\274\325\216&=\371\213U\275S\300-\274O\220a\275\246w\255;\372C\317\274\376a\336\274\355\272\203\275} \277\274W\216o<s\362\260=Z\363\221\275,E-<\007I\233\274\346\024_=\335\231\314\272\324\377>\273\266oW\275W}-=\221\231\307<\225\327|=\027\\\n\275\334\014\336\275\000\337\242;\352\3762\275\264h\365\273\341r\"=|\234\033=\005\226\321<R\000\264<\263[\2639{\262\250<\256\264k=2\272\212=\201/A=\273\312\204=5Y\365\274\245\036\227<\201t\037=\226\340\"\275\263\007\303<\264\031\216\274;b\321\275\237\321/<\304\005\233<J\3357=~G\237=\3474\373<\031\010\320;\300\035\213\274wU\341\275S\370;\275o\322+=\331\217\000=Q\321\205=+[\013\274\264\373\004<\235r\317\273)\035\274:\301\210\017\275\365\216\277:\201\366\367\273\247\"\340<\006v\316\274U&\317;o\212\260\273\333\325\277<\327\3732<c\327\300\273-\216\206=~\001r\275\216\036\005=3p\001\275\322\227\201\274\0303\316\273\256\276\340\274\017\353\322<\215\264\004<p\373\017=W8\352\273\3518\264<w\236\224<\220xw\275\215\254\224<\226(\005;\336\333B;\273c\216:\230_ ;Z6\275;\033?\213\275YU\236\272\313\n6\275\354\013\211\275\321\372\242\273\334\312\014;\212\222+<<\027\001=\031\005\036=\341S\203\275\322\210\370<#6\244<+\007,<!ZT\274\016\014\277\274\307\017\224\275\t|2<M_\237\274\317\365\263;\025\255-=\024\350\n=+\314\317\274\212Gx\275-q\010\275?\316%=\302\215\006=\'\3002<:\217E\273\270pv=\033\215G=\325 \234<U\232\270\275b_\306<=\342.=U\276\210=\357\206\257=\037x-\275\217\020r=u\271\220\274\337I\013\275\261zX\274\304_\213\273\213:l=\377\003z=\033\273d=/\216\322=\246,\353=\212\327-<~\324\257<\367\207\001\274&\271\243;D.L=l\224i=\340 \365\274\346b\277=\235\245\\\275\374\320\034\275+\354\226=\311\nZ\275S\206{\275\370w7\275\002\246\266<0\354g==O\024=\366\334\244\273\256\256Y=\014\001\027<\210\225\225<B\351\311\274KF#=\264\nI=+I\'=-\357!=\233\3555\275\263\252J\275|HT\274\360`\242=\316\355\242<\037\352\033\275#\264\037\2746\201V=\340\371:=\375\222\202=\000\313\300\273D\246?=\007>\317=\306\264\342<\220\375\266\275\330\311\271;d\000&=\237\r\211=\271\224E=\3638B\275\355\271i\275\013\030\274\275\303$1\275\315\256\214=u\373E=\267\331`=\371\225\310<HO.\275hq0=3x\270\275\035c\204\274\013+<\2759\217^<w\356$=i\217\262\275\036\241\326\272Y\246\224\274\301S\r=\221]\201;\"\322u\273\351\031\244<kB\364\274\332\274}\275a\r\276<G\263\221\273iM\t\275C\353@\274\235;D=\320tc\274\254\346\260\275\356\031\276<y<\331\274\345\340\306<\301a0\275D\353H<C\252\203\275\316m\243<\312q\255\273\216R\210<\260\347j9\335\027\226<\252\236\203\275\204Q\213=qsP\275\210T ==\034\245<\251\227\231;\252\234=\274<\tX=r\354\025=X\312\007\275\312\300\r=0bc=\212\340-=R\367\325\274\216\2527\275F\000\303\274_\222\320=\217\252\331<\n\261\026=9_w=\002\3715\275\t\300\033\275va\311<\300\201r\275n\364z\273\267\334&=0\246\225\275\017\030\331<M\332\030\274\362\273\265<\327R\031=\344\275\"\275\214\231\304\2759\262\327<he\231;i\360\276\274\002`\351<R^\034\274H\361\037\275:\212Y\274*l\023<\341\016\237\274\357\2508=K\244 =m\204\332;O\237\013<\330\254N=e#\250\275\241\275\216\275\030\317\212\275\313Bx\273b\330\247\275s8\226\274\241F)=\224uN=7\213Z=\345\010\033;\235\004j\274\343\001a=\036\323\360\274zJ\203\275H=d\275[2\020\2759\215\024=\217\2127<:\205\034\275\363\272m<C\231\311<\3607\246\274\207\331\221\273b@\355\274\027\003$\275A\375\236\273\255\3447=\345\302\351;\354\271\031<\022\022\002=\310[\206\275\346\3607\275\007\2528<\232\241\324\273\201AM\275\352\203\261\274\220\355\213\275\343\345\225\274!\023(\274h2j=\311\377\214\272\344\355G<\271p\224=S6\311\275\377X\246;\277\364\010\276\251\021\264=\254\\\363\274\3453w\274\203\256\320\275\265\216\\\275\332j{\275\264gO\274\302\235\037=<U\253<\317\353\301\274\324x(=\262=T\275\231\\1\275D\371\030=\266\314\016=\270\264\033\275!\256\360\274\312\263S=\355a=\275h\001`=x\263\t=l\2667\275F\210-\275\010\247\'\273P0\246=\"e\010\274\371u\215<z+;=\006\0317\275\333\245\206=\316\342\343<\016\026\003\275\034\004n;>b\315\275\245\341\256<vQ\263=\035\272\"=tg\037<\2528\363<\254\337c\275s\326\302\273\274\032\341\275\363\231\236<\334\320\032\275\177X\243\273\033\036\354<\277.+\274,\361\351;\355j\305;\245\252\364=\371*\214=\001O\253=\361\337\207=\003/L<\233\035\t\275 \017v\275O\004\031=t\315\326\274#\365[<\256\311\002=\273$ \274\021\354\226<\362\2604;v\332\030=\375\034`\275\327\024G\273\206\241[\275\00460=\237\2734\275\344N`\274\013rP\275\372\270,<\341\243\246;\351\336\227\274W\210\246;\350\\\306\275w\252Y\275\\.\003\274\207y\245=B\241]<I\023\002=\271\314z=\347\255\225=D\220\274\273\335\006\210\273:V\341;\324 \363\274\310\377\220\275\301\362j\274\016}\245\275\244\263D=\353k8\275LvU\275\245s=\275\037/\232\275\341{\225<\246\246\037=\245\327\363;\363\\\036<N\"\252=Wv\351<V\301\036=\004\310m=$\224\347:\363\360==\351\243==\255\2247<\261*7\274SS\001=u3\331\274?\234\027\276\327\331P\274\306\350\024;\311d\353;U\226\370<\202$\250<\271{}<p\026z=S\272\303\274H\372>=V\254\002\274%\000\211=\343h\n=\010\017\317\274CK\257<\322~Q\275\252\303\007=\261\202\r=1\227\035\275\224\213\206\275\212\205\276;\001{#\275C/\331\272\271\371.</],\275\211[*=\350ox\275\\\027Y<7>\334\2744Y\n\275\232\264/=e\272\031=\001D\237=~u\241\275\262\024\200=\031h\031=R\034\026<\321\245\336\273\227\377\324\272\215\374\222<1p\261\275\241.M\275\240`e\274\326aV\275  \000\275\241\021#=3{\345<(u\227=\205\0149=\350aP=s\037\327\273\214\262\017\275\217p\032;z\021w\275A\034\272=e[\354;Dy\250;\231\300==/\336\373;X]D=O\357Y\274\343Py\275\037`v=\342\306\037\273g\360\017\275\253N\\\275\331\033#\272\003\305\257<\203w\245\275\351\202\371\273;\213\227\274w]^\274$\244\203<\276[\214;5 \025\275\213\252\260=\2761\343<v\203\336\273p\336\250=\021\225o=\030\nZ\275W*\000\275\252\n7=\235e\025\275\315\360(\275\262_y\275Y\3175\275\250\367\275\274\340\340\222<Z\343\227\275\275;\277\274\275|\034\274|\212t\275\307\215\t\275\341\206\231\275\263\212\327=\314ox\274\351n\236\275\340P\001=\'\367j=\207\232\354<\252\240\311\274\207\362\246<\260\214b\274\267\n\222\275\216\227\324<L\211\024=\227\367\320\274e\2219=\317\251\215\274\"8@\273A\227\014=\326:z<\324\264\371;\247\277\365\272\214\005\302<a\2774;t\232r\275\357\351w<\023#{\275\\\227\203=\261{\250\275eIv\274\232\355\310<\024\036\230\274\334!\023=\271\251O=\2421\360<\272\357\271\273\216\304\224\273\177\027\363\274\355(-=JJ\337<Z\312\315\274\2726\002\274I\2413\274\224\246%\274\311Z\006\274\346\321\343\274\213\316K=\367!\255;\014\340|\275h9\317;\272S:\274\255\221\376\274%\364\303<!/\034=\'q\264\272\004\370\177=,\021\242<\213\021\213=s\265\035\2755\3565\275\315\'\262\275I9\207=\233r4\275\245Bd=M\223\205\275\026\035.=\367\300\263<\306\224;\275\331\256\000\274\021\322\252;%>\023=\354o\247\273\227\356\212\275\253AZ\275\246w\216<\354\371`\272\025A\234\275\373\233\001\275\333\223\236\274\317\366\202=\037\371N\275%&\000=\323\336\207=$\233\262\272\351)\236\275L\327H\275\370\002\303=n\020x<\001\334\007<.0\233\274\341\372\231\275\246\331\322<\0353\3679C\251x=Y`w=z0\035=A\276\\=\366\263\344\274\241H\214<^\022Q=Tk\320\274}\336\237\275v#\206=\271\'R=\321\2719=\353\265D\273)8+\275\250\261\273=\231X\225=~\2722\274\2543\354\273$C\236;\233(\321\273\320X\331<\210W\344\274\201#\215=\2355\270=\265\022\023\273\332\251~\274mp!\275\320g\323=\251\016\207\273=\366\210\275\230%\303;V\323\351\274e<\274<r\276i\274\275\004\002\274\355#p=\034\177\243<\274@\035=-\343\245=\004\017d=\227\360$=\\\326\032=\007\210\017=S\225\224\274\215\322]<k\210\373\274\250\252\r=@\335?\273\310\300\243\275\013+\331;G(b=\243d>=\257\033\245<\264Z6\275!(\263\274\375IA;\201\t\365\274\377h\374;\362\025X\274!\220f=\260\363\r=\374{5\274\"\237};m\361e<\007P\030=1\316z<\033\374\024=\256O\225<\n(?\275\353\262J\274_$\025\275\341\235\026=W\204w<\332\332\033\275\275Y\265\273\332\342<\275\t]\221\275\361\3515\275\022\207\030=\266xG=\235\353\246<^\374M\273\247\362\331\275\344NL=\231\037\253<*\227\204\274?A@=\001\002T=\373@\031\275 5)=\300\202\275=\022\211\215<\2612B\275\266PA=}\361\343\274\351\244\271;i\355[\275\332\217+=\013\216\204<\353\225E\273\272\013\234\274\376-\202<\246\220\007=\364\327j=\303z%\275\344\275s<Ig\306\272s4\010\275)\030\354;p\357\210={j\206\275\233ye\274\023Z\243\275\352\342[\274\214\024\260\275\375\241h\275\2725c\275\032\222\367\275{\177\003\275\034\010\242<E\206:=\033\035A\273\345J\211<\345e\242\274\377\242\226=\006Pj=\320\374\235;\003\331k;Z\261\233=\322LM\274v0\201\275\260\314\245\275/\263\000\275\322\204\210\273K\315\257=\361\266\346\273\322X\210=\310\376`\275\304A\252<z\222\026\275\262\335\025<r\231o\273\2310\247\275S\027n\275\023K\240=\341c\020=\214\n\004\275\254\3073\274}\367\\=+\260\305=St\325=K\334G=\365l\247;\017g#=\264\321w<\276Ot=\035\335i\273(\320\254\274\004\252\202=\035\274\303\274\345\021\251\275\"\376\177\274\304\321\201:\010\267\213\274\003U\353<\355\333\036\275\250\031\326\275\357\344\245<o\234\342;U\354U=\\\351!\275\272\246\276<\322\235J<+\354\004;\312\025\342;-\026\214:\035X\344<\332\216\243<o\314\232=[\276\321;ys\210\275\344\025\025=\004\253;=1V\025=\361\021+\274{CW<\367\243\023\275\2430\347\274\23272\275\027\024\203=G;\216\274\262m~\274 N\006=G\231&=\265\271\207\275\366\254\207\274\275\271\201\274J\021\337;\026\'\016=i\231\r=\245\255\241\275\031k\035\275r\312\t\273\242%h<e\201\\<\205\024\367\274<\314\016\2754\"\r=\323\275\265\275\245T\335\273\212\322N\273\344\242\204=\034\370\341\274\023NB\274r\033\000<\332C\236=\342K\237\275\001\303\362\274{[\r\2742\306\301\275;@\330=\342\213\253<\217\2010=x\211\022\275\365\246\371\275xK\277<a\236\362<\3354$\273\324/\335<\345\3622\275\214.\316\275\240a\177=\342\312\236\274\310\227\305:>n\036<W\314M=\255\3646=;\321><\372\351t=\341\323J\275\322&\373\274-j\031\275\203\247\215;\024\223\003\275L1\n\275\030o\364<\202\261\242<<\322[=\217_\203\275\261\242V\275`\342\266\273w\264(=\2704\245;NP\204=<\271\362\274\320pP=\000\020\371\274B\221r=\026\002^\275\207\032\300\273\246\364\207=1\274\344\274\227\342\227\275\273\211\225\274\375$#<R\370\267<o\236\301\275NO\345;\277\033\245\272\265\211\355\274\344/\377\272\211o\312;@\327\354\274\2131*\274S\016\241<\003\035\\\275,B,=\254\204\334;\300Y\313<\032\2426=x\317%\275\356L{\275\017\343)\275\255\205\226\274}\367\237\274F\336[\275\336\230\002=\347\020\t=\306wY=5pI\275%;\234\275$?\240<7\334\246\275\231\314\250\2742W\227\275\271\231a\273\301\342\037<kZ\246<-\275\r;\001\360\262;\275c\250<\376\232\215<\366\371g\2751\315H\275E&\363\274\225\227\320\271\216\266\213\275\205\034\245<\252\265\236=\212&\200<\246\354\343<[\370\335<\000\316R\273\233\013\212;+#\367<\366+\246<\335\367e\274\274\214Z=\242\271\266<\276\370\347\271\001\371\333\274Ps\202=m\377;\275\276r\251\274\027\320\364<\2355\300=\307\351\223\275hX\213<^-\270\274\211\264\266\274\211[J=z\336\266<\341=I<\254)\375\274\t\253\232<|\305\231\273\265~\034\2759\240\224=\265\244\024=\326k\025\273h\264B\274hO\262<Ui\212;\312\335&<\024\336\237=g\035g=z\361\216:\361q\322=c5\354<\234\231\020\275\257X]\273\273\313e=\355\217\270<\352B \275\013:\247\275\2566\341\274`\211\306\273|\307q\275\243\247==M\347\351\274\0177\003<\344\037S<\257\273Z<S\014\300;R\321L=\204V\367<\017\261d\275\230\325\373<\227Y\315\274\3259\375\274\035\260\327\273\274)S=\244\252\351\273\213\353\310;\270\365z\275\014\225\315\275{y\267\274\343\315\255<7\364\346\274\"\0020=C\241\204\275\307\250s=\271$F\275\255z\254\273\331!\270<\213\277Z\274\336\2122=\205?\030=\246E\257\274OU\377;\360*\227=gn\227<\"\335#=\330\322>\275\304~\200\267+\242\024\275\2208\276\274\346X\226\274\"f6\275n\346\014=Gn\023<DD\007<$\304\342\273\'\232\373<\234\346\021=\016wD\275Y\236e=\032\331\241\273\t\031\002>\262\272\337\274)K\240\274\251\2129\275\\\023\256=A\341v;\240\210\212\273zC\255\273TO\017\275H*Q\274\324\240\347;\330\"\330\275+ki<\005rX;;\227\022\274\342\325\032\273M\254:\275\312:\334<\223\377\017\274D\233*\275\312\243\013\276\026\r\204\274\237\000\365\273\251F\276:\t\216\371\274\020y=<\221,\260\274\361\'\247\273&\030\033<\036\271\206<\273\235\235;\217b\357<\3129;=\246\035\001\275\261\236r\275\032\275\362=1\272\225\274\376\006\266\274\226&\240<\000\022\261=\001\336,\274\345\335}\275\357\211/=\026\235\256\275B\341\026<W\366P<+\'P\275%\272M\275\037~\252=\007O8=\256\364\032\274\372\256\r<6In\273\375\020q\275\026\337C<(\217\031<38[\275\007\031\327\2715}\335\273\337\367\333\274\337M\023\275\017e\217\273\205y~<d=C=\330\243\206\275n\257\240;\256\376\337\274$\350\362\274Y\"\316:\370\222K;\342\377\221\274&\341_\274\007\321\023\274\032\201\252=a\236\225<$\360\344;\340\0336<br@=)\301\006\2735\276\023\275zM\220\275c4\303=dJ\207=^\027\003=M\256D=e\005/\275v!c\275\320\210Z8\274}u=A\206 =p\336]=\336\371\000=\2769\217=D\365\214\274;u\013\2757\034&<\251\362G=\375\005*<i\3437=\370:\343<T\324\353\274\227\ti;+\3114=\307\217x=\n\031\200;\231\207x\275\203+z<m\255P<@\265\"\275>7\230\274I\377\367;\227E\250\275\254\034\037\275M\306C<\005\013\305<\307\336\224<\217\243U<\334\017\236\274\033X\202\273\355\303\262\275\022o%\275\322\177\032>|\336M<\247\024\221\275\314\216\014=\335\235\306\275\232\270\251<\014\231h<\005^\204\274\n\305{=\257\2374=\177\243J\274L\262\277\274\312\r\236\274$*W<\356\371\007\275\022\027$;\330\2677\274\333?\265\274\310} =P\364\325\274\222\026E\274n\225\252<+\344z=\326d\336\273Z\226o=\300g\302\274\256\365\033\275\367\355\273=\"@\374\275\311,z\275u+\223<l^\034<m\306x=d\317\n\273&\177\353<\200*\330\273^\'\337\274\224j\021=j\316k=\250\350\333\274$\330e=\265i\031\275\242\005~\275\010\344\301=\326 $=Pa\200\275rk\t\274}\302\310\274\230\034\227<\246\203\233\273s\362\346<\377\026^<\300\341\277\273d$\034\275]\227\267\273\356\025\031\274\260\246\\\275\350\013M=\261\024A\275pB\236\275x\305N\275\322\257\027\275\236|\237<\020\000\017=\355 \203<\025|\205<y\010`\273\206\241\260\275\253\177\210<\324\266\246\273f\317\234<\277\362\305<\320\370/={\323\374<\225\376b\274%r\020\275\204\273\027=\205\344\351<\332i\006\274\251\265\204:\350\026\204\275*\363\017\275\202\364\361\273?\247\274\275\375\225\002=\300c\227<\003|\024=m\355l\275\037\260\000\274\272U+\275k#\243=\310\354\220<\232\177\377<8n\223;J\267\037=+V\241\274\270\0166=\315\212\267<\367\302|\275\244H\022=n\203\017\274\227\265Y<y\251\305\274\314\306Z\275!V\302<\260\224\006=\263\231d\274\300\242\305\273kX\307\274c\253\237<\226hD=\243\233w=\305\000V=\303\366#\275g\223\037\275\016\000\n=7\344\233=\344\020\305\274\301\021N\275\335$\003;\354\357\030\275\253K\006\274\374\341\340\274\002:\253\274\206\371C\275\315\346\257\273\367\270\260\275 9\237<\n\010\373\274\335~ =y\200\027\2758\342x\274\205K\035\275\302O\225\275\342\226\262=F1\261\275\374\036\316=\201\360\366\273\304\037\212=\221B\213=T\336}=cm\216<\372\201\266<dC\207<v\023\257=O2-\275\2428\321<\227\232\372<\000\257\330<\337Ej=F\211e<AYS\275\254I.=\223^\267<\304\263Z\274d\332\310\271\250\241\277\273Gk\324;\314\n\262<\352\211\314\273\t\234\030\273X\237\364\274\026\253<\275\322\331$\274\371\217H=\202/\371\273q\0045=\205\327\260<\276\215*\275\230\235\370\274\326\373&<\274\252\\=\344.\"<@\032Q=\311[d=\277\rb\275X\301\200\275\272\216\200\275\t\021\276\275b\253\252\275\235r\211=\312\256\301\274\310U<\275\303\331\240=D\016&:\363\316\270\273\\\001\350<%\223D<\315%\224\275\241\276\312\274\030\003\207\275\031/r<O\021\233\273q#5=)$f<\353\350z\275\364\334!=;\347\350<P=J\275\341\350\217<\267O}\275\306W\325\274\230\367\232\273\365\030\274=\350(\207\274\310\005\374<!:f\274\250L\017\275<%\303<t\307\033=(\251G<\304\362\274\275\025\020.\275\217\000\014\2740\313\351<\331\244\256\274\235e\202;\363\275\314\275\001IX\275\334y\204\274#\302h;\375-\367<\035K\"<\260\323\215\275\013\036O\275\330\205S\275\274\024\277\274z\335m\275,\213\000\275\032U\275=\231\325\006\2750\317@\275i\341\363\272@s\350\274\t\227\210<D\211\223\275R\220\025;\260\016\202=\205\351\276\274\366\367\035\275q^U\275\364\017\331\274\020\204\275<}\222\010=\275?\270<\374\001\032\274\251\3431=\252\307q=?\306w\274\177e+\275\304\263\355\274\236\t\030\275\264[\257=\216\"}\275%\261\001=\307yr\275\314F\001=\202b\216=\200H\376\274\037\0217\275X\200n=\312\024\"\275\\b\325=\t\303\177=M\'\325\275L+U=\352\026\035\275\345\227;\273{\021\231<\330\242\n\274\000.>\275\200\235_<T\216<\274\236\264\213\273U\271\251\275\336L\235\275a\222\367\274S\342\354<\026\316\275\275\032\355\236\275j\357\017\274`\177R;\006\322\373<\025(\002\273\320\032\035\275\216Sf\275@\314\242\275\376x\256\274\275\033\265=O,=\274\204\177)\275\344\305\202\274\304\346\216=\334\264e\274\264wE\273\212\305\233;q\263\375\274\020\371,\274\371#T=\306|$=]\203\315\274\265\232\"\2750\216\251\275N]\231\274\321 m\275F*\213=[\260:\274\324\267\204<\245\251a\275\177\360\r\273\206\213F;\250\363\016;w\010H\275\344\217\005\274^\202\203;\273h;=\240o\240\273\004\232G\274\021Vn\274\353\373\246\275\214\025\245<\032.\215\2759\001\030=\274\226\365<\311zC\273\330\210\023\275\255\351\204\2755\334I\274\364.\004\275\241\363\362=pR\363<xO\360;\2617\376\272^\277A<K\000\r\275%=\210\274y\202\024=\215\323\006\275\237\347\211=\235\253\026<\266O\267\273\"\204 \275\032Db=\017\301\334=3\233\245<\002\023S\275\372\014\231<9\222U\275\251G\031\274\364V\'=\003\321}=\177\260\006=\370\244N<Z\2256<\000@\277\273z\266\017=\300\327\223\273\213\340\t>\255\026\223\272\323M\027\273\0266\252\275\302` \274\311\222\267\273\022\232\'\273\257\206\251\274\026\231\271<K\037n=(^\251<y=\266<\263\310\244\274p\313\213\275q}\002<\273\033f=\031\224\220=\331\372d\274rtW\275{M\002\275\230\027i\274b\333\326\273\227\270\340<\021\310\030\275B{j\273\360\347\372<7\314\001\273X\313\227\275\324.\204\275\273,\232\275\304\017\325<\372U\t\275\331\021\t=\203\344!=\210\343\273\274\264\\\025\272\331\204\326=J\"H;\303\261\246<Ez\363\275\236\242\241\270\211}2\275e\324d=\"x\210=\264\321\305<6\251\210<\327\020\031\275N\236,\275\232:8<\242\346\314<\027o\200\275\330\006\363\274f\341\264=\025\220C\274\006\203\005=\3231\274\274\341\275T=\250/>\274\225\2349\275\211\262X;_\362\014\274\346g\345\274\335M&=\200{\361<\n\020x=\227[>\275W_\315\274\246X\226<|E\273\274\342_\010\275\370\272\221=\345sC\275\274\366\326;;\275\n=\336\032H=/1A\275j\023\263\275Q\273\214\275:\214`\275i\001\022>\'=\013=\0108F\274\031\277\356<\377\323Z=n\356\264<\317(\024\275\377{>\274\336\365\223<\t\n\223;D,\324;\022\263\256<\375E\250\275\350f.=3\010=<\363\317K\275mn\252<\\\2716\275mk,\274\223\201\354\274\310\026E=\255\n\241;\3235\231\274\302k\244<N&\001\274&/a\274\360$w\2750M\002=U\016j\274\203\370i\274=/)\272\315H)\275E.(=\360\232\243<\311\016\032\275\177\026\365<&\264\307=<\220\335:\000\020\036=,\002o\274\r\327\240\272\255Y\235<\373/\236\275\271\216\331<\330:-<=g\275=\260\302\032\27445\'\274\177$\020=-\270\254\274\257\204W\274\225\311c\275\323\377\r<\246j|\274mE\310\275:(\030<X\265\225<K\203\261;\t\037\204\275\021\324\031\275\254y\021\2758\271y\275\006x1\275\267\\>=\013u\014\274\366\251\367;\255\230\235<\340@Q\2737\363\222<T\354\"<\235\261\316<\203\330\307:\267\271\234\275\233\234\215=l\260\005=\376\242p<\025\341\345<O~\013;\203.\007=\207\365X=x\220\225\274O\243A\274\330\243\321<+l\333<\351\0172=\346Ce\273\004\225\310\274\261\317+=\360_{\275\000~\027\275\367\r\252\274+M\217=\t\310\206=\236\177t:p\2417\275(\213\246:\216\303\016=\352\343\217\274Z\247;\275\214+/=6\014\213=\010(\342<\254\356\036\275\335\237`<\235J\260\274\270/\200\274\275m@=\234\255\246<\316\321B=\0160\210<=\262\303\275\326%_\275\324\271\314\274\032\327\220\274\315\211\301\274>\002\242=\366\352\266\275U9\250\274o\212`=\271\254\335<\223\214\235=m\374\021\275\257\272\337<M1\243=\343`\213\275t\241c\275\\H\356<h\250n\274\217\260\014\275\330\347\377<\016\347\264\274W\221E\275~DG\2716\315\204\274\363\310\321;\363?\006\275M\225\225\274\313\305C\275g\td\275{\242\333<\021[!\274\207A.=\240\376s=d\230g<\264\326M=u\224P\274\031\000*=x\215\014<y\304\277\274POt= *z<\007\231\211<E\007U;\023\342&=\362o\023\2730\361\251\274<[\006\275\237\343\245;G9\245\275(\237\353=NZ\371\274\322V\206\275\370\202$<\2122?<\003\257\002=6\334\014=\334Y\375\275@;\203\274\344\256)\275\017\237\031\275\244\255\231\274\210\013g\274\243\250Q\275\203\377#\275\337\007Y\275\270\257z\274\363\034}\274e\036\206\274\225?u\274\201\003\013=\333\261g<\010\346\020=#\244U\275\222,\'=\032Q\337\274\344\333\331=Q,t\274\240\242\226\274$\244\235<\333\215\241=\310i(=\365\221\032\275\313\334\035\275;\322I\275\343\373\314\274i\226\233\274(`\023=n\246\206=>G\315\275\262*\372: \"\006=t\215\252<\373BR=T\260\307\275\207f6\2754&\306\273\027\020]=\345 x;\363\037y\273\016V\233=\235\317|=z\243b\2750\026A;\037\267u\275\200*\321<\321b\217\274\014\2421\275\232\303p\275\357pr\273@sC=6\021A\273~x\214; \363\276\2758\n\265\275\244 \347\274O\322f\275\246J\016\274n\251\000\275\253\222Z<\263&\215\274}/\254:3\214Q=\326\363\241\275\214\311\334\274\326\021\333;\031\202\266<L\rJ\275j\252\303=\253\230*=\234G\"=~=\221\275\237\313g\275\251\336\345;]\344\273\275k\313\n\275C\013\314\274\343;n:\227\035w=\377p\362<,\235\224;\006\202\207\274\231\030\234\275J\317\347;\346\010\334;H\300\221<\346+?=\0043\263\274\23564\274\010g\213\274O\2376\275r\326e\275$=\221\275\217\264~\274>\024l=+\301\230<\010*v\275\321s4=\200\003s=2\242\216\275\036\242b;\267d\372\274\231H\200\275\217\343 \2757\335f<\212p\257\274*N\'=\254Ck=5lg=\n\017!=\3746c\275\\x\307<\233[)<\312>[\274\234\303\240\275l2\355\274\244\344\203=\370]\020\275x[\201\272\212\022\323;:1\032=>\372\213\273=>M\274\037\255,\275IV\003;\276\327^\272 \003\003\273\300\210)\275!\260\275\274QM\303\2747\260\314;JzR\275\370Q\037\274\201\020\365\272\230\252R\275H\254\372;\236\335\177=\215\234\232=&\203\344\273b\r\300=p1\314=\210\253\024=\262\354\235<\207d\030<\013\231j\273\232\310\253\275\214g\226\274\317\206(\275\353\341\267\274\360q`\274J\003X<\2222f<\265\326\363\274);\231=\261Y\246<\002\310\253=\223i\324\274\232l\204\274\312\223z<\275\301\030=\265\3405\275\313u\202;n\023D\275\260M1\2739\010\352=K\255\031=$p\333\274H\202v=\372\320\250<\266\225t\275\361{\365:\314\357\316\274y\025\344<oM\353<\007X\260<\255\302\340=\235M3\272\326\352(=\2623\263\2753 \204<$\235<=\021f=\275<i\245\275\223\006\030=,\\\\=\3300\273\274\005X\374:6|\371\273\251E\204<\n\251\231\273r\251\321\274S*\r\275\214^t<\370F\254<\220=\275\2757e%=\317M3=\366\252R=\032\260\215=\351\216\347\273\202\2454=\2429\007=\347\342P\274]\021\222=\346\267\374\274aHn<yq\227<\265\325\313\275\355,,<\311\315E:?p\204\274\211\004\251\275\215}\243;S\'[=\027\354\207=&\005\021\275\233\212\360;\000\023\031=%\363\233\274\273zT;\277\035\263;\211s\014;\033\003\201\275%q-=M\"l\275<\376\024\275\223\016\203\275\275>\201\2743\330>\275\345\016Z=\202nr\274\341\330D:{\227\337\273\304\000\244\272lSC\275\231_\"\275&\345Y=\267\035\223\275\262r\004=x\010\225\275\021\302\263<\023\003\272<\024!)=<\375.\275O\264\366\273\r\037\246\274\003\300\214:\351\r\255\275_\014\317<_s0=?\352[<\257?\235\274\203J\304<\317\372\224\274b&\200;\234\256\347;\241\304\034;g\013\274\274\325\330\373\274=\251\335\275-\t\373\273<`L\274\\\364\330\274|\333\305\274:\332\237<h.\226<.\321\365:IO\300<\316\342\241\274\313\241\342\2743\272\027<J|-=\3268\355<\356i\\\275\234\376\343\274\215\331\020=\314,\006\275\025\260\023<\200W\213\275uL\262\274=\301:<\003\037\224=\240Y\334<2\t\364\274\244\371@=\374#\023\275\323\031\363\274~\273\371;\276[\217\274\354l\006<\204A\005=\337y\030\274\314a\234\275M\365\243\275\356\3467=\307A{<\217\337\006\273\255 X<\312\014\313;\276|\340\274\325\360\005\274%\3756\275\337\213\007;@\020\204\275_\007\222=\270\307S\275\246vI=C\341D=\005\372\203=\232\321-=:\226\023<wr\016\275y]e=\212\320\001\275\023\000\3209\306\213\246<\330\001p\274o=\215=\254h\370\272\241\305\216=\274Zl\275\315H\234\274\311+\204\273\364\203v\275`A\215\273\203\370\262<\372Rz\275\257|6\275w\345Z;\250r\\\275\234\032\275=\322Z\027\273\005\r\206\275K\205:\2734\243\270\274\363\341~=|ZF=`\t~\275.@B=R\2125;\211\343\021=\302\027\210\275KR:<\230\000k\2742\022\005;%K\332<\210\206\324=\223\203\316\275\013FF\275\302\035c<D}\347<A\315\005=MT\232=\010W\022=\270\213\225\274\212\252\035=\222$s<\032[\372<\336{\354\273\2509\003\275/K\013\273\361\337\214<J(\315\273\255\247E\275|\"\311\2755\325\262\275)\366\245\273\273\301\315\274\254R\034=\020\362\361\274\'2F<\026\247s=\246O\343\274F\225R\275\010\341\t=6\020Y<bNR=\016\331%\275>j\215\274\364\242Y\271\032\317\212\275\033\271\t=\366\'\354\2748\020)\275\255:3\275\202\376\304;i\271\343\274 \224\350<\324v\336\274\225\035\237\274\273N\025\274|\257\037=\231\351{\274rF\327\275\r\271\n\275@\235\r\275\352\373\271\271\024\274\016>J\335\322;\020\224k\2759$q=8\037)\275\017K\"=\033\310\n\273!\267\026=k\3120\275\214VE\274\353\343\247\272\350\343\254\275\3504}\274\373rZ<\314\320\210\275U\254\375\273C\222O=<\243Y=\234\003/\275t\225\246;\\8\222\275\241\274\315\275\277\221N\275\217(|=r)\270;\200\203q\275Y\223a=\342(I\274\262aN\275\260\032\036=\364\247\233\274\237\353\222\274yv\212=C\nn=\007\204@=\215\212p\272es\034;\333]\200\275\277q\225\275q\246\245;\267RN\275\255\312B\274\030\216\305\275\340\326\'=K\n\362<\331,E=\002?\235\275\214\2210\275y\330\223\275qQ\220\275]}\207<\236\032&\2750\345\003<7\361\352\274\275e!\275\252\317\212=\307g\264\275\272\022F:1q~=,\030:<\3350\000\275*\214\250<I\2405:8\027\217=2\253\331\274p\227\214=\371\315\302<\201H\026=\366\356\231\274\312\340;\274\256\363;=\357\356\203\275\246\300\313<\016\024\336;\327-5;UV\352\273\323\374\212<\032\304\206\275\273\201\000=\300\242\000=\001\260v=\337\016R<7\034\373;\270\344(\275Z(\360\274>\3614=t+\346\274\363\276\010=}>\365<B\216\t\275\206\024W=\273`\231\275\337\252\005=\t\236\200=\026:x=R\370\353;\203\362\027\275\241\372\222\2758v\032=\223\204\\\273\030\215\224\2751\177N=[\3117=\\d*=\363\277\307;@\231\243\275r\241\000\275\215\036\006\275\003\273\236=\001\272\031\275\013\253\005\275\253x\343<\2049\t=\351S\236\275\305\255I==\365\376;##\223\275U\250U\274f\306#\275w\316\215=\364oF=\344\313f<\351\325v=\370\200S<H\351\003\274\002\374\242=\346{Z\275[\362\035=2V\335;xVK<\300\267\007=\346!\000\275\\\277B\273<\336\276;\374\276\363\273\256\255\n\274\316\017\204\275\214\252\324<U\203\215<\234\225\014\275\221\327n\275|\230\213=\013Yy\273\354\375\353;\014\232\3429\351\201w=\"1\022\275\355\253*=\303\016\036=\240\237\000\275\246\242V=\rJ5<\266\363*=\255:\024\275\227\333\205=\274\3536;\204\247\024\274.PF\273\271I\003;\025\341\236\274\271\233.<\240-N\275\237[\234\274$b^=\252\335\010;\230G4=\3633\005\275D\315C=\364\032\221;\023\342q=\346\355\360\273\372\2005<\360 \344\272\237fB\274\245\3300=\315]\004<(DI=\313\033\306\272<s\362;\210\262\r;6u\256<S\014)<\003\031\371\274\251\020\207\273y<U\275\034\302\032=>\005\204<\246\032&\273f\013\320\273\234\360B=\357I\352=\370\2219=&\214\031=Eml=\210\200r\274\3778\033\273\324|\365<;\306\326\272\340\233d\275\223\2413\274\335\261\247<\322\030\030\274{\023\236<\323\204\316<\320\003\241=\234\200\306\275i\201\006<\024\224\236=\341\311m\274\235?\231\274\203=\343<\001\\\233<\036>f\275\367p1\2745\374<=o5\371\274\010\263\262=\252\373\000;4\0100\2758\220\210<C\023\014;\213\342\221\274\250\351|\273n\220\214=\224`\236=\2637\211\275lM\360<*\2448<\341\205\375\274\357U\223<\370,\372\273%\342\254<6fl\274M\235\030=\026\340\027;\034ag=\2570\224=\217:e\275\003=\223=G\377\243=\200<\370\274\003\243\014<|]e\275\332\2755\275\363u\273\274\267\226\374\271<\302\231\2747`\r=P;\020=\271\357\221\274\313>\255<.\301l=\370!\233=u\357N\274\271\005\253\274\376\327\023\275/\"\222=\210m\013\274\206p\000\275\315\210\246<\372NP\275\354\330\211\274\003\3573\275\214cy\274\302C\222\274c\000 =\014\270S\275\362Wz\274f\346\355=vM\343\274\004f@\275B\253S=\313\265\020=\354\300\245=4\351\030\275>&<=\213\321\312\270\222\320\356<\212\214\233=6[\221\274\344f;\275\004\271\212=\352\353\321<\243\255(\275\224\202\n\275%\tV=\277\230\"=?\177\366<=L\313\275;`\023<\321HV\275o\367\013\275\301\202\252=\325\351\275=L\337O<\262R\326<\327\333X\275G;\023\275\023+\275\273\352\235\343<A\2114<5\r\233\275\022\352\227\275\333\2117=<\004\324\274\274\276U<\371|\316<\005\213\273\273\013\026\313<U\377\002\274\236\253\014<\032\363\221<.\343F<e\251\353=ld]\273\307\266\001\275\267\335\203\275\2245Q\273\275\302\344<\017w\030\275\366\357z\2720\363\025<\365\035v\275dZ\312\274,R\013=\\\205/\274<\211.\271 S+\275{\306\261;T~\266\273\360\016C\275\225\312\304\275\341L\322<p\350\214\275\305e\003\275f\313\276\274FI\272<\002\360\331\274A\305S\275V\350\274\275\226F\360\274\035{\247<\306\033\201\2752\014\203\274\223\204\275\274\212\242\231\274~}\336\275\201\031C=\020a\355\2745r\014\274\032l\024\275.\002\246\275\t\205E=\332\224\255<\256\360\346<\022\010k<\2637p\273\321\013,\275cV\342<\334E\225\275Eo\014=\345\026\324\2740\226\364\274\254\036\\\274H\276\351\274T\022\202\274\320R\232\274\204\330\t=\246\236\342\275\313\277K=\251\302@\275\360\372\204\275\3219I;y\227y=\340V\305</\301~\275\326\355f\275I\t\250\273A\006\343\273\270\3612\274\006\274\t\274+\372\223\274m\332\010=\034\223\234<\252\032\275<1=\273;\000\006\020\275S}A==?\216\275|\232O\275\343\375\321\274\000\271&;\252FF<\025\267\347\271\367\210\205\273\376\201\007\275>?\003\276\273\252\222\275\335\353\251\275\376=\3529\312\263\000\273\362%\r=\3165\026\275\257\340\200\274\001\336><E\007\330=$8y\274\036\313u\275\235y3=\014 \231=\232>\217=\030\260\262\273\245\327\334:\211n*\275\220\3265<\201\036,\275\030h\244\274\224>Q\275\t\027\241\274\336\221\"\275\202\334(=B\231\t\275J5W\275\\\310\007\275WS\217<I\324Z=#\347\243\274\244\217M=\355.\206\275\005G{\274\002[\220<\347f\027=y\266\275;\327\324\257\274O\314D\275\026%\311=\300\340\242=\3223Y\275\014q\234=q\032)\275O\004\231\275K\351\341;a\306*=\213\345G\274\255)\235\275\344o\217=\243\016\237\275\243-\034\275|vP;]d\200<>\230\245\274a\272\226\274\246\366\224=\346\t\224=\031\235\330;!\353Y=S\232\346\273\266A\344<\370\204J=\317\361\346\273\207\314\311\274\337\\\010=\026\310=<v\"M=\274\r6\275Z\202\253=\202l\255\274\251\342L\275W\023[=\007ee<E\375\022=\027\230\003\275\301\3254<r\346}\275\267Q\020=\322s\r<\343\202\245<NPt<\365\304\001\2751o\"<A\352m=\342\335\246\274\013\372\025\276}i\213=\336Ta<j\371\266;\222ll\275\205\315\322\274\351w\247=\\|\n=\241\212\"\275\236\224\265=\233\024\200\274\210v\234=\240\271\323<\311\203\241\275-\222\320<\367\231\314=\025Vz\275\014\362n=v\221\276\274JQc=\244\356\237<\362\345z<5UV\275I~\031\275\316H\256\274eY\205\274\260G\373\274v~\377\274\207\236\211=xk\014\273<\032\277<;\277\211=\372\337)=\251\0073=\026\032\265\274x3x<\035k\267\274Z\221\034<]\354\260<k,\364;\023W\215<\356\3415=\271\312\216\274\241\205H<\276\322\026=\366O\020\275#\3416=\204\351\205=\376\025-\275\320\245\337\274u$\326:\2724\220<A\277\223\275\021\001K\275\330`\033=\202-\236;\346\323\333<\007\020<<\355w+<\016\367\223\2759;\363<\240\220\007\273\332\033\005=\231\n\265\274\3158\\\275\321?H=-\252\014\2752\316N;\034QG\275\307\016+\275\322\022\000\274\021bE<QU\302\275\343V\255\274FU\272\275\240\206\362;\036\323j\275\\9\311\274iY5<nB\336;s\343\204=\204\256\007;\234\267\t=\237\234\225<\030S\274\274\216\271+\274x\273\202=\234c\226<^\373\236\275\310\205W\2745=\202=k\250D\275,\366H\275\213\326\204\275\034%!\275\243Z\r\275u\021\021:z\007\266\275\361\177\313\274\200\ny<\215n\345\273B\314\233\275\024d2=\370\365]\275\241\023\221\275xAE<Y(\300\274V\233h\275%\"j\275-a\203\275:\210%=*\334\036\275\3160\"=,\237r\272\327\343\227\274\246\260\353\274\1771a\274\220\245\204<8\3450\275\253\020\276\275\020\254\313<\260\326x\274+M\020\275\327O`\274\n\233\034\275\010\205\370\2731J\t=3\314\251=O\361\276\274!\376\241\275\252\274\022\275\347\2472:5\275\365\2739\270V=A]\311\275\221\254\014<\345:\014=\033\216\271<\222[d<\376\322\306\275\030\252\223=\265m\332<\267\316p\274\370\207 =\346\307\026=\312i\036=w\234\251<k\223\342<\301\263\203=ojd;\264\276\203=\246&!=KK\360<=\360\210<V\377\306<@\034U=\375Q<\275\024O\226\275\310\361\022<Nf\006\275\246\317\222\275\336\363\306\274 \210\203=j\223\206=;p\265\274\025\325W\275xF\211\273\037=|<\202l\367<\021\3120\274\343\370@\275\320\0275< \355\201\275\267\370\326<I\2717<\227\320\230\274\215\237\377=\347\023_\275\035\257a=,\253\332:n!\372\275\246b\300<\005\266\252=l\373\337\274\243*\250;\364\372\242=\271\351\365\274\323\377\265;\017\367\333\274!\020\221<\250\267\213<\3068v<\241M\337\275\226\014\036=\232\220M=\002\302\364\273~\357v\275s\304\242<H\311\253<F\244.\275n\246\000\2750D.\275]\242\226=\257\2744=\025\255\010\274\021D7;\207\250\345\274 \216\251=\177V\211\274\316Xy\273L\343\242<:F\203\273\241\016\217\273\371\2328\275x\251r\275\232\014*\274\'\035U=^^\214=~A\032=\302\252\"=\0011x\275_\213\367=\020\247\234<\337WZ\275\363\345\217\275t&N=\340\3647=\337\310\317<~\267\201\2755<\037\274{\257\346\273>\362\354;\022\010\007\2754O\240:F\022H\275\024\266h=\2340n\275{\261N<\0134\277<Ia\247\274\005\341\202\275s\274\313\272o\321\001=\222@\344\273\347\215\235\274W\271\027\275O\236\374<`\312,=\206\343\304\274\361\351\007=\303\223:\274f\344>=WN\363<\320\237r=\244\375\210\273\033B\226=\260\033\010<\345d\230<pz\016\275E,\376\274\177\035\273\273\224u\300<\343b\254<\374\236\217\275])^<\366O\377;\360\035\005\275\2371\273\275bY\347<\220qk<\310\241\316:\245v\2769\324\272\031\275\314\244\017\275\260V\017\275\243\244\321\274]\312e<\025.\364<\242|N=[O\312<c\337\216=\276\203\305:\000\272\216<\256ia\274ln\277\273h:f\2751\241\220\2727\310\014<\361r\210<\362\307\204\274\330\311\346<\003\254\225=\310\267\215\274\305\305q<\211\346\371\273U\252p<R;\313\274q\021&=\310\262i=\177\026\333=\332_i\274\322si<{\256\260\275\211}V\275Q\203\230\275\334>\271\274(%\223\275\310\365\326<\223\277\262;J3\203\272\001tX<\355\270\215=\344\331\224\275\214^\201<\200I\222\273\337\355 =\355S\n<-\227*=\013>\250<m\316\342\275_B\226=SD|\275\374\231\211\275\322Q\000=\025\326\263=\232\252C<+\267\223<\250\273\370\273\200\017t=RQ\263\274\202\213\337=f+\313\274\n\322\273\272\215\365\226\273:v$=\034D\227=\331.*<-R\346\274wE\242\2758`\031\275\242\2528=\266\362\336<\202<\274=\263\305\321\273\201T\304<\035Q\\\274%\022\301\273\003\n(\275CT%=h|\013\276R\023\243;X\314\223\274>\225\227\274&\331#=\361\344b\275Y\305\251\274\371\177\230\274\351\222\206=|Y\237=\374~\221\274\350\247/<\347\022\005;_\034\013\274s!\342<\360\326F<\221\2640<\321\343\235\274v,E=\317\336C=\224\276$<\213\016\213\275\266a\202=\240\321P=;\021\031\2754\222\213=\337Z\216=\324\225\025\275_4\340\273\233dQ\275[\372\353\274I=\227\274\r\370\341<f6\336<e\276\\;\376!/<&>\024\275M:\303\274\357\371\003\275\345C\005\275$\210p\275c\0319=q\233\235\273\336\t=\275L4\001=/\234\250\275KqN\274\010#8<\271u\230=\3231\177=k\252\200\273\364a\231\274QK\261<\003NK\275\343\013\021\274\256$\026=bMG\273\354\315\201\274o\275f\275\016x\340\273(\316\236;\237a\310<\024\270)\275\257\222/\275q\303]=m\236\316<O\356\032\275\216\251\r\275\377*\332<3\312\333<\377y\001=\370\347$\275-\265O\274\242\230\202;\007@8=\237\347\262=nG\032<\315\273\236\274\355\320z=_)\277=P\345\265\2736;\326<_`4:\347G2;\310.2\275]-\235\275\222\023\224\273\254\314\300;\033*\233<\3653\035\275\205Ww=\002\314\034\275[M+\274\273\020L=\233\374_\2749\031\252:NM\027<\022\231|=\241\\P<\274P\030<F\377.\2755rN\275\356hV=/(\t=E\237\212=VG\210=-\325\234\273\270\371S\275\004\305Z=\177\027+\275\322\230\220\273\334-\020<\217F\032\275\245\234\376;\016\322M\275\244VT\274\312\353\261<\204D\010<l\373\342\273^\317\233=\301\007\246\274\261\251 \275a \335\274X5\206\275\315\203\n=L\251\253\274\035\211R\275\023\346\022\274\274\256\005>?r\215<0\331J\275\325\r0=\350\031\335<r\255d\275=v\216<9\206$\275>\364\241\275Z\224\347\274\252\005\013=^\234\021\275h4\241\274\317\214$<@\245\331<V\355\321\274\340u\037\275\314\027\241<\240\310R<\272\300Y\275\314]\360\275\300\350\256\274U\352\036\275\355i\027\275\213\257\r\275\264\306Q\275\204|\313=\237OC=d\315<=\316`\273<E>\301;\2739\356<\227w~=xMB\273\230\225\254\274\214QF<\017**\275\347\013\247=4\034\333\273\352\267\001=\006>\234;\000x\256\275-?\t\276\032\221\027=\342\224\254\2748\205[;Y\327\006\275d\243\252\273\371\267\264<\221\266s\275Z\373\305\274\314\025a\275}\203\276\274\376\312\317<!\212\220\273(\216u=\327f\027\275\274A\272\274\265a\362<4\023\213<\267\260\276<\231\301w=.S\331\2753S-\275/\3041=L\365\007=\003\300\322\274\377\222^<\"}l;\302E%\275\226U\322=\177\014\024\274\010\274(;\\\331\225=N\223\343\272\004vM=N\021\374;\344\002\037\275!&\031<<\327\217=t\232\211\275\215\205\036<\232\357g\274H`\257\275/\355~=\340\364\301\275\363(*=\277>\t\275\255mk\275\014k\346\275\034\035\204\273\037\313\207\275\220\271)\275\343K\350\2749\226\017\275\236\367\236;\220s\247\275\264IZ\273\025\243\r;\306$\027\274~:\026<\245\310}\275\236\317\271<;\326\2519\251\353<\275\231\334\352\274\n\277\r\275<\210\271\274\200\356\t\275\017p\245\274b\024o<\225O|\274\256\302i\274T\335\337\274\277\001\222<F\003\312;\004\027<=4\016\210<34\323\274a\355\037<\341\231\302\274X\234|\275Q\237\250\274\014\350\211<yP\364\274\227\267\227\274\366\301:\2757\221\373\2734i\n=\204W`\275*\360]\275\033\212\003<0U4\273\353\023\017\275\214\321{\275D/\226<\347k\231;\357\232.\272\272\373v\274\t;\334<\033#<=\2216G=K\017W=\376\361\320\275\022p\200=\0231c\275<G\001\274\334\372\340\274\372\226^\274\323\t\001\275\230\202\246\274\325\314==\306Y\307<\037\202\361:,9\266<,\023w\275@\"n\273a\252\304\274\224\344-=\352O\375\274\034$\321=\007/C\275\221\200$\275\021zM\275\204\242\237\275\350\003\222\275\213\233\200\273\035\013c=\352b\316=\204\020\301:\337R\332\270\337\216)=\205\314\211\274\235?`=\336y\021\275\227\207\214\274[\2313<\352\234Z=b\355T\275\t\nw\275F\370<\272\331\277\270\272\322H\317<mF&<Qh\331\274W \234\274L&\r=\305]\315\275y\232u\275\276B7=|9\331;8\267/=\004t\000\275\367r\n\273\356\377\027\275R\005\371;.se=\372\377\252=\370\307T<K\365\312\274\252\026{\274\251\355z\275\264\306\311<D\224r=!\305\323\274f(\315=B7\361\274\225\351\272\275\333^\273<\252\306\254\273\277ah\274gL\235<\304\0242\275\217(\n\275v\376C\275xap;\214\372N\274\225\272\263<\316\rn=\232\335\007=\364L\227<\376k\226=\217c\276<\352\242x=\003\000\n\274<\273\321<@\006\367<\r\327{=\337K\032=e@\037=\204\306l=\353\325\277=\311\263\331=O\254\235\275\352\336\370<\222&\003=\273\310Y\275Uk$\275\034i\215\275\307\317\301\273XM\373\273\341\2731=^\302\276\274\356\260\032\274\326\351\314==W\270\274=\261\033\275\336)X\275)\222\336\272\304\200]<N\363\223\275\321\r \274\2547\212\275\013S\357<\260\321\305=\366\336\000\275$#-\274\034[g;\033\005\225<\266\010s;\366-\202\275\010<(;\2241\023<QW\260\274\275\t\302\273\177M\265\274\032kg=Oy\232=\360U\273<\214\224\274\274\212?\205=\273G\034\275\230?\275<\350\213\260<\241!\002=\264\226\275<\250T_<?\231\r=@\315\024\273E}\227<\0242\362;^\010\251\274C\027d\275\321\312\271\273>\212u=_n\373<\204\006\342\274H\324\354\2738`\231\2745\254\371<I\222^\275\013)\202\275\220\351\230\274\356\220\031=\023p\020=^B\207=\334\017\003\275K\270?;\274\005\030\273\311\276\312<\365M\035\275U&\\\275}Y\321\274\232[\227\275\005\365\023=w\2648=}\226\327\275\260HM\275\r\013+\275\363\\\212\275~>R\274nU\020\275\207\032\327\274\230O\321\274\240\303y<\236\250\226<z#\034\273\005iN\275y\212I\275<\351m;\277\306\237\271\230\271 \274\240\307\377<\311|\215<\322\017\033=\326\262\356\274\363v\203;\212\273\221\275\305\341\251;yf\303;1\214<=\360\261\221=\212\353\t=In6\274[uu;\'\214\372<y\245\037=\250O\312<\005[\225\275\351 \301\275c\344\002\276!\3600<7p`=\344Z\250<<\303r\274\3336\241=\277\314\212<\361\212Z=\2121\030=\314,\034\274\260\224S=\253\230\356<\355F\303\274\240si<.\032\356\274\213\\\003\275.#\331<\353N\272<\'\006\034\274)!w=\024\ru<6\242\025;o\333\375\274%\3523\274c\330\261\274\315\024\240;4\326\200=6u\037\275+V,=\315.\264\274\251\337S\275\177\2758=\373Gk=\r\330!\275\024\307\217\274r\336\252\273y)j\275+\224\225\274\214\003\216\274\314\235B\275\257d\200\275+\374\013\274\311qu\274ROM=EZ\002\276\314.k=\331\366V=l\244\246\274\0340\205\274U\345\210<\246s6=\206.S\275P\230\344;\245z\256\274E\023\343\274\035;2\274>\205\313\274F\256\001<Se#<\330f\021\274\364S\346<\272\017\336\274\007\250\313\274\236Rd\274.\200m;T\302\016\275\266]7=\350\014H=\244\311\263<\035\r\021\275j\264\017\274\027v\007<:\270\231\275N\013\226=A\312\252<\021\2009=\"\033O\2740an\275\r\262)=~\357\271=*\237\022\274\343\341C=N\001\201\273S\007\204<\023O\327<B\365r\275 z\213\274_}\277\274\346\340;\274\245\'}\274\214\016\275\27474\005\274$C\356<\247j8\273\255\243[=T\305\216<\231\272g=\210\226\305<\273\366G<\212\033F<:Y\036\275\000\r4\275\373\0322=\273i\230\275\213\313\321<\370y\327=\215\235\272\274\2774C=\302\343^\275w\230 =<\2345\275+xV<Sc]\274P\352\023\276\245U\341\275o\317\241\275\317\031\323\274\376z\016\275Y\375\232;\177\331%<\001p\230\274\201\251\264\275\333\0210\275\315u\322\274\372o{=\315\254\361\274\241\360P=O\023@=\216\007\0069\242\247*\275\027\223n\274\327\271g\275\274\034\022\275;\276a\275\322t\346\274;\315\373\274\250%\270\272o\374\351\274rq\303<z\214!=t\257$\275\250p\351\274\026\324\315\273g#R=\306n\032\275\234o\366\274\2153\231\274[\340\025=\220\320c\274`\2577\275\315\251\262;\024)x\275\366\2136\273\201E\010\273\232\255\236\274\037\213\200=z\230\201=8\226b=\033\371\003\275\275\232\263\273\337\262\r\274gI\020\275!\317i\274\0060\n<K\346*>=L@=\203Pf\274b\360K8\253\376\357\273\357\2212<\351\020I\275\235\322]\274\215KD\275\310\023\374\273?~;==\374\265\274\307\030C;t\223\364<\352\272:\275\261C\211=}\377\355\274\350\231$=\344\'\r\275\241c\004\276@A~<\242/\306<}F\005\275\350\242\235=\313<\231=\037\0334\275\310\373}\274\204c\207\275r<3=W\312\025\275W\257\262\274L\251\215=\030D\252\274\244ll\275\2758\314\2735E\263\273\034 \235\2759\246>=\343,\233\274\217,s=\274\270\343=\231\3237=\224\262>=\355\202\332\2746\233!\273\306y\217\275\243\362\217\275i5\023=R\2343<\035l \275\330\251\005\275I\245k\275\247\037\235<9\"\005<\240-\213<\357s\002\275{%6=\371X\034\275<U\n>>W\326\274\323h\211\274\340\347\352\275P\006\211=\005\364c<\346\264\236\274\331\223\300=\330\212\232\274\371j\006\275\346$\000:\354\2616=\235\246E\274\217\322;\274\271\365L\275Ku\313\274\267\204\307\274\341\351\241\275\356\"8=\206\274\014<\331\035T\274\234G\354;\307wq\275\354\210\333\274\200\331\305<\263\316.=\177E\260=\354\034F<\327\233B=\343=\206;h\032P\274\202\3644<\361]\\=\2336{\274\342q\377<\217\007C\275>\245r=\234\354\030<?[\036=\226\0066\271\000\002\353\274B\200\207\273M\274M=\027\337\207\275K\"\014<\020\354\334;\331\347\005<\\z1=i\230~\274\303A!<\365#A\273v\322!=P\274\220\273\t\342(=\r1\325\274\227\2553\275\020\331\014=r\224\331=\035\240g\274(q\036=aV9=N\026\010\275\334\300\325<\253\001\341\274\341f\365\274\267\242\273<\211\202\345\274\377/\022\275M+6\275\245\231\006\275\2044\301\275\255\200\323<\377\037v<g91=%\313\251\274\250\210\213\275J\002l\275\005x\354<\327S6\275\327\362\361\275\201\245D\274a\220\021:\034\355\232<\336&\335\274\210\300R\273\314J~\275l\024=\274F\333\025\275J\347e=\237\220\242\275\261q\325<\346\231\020<\336\006<<\347\007\007\275\347MG\275h\241\274\273U\235\361\2741\024\312\274r\302\341\274L1\234\275WU\310=,\034\375;v\355/=\322)\001\273\3751];\362a\344=f\016\235\274\244\277%:\207\312\017<\020\351\233=\322n\312\274\035\021\214\2755v2<\236\312\200<\177\232\276\274N@\257<\034`x\2747\261a\274\207\311~=`\232\217=43\262:H\374\222\274\232<v=\352x\274<\035\327\037=\224\212\352\274\367\302]<\273\003W\274"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/concat"
  op: "ConcatV2"
  input: "lstm_1/Const"
  input: "lstm_1/Const_1"
  input: "lstm_1/Const_2"
  input: "lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/read"
  op: "Identity"
  input: "lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/zeros_like"
  op: "ZerosLike"
  input: "concatenate_4/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Sum"
  op: "Sum"
  input: "lstm_1/zeros_like"
  input: "lstm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_1/Sum"
  input: "lstm_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile_1"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose"
  op: "Transpose"
  input: "concatenate_4/concat"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1/Shape"
  input: "lstm_1/strided_slice_12/stack"
  input: "lstm_1/strided_slice_12/stack_1"
  input: "lstm_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1/transpose"
  input: "lstm_1/strided_slice_13/stack"
  input: "lstm_1/strided_slice_13/stack_1"
  input: "lstm_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/ones_like/Shape"
  op: "Shape"
  input: "lstm_1/strided_slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/ones_like"
  op: "Fill"
  input: "lstm_1/ones_like/Shape"
  input: "lstm_1/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/ones_like_1/Shape"
  op: "Shape"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/ones_like_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/ones_like_1"
  op: "Fill"
  input: "lstm_1/ones_like_1/Shape"
  input: "lstm_1/ones_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/mul"
  op: "Mul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_1"
  op: "Mul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_2"
  op: "Mul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_3"
  op: "Mul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul"
  op: "MatMul"
  input: "lstm_1/mul"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1/mul_1"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1/mul_2"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1/mul_3"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/MatMul"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/mul_4"
  op: "Mul"
  input: "lstm_1/Tile"
  input: "lstm_1/ones_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_5"
  op: "Mul"
  input: "lstm_1/Tile"
  input: "lstm_1/ones_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_6"
  op: "Mul"
  input: "lstm_1/Tile"
  input: "lstm_1/ones_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_7"
  op: "Mul"
  input: "lstm_1/Tile"
  input: "lstm_1/ones_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1/mul_4"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add"
  op: "Add"
  input: "lstm_1/BiasAdd"
  input: "lstm_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_8"
  op: "Mul"
  input: "lstm_1/mul_8/x"
  input: "lstm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_1"
  op: "Add"
  input: "lstm_1/mul_8"
  input: "lstm_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/add_1"
  input: "lstm_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value"
  op: "Maximum"
  input: "lstm_1/clip_by_value/Minimum"
  input: "lstm_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1/mul_5"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2"
  op: "Add"
  input: "lstm_1/BiasAdd_1"
  input: "lstm_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_9"
  op: "Mul"
  input: "lstm_1/mul_9/x"
  input: "lstm_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_3"
  op: "Add"
  input: "lstm_1/mul_9"
  input: "lstm_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/add_3"
  input: "lstm_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/clip_by_value_1/Minimum"
  input: "lstm_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_10"
  op: "Mul"
  input: "lstm_1/clip_by_value_1"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1/mul_6"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4"
  op: "Add"
  input: "lstm_1/BiasAdd_2"
  input: "lstm_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh"
  op: "Tanh"
  input: "lstm_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_11"
  op: "Mul"
  input: "lstm_1/clip_by_value"
  input: "lstm_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_5"
  op: "Add"
  input: "lstm_1/mul_10"
  input: "lstm_1/mul_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1/mul_7"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6"
  op: "Add"
  input: "lstm_1/BiasAdd_3"
  input: "lstm_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_12"
  op: "Mul"
  input: "lstm_1/mul_12/x"
  input: "lstm_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_7"
  op: "Add"
  input: "lstm_1/mul_12"
  input: "lstm_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/add_7"
  input: "lstm_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/clip_by_value_2/Minimum"
  input: "lstm_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_13"
  op: "Mul"
  input: "lstm_1/clip_by_value_2"
  input: "lstm_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start"
  input: "lstm_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "lstm_1/transpose"
  input: "lstm_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "lstm_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/maximum_iterations"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 54
      }
    }
  }
}
node {
  name: "lstm_1/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter"
  op: "Enter"
  input: "lstm_1/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_4"
  op: "Enter"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge"
  op: "Merge"
  input: "lstm_1/while/Enter"
  input: "lstm_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1"
  input: "lstm_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1/while/Enter_2"
  input: "lstm_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1/while/Enter_3"
  input: "lstm_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_4"
  op: "Merge"
  input: "lstm_1/while/Enter_4"
  input: "lstm_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Less"
  op: "Less"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1/while/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Less_1"
  op: "Less"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/LogicalAnd"
  op: "LogicalAnd"
  input: "lstm_1/while/Less"
  input: "lstm_1/while/Less_1"
}
node {
  name: "lstm_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1/while/LogicalAnd"
}
node {
  name: "lstm_1/while/Switch"
  op: "Switch"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1/while/Merge_2"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1/while/Merge_3"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_4"
  op: "Switch"
  input: "lstm_1/while/Merge_4"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity"
  op: "Identity"
  input: "lstm_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_4"
  op: "Identity"
  input: "lstm_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add"
  op: "Add"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/mul"
  op: "Mul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul/Enter"
  op: "Enter"
  input: "lstm_1/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/mul_1"
  op: "Mul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_2"
  op: "Mul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_3"
  op: "Mul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1/while/mul"
  input: "lstm_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1/while/mul_1"
  input: "lstm_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1/while/mul_2"
  input: "lstm_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1/while/mul_3"
  input: "lstm_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul"
  input: "lstm_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_1"
  input: "lstm_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_2"
  input: "lstm_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_3"
  input: "lstm_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/mul_4"
  op: "Mul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/mul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_4/Enter"
  op: "Enter"
  input: "lstm_1/ones_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/mul_5"
  op: "Mul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/mul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_6"
  op: "Mul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/mul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_7"
  op: "Mul"
  input: "lstm_1/while/Identity_3"
  input: "lstm_1/while/mul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4"
  op: "MatMul"
  input: "lstm_1/while/mul_4"
  input: "lstm_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_1"
  op: "Add"
  input: "lstm_1/while/BiasAdd"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_8/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_8"
  op: "Mul"
  input: "lstm_1/while/mul_8/x"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_2/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_2"
  op: "Add"
  input: "lstm_1/while/mul_8"
  input: "lstm_1/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_2"
  input: "lstm_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "lstm_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5"
  op: "MatMul"
  input: "lstm_1/while/mul_5"
  input: "lstm_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_3"
  op: "Add"
  input: "lstm_1/while/BiasAdd_1"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_9/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_9"
  op: "Mul"
  input: "lstm_1/while/mul_9/x"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_4/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_4"
  op: "Add"
  input: "lstm_1/while/mul_9"
  input: "lstm_1/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_4"
  input: "lstm_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "lstm_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_10"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1"
  input: "lstm_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6"
  op: "MatMul"
  input: "lstm_1/while/mul_6"
  input: "lstm_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_5"
  op: "Add"
  input: "lstm_1/while/BiasAdd_2"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_11"
  op: "Mul"
  input: "lstm_1/while/clip_by_value"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_6"
  op: "Add"
  input: "lstm_1/while/mul_10"
  input: "lstm_1/while/mul_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7"
  op: "MatMul"
  input: "lstm_1/while/mul_7"
  input: "lstm_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_7"
  op: "Add"
  input: "lstm_1/while/BiasAdd_3"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_12/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_12"
  op: "Mul"
  input: "lstm_1/while/mul_12/x"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8"
  op: "Add"
  input: "lstm_1/while/mul_12"
  input: "lstm_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_4"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_5"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_8"
  input: "lstm_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "lstm_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_13"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/mul_13"
  input: "lstm_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_9/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_9"
  op: "Add"
  input: "lstm_1/while/Identity_1"
  input: "lstm_1/while/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1/while/add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1/while/mul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_4"
  op: "NextIteration"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit"
  op: "Exit"
  input: "lstm_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_4"
  op: "Exit"
  input: "lstm_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/TensorArrayStack/range"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "lstm_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/sub"
  op: "Sub"
  input: "lstm_1/while/Exit_1"
  input: "lstm_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/sub"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/truncated_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/truncated_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dense_1/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "dense_1/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2822247
    }
  }
}
node {
  name: "dense_1/truncated_normal/mul"
  op: "Mul"
  input: "dense_1/truncated_normal/TruncatedNormal"
  input: "dense_1/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/truncated_normal"
  op: "Add"
  input: "dense_1/truncated_normal/mul"
  input: "dense_1/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "lstm_1/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Relu"
  op: "Relu"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_1/Identity"
  op: "Identity"
  input: "dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/truncated_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "dense_2/truncated_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dense_2/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "dense_2/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3969828
    }
  }
}
node {
  name: "dense_2/truncated_normal/mul"
  op: "Mul"
  input: "dense_2/truncated_normal/TruncatedNormal"
  input: "dense_2/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/truncated_normal"
  op: "Add"
  input: "dense_2/truncated_normal/mul"
  input: "dense_2/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/kernel/Assign"
  op: "Assign"
  input: "dense_2/kernel"
  input: "dense_2/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/kernel/read"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/bias/Assign"
  op: "Assign"
  input: "dense_2/bias"
  input: "dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/bias/read"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Relu"
  op: "Relu"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_2/Identity"
  op: "Identity"
  input: "dense_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/truncated_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "dense_3/truncated_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_3/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dense_3/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "dense_3/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5695491
    }
  }
}
node {
  name: "dense_3/truncated_normal/mul"
  op: "Mul"
  input: "dense_3/truncated_normal/TruncatedNormal"
  input: "dense_3/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/truncated_normal"
  op: "Add"
  input: "dense_3/truncated_normal/mul"
  input: "dense_3/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_3/kernel/Assign"
  op: "Assign"
  input: "dense_3/kernel"
  input: "dense_3/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_3/kernel/read"
  op: "Identity"
  input: "dense_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
}
node {
  name: "dense_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_3/bias/Assign"
  op: "Assign"
  input: "dense_3/bias"
  input: "dense_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_3/bias/read"
  op: "Identity"
  input: "dense_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
}
node {
  name: "dense_3/MatMul"
  op: "MatMul"
  input: "dropout_2/Identity"
  input: "dense_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_3/BiasAdd"
  op: "BiasAdd"
  input: "dense_3/MatMul"
  input: "dense_3/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_3/Relu"
  op: "Relu"
  input: "dense_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_3/Identity"
  op: "Identity"
  input: "dense_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/truncated_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "dense_4/truncated_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_4/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dense_4/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "dense_4/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9732760
    }
  }
}
node {
  name: "dense_4/truncated_normal/mul"
  op: "Mul"
  input: "dense_4/truncated_normal/TruncatedNormal"
  input: "dense_4/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/truncated_normal"
  op: "Add"
  input: "dense_4/truncated_normal/mul"
  input: "dense_4/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_4/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_4/kernel/Assign"
  op: "Assign"
  input: "dense_4/kernel"
  input: "dense_4/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_4/kernel/read"
  op: "Identity"
  input: "dense_4/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
}
node {
  name: "dense_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_4/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_4/bias/Assign"
  op: "Assign"
  input: "dense_4/bias"
  input: "dense_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_4/bias/read"
  op: "Identity"
  input: "dense_4/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
}
node {
  name: "dense_4/MatMul"
  op: "MatMul"
  input: "dropout_3/Identity"
  input: "dense_4/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_4/BiasAdd"
  op: "BiasAdd"
  input: "dense_4/MatMul"
  input: "dense_4/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_4/Relu"
  op: "Relu"
  input: "dense_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout_4/Identity"
  op: "Identity"
  input: "dense_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "output/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07624928653240204
      }
    }
  }
}
node {
  name: "output/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07624928653240204
      }
    }
  }
}
node {
  name: "output/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "output/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5297659
    }
  }
}
node {
  name: "output/random_uniform/sub"
  op: "Sub"
  input: "output/random_uniform/max"
  input: "output/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/random_uniform/mul"
  op: "Mul"
  input: "output/random_uniform/RandomUniform"
  input: "output/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/random_uniform"
  op: "Add"
  input: "output/random_uniform/mul"
  input: "output/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "output/kernel/Assign"
  op: "Assign"
  input: "output/kernel"
  input: "output/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output/kernel/read"
  op: "Identity"
  input: "output/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel"
      }
    }
  }
}
node {
  name: "output/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "output/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "output/bias/Assign"
  op: "Assign"
  input: "output/bias"
  input: "output/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output/bias/read"
  op: "Identity"
  input: "output/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias"
      }
    }
  }
}
node {
  name: "output/MatMul"
  op: "MatMul"
  input: "dropout_4/Identity"
  input: "output/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "output/BiasAdd"
  op: "BiasAdd"
  input: "output/MatMul"
  input: "output/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "output/Softmax"
  op: "Softmax"
  input: "output/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "conv1d_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "conv1d_1/bias"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "conv1d_3/kernel"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "conv1d_3/bias"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "conv1d_5/kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "conv1d_5/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "conv1d_7/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "conv1d_7/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_8"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_8"
  op: "Assign"
  input: "conv1d_9/kernel"
  input: "Placeholder_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_9"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_9"
  op: "Assign"
  input: "conv1d_9/bias"
  input: "Placeholder_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_10"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_10"
  op: "Assign"
  input: "conv1d_11/kernel"
  input: "Placeholder_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_11"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_11"
  op: "Assign"
  input: "conv1d_11/bias"
  input: "Placeholder_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_12"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_12"
  op: "Assign"
  input: "conv1d_13/kernel"
  input: "Placeholder_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_13"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_13"
  op: "Assign"
  input: "conv1d_13/bias"
  input: "Placeholder_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_14"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_14"
  op: "Assign"
  input: "conv1d_15/kernel"
  input: "Placeholder_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_15"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_15"
  op: "Assign"
  input: "conv1d_15/bias"
  input: "Placeholder_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_16"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_16"
  op: "Assign"
  input: "conv1d_17/kernel"
  input: "Placeholder_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_17"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_17"
  op: "Assign"
  input: "conv1d_17/bias"
  input: "Placeholder_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_18"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_18"
  op: "Assign"
  input: "conv1d_19/kernel"
  input: "Placeholder_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_19"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_19"
  op: "Assign"
  input: "conv1d_19/bias"
  input: "Placeholder_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_20"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_20"
  op: "Assign"
  input: "conv1d_2/kernel"
  input: "Placeholder_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_21"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_21"
  op: "Assign"
  input: "conv1d_2/bias"
  input: "Placeholder_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_22"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_22"
  op: "Assign"
  input: "conv1d_4/kernel"
  input: "Placeholder_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_23"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_23"
  op: "Assign"
  input: "conv1d_4/bias"
  input: "Placeholder_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_24"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_24"
  op: "Assign"
  input: "conv1d_6/kernel"
  input: "Placeholder_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_25"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_25"
  op: "Assign"
  input: "conv1d_6/bias"
  input: "Placeholder_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_26"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_26"
  op: "Assign"
  input: "conv1d_8/kernel"
  input: "Placeholder_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_27"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_27"
  op: "Assign"
  input: "conv1d_8/bias"
  input: "Placeholder_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_28"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_28"
  op: "Assign"
  input: "conv1d_10/kernel"
  input: "Placeholder_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_29"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_29"
  op: "Assign"
  input: "conv1d_10/bias"
  input: "Placeholder_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_30"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_30"
  op: "Assign"
  input: "conv1d_12/kernel"
  input: "Placeholder_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_31"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_31"
  op: "Assign"
  input: "conv1d_12/bias"
  input: "Placeholder_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_32"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_32"
  op: "Assign"
  input: "conv1d_14/kernel"
  input: "Placeholder_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_33"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_33"
  op: "Assign"
  input: "conv1d_14/bias"
  input: "Placeholder_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_34"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_34"
  op: "Assign"
  input: "conv1d_16/kernel"
  input: "Placeholder_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_35"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_35"
  op: "Assign"
  input: "conv1d_16/bias"
  input: "Placeholder_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_36"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_36"
  op: "Assign"
  input: "conv1d_18/kernel"
  input: "Placeholder_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_37"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_37"
  op: "Assign"
  input: "conv1d_18/bias"
  input: "Placeholder_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_38"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_38"
  op: "Assign"
  input: "conv1d_20/kernel"
  input: "Placeholder_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_39"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_39"
  op: "Assign"
  input: "conv1d_20/bias"
  input: "Placeholder_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_40"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_40"
  op: "Assign"
  input: "conv1d_22/kernel"
  input: "Placeholder_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_41"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_41"
  op: "Assign"
  input: "conv1d_22/bias"
  input: "Placeholder_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_42"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_42"
  op: "Assign"
  input: "conv1d_23/kernel"
  input: "Placeholder_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_43"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_43"
  op: "Assign"
  input: "conv1d_23/bias"
  input: "Placeholder_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_44"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_44"
  op: "Assign"
  input: "conv1d_24/kernel"
  input: "Placeholder_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_45"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_45"
  op: "Assign"
  input: "conv1d_24/bias"
  input: "Placeholder_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_46"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_46"
  op: "Assign"
  input: "conv1d_21/kernel"
  input: "Placeholder_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_47"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_47"
  op: "Assign"
  input: "conv1d_21/bias"
  input: "Placeholder_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_48"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_48"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "Placeholder_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_49"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_49"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "Placeholder_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_50"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_50"
  op: "Assign"
  input: "lstm_1/bias"
  input: "Placeholder_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_51"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_51"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_52"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_52"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_53"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "Assign_53"
  op: "Assign"
  input: "dense_2/kernel"
  input: "Placeholder_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_54"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "Assign_54"
  op: "Assign"
  input: "dense_2/bias"
  input: "Placeholder_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_55"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_55"
  op: "Assign"
  input: "dense_3/kernel"
  input: "Placeholder_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_56"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_56"
  op: "Assign"
  input: "dense_3/bias"
  input: "Placeholder_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_57"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
}
node {
  name: "Assign_57"
  op: "Assign"
  input: "dense_4/kernel"
  input: "Placeholder_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_58"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
}
node {
  name: "Assign_58"
  op: "Assign"
  input: "dense_4/bias"
  input: "Placeholder_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_59"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 8
        }
      }
    }
  }
}
node {
  name: "Assign_59"
  op: "Assign"
  input: "output/kernel"
  input: "Placeholder_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_60"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
}
node {
  name: "Assign_60"
  op: "Assign"
  input: "output/bias"
  input: "Placeholder_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "conv1d_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv1d_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv1d_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv1d_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "conv1d_5/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "conv1d_5/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "conv1d_7/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "conv1d_7/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "conv1d_9/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "conv1d_9/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "conv1d_11/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "conv1d_11/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "conv1d_13/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "conv1d_13/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "conv1d_15/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "conv1d_15/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "conv1d_17/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "conv1d_17/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "conv1d_19/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "conv1d_19/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "conv1d_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "conv1d_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "conv1d_4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "conv1d_4/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "conv1d_6/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "conv1d_6/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "conv1d_8/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "conv1d_8/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "conv1d_10/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "conv1d_10/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "conv1d_12/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "conv1d_12/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "conv1d_14/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "conv1d_14/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "conv1d_16/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "conv1d_16/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "conv1d_18/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "conv1d_18/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "conv1d_20/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "conv1d_20/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "conv1d_22/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "conv1d_22/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "conv1d_23/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "conv1d_23/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "conv1d_24/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "conv1d_24/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "conv1d_21/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "conv1d_21/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "dense_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "dense_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "dense_4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "dense_4/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "output/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "output/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^conv1d_1/bias/Assign"
  input: "^conv1d_1/kernel/Assign"
  input: "^conv1d_10/bias/Assign"
  input: "^conv1d_10/kernel/Assign"
  input: "^conv1d_11/bias/Assign"
  input: "^conv1d_11/kernel/Assign"
  input: "^conv1d_12/bias/Assign"
  input: "^conv1d_12/kernel/Assign"
  input: "^conv1d_13/bias/Assign"
  input: "^conv1d_13/kernel/Assign"
  input: "^conv1d_14/bias/Assign"
  input: "^conv1d_14/kernel/Assign"
  input: "^conv1d_15/bias/Assign"
  input: "^conv1d_15/kernel/Assign"
  input: "^conv1d_16/bias/Assign"
  input: "^conv1d_16/kernel/Assign"
  input: "^conv1d_17/bias/Assign"
  input: "^conv1d_17/kernel/Assign"
  input: "^conv1d_18/bias/Assign"
  input: "^conv1d_18/kernel/Assign"
  input: "^conv1d_19/bias/Assign"
  input: "^conv1d_19/kernel/Assign"
  input: "^conv1d_2/bias/Assign"
  input: "^conv1d_2/kernel/Assign"
  input: "^conv1d_20/bias/Assign"
  input: "^conv1d_20/kernel/Assign"
  input: "^conv1d_21/bias/Assign"
  input: "^conv1d_21/kernel/Assign"
  input: "^conv1d_22/bias/Assign"
  input: "^conv1d_22/kernel/Assign"
  input: "^conv1d_23/bias/Assign"
  input: "^conv1d_23/kernel/Assign"
  input: "^conv1d_24/bias/Assign"
  input: "^conv1d_24/kernel/Assign"
  input: "^conv1d_3/bias/Assign"
  input: "^conv1d_3/kernel/Assign"
  input: "^conv1d_4/bias/Assign"
  input: "^conv1d_4/kernel/Assign"
  input: "^conv1d_5/bias/Assign"
  input: "^conv1d_5/kernel/Assign"
  input: "^conv1d_6/bias/Assign"
  input: "^conv1d_6/kernel/Assign"
  input: "^conv1d_7/bias/Assign"
  input: "^conv1d_7/kernel/Assign"
  input: "^conv1d_8/bias/Assign"
  input: "^conv1d_8/kernel/Assign"
  input: "^conv1d_9/bias/Assign"
  input: "^conv1d_9/kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_2/bias/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^dense_3/bias/Assign"
  input: "^dense_3/kernel/Assign"
  input: "^dense_4/bias/Assign"
  input: "^dense_4/kernel/Assign"
  input: "^lstm_1/bias/Assign"
  input: "^lstm_1/kernel/Assign"
  input: "^lstm_1/recurrent_kernel/Assign"
  input: "^output/bias/Assign"
  input: "^output/kernel/Assign"
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "output_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "output_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/output_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/output_loss/Sum"
  op: "Sum"
  input: "output/Softmax"
  input: "loss/output_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/output_loss/truediv"
  op: "RealDiv"
  input: "output/Softmax"
  input: "loss/output_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/output_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/output_loss/sub"
  op: "Sub"
  input: "loss/output_loss/sub/x"
  input: "loss/output_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/output_loss/truediv"
  input: "loss/output_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/clip_by_value"
  op: "Maximum"
  input: "loss/output_loss/clip_by_value/Minimum"
  input: "loss/output_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Log"
  op: "Log"
  input: "loss/output_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/mul"
  op: "Mul"
  input: "output_target"
  input: "loss/output_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/output_loss/Sum_1"
  op: "Sum"
  input: "loss/output_loss/mul"
  input: "loss/output_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/output_loss/Neg"
  op: "Neg"
  input: "loss/output_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/output_loss/Mean"
  op: "Mean"
  input: "loss/output_loss/Neg"
  input: "loss/output_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/output_loss/mul_1"
  op: "Mul"
  input: "loss/output_loss/Mean"
  input: "output_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/output_loss/NotEqual"
  op: "NotEqual"
  input: "output_sample_weights"
  input: "loss/output_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Cast"
  op: "Cast"
  input: "loss/output_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/output_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/output_loss/Mean_1"
  op: "Mean"
  input: "loss/output_loss/Cast"
  input: "loss/output_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/output_loss/truediv_1"
  op: "RealDiv"
  input: "loss/output_loss/mul_1"
  input: "loss/output_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/output_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/output_loss/Mean_2"
  op: "Mean"
  input: "loss/output_loss/truediv_1"
  input: "loss/output_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/output_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "output_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "output/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/output_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/output_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/output_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/output_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/truediv"
  input: "loss/output_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/RealDiv"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Sum"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/output_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Neg"
  input: "loss/output_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/RealDiv_1"
  input: "loss/output_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/output_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/mul"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/output_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "output_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/output_loss/mul_1_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Reshape"
  input: "output_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/mul_1_grad/Mul"
  input: "training/Adam/gradients/loss/output_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/mul_1_grad/Sum"
  input: "training/Adam/gradients/loss/output_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "loss/output_loss/Mean"
  input: "training/Adam/gradients/loss/output_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/loss/output_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/output_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/output_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/add"
  op: "Add"
  input: "loss/output_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/mul_1_grad/Reshape"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/output_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/output_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/output_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/output_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/output_loss/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_grad/Shape"
  op: "Shape"
  input: "output_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/output_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/output_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Tile"
  input: "loss/output_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/mul_grad/Mul"
  input: "training/Adam/gradients/loss/output_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/output_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "output_target"
  input: "training/Adam/gradients/loss/output_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/output_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/output_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/output_loss/clip_by_value"
  input: "^training/Adam/gradients/loss/output_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/output_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/output_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/output_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/output_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/output_loss/clip_by_value/Minimum"
  input: "loss/output_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/output_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/output_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/output_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/output_loss/truediv"
  input: "loss/output_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/Shape"
  op: "Shape"
  input: "output/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/output_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/output_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/Neg"
  op: "Neg"
  input: "output/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/Neg"
  input: "loss/output_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/RealDiv_1"
  input: "loss/output_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/output_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/Shape"
  op: "Shape"
  input: "output/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/add"
  op: "Add"
  input: "loss/output_loss/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/add"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Size"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/range"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/mod"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/output_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/output_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/output_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/output_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN"
  input: "output/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/output/Softmax_grad/mul"
  input: "training/Adam/gradients/output/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/output/Softmax_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output/Softmax_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/output/Softmax_grad/Sum"
  input: "training/Adam/gradients/output/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/output/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/output/Softmax_grad/sub"
  input: "output/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/output/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/output/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/output/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/output/Softmax_grad/mul_1"
  input: "output/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/output/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout_4/Identity"
  input: "training/Adam/gradients/output/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/output/MatMul_grad/MatMul"
  input: "dense_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_4/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_4/Relu_grad/ReluGrad"
  input: "dense_4/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_4/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout_3/Identity"
  input: "training/Adam/gradients/dense_4/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/dense_4/MatMul_grad/MatMul"
  input: "dense_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_3/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_3/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_3/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_3/Relu_grad/ReluGrad"
  input: "dense_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_3/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout_2/Identity"
  input: "training/Adam/gradients/dense_3/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/dense_3/MatMul_grad/MatMul"
  input: "dense_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_2/Relu_grad/ReluGrad"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout_1/Identity"
  input: "training/Adam/gradients/dense_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  input: "dense_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_1/Relu_grad/ReluGrad"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_1/TensorArrayReadV3"
  input: "training/Adam/gradients/dense_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
        s: "loc:@lstm_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_1/while/Exit_2"
  input: "^training/Adam/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
        s: "loc:@lstm_1/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/sub"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_4_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_4_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_1"
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_1"
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  op: "Pack"
  input: "lstm_1/Tile/multiples"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_1/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/Enter_4_grad/Exit"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_1"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/Enter"
  input: "lstm_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/Enter"
  input: "lstm_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_13_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_13"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_2"
  input: "training/Adam/gradients/lstm_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_13_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/add"
  op: "Add"
  input: "lstm_1/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_1/Sum_grad/add"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range"
  input: "training/Adam/gradients/lstm_1/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_8"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_4_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_4"
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_4"
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/Enter"
  input: "lstm_1/while/Identity_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/Enter"
  input: "lstm_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_10_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_10"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/Enter"
  input: "lstm_1/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/Enter"
  input: "lstm_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_11_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/Enter"
  input: "lstm_1/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_8_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_12_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_12"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_11_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_12_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/mul_10_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_1/while/mul_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/Enter"
  input: "lstm_1/while/mul_6"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_1/while/mul_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_4/Enter"
  input: "^lstm_1/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul/Enter"
  op: "Enter"
  input: "lstm_1/ones_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/Enter"
  input: "lstm_1/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/Enter"
  input: "lstm_1/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_9_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/Enter"
  input: "lstm_1/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_8_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/Enter"
  input: "lstm_1/while/mul_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_4/Enter"
  input: "^lstm_1/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul/Enter"
  input: "^lstm_1/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "lstm_1/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/Enter"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 224
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_9_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_8_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul/Enter"
  input: "^lstm_1/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 224
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/Enter"
  input: "lstm_1/while/mul_5"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/Enter"
  input: "lstm_1/while/mul_4"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/Enter"
  input: "lstm_1/while/mul_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_4/Enter"
  input: "^lstm_1/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/Enter"
  input: "lstm_1/while/mul"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_4/Enter"
  input: "^lstm_1/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul/Enter"
  input: "^lstm_1/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 224
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul/Enter"
  input: "^lstm_1/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 224
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/mul_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray_1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_1"
        s: "loc:@lstm_1/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_1"
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_1/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_4/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_4/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_4/concat_grad/mod"
  op: "FloorMod"
  input: "concatenate_4/concat/axis"
  input: "training/Adam/gradients/concatenate_4/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_4/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_4/concat_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_22/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_4/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_4/concat_grad/ShapeN"
  op: "ShapeN"
  input: "max_pooling1d_22/Squeeze"
  input: "max_pooling1d_23/Squeeze"
  input: "max_pooling1d_24/Squeeze"
  input: "max_pooling1d_21/Squeeze"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_4/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_4/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "training/Adam/gradients/concatenate_4/concat_grad/mod"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ShapeN"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ShapeN:1"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ShapeN:2"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ShapeN:3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_4/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_4/concat_grad/Slice"
  op: "Slice"
  input: "training/Adam/gradients/lstm_1/transpose_grad/transpose"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ConcatOffset"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_4/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_4/concat_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/lstm_1/transpose_grad/transpose"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ConcatOffset:1"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_4/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_4/concat_grad/Slice_2"
  op: "Slice"
  input: "training/Adam/gradients/lstm_1/transpose_grad/transpose"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ConcatOffset:2"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ShapeN:2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_4/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_4/concat_grad/Slice_3"
  op: "Slice"
  input: "training/Adam/gradients/lstm_1/transpose_grad/transpose"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ConcatOffset:3"
  input: "training/Adam/gradients/concatenate_4/concat_grad/ShapeN:3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_4/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_22/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_22/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_22/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_22/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_4/concat_grad/Slice"
  input: "training/Adam/gradients/max_pooling1d_22/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_22/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_23/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_23/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_23/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_23/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_4/concat_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_23/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_23/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_24/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_24/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_24/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_24/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_4/concat_grad/Slice_2"
  input: "training/Adam/gradients/max_pooling1d_24/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_24/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_21/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_21/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_21/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_21/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_4/concat_grad/Slice_3"
  input: "training/Adam/gradients/max_pooling1d_21/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_21/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_22/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_22/ExpandDims"
  input: "max_pooling1d_22/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_22/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_22/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_23/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_23/ExpandDims"
  input: "max_pooling1d_23/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_23/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_23/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_24/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_24/ExpandDims"
  input: "max_pooling1d_24/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_24/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_24/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_21/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_21/ExpandDims"
  input: "max_pooling1d_21/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_21/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_21/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_22/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_22/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_22/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_22/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_22/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_22/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_22/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_23/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_23/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_23/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_23/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_23/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_23/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_23/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_24/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_24/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_24/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_24/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_24/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_24/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_24/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_21/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_21/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_21/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_21/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_21/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_21/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_21/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_22/ExpandDims_grad/Reshape"
  input: "conv1d_22/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_23/ExpandDims_grad/Reshape"
  input: "conv1d_23/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_24/ExpandDims_grad/Reshape"
  input: "conv1d_24/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_21/ExpandDims_grad/Reshape"
  input: "conv1d_21/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/add_grad/Shape"
  op: "Shape"
  input: "conv1d_22/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_22/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_22/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_22/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_22/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_22/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_22/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_22/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_22/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_22/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_22/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/add_grad/Shape"
  op: "Shape"
  input: "conv1d_23/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_23/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_23/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_23/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_23/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_23/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_23/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_23/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_23/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_23/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_23/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/add_grad/Shape"
  op: "Shape"
  input: "conv1d_24/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_24/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_24/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_24/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_24/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_24/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_24/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_24/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_24/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_24/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_24/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/add_grad/Shape"
  op: "Shape"
  input: "conv1d_21/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_21/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_21/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_21/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_21/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_21/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_21/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_21/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_21/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_21/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_21/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_22/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_22/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_22/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_22/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_22/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_23/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_23/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_23/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_23/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_23/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_24/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_24/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_24/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_24/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_24/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_21/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_21/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_21/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_21/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_21/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_22/convolution/ExpandDims"
  input: "conv1d_22/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_22/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_22/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_22/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_22/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_22/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_22/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_23/convolution/ExpandDims"
  input: "conv1d_23/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_23/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_23/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_23/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_23/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_23/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_23/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_24/convolution/ExpandDims"
  input: "conv1d_24/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_24/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_24/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_24/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_24/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_24/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_24/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_21/convolution/ExpandDims"
  input: "conv1d_21/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_21/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_21/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_21/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_21/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_21/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_21/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "concatenate_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_22/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_22/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_22/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_22/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_22/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "concatenate_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_23/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_23/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_23/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_23/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_23/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "concatenate_3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_24/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_24/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_24/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_24/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_24/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_20/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_21/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_21/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_21/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_21/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_21/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_1/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_1/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_1/concat_grad/mod"
  op: "FloorMod"
  input: "concatenate_1/concat/axis"
  input: "training/Adam/gradients/concatenate_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_1/concat_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_2/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "max_pooling1d_2/Squeeze"
  input: "max_pooling1d_4/Squeeze"
  input: "max_pooling1d_6/Squeeze"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "training/Adam/gradients/concatenate_1/concat_grad/mod"
  input: "training/Adam/gradients/concatenate_1/concat_grad/ShapeN"
  input: "training/Adam/gradients/concatenate_1/concat_grad/ShapeN:1"
  input: "training/Adam/gradients/concatenate_1/concat_grad/ShapeN:2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_1/concat_grad/Slice"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_22/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/concatenate_1/concat_grad/ConcatOffset"
  input: "training/Adam/gradients/concatenate_1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_1/concat_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_22/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/concatenate_1/concat_grad/ConcatOffset:1"
  input: "training/Adam/gradients/concatenate_1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_1/concat_grad/Slice_2"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_22/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/concatenate_1/concat_grad/ConcatOffset:2"
  input: "training/Adam/gradients/concatenate_1/concat_grad/ShapeN:2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_1/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_2/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_2/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_2/concat_grad/mod"
  op: "FloorMod"
  input: "concatenate_2/concat/axis"
  input: "training/Adam/gradients/concatenate_2/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_2/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_2/concat_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_8/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_2/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_2/concat_grad/ShapeN"
  op: "ShapeN"
  input: "max_pooling1d_8/Squeeze"
  input: "max_pooling1d_10/Squeeze"
  input: "max_pooling1d_12/Squeeze"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_2/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_2/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "training/Adam/gradients/concatenate_2/concat_grad/mod"
  input: "training/Adam/gradients/concatenate_2/concat_grad/ShapeN"
  input: "training/Adam/gradients/concatenate_2/concat_grad/ShapeN:1"
  input: "training/Adam/gradients/concatenate_2/concat_grad/ShapeN:2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_2/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_2/concat_grad/Slice"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_23/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/concatenate_2/concat_grad/ConcatOffset"
  input: "training/Adam/gradients/concatenate_2/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_2/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_2/concat_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_23/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/concatenate_2/concat_grad/ConcatOffset:1"
  input: "training/Adam/gradients/concatenate_2/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_2/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_2/concat_grad/Slice_2"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_23/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/concatenate_2/concat_grad/ConcatOffset:2"
  input: "training/Adam/gradients/concatenate_2/concat_grad/ShapeN:2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_2/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_3/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_3/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_3/concat_grad/mod"
  op: "FloorMod"
  input: "concatenate_3/concat/axis"
  input: "training/Adam/gradients/concatenate_3/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_3/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_3/concat_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_14/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_3/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_3/concat_grad/ShapeN"
  op: "ShapeN"
  input: "max_pooling1d_14/Squeeze"
  input: "max_pooling1d_16/Squeeze"
  input: "max_pooling1d_18/Squeeze"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_3/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_3/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "training/Adam/gradients/concatenate_3/concat_grad/mod"
  input: "training/Adam/gradients/concatenate_3/concat_grad/ShapeN"
  input: "training/Adam/gradients/concatenate_3/concat_grad/ShapeN:1"
  input: "training/Adam/gradients/concatenate_3/concat_grad/ShapeN:2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_3/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_3/concat_grad/Slice"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_24/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/concatenate_3/concat_grad/ConcatOffset"
  input: "training/Adam/gradients/concatenate_3/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_3/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_3/concat_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_24/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/concatenate_3/concat_grad/ConcatOffset:1"
  input: "training/Adam/gradients/concatenate_3/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_3/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/concatenate_3/concat_grad/Slice_2"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_24/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/concatenate_3/concat_grad/ConcatOffset:2"
  input: "training/Adam/gradients/concatenate_3/concat_grad/ShapeN:2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@concatenate_3/concat"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_20/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_20/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_20/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_20/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_21/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/max_pooling1d_20/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_20/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_1/concat_grad/Slice"
  input: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_4/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_4/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_4/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_4/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_1/concat_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_4/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_4/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_6/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_6/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_6/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_6/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_1/concat_grad/Slice_2"
  input: "training/Adam/gradients/max_pooling1d_6/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_6/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_8/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_8/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_8/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_8/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_2/concat_grad/Slice"
  input: "training/Adam/gradients/max_pooling1d_8/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_8/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_10/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_10/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_10/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_10/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_2/concat_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_10/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_10/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_12/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_12/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_12/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_12/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_2/concat_grad/Slice_2"
  input: "training/Adam/gradients/max_pooling1d_12/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_12/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_14/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_14/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_14/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_14/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_3/concat_grad/Slice"
  input: "training/Adam/gradients/max_pooling1d_14/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_14/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_16/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_16/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_16/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_16/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_3/concat_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_16/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_16/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_18/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_18/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_18/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_18/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/concatenate_3/concat_grad/Slice_2"
  input: "training/Adam/gradients/max_pooling1d_18/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_18/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_20/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_20/ExpandDims"
  input: "max_pooling1d_20/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_20/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_20/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_2/ExpandDims"
  input: "max_pooling1d_2/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_4/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_4/ExpandDims"
  input: "max_pooling1d_4/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_4/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_4/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_6/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_6/ExpandDims"
  input: "max_pooling1d_6/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_6/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_6/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_8/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_8/ExpandDims"
  input: "max_pooling1d_8/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_8/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_8/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_10/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_10/ExpandDims"
  input: "max_pooling1d_10/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_10/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_10/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_12/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_12/ExpandDims"
  input: "max_pooling1d_12/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_12/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_12/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_14/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_14/ExpandDims"
  input: "max_pooling1d_14/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_14/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_14/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_16/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_16/ExpandDims"
  input: "max_pooling1d_16/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_16/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_16/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_18/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_18/ExpandDims"
  input: "max_pooling1d_18/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_18/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_18/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_20/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_20/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_20/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_20/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_20/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_20/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_20/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_2/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_4/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_4/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_4/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_4/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_4/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_4/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_6/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_6/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_6/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_6/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_6/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_6/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_8/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_8/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_8/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_8/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_8/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_8/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_10/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_10/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_10/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_10/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_10/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_10/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_10/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_12/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_12/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_12/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_12/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_12/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_12/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_12/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_14/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_14/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_14/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_14/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_14/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_14/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_14/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_16/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_16/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_16/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_16/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_16/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_16/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_16/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_18/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_18/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_18/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_18/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_18/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_18/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_18/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_20/ExpandDims_grad/Reshape"
  input: "conv1d_20/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Reshape"
  input: "conv1d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_4/ExpandDims_grad/Reshape"
  input: "conv1d_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_6/ExpandDims_grad/Reshape"
  input: "conv1d_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_8/ExpandDims_grad/Reshape"
  input: "conv1d_8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_10/ExpandDims_grad/Reshape"
  input: "conv1d_10/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_12/ExpandDims_grad/Reshape"
  input: "conv1d_12/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_14/ExpandDims_grad/Reshape"
  input: "conv1d_14/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_16/ExpandDims_grad/Reshape"
  input: "conv1d_16/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_18/ExpandDims_grad/Reshape"
  input: "conv1d_18/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/add_grad/Shape"
  op: "Shape"
  input: "conv1d_20/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_20/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_20/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_20/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_20/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_20/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_20/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_20/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_20/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_20/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_20/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  op: "Shape"
  input: "conv1d_2/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  op: "Shape"
  input: "conv1d_4/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/add_grad/Shape"
  op: "Shape"
  input: "conv1d_6/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_6/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_6/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_6/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_6/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_6/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_6/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_6/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_6/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_6/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_6/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/add_grad/Shape"
  op: "Shape"
  input: "conv1d_8/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_8/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_8/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_8/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_8/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_8/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_8/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_8/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_8/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_8/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_8/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/add_grad/Shape"
  op: "Shape"
  input: "conv1d_10/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_10/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_10/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_10/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_10/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_10/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_10/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_10/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_10/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_10/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_10/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/add_grad/Shape"
  op: "Shape"
  input: "conv1d_12/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_12/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_12/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_12/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_12/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_12/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_12/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_12/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_12/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_12/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_12/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/add_grad/Shape"
  op: "Shape"
  input: "conv1d_14/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_14/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_14/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_14/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_14/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_14/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_14/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_14/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_14/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_14/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_14/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/add_grad/Shape"
  op: "Shape"
  input: "conv1d_16/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_16/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_16/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_16/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_16/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_16/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_16/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_16/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_16/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_16/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_16/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/add_grad/Shape"
  op: "Shape"
  input: "conv1d_18/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_18/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_18/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_18/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_18/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_18/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_18/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_18/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_18/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_18/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_18/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_20/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_20/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_20/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_20/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_20/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_2/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_4/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_6/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_6/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_6/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_6/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_6/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_8/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_8/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_8/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_8/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_8/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_10/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_10/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_10/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_10/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_10/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_12/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_12/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_12/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_12/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_12/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_14/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_14/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_14/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_14/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_14/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_16/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_16/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_16/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_16/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_16/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_18/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_18/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_18/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_18/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_18/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_20/convolution/ExpandDims"
  input: "conv1d_20/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_20/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_20/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_20/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_20/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_20/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_20/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_2/convolution/ExpandDims"
  input: "conv1d_2/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_2/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_2/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_4/convolution/ExpandDims"
  input: "conv1d_4/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_4/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_4/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_6/convolution/ExpandDims"
  input: "conv1d_6/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_6/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_6/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_6/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_6/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_6/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_6/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_8/convolution/ExpandDims"
  input: "conv1d_8/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_8/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_8/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_8/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_8/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_8/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_8/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_10/convolution/ExpandDims"
  input: "conv1d_10/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_10/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_10/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_10/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_10/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_10/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_10/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_12/convolution/ExpandDims"
  input: "conv1d_12/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_12/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_12/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_12/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_12/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_12/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_12/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_14/convolution/ExpandDims"
  input: "conv1d_14/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_14/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_14/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_14/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_14/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_14/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_14/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_16/convolution/ExpandDims"
  input: "conv1d_16/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_16/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_16/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_16/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_16/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_16/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_16/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_18/convolution/ExpandDims"
  input: "conv1d_18/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_18/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_18/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_18/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_18/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_18/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_18/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_19/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_20/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_20/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_20/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_20/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_20/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_1/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_3/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_5/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_6/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_6/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_6/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_6/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_6/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_7/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_8/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_8/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_8/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_8/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_8/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_9/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_10/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_10/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_10/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_10/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_10/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_11/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_12/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_12/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_12/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_12/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_12/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_13/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_14/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_14/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_14/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_14/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_14/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_15/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_16/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_16/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_16/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_16/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_16/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_17/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_18/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_18/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_18/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_18/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_18/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_19/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_19/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_19/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_19/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_20/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/max_pooling1d_19/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_19/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_1/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_5/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_5/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_5/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_5/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_6/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/max_pooling1d_5/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_5/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_7/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_7/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_7/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_7/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_8/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/max_pooling1d_7/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_7/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_9/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_9/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_9/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_9/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_10/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/max_pooling1d_9/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_9/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_11/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_11/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_11/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_11/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_12/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/max_pooling1d_11/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_11/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_13/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_13/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_13/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_13/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_14/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/max_pooling1d_13/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_13/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_15/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_15/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_15/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_15/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_16/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/max_pooling1d_15/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_15/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_17/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_17/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_17/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_17/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_18/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/max_pooling1d_17/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_17/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_19/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_19/ExpandDims"
  input: "max_pooling1d_19/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_19/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_19/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_1/ExpandDims"
  input: "max_pooling1d_1/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_3/ExpandDims"
  input: "max_pooling1d_3/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_5/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_5/ExpandDims"
  input: "max_pooling1d_5/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_5/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_5/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_7/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_7/ExpandDims"
  input: "max_pooling1d_7/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_7/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_7/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_9/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_9/ExpandDims"
  input: "max_pooling1d_9/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_9/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_9/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_11/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_11/ExpandDims"
  input: "max_pooling1d_11/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_11/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_11/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_13/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_13/ExpandDims"
  input: "max_pooling1d_13/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_13/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_13/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_15/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_15/ExpandDims"
  input: "max_pooling1d_15/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_15/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_15/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_17/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_17/ExpandDims"
  input: "max_pooling1d_17/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_17/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_17/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_19/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_19/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_19/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_19/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_19/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_19/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_19/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_1/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_3/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_5/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_5/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_5/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_5/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_5/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_5/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_7/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_7/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_7/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_7/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_7/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_7/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_9/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_9/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_9/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_9/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_9/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_9/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_11/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_11/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_11/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_11/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_11/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_11/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_11/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_13/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_13/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_13/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_13/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_13/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_13/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_13/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_15/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_15/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_15/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_15/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_15/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_15/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_15/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_17/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_17/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_17/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_17/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_17/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_17/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_17/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_19/ExpandDims_grad/Reshape"
  input: "conv1d_19/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Reshape"
  input: "conv1d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Reshape"
  input: "conv1d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_5/ExpandDims_grad/Reshape"
  input: "conv1d_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_7/ExpandDims_grad/Reshape"
  input: "conv1d_7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_9/ExpandDims_grad/Reshape"
  input: "conv1d_9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_11/ExpandDims_grad/Reshape"
  input: "conv1d_11/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_13/ExpandDims_grad/Reshape"
  input: "conv1d_13/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_15/ExpandDims_grad/Reshape"
  input: "conv1d_15/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_17/ExpandDims_grad/Reshape"
  input: "conv1d_17/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/add_grad/Shape"
  op: "Shape"
  input: "conv1d_19/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_19/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_19/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_19/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_19/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_19/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_19/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_19/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_19/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_19/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_19/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  op: "Shape"
  input: "conv1d_1/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  op: "Shape"
  input: "conv1d_3/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/add_grad/Shape"
  op: "Shape"
  input: "conv1d_5/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_5/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_5/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_5/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_5/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_5/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_5/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_5/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_5/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_5/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_5/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/add_grad/Shape"
  op: "Shape"
  input: "conv1d_7/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_7/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_7/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_7/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_7/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_7/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_7/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_7/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_7/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_7/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_7/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/add_grad/Shape"
  op: "Shape"
  input: "conv1d_9/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_9/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_9/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_9/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_9/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_9/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_9/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_9/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_9/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_9/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_9/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/add_grad/Shape"
  op: "Shape"
  input: "conv1d_11/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_11/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_11/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_11/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_11/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_11/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_11/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_11/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_11/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_11/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_11/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/add_grad/Shape"
  op: "Shape"
  input: "conv1d_13/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_13/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_13/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_13/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_13/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_13/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_13/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_13/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_13/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_13/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_13/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/add_grad/Shape"
  op: "Shape"
  input: "conv1d_15/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_15/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_15/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_15/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_15/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_15/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_15/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_15/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_15/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_15/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_15/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/add_grad/Shape"
  op: "Shape"
  input: "conv1d_17/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_17/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_17/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_17/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_17/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_17/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_17/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_17/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_17/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_17/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_17/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_19/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_19/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_19/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_19/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_19/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_1/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_3/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_5/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_5/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_5/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_5/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_5/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_7/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_7/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_7/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_7/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_7/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_9/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_9/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_9/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_9/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_9/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_11/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_11/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_11/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_11/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_11/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_13/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_13/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_13/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_13/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_13/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_15/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_15/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_15/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_15/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_15/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_17/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_17/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_17/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_17/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_17/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_19/convolution/ExpandDims"
  input: "conv1d_19/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_19/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_19/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_19/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_19/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_19/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_19/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_1/convolution/ExpandDims"
  input: "conv1d_1/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_1/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_1/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_3/convolution/ExpandDims"
  input: "conv1d_3/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_3/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_3/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_5/convolution/ExpandDims"
  input: "conv1d_5/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_5/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_5/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_5/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_5/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_5/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_5/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_7/convolution/ExpandDims"
  input: "conv1d_7/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_7/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_7/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_7/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_7/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_7/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_7/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_9/convolution/ExpandDims"
  input: "conv1d_9/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_9/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_9/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_9/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_9/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_9/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_9/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_11/convolution/ExpandDims"
  input: "conv1d_11/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_11/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_11/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_11/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_11/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_11/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_11/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_13/convolution/ExpandDims"
  input: "conv1d_13/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_13/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_13/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_13/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_13/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_13/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_13/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_15/convolution/ExpandDims"
  input: "conv1d_15/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_15/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_15/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_15/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_15/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_15/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_15/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_17/convolution/ExpandDims"
  input: "conv1d_17/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_17/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_17/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_17/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_17/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_17/convolution/Conv2D_grad/ShapeN:1"
  input: "training/Adam/gradients/conv1d_17/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_19/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_19/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_19/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_5/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_5/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_5/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_7/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_7/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_7/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_9/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_9/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_9/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_11/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_11/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_11/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_13/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_13/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_13/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_15/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_15/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_15/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_17/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_17/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_17/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor"
  input: "training/Adam/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_21/Assign"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21/read"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22"
  op: "Fill"
  input: "training/Adam/zeros_22/shape_as_tensor"
  input: "training/Adam/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_22"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_22/Assign"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/zeros_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_22/read"
  op: "Identity"
  input: "training/Adam/Variable_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_23"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_23/Assign"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/zeros_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_23/read"
  op: "Identity"
  input: "training/Adam/Variable_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24"
  op: "Fill"
  input: "training/Adam/zeros_24/shape_as_tensor"
  input: "training/Adam/zeros_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_24"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_24/Assign"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/zeros_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_24/read"
  op: "Identity"
  input: "training/Adam/Variable_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_25"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_25/Assign"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/zeros_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_25/read"
  op: "Identity"
  input: "training/Adam/Variable_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26"
  op: "Fill"
  input: "training/Adam/zeros_26/shape_as_tensor"
  input: "training/Adam/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_26"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_26/Assign"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/zeros_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_26/read"
  op: "Identity"
  input: "training/Adam/Variable_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_27"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_27/Assign"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/zeros_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_27/read"
  op: "Identity"
  input: "training/Adam/Variable_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28"
  op: "Fill"
  input: "training/Adam/zeros_28/shape_as_tensor"
  input: "training/Adam/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_28"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_28/Assign"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/zeros_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_28/read"
  op: "Identity"
  input: "training/Adam/Variable_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_29"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_29/Assign"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/zeros_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_29/read"
  op: "Identity"
  input: "training/Adam/Variable_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30"
  op: "Fill"
  input: "training/Adam/zeros_30/shape_as_tensor"
  input: "training/Adam/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_30"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_30/Assign"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/zeros_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_30/read"
  op: "Identity"
  input: "training/Adam/Variable_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_31"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_31/Assign"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/zeros_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_31/read"
  op: "Identity"
  input: "training/Adam/Variable_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32"
  op: "Fill"
  input: "training/Adam/zeros_32/shape_as_tensor"
  input: "training/Adam/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_32"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_32/Assign"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/zeros_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_32/read"
  op: "Identity"
  input: "training/Adam/Variable_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_33"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_33/Assign"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/zeros_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_33/read"
  op: "Identity"
  input: "training/Adam/Variable_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34"
  op: "Fill"
  input: "training/Adam/zeros_34/shape_as_tensor"
  input: "training/Adam/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_34"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_34/Assign"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/zeros_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_34/read"
  op: "Identity"
  input: "training/Adam/Variable_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_35"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_35/Assign"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/zeros_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_35/read"
  op: "Identity"
  input: "training/Adam/Variable_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36"
  op: "Fill"
  input: "training/Adam/zeros_36/shape_as_tensor"
  input: "training/Adam/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_36"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_36/Assign"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/zeros_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_36/read"
  op: "Identity"
  input: "training/Adam/Variable_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_37"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_37/Assign"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/zeros_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_37/read"
  op: "Identity"
  input: "training/Adam/Variable_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38"
  op: "Fill"
  input: "training/Adam/zeros_38/shape_as_tensor"
  input: "training/Adam/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_38"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_38/Assign"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/zeros_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_38/read"
  op: "Identity"
  input: "training/Adam/Variable_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_39"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_39"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_39/Assign"
  op: "Assign"
  input: "training/Adam/Variable_39"
  input: "training/Adam/zeros_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_39/read"
  op: "Identity"
  input: "training/Adam/Variable_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40"
  op: "Fill"
  input: "training/Adam/zeros_40/shape_as_tensor"
  input: "training/Adam/zeros_40/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_40"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_40/Assign"
  op: "Assign"
  input: "training/Adam/Variable_40"
  input: "training/Adam/zeros_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_40/read"
  op: "Identity"
  input: "training/Adam/Variable_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_41"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_41"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_41/Assign"
  op: "Assign"
  input: "training/Adam/Variable_41"
  input: "training/Adam/zeros_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_41/read"
  op: "Identity"
  input: "training/Adam/Variable_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42"
  op: "Fill"
  input: "training/Adam/zeros_42/shape_as_tensor"
  input: "training/Adam/zeros_42/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_42"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_42/Assign"
  op: "Assign"
  input: "training/Adam/Variable_42"
  input: "training/Adam/zeros_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_42/read"
  op: "Identity"
  input: "training/Adam/Variable_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_43"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_43"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_43/Assign"
  op: "Assign"
  input: "training/Adam/Variable_43"
  input: "training/Adam/zeros_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_43/read"
  op: "Identity"
  input: "training/Adam/Variable_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44"
  op: "Fill"
  input: "training/Adam/zeros_44/shape_as_tensor"
  input: "training/Adam/zeros_44/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_44"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_44/Assign"
  op: "Assign"
  input: "training/Adam/Variable_44"
  input: "training/Adam/zeros_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_44/read"
  op: "Identity"
  input: "training/Adam/Variable_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_45"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_45"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_45/Assign"
  op: "Assign"
  input: "training/Adam/Variable_45"
  input: "training/Adam/zeros_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_45/read"
  op: "Identity"
  input: "training/Adam/Variable_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46"
  op: "Fill"
  input: "training/Adam/zeros_46/shape_as_tensor"
  input: "training/Adam/zeros_46/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_46"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_46/Assign"
  op: "Assign"
  input: "training/Adam/Variable_46"
  input: "training/Adam/zeros_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_46/read"
  op: "Identity"
  input: "training/Adam/Variable_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_47"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_47"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_47/Assign"
  op: "Assign"
  input: "training/Adam/Variable_47"
  input: "training/Adam/zeros_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_47/read"
  op: "Identity"
  input: "training/Adam/Variable_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48"
  op: "Fill"
  input: "training/Adam/zeros_48/shape_as_tensor"
  input: "training/Adam/zeros_48/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_48"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_48/Assign"
  op: "Assign"
  input: "training/Adam/Variable_48"
  input: "training/Adam/zeros_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_48/read"
  op: "Identity"
  input: "training/Adam/Variable_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49"
  op: "Fill"
  input: "training/Adam/zeros_49/shape_as_tensor"
  input: "training/Adam/zeros_49/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_49"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_49/Assign"
  op: "Assign"
  input: "training/Adam/Variable_49"
  input: "training/Adam/zeros_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_49/read"
  op: "Identity"
  input: "training/Adam/Variable_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_50"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_50"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_50/Assign"
  op: "Assign"
  input: "training/Adam/Variable_50"
  input: "training/Adam/zeros_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_50/read"
  op: "Identity"
  input: "training/Adam/Variable_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51"
  op: "Fill"
  input: "training/Adam/zeros_51/shape_as_tensor"
  input: "training/Adam/zeros_51/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_51"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_51/Assign"
  op: "Assign"
  input: "training/Adam/Variable_51"
  input: "training/Adam/zeros_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_51/read"
  op: "Identity"
  input: "training/Adam/Variable_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_52"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_52"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_52/Assign"
  op: "Assign"
  input: "training/Adam/Variable_52"
  input: "training/Adam/zeros_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_52/read"
  op: "Identity"
  input: "training/Adam/Variable_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53"
  op: "Fill"
  input: "training/Adam/zeros_53/shape_as_tensor"
  input: "training/Adam/zeros_53/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_53"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_53/Assign"
  op: "Assign"
  input: "training/Adam/Variable_53"
  input: "training/Adam/zeros_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_53/read"
  op: "Identity"
  input: "training/Adam/Variable_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_54"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_54"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_54/Assign"
  op: "Assign"
  input: "training/Adam/Variable_54"
  input: "training/Adam/zeros_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_54/read"
  op: "Identity"
  input: "training/Adam/Variable_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55"
  op: "Fill"
  input: "training/Adam/zeros_55/shape_as_tensor"
  input: "training/Adam/zeros_55/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_55"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_55/Assign"
  op: "Assign"
  input: "training/Adam/Variable_55"
  input: "training/Adam/zeros_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_55/read"
  op: "Identity"
  input: "training/Adam/Variable_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_56"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_56"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_56/Assign"
  op: "Assign"
  input: "training/Adam/Variable_56"
  input: "training/Adam/zeros_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_56/read"
  op: "Identity"
  input: "training/Adam/Variable_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57"
  op: "Fill"
  input: "training/Adam/zeros_57/shape_as_tensor"
  input: "training/Adam/zeros_57/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_57"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_57/Assign"
  op: "Assign"
  input: "training/Adam/Variable_57"
  input: "training/Adam/zeros_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_57/read"
  op: "Identity"
  input: "training/Adam/Variable_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58"
  op: "Fill"
  input: "training/Adam/zeros_58/shape_as_tensor"
  input: "training/Adam/zeros_58/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_58"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_58/Assign"
  op: "Assign"
  input: "training/Adam/Variable_58"
  input: "training/Adam/zeros_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_58/read"
  op: "Identity"
  input: "training/Adam/Variable_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59"
  op: "Fill"
  input: "training/Adam/zeros_59/shape_as_tensor"
  input: "training/Adam/zeros_59/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_59"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_59/Assign"
  op: "Assign"
  input: "training/Adam/Variable_59"
  input: "training/Adam/zeros_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_59/read"
  op: "Identity"
  input: "training/Adam/Variable_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_60"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_60"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_60/Assign"
  op: "Assign"
  input: "training/Adam/Variable_60"
  input: "training/Adam/zeros_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_60/read"
  op: "Identity"
  input: "training/Adam/Variable_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_61"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_61"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_61/Assign"
  op: "Assign"
  input: "training/Adam/Variable_61"
  input: "training/Adam/zeros_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_61/read"
  op: "Identity"
  input: "training/Adam/Variable_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_62"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_62"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_62/Assign"
  op: "Assign"
  input: "training/Adam/Variable_62"
  input: "training/Adam/zeros_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_62/read"
  op: "Identity"
  input: "training/Adam/Variable_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_63"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_63"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_63/Assign"
  op: "Assign"
  input: "training/Adam/Variable_63"
  input: "training/Adam/zeros_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_63"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_63/read"
  op: "Identity"
  input: "training/Adam/Variable_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_63"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_64"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_64"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_64/Assign"
  op: "Assign"
  input: "training/Adam/Variable_64"
  input: "training/Adam/zeros_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_64"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_64/read"
  op: "Identity"
  input: "training/Adam/Variable_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_64"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_65"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_65"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_65/Assign"
  op: "Assign"
  input: "training/Adam/Variable_65"
  input: "training/Adam/zeros_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_65"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_65/read"
  op: "Identity"
  input: "training/Adam/Variable_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_65"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_66"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_66"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_66/Assign"
  op: "Assign"
  input: "training/Adam/Variable_66"
  input: "training/Adam/zeros_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_66"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_66/read"
  op: "Identity"
  input: "training/Adam/Variable_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_66"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_67"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_67"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_67/Assign"
  op: "Assign"
  input: "training/Adam/Variable_67"
  input: "training/Adam/zeros_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_67"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_67/read"
  op: "Identity"
  input: "training/Adam/Variable_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_67"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_68"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_68"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_68/Assign"
  op: "Assign"
  input: "training/Adam/Variable_68"
  input: "training/Adam/zeros_68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_68"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_68/read"
  op: "Identity"
  input: "training/Adam/Variable_68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_68"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_69"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_69"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_69/Assign"
  op: "Assign"
  input: "training/Adam/Variable_69"
  input: "training/Adam/zeros_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_69"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_69/read"
  op: "Identity"
  input: "training/Adam/Variable_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_69"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_70"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_70"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_70/Assign"
  op: "Assign"
  input: "training/Adam/Variable_70"
  input: "training/Adam/zeros_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_70"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_70/read"
  op: "Identity"
  input: "training/Adam/Variable_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_70"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_71"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_71"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_71/Assign"
  op: "Assign"
  input: "training/Adam/Variable_71"
  input: "training/Adam/zeros_71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_71"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_71/read"
  op: "Identity"
  input: "training/Adam/Variable_71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_71"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_72"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_72"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_72/Assign"
  op: "Assign"
  input: "training/Adam/Variable_72"
  input: "training/Adam/zeros_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_72"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_72/read"
  op: "Identity"
  input: "training/Adam/Variable_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_72"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_73"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_73"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_73/Assign"
  op: "Assign"
  input: "training/Adam/Variable_73"
  input: "training/Adam/zeros_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_73"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_73/read"
  op: "Identity"
  input: "training/Adam/Variable_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_73"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_74"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_74"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_74/Assign"
  op: "Assign"
  input: "training/Adam/Variable_74"
  input: "training/Adam/zeros_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_74"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_74/read"
  op: "Identity"
  input: "training/Adam/Variable_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_74"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_75"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_75"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_75/Assign"
  op: "Assign"
  input: "training/Adam/Variable_75"
  input: "training/Adam/zeros_75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_75"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_75/read"
  op: "Identity"
  input: "training/Adam/Variable_75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_75"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_76"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_76"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_76/Assign"
  op: "Assign"
  input: "training/Adam/Variable_76"
  input: "training/Adam/zeros_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_76"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_76/read"
  op: "Identity"
  input: "training/Adam/Variable_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_76"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_77"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_77"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_77/Assign"
  op: "Assign"
  input: "training/Adam/Variable_77"
  input: "training/Adam/zeros_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_77"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_77/read"
  op: "Identity"
  input: "training/Adam/Variable_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_77"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_78"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_78"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_78/Assign"
  op: "Assign"
  input: "training/Adam/Variable_78"
  input: "training/Adam/zeros_78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_78"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_78/read"
  op: "Identity"
  input: "training/Adam/Variable_78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_78"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_79"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_79"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_79/Assign"
  op: "Assign"
  input: "training/Adam/Variable_79"
  input: "training/Adam/zeros_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_79"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_79/read"
  op: "Identity"
  input: "training/Adam/Variable_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_79"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_80"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_80"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_80/Assign"
  op: "Assign"
  input: "training/Adam/Variable_80"
  input: "training/Adam/zeros_80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_80"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_80/read"
  op: "Identity"
  input: "training/Adam/Variable_80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_80"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_81/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_81/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_81"
  op: "Fill"
  input: "training/Adam/zeros_81/shape_as_tensor"
  input: "training/Adam/zeros_81/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_81"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_81/Assign"
  op: "Assign"
  input: "training/Adam/Variable_81"
  input: "training/Adam/zeros_81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_81"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_81/read"
  op: "Identity"
  input: "training/Adam/Variable_81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_81"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_82"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_82"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_82/Assign"
  op: "Assign"
  input: "training/Adam/Variable_82"
  input: "training/Adam/zeros_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_82"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_82/read"
  op: "Identity"
  input: "training/Adam/Variable_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_82"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_83/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_83/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_83"
  op: "Fill"
  input: "training/Adam/zeros_83/shape_as_tensor"
  input: "training/Adam/zeros_83/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_83"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_83/Assign"
  op: "Assign"
  input: "training/Adam/Variable_83"
  input: "training/Adam/zeros_83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_83"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_83/read"
  op: "Identity"
  input: "training/Adam/Variable_83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_83"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_84"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_84"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_84/Assign"
  op: "Assign"
  input: "training/Adam/Variable_84"
  input: "training/Adam/zeros_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_84"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_84/read"
  op: "Identity"
  input: "training/Adam/Variable_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_84"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_85/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_85/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_85"
  op: "Fill"
  input: "training/Adam/zeros_85/shape_as_tensor"
  input: "training/Adam/zeros_85/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_85"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_85/Assign"
  op: "Assign"
  input: "training/Adam/Variable_85"
  input: "training/Adam/zeros_85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_85"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_85/read"
  op: "Identity"
  input: "training/Adam/Variable_85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_85"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_86"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_86"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_86/Assign"
  op: "Assign"
  input: "training/Adam/Variable_86"
  input: "training/Adam/zeros_86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_86"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_86/read"
  op: "Identity"
  input: "training/Adam/Variable_86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_86"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_87/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_87/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_87"
  op: "Fill"
  input: "training/Adam/zeros_87/shape_as_tensor"
  input: "training/Adam/zeros_87/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_87"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_87/Assign"
  op: "Assign"
  input: "training/Adam/Variable_87"
  input: "training/Adam/zeros_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_87"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_87/read"
  op: "Identity"
  input: "training/Adam/Variable_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_87"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_88"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_88"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_88/Assign"
  op: "Assign"
  input: "training/Adam/Variable_88"
  input: "training/Adam/zeros_88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_88"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_88/read"
  op: "Identity"
  input: "training/Adam/Variable_88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_88"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_89/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_89/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_89"
  op: "Fill"
  input: "training/Adam/zeros_89/shape_as_tensor"
  input: "training/Adam/zeros_89/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_89"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_89/Assign"
  op: "Assign"
  input: "training/Adam/Variable_89"
  input: "training/Adam/zeros_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_89"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_89/read"
  op: "Identity"
  input: "training/Adam/Variable_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_89"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_90"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_90"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_90/Assign"
  op: "Assign"
  input: "training/Adam/Variable_90"
  input: "training/Adam/zeros_90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_90"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_90/read"
  op: "Identity"
  input: "training/Adam/Variable_90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_90"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_91/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_91/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_91"
  op: "Fill"
  input: "training/Adam/zeros_91/shape_as_tensor"
  input: "training/Adam/zeros_91/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_91"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_91/Assign"
  op: "Assign"
  input: "training/Adam/Variable_91"
  input: "training/Adam/zeros_91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_91"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_91/read"
  op: "Identity"
  input: "training/Adam/Variable_91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_91"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_92"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_92"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_92/Assign"
  op: "Assign"
  input: "training/Adam/Variable_92"
  input: "training/Adam/zeros_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_92"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_92/read"
  op: "Identity"
  input: "training/Adam/Variable_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_92"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_93/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_93/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_93"
  op: "Fill"
  input: "training/Adam/zeros_93/shape_as_tensor"
  input: "training/Adam/zeros_93/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_93"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_93/Assign"
  op: "Assign"
  input: "training/Adam/Variable_93"
  input: "training/Adam/zeros_93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_93"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_93/read"
  op: "Identity"
  input: "training/Adam/Variable_93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_93"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_94"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_94"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_94/Assign"
  op: "Assign"
  input: "training/Adam/Variable_94"
  input: "training/Adam/zeros_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_94"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_94/read"
  op: "Identity"
  input: "training/Adam/Variable_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_94"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_95/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_95/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_95"
  op: "Fill"
  input: "training/Adam/zeros_95/shape_as_tensor"
  input: "training/Adam/zeros_95/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_95"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_95/Assign"
  op: "Assign"
  input: "training/Adam/Variable_95"
  input: "training/Adam/zeros_95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_95"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_95/read"
  op: "Identity"
  input: "training/Adam/Variable_95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_95"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_96"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_96"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_96/Assign"
  op: "Assign"
  input: "training/Adam/Variable_96"
  input: "training/Adam/zeros_96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_96"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_96/read"
  op: "Identity"
  input: "training/Adam/Variable_96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_96"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_97/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_97/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_97"
  op: "Fill"
  input: "training/Adam/zeros_97/shape_as_tensor"
  input: "training/Adam/zeros_97/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_97"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_97/Assign"
  op: "Assign"
  input: "training/Adam/Variable_97"
  input: "training/Adam/zeros_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_97"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_97/read"
  op: "Identity"
  input: "training/Adam/Variable_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_97"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_98"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_98"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_98/Assign"
  op: "Assign"
  input: "training/Adam/Variable_98"
  input: "training/Adam/zeros_98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_98"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_98/read"
  op: "Identity"
  input: "training/Adam/Variable_98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_98"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_99/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_99/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_99"
  op: "Fill"
  input: "training/Adam/zeros_99/shape_as_tensor"
  input: "training/Adam/zeros_99/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_99"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_99/Assign"
  op: "Assign"
  input: "training/Adam/Variable_99"
  input: "training/Adam/zeros_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_99"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_99/read"
  op: "Identity"
  input: "training/Adam/Variable_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_99"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_100"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_100"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_100/Assign"
  op: "Assign"
  input: "training/Adam/Variable_100"
  input: "training/Adam/zeros_100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_100"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_100/read"
  op: "Identity"
  input: "training/Adam/Variable_100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_100"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_101/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_101/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_101"
  op: "Fill"
  input: "training/Adam/zeros_101/shape_as_tensor"
  input: "training/Adam/zeros_101/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_101"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_101/Assign"
  op: "Assign"
  input: "training/Adam/Variable_101"
  input: "training/Adam/zeros_101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_101"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_101/read"
  op: "Identity"
  input: "training/Adam/Variable_101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_101"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_102"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_102"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_102/Assign"
  op: "Assign"
  input: "training/Adam/Variable_102"
  input: "training/Adam/zeros_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_102"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_102/read"
  op: "Identity"
  input: "training/Adam/Variable_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_102"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_103/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_103/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_103"
  op: "Fill"
  input: "training/Adam/zeros_103/shape_as_tensor"
  input: "training/Adam/zeros_103/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_103"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_103/Assign"
  op: "Assign"
  input: "training/Adam/Variable_103"
  input: "training/Adam/zeros_103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_103"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_103/read"
  op: "Identity"
  input: "training/Adam/Variable_103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_103"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_104"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_104"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_104/Assign"
  op: "Assign"
  input: "training/Adam/Variable_104"
  input: "training/Adam/zeros_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_104"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_104/read"
  op: "Identity"
  input: "training/Adam/Variable_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_104"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_105/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\001\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_105/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_105"
  op: "Fill"
  input: "training/Adam/zeros_105/shape_as_tensor"
  input: "training/Adam/zeros_105/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_105"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_105/Assign"
  op: "Assign"
  input: "training/Adam/Variable_105"
  input: "training/Adam/zeros_105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_105"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_105/read"
  op: "Identity"
  input: "training/Adam/Variable_105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_105"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_106"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_106"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_106/Assign"
  op: "Assign"
  input: "training/Adam/Variable_106"
  input: "training/Adam/zeros_106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_106"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_106/read"
  op: "Identity"
  input: "training/Adam/Variable_106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_106"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_107/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_107/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_107"
  op: "Fill"
  input: "training/Adam/zeros_107/shape_as_tensor"
  input: "training/Adam/zeros_107/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_107"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_107/Assign"
  op: "Assign"
  input: "training/Adam/Variable_107"
  input: "training/Adam/zeros_107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_107"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_107/read"
  op: "Identity"
  input: "training/Adam/Variable_107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_107"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_108"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_108"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_108/Assign"
  op: "Assign"
  input: "training/Adam/Variable_108"
  input: "training/Adam/zeros_108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_108"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_108/read"
  op: "Identity"
  input: "training/Adam/Variable_108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_108"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_109/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\340\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_109/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_109"
  op: "Fill"
  input: "training/Adam/zeros_109/shape_as_tensor"
  input: "training/Adam/zeros_109/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_109"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_109/Assign"
  op: "Assign"
  input: "training/Adam/Variable_109"
  input: "training/Adam/zeros_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_109"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_109/read"
  op: "Identity"
  input: "training/Adam/Variable_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_109"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_110/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_110/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_110"
  op: "Fill"
  input: "training/Adam/zeros_110/shape_as_tensor"
  input: "training/Adam/zeros_110/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_110"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_110/Assign"
  op: "Assign"
  input: "training/Adam/Variable_110"
  input: "training/Adam/zeros_110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_110"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_110/read"
  op: "Identity"
  input: "training/Adam/Variable_110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_110"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_111"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_111"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_111/Assign"
  op: "Assign"
  input: "training/Adam/Variable_111"
  input: "training/Adam/zeros_111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_111"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_111/read"
  op: "Identity"
  input: "training/Adam/Variable_111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_111"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_112/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_112/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_112"
  op: "Fill"
  input: "training/Adam/zeros_112/shape_as_tensor"
  input: "training/Adam/zeros_112/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_112"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_112/Assign"
  op: "Assign"
  input: "training/Adam/Variable_112"
  input: "training/Adam/zeros_112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_112"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_112/read"
  op: "Identity"
  input: "training/Adam/Variable_112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_112"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_113"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_113"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_113/Assign"
  op: "Assign"
  input: "training/Adam/Variable_113"
  input: "training/Adam/zeros_113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_113"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_113/read"
  op: "Identity"
  input: "training/Adam/Variable_113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_113"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_114/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_114/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_114"
  op: "Fill"
  input: "training/Adam/zeros_114/shape_as_tensor"
  input: "training/Adam/zeros_114/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_114"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_114/Assign"
  op: "Assign"
  input: "training/Adam/Variable_114"
  input: "training/Adam/zeros_114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_114"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_114/read"
  op: "Identity"
  input: "training/Adam/Variable_114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_114"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_115"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_115"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_115/Assign"
  op: "Assign"
  input: "training/Adam/Variable_115"
  input: "training/Adam/zeros_115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_115"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_115/read"
  op: "Identity"
  input: "training/Adam/Variable_115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_115"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_116/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_116/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_116"
  op: "Fill"
  input: "training/Adam/zeros_116/shape_as_tensor"
  input: "training/Adam/zeros_116/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_116"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_116/Assign"
  op: "Assign"
  input: "training/Adam/Variable_116"
  input: "training/Adam/zeros_116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_116"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_116/read"
  op: "Identity"
  input: "training/Adam/Variable_116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_116"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_117"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_117"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_117/Assign"
  op: "Assign"
  input: "training/Adam/Variable_117"
  input: "training/Adam/zeros_117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_117"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_117/read"
  op: "Identity"
  input: "training/Adam/Variable_117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_117"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_118/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_118/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_118"
  op: "Fill"
  input: "training/Adam/zeros_118/shape_as_tensor"
  input: "training/Adam/zeros_118/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_118"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_118/Assign"
  op: "Assign"
  input: "training/Adam/Variable_118"
  input: "training/Adam/zeros_118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_118"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_118/read"
  op: "Identity"
  input: "training/Adam/Variable_118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_118"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_119/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "training/Adam/zeros_119/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_119"
  op: "Fill"
  input: "training/Adam/zeros_119/shape_as_tensor"
  input: "training/Adam/zeros_119/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_119"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_119/Assign"
  op: "Assign"
  input: "training/Adam/Variable_119"
  input: "training/Adam/zeros_119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_119"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_119/read"
  op: "Identity"
  input: "training/Adam/Variable_119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_119"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_120/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_120/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_120"
  op: "Fill"
  input: "training/Adam/zeros_120/shape_as_tensor"
  input: "training/Adam/zeros_120/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_120"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_120/Assign"
  op: "Assign"
  input: "training/Adam/Variable_120"
  input: "training/Adam/zeros_120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_120"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_120/read"
  op: "Identity"
  input: "training/Adam/Variable_120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_120"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_121"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Variable_121"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_121/Assign"
  op: "Assign"
  input: "training/Adam/Variable_121"
  input: "training/Adam/zeros_121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_121"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_121/read"
  op: "Identity"
  input: "training/Adam/Variable_121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_121"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_122/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_122/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_122"
  op: "Fill"
  input: "training/Adam/zeros_122/shape_as_tensor"
  input: "training/Adam/zeros_122/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_122"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_122/Assign"
  op: "Assign"
  input: "training/Adam/Variable_122"
  input: "training/Adam/zeros_122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_122"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_122/read"
  op: "Identity"
  input: "training/Adam/Variable_122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_122"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_123/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_123/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_123"
  op: "Fill"
  input: "training/Adam/zeros_123/shape_as_tensor"
  input: "training/Adam/zeros_123/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_123"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_123/Assign"
  op: "Assign"
  input: "training/Adam/Variable_123"
  input: "training/Adam/zeros_123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_123"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_123/read"
  op: "Identity"
  input: "training/Adam/Variable_123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_123"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_124/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_124/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_124"
  op: "Fill"
  input: "training/Adam/zeros_124/shape_as_tensor"
  input: "training/Adam/zeros_124/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_124"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_124/Assign"
  op: "Assign"
  input: "training/Adam/Variable_124"
  input: "training/Adam/zeros_124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_124"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_124/read"
  op: "Identity"
  input: "training/Adam/Variable_124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_124"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_125/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_125/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_125"
  op: "Fill"
  input: "training/Adam/zeros_125/shape_as_tensor"
  input: "training/Adam/zeros_125/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_125"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_125/Assign"
  op: "Assign"
  input: "training/Adam/Variable_125"
  input: "training/Adam/zeros_125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_125"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_125/read"
  op: "Identity"
  input: "training/Adam/Variable_125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_125"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_126/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_126/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_126"
  op: "Fill"
  input: "training/Adam/zeros_126/shape_as_tensor"
  input: "training/Adam/zeros_126/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_126"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_126/Assign"
  op: "Assign"
  input: "training/Adam/Variable_126"
  input: "training/Adam/zeros_126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_126"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_126/read"
  op: "Identity"
  input: "training/Adam/Variable_126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_126"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_127/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_127/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_127"
  op: "Fill"
  input: "training/Adam/zeros_127/shape_as_tensor"
  input: "training/Adam/zeros_127/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_127"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_127/Assign"
  op: "Assign"
  input: "training/Adam/Variable_127"
  input: "training/Adam/zeros_127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_127"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_127/read"
  op: "Identity"
  input: "training/Adam/Variable_127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_127"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_128/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_128/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_128"
  op: "Fill"
  input: "training/Adam/zeros_128/shape_as_tensor"
  input: "training/Adam/zeros_128/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_128"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_128/Assign"
  op: "Assign"
  input: "training/Adam/Variable_128"
  input: "training/Adam/zeros_128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_128"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_128/read"
  op: "Identity"
  input: "training/Adam/Variable_128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_128"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_129/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_129/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_129"
  op: "Fill"
  input: "training/Adam/zeros_129/shape_as_tensor"
  input: "training/Adam/zeros_129/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_129"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_129/Assign"
  op: "Assign"
  input: "training/Adam/Variable_129"
  input: "training/Adam/zeros_129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_129"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_129/read"
  op: "Identity"
  input: "training/Adam/Variable_129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_129"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_130/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_130/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_130"
  op: "Fill"
  input: "training/Adam/zeros_130/shape_as_tensor"
  input: "training/Adam/zeros_130/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_130"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_130/Assign"
  op: "Assign"
  input: "training/Adam/Variable_130"
  input: "training/Adam/zeros_130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_130"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_130/read"
  op: "Identity"
  input: "training/Adam/Variable_130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_130"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_131/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_131/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_131"
  op: "Fill"
  input: "training/Adam/zeros_131/shape_as_tensor"
  input: "training/Adam/zeros_131/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_131"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_131/Assign"
  op: "Assign"
  input: "training/Adam/Variable_131"
  input: "training/Adam/zeros_131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_131"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_131/read"
  op: "Identity"
  input: "training/Adam/Variable_131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_131"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_132/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_132/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_132"
  op: "Fill"
  input: "training/Adam/zeros_132/shape_as_tensor"
  input: "training/Adam/zeros_132/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_132"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_132/Assign"
  op: "Assign"
  input: "training/Adam/Variable_132"
  input: "training/Adam/zeros_132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_132"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_132/read"
  op: "Identity"
  input: "training/Adam/Variable_132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_132"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_133/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_133/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_133"
  op: "Fill"
  input: "training/Adam/zeros_133/shape_as_tensor"
  input: "training/Adam/zeros_133/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_133"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_133/Assign"
  op: "Assign"
  input: "training/Adam/Variable_133"
  input: "training/Adam/zeros_133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_133"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_133/read"
  op: "Identity"
  input: "training/Adam/Variable_133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_133"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_134/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_134/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_134"
  op: "Fill"
  input: "training/Adam/zeros_134/shape_as_tensor"
  input: "training/Adam/zeros_134/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_134"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_134/Assign"
  op: "Assign"
  input: "training/Adam/Variable_134"
  input: "training/Adam/zeros_134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_134"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_134/read"
  op: "Identity"
  input: "training/Adam/Variable_134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_134"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_135/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_135/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_135"
  op: "Fill"
  input: "training/Adam/zeros_135/shape_as_tensor"
  input: "training/Adam/zeros_135/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_135"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_135/Assign"
  op: "Assign"
  input: "training/Adam/Variable_135"
  input: "training/Adam/zeros_135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_135"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_135/read"
  op: "Identity"
  input: "training/Adam/Variable_135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_135"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_136/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_136/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_136"
  op: "Fill"
  input: "training/Adam/zeros_136/shape_as_tensor"
  input: "training/Adam/zeros_136/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_136"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_136/Assign"
  op: "Assign"
  input: "training/Adam/Variable_136"
  input: "training/Adam/zeros_136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_136"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_136/read"
  op: "Identity"
  input: "training/Adam/Variable_136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_136"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_137/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_137/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_137"
  op: "Fill"
  input: "training/Adam/zeros_137/shape_as_tensor"
  input: "training/Adam/zeros_137/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_137"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_137/Assign"
  op: "Assign"
  input: "training/Adam/Variable_137"
  input: "training/Adam/zeros_137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_137"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_137/read"
  op: "Identity"
  input: "training/Adam/Variable_137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_137"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_138/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_138/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_138"
  op: "Fill"
  input: "training/Adam/zeros_138/shape_as_tensor"
  input: "training/Adam/zeros_138/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_138"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_138/Assign"
  op: "Assign"
  input: "training/Adam/Variable_138"
  input: "training/Adam/zeros_138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_138"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_138/read"
  op: "Identity"
  input: "training/Adam/Variable_138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_138"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_139/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_139/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_139"
  op: "Fill"
  input: "training/Adam/zeros_139/shape_as_tensor"
  input: "training/Adam/zeros_139/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_139"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_139/Assign"
  op: "Assign"
  input: "training/Adam/Variable_139"
  input: "training/Adam/zeros_139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_139"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_139/read"
  op: "Identity"
  input: "training/Adam/Variable_139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_139"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_140/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_140/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_140"
  op: "Fill"
  input: "training/Adam/zeros_140/shape_as_tensor"
  input: "training/Adam/zeros_140/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_140"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_140/Assign"
  op: "Assign"
  input: "training/Adam/Variable_140"
  input: "training/Adam/zeros_140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_140"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_140/read"
  op: "Identity"
  input: "training/Adam/Variable_140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_140"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_141/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_141/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_141"
  op: "Fill"
  input: "training/Adam/zeros_141/shape_as_tensor"
  input: "training/Adam/zeros_141/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_141"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_141/Assign"
  op: "Assign"
  input: "training/Adam/Variable_141"
  input: "training/Adam/zeros_141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_141"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_141/read"
  op: "Identity"
  input: "training/Adam/Variable_141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_141"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_142/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_142/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_142"
  op: "Fill"
  input: "training/Adam/zeros_142/shape_as_tensor"
  input: "training/Adam/zeros_142/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_142"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_142/Assign"
  op: "Assign"
  input: "training/Adam/Variable_142"
  input: "training/Adam/zeros_142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_142"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_142/read"
  op: "Identity"
  input: "training/Adam/Variable_142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_142"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_143/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_143/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_143"
  op: "Fill"
  input: "training/Adam/zeros_143/shape_as_tensor"
  input: "training/Adam/zeros_143/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_143"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_143/Assign"
  op: "Assign"
  input: "training/Adam/Variable_143"
  input: "training/Adam/zeros_143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_143"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_143/read"
  op: "Identity"
  input: "training/Adam/Variable_143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_143"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_144/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_144/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_144"
  op: "Fill"
  input: "training/Adam/zeros_144/shape_as_tensor"
  input: "training/Adam/zeros_144/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_144"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_144/Assign"
  op: "Assign"
  input: "training/Adam/Variable_144"
  input: "training/Adam/zeros_144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_144"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_144/read"
  op: "Identity"
  input: "training/Adam/Variable_144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_144"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_145/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_145/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_145"
  op: "Fill"
  input: "training/Adam/zeros_145/shape_as_tensor"
  input: "training/Adam/zeros_145/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_145"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_145/Assign"
  op: "Assign"
  input: "training/Adam/Variable_145"
  input: "training/Adam/zeros_145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_145"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_145/read"
  op: "Identity"
  input: "training/Adam/Variable_145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_145"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_146/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_146/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_146"
  op: "Fill"
  input: "training/Adam/zeros_146/shape_as_tensor"
  input: "training/Adam/zeros_146/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_146"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_146/Assign"
  op: "Assign"
  input: "training/Adam/Variable_146"
  input: "training/Adam/zeros_146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_146"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_146/read"
  op: "Identity"
  input: "training/Adam/Variable_146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_146"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_147/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_147/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_147"
  op: "Fill"
  input: "training/Adam/zeros_147/shape_as_tensor"
  input: "training/Adam/zeros_147/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_147"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_147/Assign"
  op: "Assign"
  input: "training/Adam/Variable_147"
  input: "training/Adam/zeros_147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_147"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_147/read"
  op: "Identity"
  input: "training/Adam/Variable_147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_147"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_148/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_148/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_148"
  op: "Fill"
  input: "training/Adam/zeros_148/shape_as_tensor"
  input: "training/Adam/zeros_148/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_148"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_148/Assign"
  op: "Assign"
  input: "training/Adam/Variable_148"
  input: "training/Adam/zeros_148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_148"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_148/read"
  op: "Identity"
  input: "training/Adam/Variable_148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_148"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_149/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_149/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_149"
  op: "Fill"
  input: "training/Adam/zeros_149/shape_as_tensor"
  input: "training/Adam/zeros_149/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_149"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_149/Assign"
  op: "Assign"
  input: "training/Adam/Variable_149"
  input: "training/Adam/zeros_149"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_149"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_149/read"
  op: "Identity"
  input: "training/Adam/Variable_149"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_149"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_150/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_150/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_150"
  op: "Fill"
  input: "training/Adam/zeros_150/shape_as_tensor"
  input: "training/Adam/zeros_150/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_150"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_150/Assign"
  op: "Assign"
  input: "training/Adam/Variable_150"
  input: "training/Adam/zeros_150"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_150"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_150/read"
  op: "Identity"
  input: "training/Adam/Variable_150"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_150"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_151/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_151/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_151"
  op: "Fill"
  input: "training/Adam/zeros_151/shape_as_tensor"
  input: "training/Adam/zeros_151/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_151"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_151/Assign"
  op: "Assign"
  input: "training/Adam/Variable_151"
  input: "training/Adam/zeros_151"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_151"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_151/read"
  op: "Identity"
  input: "training/Adam/Variable_151"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_151"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_152/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_152/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_152"
  op: "Fill"
  input: "training/Adam/zeros_152/shape_as_tensor"
  input: "training/Adam/zeros_152/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_152"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_152/Assign"
  op: "Assign"
  input: "training/Adam/Variable_152"
  input: "training/Adam/zeros_152"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_152"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_152/read"
  op: "Identity"
  input: "training/Adam/Variable_152"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_152"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_153/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_153/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_153"
  op: "Fill"
  input: "training/Adam/zeros_153/shape_as_tensor"
  input: "training/Adam/zeros_153/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_153"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_153/Assign"
  op: "Assign"
  input: "training/Adam/Variable_153"
  input: "training/Adam/zeros_153"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_153"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_153/read"
  op: "Identity"
  input: "training/Adam/Variable_153"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_153"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_154/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_154/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_154"
  op: "Fill"
  input: "training/Adam/zeros_154/shape_as_tensor"
  input: "training/Adam/zeros_154/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_154"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_154/Assign"
  op: "Assign"
  input: "training/Adam/Variable_154"
  input: "training/Adam/zeros_154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_154"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_154/read"
  op: "Identity"
  input: "training/Adam/Variable_154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_154"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_155/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_155/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_155"
  op: "Fill"
  input: "training/Adam/zeros_155/shape_as_tensor"
  input: "training/Adam/zeros_155/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_155"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_155/Assign"
  op: "Assign"
  input: "training/Adam/Variable_155"
  input: "training/Adam/zeros_155"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_155"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_155/read"
  op: "Identity"
  input: "training/Adam/Variable_155"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_155"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_156/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_156/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_156"
  op: "Fill"
  input: "training/Adam/zeros_156/shape_as_tensor"
  input: "training/Adam/zeros_156/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_156"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_156/Assign"
  op: "Assign"
  input: "training/Adam/Variable_156"
  input: "training/Adam/zeros_156"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_156"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_156/read"
  op: "Identity"
  input: "training/Adam/Variable_156"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_156"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_157/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_157/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_157"
  op: "Fill"
  input: "training/Adam/zeros_157/shape_as_tensor"
  input: "training/Adam/zeros_157/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_157"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_157/Assign"
  op: "Assign"
  input: "training/Adam/Variable_157"
  input: "training/Adam/zeros_157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_157"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_157/read"
  op: "Identity"
  input: "training/Adam/Variable_157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_157"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_158/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_158/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_158"
  op: "Fill"
  input: "training/Adam/zeros_158/shape_as_tensor"
  input: "training/Adam/zeros_158/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_158"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_158/Assign"
  op: "Assign"
  input: "training/Adam/Variable_158"
  input: "training/Adam/zeros_158"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_158"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_158/read"
  op: "Identity"
  input: "training/Adam/Variable_158"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_158"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_159/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_159/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_159"
  op: "Fill"
  input: "training/Adam/zeros_159/shape_as_tensor"
  input: "training/Adam/zeros_159/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_159"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_159/Assign"
  op: "Assign"
  input: "training/Adam/Variable_159"
  input: "training/Adam/zeros_159"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_159"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_159/read"
  op: "Identity"
  input: "training/Adam/Variable_159"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_159"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_160/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_160/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_160"
  op: "Fill"
  input: "training/Adam/zeros_160/shape_as_tensor"
  input: "training/Adam/zeros_160/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_160"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_160/Assign"
  op: "Assign"
  input: "training/Adam/Variable_160"
  input: "training/Adam/zeros_160"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_160"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_160/read"
  op: "Identity"
  input: "training/Adam/Variable_160"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_160"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_161/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_161/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_161"
  op: "Fill"
  input: "training/Adam/zeros_161/shape_as_tensor"
  input: "training/Adam/zeros_161/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_161"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_161/Assign"
  op: "Assign"
  input: "training/Adam/Variable_161"
  input: "training/Adam/zeros_161"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_161"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_161/read"
  op: "Identity"
  input: "training/Adam/Variable_161"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_161"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_162/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_162/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_162"
  op: "Fill"
  input: "training/Adam/zeros_162/shape_as_tensor"
  input: "training/Adam/zeros_162/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_162"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_162/Assign"
  op: "Assign"
  input: "training/Adam/Variable_162"
  input: "training/Adam/zeros_162"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_162"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_162/read"
  op: "Identity"
  input: "training/Adam/Variable_162"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_162"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_163/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_163/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_163"
  op: "Fill"
  input: "training/Adam/zeros_163/shape_as_tensor"
  input: "training/Adam/zeros_163/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_163"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_163/Assign"
  op: "Assign"
  input: "training/Adam/Variable_163"
  input: "training/Adam/zeros_163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_163"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_163/read"
  op: "Identity"
  input: "training/Adam/Variable_163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_163"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_164/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_164/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_164"
  op: "Fill"
  input: "training/Adam/zeros_164/shape_as_tensor"
  input: "training/Adam/zeros_164/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_164"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_164/Assign"
  op: "Assign"
  input: "training/Adam/Variable_164"
  input: "training/Adam/zeros_164"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_164"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_164/read"
  op: "Identity"
  input: "training/Adam/Variable_164"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_164"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_165/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_165/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_165"
  op: "Fill"
  input: "training/Adam/zeros_165/shape_as_tensor"
  input: "training/Adam/zeros_165/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_165"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_165/Assign"
  op: "Assign"
  input: "training/Adam/Variable_165"
  input: "training/Adam/zeros_165"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_165"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_165/read"
  op: "Identity"
  input: "training/Adam/Variable_165"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_165"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_166/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_166/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_166"
  op: "Fill"
  input: "training/Adam/zeros_166/shape_as_tensor"
  input: "training/Adam/zeros_166/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_166"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_166/Assign"
  op: "Assign"
  input: "training/Adam/Variable_166"
  input: "training/Adam/zeros_166"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_166"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_166/read"
  op: "Identity"
  input: "training/Adam/Variable_166"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_166"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_167/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_167/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_167"
  op: "Fill"
  input: "training/Adam/zeros_167/shape_as_tensor"
  input: "training/Adam/zeros_167/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_167"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_167/Assign"
  op: "Assign"
  input: "training/Adam/Variable_167"
  input: "training/Adam/zeros_167"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_167"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_167/read"
  op: "Identity"
  input: "training/Adam/Variable_167"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_167"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_168/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_168/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_168"
  op: "Fill"
  input: "training/Adam/zeros_168/shape_as_tensor"
  input: "training/Adam/zeros_168/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_168"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_168/Assign"
  op: "Assign"
  input: "training/Adam/Variable_168"
  input: "training/Adam/zeros_168"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_168"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_168/read"
  op: "Identity"
  input: "training/Adam/Variable_168"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_168"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_169/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_169/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_169"
  op: "Fill"
  input: "training/Adam/zeros_169/shape_as_tensor"
  input: "training/Adam/zeros_169/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_169"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_169/Assign"
  op: "Assign"
  input: "training/Adam/Variable_169"
  input: "training/Adam/zeros_169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_169"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_169/read"
  op: "Identity"
  input: "training/Adam/Variable_169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_169"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_170/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_170/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_170"
  op: "Fill"
  input: "training/Adam/zeros_170/shape_as_tensor"
  input: "training/Adam/zeros_170/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_170"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_170/Assign"
  op: "Assign"
  input: "training/Adam/Variable_170"
  input: "training/Adam/zeros_170"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_170"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_170/read"
  op: "Identity"
  input: "training/Adam/Variable_170"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_170"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_171/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_171/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_171"
  op: "Fill"
  input: "training/Adam/zeros_171/shape_as_tensor"
  input: "training/Adam/zeros_171/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_171"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_171/Assign"
  op: "Assign"
  input: "training/Adam/Variable_171"
  input: "training/Adam/zeros_171"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_171"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_171/read"
  op: "Identity"
  input: "training/Adam/Variable_171"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_171"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_172/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_172/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_172"
  op: "Fill"
  input: "training/Adam/zeros_172/shape_as_tensor"
  input: "training/Adam/zeros_172/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_172"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_172/Assign"
  op: "Assign"
  input: "training/Adam/Variable_172"
  input: "training/Adam/zeros_172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_172"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_172/read"
  op: "Identity"
  input: "training/Adam/Variable_172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_172"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_173/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_173/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_173"
  op: "Fill"
  input: "training/Adam/zeros_173/shape_as_tensor"
  input: "training/Adam/zeros_173/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_173"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_173/Assign"
  op: "Assign"
  input: "training/Adam/Variable_173"
  input: "training/Adam/zeros_173"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_173"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_173/read"
  op: "Identity"
  input: "training/Adam/Variable_173"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_173"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_174/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_174/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_174"
  op: "Fill"
  input: "training/Adam/zeros_174/shape_as_tensor"
  input: "training/Adam/zeros_174/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_174"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_174/Assign"
  op: "Assign"
  input: "training/Adam/Variable_174"
  input: "training/Adam/zeros_174"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_174"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_174/read"
  op: "Identity"
  input: "training/Adam/Variable_174"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_174"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_175/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_175/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_175"
  op: "Fill"
  input: "training/Adam/zeros_175/shape_as_tensor"
  input: "training/Adam/zeros_175/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_175"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_175/Assign"
  op: "Assign"
  input: "training/Adam/Variable_175"
  input: "training/Adam/zeros_175"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_175"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_175/read"
  op: "Identity"
  input: "training/Adam/Variable_175"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_175"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_176/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_176/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_176"
  op: "Fill"
  input: "training/Adam/zeros_176/shape_as_tensor"
  input: "training/Adam/zeros_176/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_176"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_176/Assign"
  op: "Assign"
  input: "training/Adam/Variable_176"
  input: "training/Adam/zeros_176"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_176"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_176/read"
  op: "Identity"
  input: "training/Adam/Variable_176"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_176"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_177/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_177/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_177"
  op: "Fill"
  input: "training/Adam/zeros_177/shape_as_tensor"
  input: "training/Adam/zeros_177/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_177"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_177/Assign"
  op: "Assign"
  input: "training/Adam/Variable_177"
  input: "training/Adam/zeros_177"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_177"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_177/read"
  op: "Identity"
  input: "training/Adam/Variable_177"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_177"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_178/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_178/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_178"
  op: "Fill"
  input: "training/Adam/zeros_178/shape_as_tensor"
  input: "training/Adam/zeros_178/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_178"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_178/Assign"
  op: "Assign"
  input: "training/Adam/Variable_178"
  input: "training/Adam/zeros_178"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_178"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_178/read"
  op: "Identity"
  input: "training/Adam/Variable_178"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_178"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_179/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_179/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_179"
  op: "Fill"
  input: "training/Adam/zeros_179/shape_as_tensor"
  input: "training/Adam/zeros_179/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_179"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_179/Assign"
  op: "Assign"
  input: "training/Adam/Variable_179"
  input: "training/Adam/zeros_179"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_179"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_179/read"
  op: "Identity"
  input: "training/Adam/Variable_179"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_179"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_180/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_180/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_180"
  op: "Fill"
  input: "training/Adam/zeros_180/shape_as_tensor"
  input: "training/Adam/zeros_180/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_180"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_180/Assign"
  op: "Assign"
  input: "training/Adam/Variable_180"
  input: "training/Adam/zeros_180"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_180"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_180/read"
  op: "Identity"
  input: "training/Adam/Variable_180"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_180"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_181/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_181/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_181"
  op: "Fill"
  input: "training/Adam/zeros_181/shape_as_tensor"
  input: "training/Adam/zeros_181/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_181"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_181/Assign"
  op: "Assign"
  input: "training/Adam/Variable_181"
  input: "training/Adam/zeros_181"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_181"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_181/read"
  op: "Identity"
  input: "training/Adam/Variable_181"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_181"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_182/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_182/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_182"
  op: "Fill"
  input: "training/Adam/zeros_182/shape_as_tensor"
  input: "training/Adam/zeros_182/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_182"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_182/Assign"
  op: "Assign"
  input: "training/Adam/Variable_182"
  input: "training/Adam/zeros_182"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_182"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_182/read"
  op: "Identity"
  input: "training/Adam/Variable_182"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_182"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_61/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "conv1d_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_61"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "conv1d_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_62/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "conv1d_1/bias/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_62"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "conv1d_1/bias"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_63/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "conv1d_3/kernel/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_63"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_63"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "conv1d_3/kernel"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_64/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "conv1d_3/bias/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_64"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_64"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "conv1d_3/bias"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/conv1d_5/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_65/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/conv1d_5/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "conv1d_5/kernel/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_65"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_65"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "conv1d_5/kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/conv1d_5/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_66/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/conv1d_5/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "conv1d_5/bias/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_66"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_66"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "conv1d_5/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/conv1d_7/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_67/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/conv1d_7/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "conv1d_7/kernel/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_67"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_67"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "conv1d_7/kernel"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/conv1d_7/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_68/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/conv1d_7/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "Add"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "Add"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "conv1d_7/bias/read"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_68"
  input: "training/Adam/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_68"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_23"
  op: "Assign"
  input: "conv1d_7/bias"
  input: "training/Adam/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_7/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/conv1d_9/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "Add"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_69/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/conv1d_9/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "Add"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "Add"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "conv1d_9/kernel/read"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_69"
  input: "training/Adam/add_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_69"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_26"
  op: "Assign"
  input: "conv1d_9/kernel"
  input: "training/Adam/sub_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/conv1d_9/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "Add"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_70/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/conv1d_9/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "Add"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "Add"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "conv1d_9/bias/read"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_70"
  input: "training/Adam/add_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_70"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_29"
  op: "Assign"
  input: "conv1d_9/bias"
  input: "training/Adam/sub_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_9/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/conv1d_11/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "Add"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_71/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/conv1d_11/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "Add"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "Add"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "conv1d_11/kernel/read"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_71"
  input: "training/Adam/add_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_71"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_32"
  op: "Assign"
  input: "conv1d_11/kernel"
  input: "training/Adam/sub_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/conv1d_11/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "Add"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_72/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/conv1d_11/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "Add"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "Add"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "conv1d_11/bias/read"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_72"
  input: "training/Adam/add_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_72"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_35"
  op: "Assign"
  input: "conv1d_11/bias"
  input: "training/Adam/sub_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_11/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/conv1d_13/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "Add"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_73/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/conv1d_13/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "Add"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "Add"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "conv1d_13/kernel/read"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_73"
  input: "training/Adam/add_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_73"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_38"
  op: "Assign"
  input: "conv1d_13/kernel"
  input: "training/Adam/sub_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_66"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_41/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_41"
  op: "Sub"
  input: "training/Adam/sub_41/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_67"
  op: "Mul"
  input: "training/Adam/sub_41"
  input: "training/Adam/gradients/conv1d_13/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_40"
  op: "Add"
  input: "training/Adam/mul_66"
  input: "training/Adam/mul_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_68"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_74/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_42/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_42"
  op: "Sub"
  input: "training/Adam/sub_42/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_13"
  op: "Square"
  input: "training/Adam/gradients/conv1d_13/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_69"
  op: "Mul"
  input: "training/Adam/sub_42"
  input: "training/Adam/Square_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_41"
  op: "Add"
  input: "training/Adam/mul_68"
  input: "training/Adam/mul_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_70"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_28"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_29"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_14/Minimum"
  op: "Minimum"
  input: "training/Adam/add_41"
  input: "training/Adam/Const_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_14"
  op: "Maximum"
  input: "training/Adam/clip_by_value_14/Minimum"
  input: "training/Adam/Const_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_14"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_42/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_42"
  op: "Add"
  input: "training/Adam/Sqrt_14"
  input: "training/Adam/add_42/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_14"
  op: "RealDiv"
  input: "training/Adam/mul_70"
  input: "training/Adam/add_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_43"
  op: "Sub"
  input: "conv1d_13/bias/read"
  input: "training/Adam/truediv_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_39"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_40"
  op: "Assign"
  input: "training/Adam/Variable_74"
  input: "training/Adam/add_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_74"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_41"
  op: "Assign"
  input: "conv1d_13/bias"
  input: "training/Adam/sub_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_13/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_71"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_14/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_44/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_44"
  op: "Sub"
  input: "training/Adam/sub_44/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_72"
  op: "Mul"
  input: "training/Adam/sub_44"
  input: "training/Adam/gradients/conv1d_15/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_43"
  op: "Add"
  input: "training/Adam/mul_71"
  input: "training/Adam/mul_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_73"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_75/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_45/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_45"
  op: "Sub"
  input: "training/Adam/sub_45/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_14"
  op: "Square"
  input: "training/Adam/gradients/conv1d_15/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_74"
  op: "Mul"
  input: "training/Adam/sub_45"
  input: "training/Adam/Square_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_44"
  op: "Add"
  input: "training/Adam/mul_73"
  input: "training/Adam/mul_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_75"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_30"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_31"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_15/Minimum"
  op: "Minimum"
  input: "training/Adam/add_44"
  input: "training/Adam/Const_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_15"
  op: "Maximum"
  input: "training/Adam/clip_by_value_15/Minimum"
  input: "training/Adam/Const_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_15"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_45/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_45"
  op: "Add"
  input: "training/Adam/Sqrt_15"
  input: "training/Adam/add_45/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_15"
  op: "RealDiv"
  input: "training/Adam/mul_75"
  input: "training/Adam/add_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_46"
  op: "Sub"
  input: "conv1d_15/kernel/read"
  input: "training/Adam/truediv_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_42"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/add_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_43"
  op: "Assign"
  input: "training/Adam/Variable_75"
  input: "training/Adam/add_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_75"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_44"
  op: "Assign"
  input: "conv1d_15/kernel"
  input: "training/Adam/sub_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_76"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_15/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_47/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_47"
  op: "Sub"
  input: "training/Adam/sub_47/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_77"
  op: "Mul"
  input: "training/Adam/sub_47"
  input: "training/Adam/gradients/conv1d_15/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_46"
  op: "Add"
  input: "training/Adam/mul_76"
  input: "training/Adam/mul_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_78"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_76/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_48/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_48"
  op: "Sub"
  input: "training/Adam/sub_48/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_15"
  op: "Square"
  input: "training/Adam/gradients/conv1d_15/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_79"
  op: "Mul"
  input: "training/Adam/sub_48"
  input: "training/Adam/Square_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_47"
  op: "Add"
  input: "training/Adam/mul_78"
  input: "training/Adam/mul_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_80"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_32"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_33"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_16/Minimum"
  op: "Minimum"
  input: "training/Adam/add_47"
  input: "training/Adam/Const_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_16"
  op: "Maximum"
  input: "training/Adam/clip_by_value_16/Minimum"
  input: "training/Adam/Const_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_16"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_48/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_48"
  op: "Add"
  input: "training/Adam/Sqrt_16"
  input: "training/Adam/add_48/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_16"
  op: "RealDiv"
  input: "training/Adam/mul_80"
  input: "training/Adam/add_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_49"
  op: "Sub"
  input: "conv1d_15/bias/read"
  input: "training/Adam/truediv_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_45"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/add_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_46"
  op: "Assign"
  input: "training/Adam/Variable_76"
  input: "training/Adam/add_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_76"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_47"
  op: "Assign"
  input: "conv1d_15/bias"
  input: "training/Adam/sub_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_15/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_81"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_16/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_50/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_50"
  op: "Sub"
  input: "training/Adam/sub_50/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_82"
  op: "Mul"
  input: "training/Adam/sub_50"
  input: "training/Adam/gradients/conv1d_17/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_49"
  op: "Add"
  input: "training/Adam/mul_81"
  input: "training/Adam/mul_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_83"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_77/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_51/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_51"
  op: "Sub"
  input: "training/Adam/sub_51/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_16"
  op: "Square"
  input: "training/Adam/gradients/conv1d_17/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_84"
  op: "Mul"
  input: "training/Adam/sub_51"
  input: "training/Adam/Square_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_50"
  op: "Add"
  input: "training/Adam/mul_83"
  input: "training/Adam/mul_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_85"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_34"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_35"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_17/Minimum"
  op: "Minimum"
  input: "training/Adam/add_50"
  input: "training/Adam/Const_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_17"
  op: "Maximum"
  input: "training/Adam/clip_by_value_17/Minimum"
  input: "training/Adam/Const_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_17"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_51/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_51"
  op: "Add"
  input: "training/Adam/Sqrt_17"
  input: "training/Adam/add_51/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_17"
  op: "RealDiv"
  input: "training/Adam/mul_85"
  input: "training/Adam/add_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_52"
  op: "Sub"
  input: "conv1d_17/kernel/read"
  input: "training/Adam/truediv_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_48"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/add_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_49"
  op: "Assign"
  input: "training/Adam/Variable_77"
  input: "training/Adam/add_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_77"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_50"
  op: "Assign"
  input: "conv1d_17/kernel"
  input: "training/Adam/sub_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_86"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_17/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_53/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_53"
  op: "Sub"
  input: "training/Adam/sub_53/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_87"
  op: "Mul"
  input: "training/Adam/sub_53"
  input: "training/Adam/gradients/conv1d_17/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_52"
  op: "Add"
  input: "training/Adam/mul_86"
  input: "training/Adam/mul_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_88"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_78/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_54/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_54"
  op: "Sub"
  input: "training/Adam/sub_54/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_17"
  op: "Square"
  input: "training/Adam/gradients/conv1d_17/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_89"
  op: "Mul"
  input: "training/Adam/sub_54"
  input: "training/Adam/Square_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_53"
  op: "Add"
  input: "training/Adam/mul_88"
  input: "training/Adam/mul_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_90"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_36"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_37"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_18/Minimum"
  op: "Minimum"
  input: "training/Adam/add_53"
  input: "training/Adam/Const_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_18"
  op: "Maximum"
  input: "training/Adam/clip_by_value_18/Minimum"
  input: "training/Adam/Const_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_18"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_54/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_54"
  op: "Add"
  input: "training/Adam/Sqrt_18"
  input: "training/Adam/add_54/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_18"
  op: "RealDiv"
  input: "training/Adam/mul_90"
  input: "training/Adam/add_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_55"
  op: "Sub"
  input: "conv1d_17/bias/read"
  input: "training/Adam/truediv_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_51"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/add_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_52"
  op: "Assign"
  input: "training/Adam/Variable_78"
  input: "training/Adam/add_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_78"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_53"
  op: "Assign"
  input: "conv1d_17/bias"
  input: "training/Adam/sub_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_17/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_91"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_18/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_56/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_56"
  op: "Sub"
  input: "training/Adam/sub_56/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_92"
  op: "Mul"
  input: "training/Adam/sub_56"
  input: "training/Adam/gradients/conv1d_19/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_55"
  op: "Add"
  input: "training/Adam/mul_91"
  input: "training/Adam/mul_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_93"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_79/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_57/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_57"
  op: "Sub"
  input: "training/Adam/sub_57/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_18"
  op: "Square"
  input: "training/Adam/gradients/conv1d_19/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_94"
  op: "Mul"
  input: "training/Adam/sub_57"
  input: "training/Adam/Square_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_56"
  op: "Add"
  input: "training/Adam/mul_93"
  input: "training/Adam/mul_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_95"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_38"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_39"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_19/Minimum"
  op: "Minimum"
  input: "training/Adam/add_56"
  input: "training/Adam/Const_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_19"
  op: "Maximum"
  input: "training/Adam/clip_by_value_19/Minimum"
  input: "training/Adam/Const_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_19"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_57/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_57"
  op: "Add"
  input: "training/Adam/Sqrt_19"
  input: "training/Adam/add_57/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_19"
  op: "RealDiv"
  input: "training/Adam/mul_95"
  input: "training/Adam/add_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_58"
  op: "Sub"
  input: "conv1d_19/kernel/read"
  input: "training/Adam/truediv_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_54"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/add_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_55"
  op: "Assign"
  input: "training/Adam/Variable_79"
  input: "training/Adam/add_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_79"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_56"
  op: "Assign"
  input: "conv1d_19/kernel"
  input: "training/Adam/sub_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_96"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_19/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_59/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_59"
  op: "Sub"
  input: "training/Adam/sub_59/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_97"
  op: "Mul"
  input: "training/Adam/sub_59"
  input: "training/Adam/gradients/conv1d_19/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_58"
  op: "Add"
  input: "training/Adam/mul_96"
  input: "training/Adam/mul_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_98"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_80/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_60/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_60"
  op: "Sub"
  input: "training/Adam/sub_60/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_19"
  op: "Square"
  input: "training/Adam/gradients/conv1d_19/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_99"
  op: "Mul"
  input: "training/Adam/sub_60"
  input: "training/Adam/Square_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_59"
  op: "Add"
  input: "training/Adam/mul_98"
  input: "training/Adam/mul_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_100"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_40"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_41"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_20/Minimum"
  op: "Minimum"
  input: "training/Adam/add_59"
  input: "training/Adam/Const_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_20"
  op: "Maximum"
  input: "training/Adam/clip_by_value_20/Minimum"
  input: "training/Adam/Const_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_20"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_60/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_60"
  op: "Add"
  input: "training/Adam/Sqrt_20"
  input: "training/Adam/add_60/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_20"
  op: "RealDiv"
  input: "training/Adam/mul_100"
  input: "training/Adam/add_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_61"
  op: "Sub"
  input: "conv1d_19/bias/read"
  input: "training/Adam/truediv_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_57"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/add_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_58"
  op: "Assign"
  input: "training/Adam/Variable_80"
  input: "training/Adam/add_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_80"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_59"
  op: "Assign"
  input: "conv1d_19/bias"
  input: "training/Adam/sub_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_19/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_101"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_20/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_62/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_62"
  op: "Sub"
  input: "training/Adam/sub_62/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_102"
  op: "Mul"
  input: "training/Adam/sub_62"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_61"
  op: "Add"
  input: "training/Adam/mul_101"
  input: "training/Adam/mul_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_103"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_81/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_63/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_63"
  op: "Sub"
  input: "training/Adam/sub_63/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_20"
  op: "Square"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_104"
  op: "Mul"
  input: "training/Adam/sub_63"
  input: "training/Adam/Square_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_62"
  op: "Add"
  input: "training/Adam/mul_103"
  input: "training/Adam/mul_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_105"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_42"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_43"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_21/Minimum"
  op: "Minimum"
  input: "training/Adam/add_62"
  input: "training/Adam/Const_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_21"
  op: "Maximum"
  input: "training/Adam/clip_by_value_21/Minimum"
  input: "training/Adam/Const_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_21"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_63/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_63"
  op: "Add"
  input: "training/Adam/Sqrt_21"
  input: "training/Adam/add_63/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_21"
  op: "RealDiv"
  input: "training/Adam/mul_105"
  input: "training/Adam/add_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_64"
  op: "Sub"
  input: "conv1d_2/kernel/read"
  input: "training/Adam/truediv_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_60"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/add_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_61"
  op: "Assign"
  input: "training/Adam/Variable_81"
  input: "training/Adam/add_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_81"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_62"
  op: "Assign"
  input: "conv1d_2/kernel"
  input: "training/Adam/sub_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_106"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_21/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_65/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_65"
  op: "Sub"
  input: "training/Adam/sub_65/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_107"
  op: "Mul"
  input: "training/Adam/sub_65"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_64"
  op: "Add"
  input: "training/Adam/mul_106"
  input: "training/Adam/mul_107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_108"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_82/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_66/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_66"
  op: "Sub"
  input: "training/Adam/sub_66/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_21"
  op: "Square"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_109"
  op: "Mul"
  input: "training/Adam/sub_66"
  input: "training/Adam/Square_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_65"
  op: "Add"
  input: "training/Adam/mul_108"
  input: "training/Adam/mul_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_110"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_44"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_45"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_22/Minimum"
  op: "Minimum"
  input: "training/Adam/add_65"
  input: "training/Adam/Const_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_22"
  op: "Maximum"
  input: "training/Adam/clip_by_value_22/Minimum"
  input: "training/Adam/Const_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_22"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_66/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_66"
  op: "Add"
  input: "training/Adam/Sqrt_22"
  input: "training/Adam/add_66/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_22"
  op: "RealDiv"
  input: "training/Adam/mul_110"
  input: "training/Adam/add_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_67"
  op: "Sub"
  input: "conv1d_2/bias/read"
  input: "training/Adam/truediv_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_63"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_64"
  op: "Assign"
  input: "training/Adam/Variable_82"
  input: "training/Adam/add_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_82"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_65"
  op: "Assign"
  input: "conv1d_2/bias"
  input: "training/Adam/sub_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_111"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_22/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_68/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_68"
  op: "Sub"
  input: "training/Adam/sub_68/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_112"
  op: "Mul"
  input: "training/Adam/sub_68"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_67"
  op: "Add"
  input: "training/Adam/mul_111"
  input: "training/Adam/mul_112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_113"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_83/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_69/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_69"
  op: "Sub"
  input: "training/Adam/sub_69/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_22"
  op: "Square"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_114"
  op: "Mul"
  input: "training/Adam/sub_69"
  input: "training/Adam/Square_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_68"
  op: "Add"
  input: "training/Adam/mul_113"
  input: "training/Adam/mul_114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_115"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_46"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_47"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_23/Minimum"
  op: "Minimum"
  input: "training/Adam/add_68"
  input: "training/Adam/Const_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_23"
  op: "Maximum"
  input: "training/Adam/clip_by_value_23/Minimum"
  input: "training/Adam/Const_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_23"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_69/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_69"
  op: "Add"
  input: "training/Adam/Sqrt_23"
  input: "training/Adam/add_69/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_23"
  op: "RealDiv"
  input: "training/Adam/mul_115"
  input: "training/Adam/add_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_70"
  op: "Sub"
  input: "conv1d_4/kernel/read"
  input: "training/Adam/truediv_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_66"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/add_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_67"
  op: "Assign"
  input: "training/Adam/Variable_83"
  input: "training/Adam/add_68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_83"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_68"
  op: "Assign"
  input: "conv1d_4/kernel"
  input: "training/Adam/sub_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_116"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_23/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_71/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_71"
  op: "Sub"
  input: "training/Adam/sub_71/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_117"
  op: "Mul"
  input: "training/Adam/sub_71"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_70"
  op: "Add"
  input: "training/Adam/mul_116"
  input: "training/Adam/mul_117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_118"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_84/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_72/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_72"
  op: "Sub"
  input: "training/Adam/sub_72/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_23"
  op: "Square"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_119"
  op: "Mul"
  input: "training/Adam/sub_72"
  input: "training/Adam/Square_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_71"
  op: "Add"
  input: "training/Adam/mul_118"
  input: "training/Adam/mul_119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_120"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_48"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_49"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_24/Minimum"
  op: "Minimum"
  input: "training/Adam/add_71"
  input: "training/Adam/Const_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_24"
  op: "Maximum"
  input: "training/Adam/clip_by_value_24/Minimum"
  input: "training/Adam/Const_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_24"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_72/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_72"
  op: "Add"
  input: "training/Adam/Sqrt_24"
  input: "training/Adam/add_72/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_24"
  op: "RealDiv"
  input: "training/Adam/mul_120"
  input: "training/Adam/add_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_73"
  op: "Sub"
  input: "conv1d_4/bias/read"
  input: "training/Adam/truediv_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_69"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/add_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_70"
  op: "Assign"
  input: "training/Adam/Variable_84"
  input: "training/Adam/add_71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_84"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_71"
  op: "Assign"
  input: "conv1d_4/bias"
  input: "training/Adam/sub_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_121"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_24/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_74/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_74"
  op: "Sub"
  input: "training/Adam/sub_74/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_122"
  op: "Mul"
  input: "training/Adam/sub_74"
  input: "training/Adam/gradients/conv1d_6/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_73"
  op: "Add"
  input: "training/Adam/mul_121"
  input: "training/Adam/mul_122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_123"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_85/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_75/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_75"
  op: "Sub"
  input: "training/Adam/sub_75/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_24"
  op: "Square"
  input: "training/Adam/gradients/conv1d_6/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_124"
  op: "Mul"
  input: "training/Adam/sub_75"
  input: "training/Adam/Square_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_74"
  op: "Add"
  input: "training/Adam/mul_123"
  input: "training/Adam/mul_124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_125"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_50"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_51"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_25/Minimum"
  op: "Minimum"
  input: "training/Adam/add_74"
  input: "training/Adam/Const_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_25"
  op: "Maximum"
  input: "training/Adam/clip_by_value_25/Minimum"
  input: "training/Adam/Const_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_25"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_75/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_75"
  op: "Add"
  input: "training/Adam/Sqrt_25"
  input: "training/Adam/add_75/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_25"
  op: "RealDiv"
  input: "training/Adam/mul_125"
  input: "training/Adam/add_75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_76"
  op: "Sub"
  input: "conv1d_6/kernel/read"
  input: "training/Adam/truediv_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_72"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/add_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_73"
  op: "Assign"
  input: "training/Adam/Variable_85"
  input: "training/Adam/add_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_85"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_74"
  op: "Assign"
  input: "conv1d_6/kernel"
  input: "training/Adam/sub_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_126"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_25/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_77/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_77"
  op: "Sub"
  input: "training/Adam/sub_77/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_127"
  op: "Mul"
  input: "training/Adam/sub_77"
  input: "training/Adam/gradients/conv1d_6/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_76"
  op: "Add"
  input: "training/Adam/mul_126"
  input: "training/Adam/mul_127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_128"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_86/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_78/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_78"
  op: "Sub"
  input: "training/Adam/sub_78/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_25"
  op: "Square"
  input: "training/Adam/gradients/conv1d_6/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_129"
  op: "Mul"
  input: "training/Adam/sub_78"
  input: "training/Adam/Square_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_77"
  op: "Add"
  input: "training/Adam/mul_128"
  input: "training/Adam/mul_129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_130"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_52"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_53"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_26/Minimum"
  op: "Minimum"
  input: "training/Adam/add_77"
  input: "training/Adam/Const_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_26"
  op: "Maximum"
  input: "training/Adam/clip_by_value_26/Minimum"
  input: "training/Adam/Const_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_26"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_78/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_78"
  op: "Add"
  input: "training/Adam/Sqrt_26"
  input: "training/Adam/add_78/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_26"
  op: "RealDiv"
  input: "training/Adam/mul_130"
  input: "training/Adam/add_78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_79"
  op: "Sub"
  input: "conv1d_6/bias/read"
  input: "training/Adam/truediv_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_75"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/add_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_76"
  op: "Assign"
  input: "training/Adam/Variable_86"
  input: "training/Adam/add_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_86"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_77"
  op: "Assign"
  input: "conv1d_6/bias"
  input: "training/Adam/sub_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_131"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_26/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_80/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_80"
  op: "Sub"
  input: "training/Adam/sub_80/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_132"
  op: "Mul"
  input: "training/Adam/sub_80"
  input: "training/Adam/gradients/conv1d_8/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_79"
  op: "Add"
  input: "training/Adam/mul_131"
  input: "training/Adam/mul_132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_133"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_87/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_81/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_81"
  op: "Sub"
  input: "training/Adam/sub_81/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_26"
  op: "Square"
  input: "training/Adam/gradients/conv1d_8/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_134"
  op: "Mul"
  input: "training/Adam/sub_81"
  input: "training/Adam/Square_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_80"
  op: "Add"
  input: "training/Adam/mul_133"
  input: "training/Adam/mul_134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_135"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_54"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_55"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_27/Minimum"
  op: "Minimum"
  input: "training/Adam/add_80"
  input: "training/Adam/Const_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_27"
  op: "Maximum"
  input: "training/Adam/clip_by_value_27/Minimum"
  input: "training/Adam/Const_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_27"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_81/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_81"
  op: "Add"
  input: "training/Adam/Sqrt_27"
  input: "training/Adam/add_81/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_27"
  op: "RealDiv"
  input: "training/Adam/mul_135"
  input: "training/Adam/add_81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_82"
  op: "Sub"
  input: "conv1d_8/kernel/read"
  input: "training/Adam/truediv_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_78"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/add_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_79"
  op: "Assign"
  input: "training/Adam/Variable_87"
  input: "training/Adam/add_80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_87"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_80"
  op: "Assign"
  input: "conv1d_8/kernel"
  input: "training/Adam/sub_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_136"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_27/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_83/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_83"
  op: "Sub"
  input: "training/Adam/sub_83/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_137"
  op: "Mul"
  input: "training/Adam/sub_83"
  input: "training/Adam/gradients/conv1d_8/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_82"
  op: "Add"
  input: "training/Adam/mul_136"
  input: "training/Adam/mul_137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_138"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_88/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_84/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_84"
  op: "Sub"
  input: "training/Adam/sub_84/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_27"
  op: "Square"
  input: "training/Adam/gradients/conv1d_8/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_139"
  op: "Mul"
  input: "training/Adam/sub_84"
  input: "training/Adam/Square_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_83"
  op: "Add"
  input: "training/Adam/mul_138"
  input: "training/Adam/mul_139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_140"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_56"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_57"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_28/Minimum"
  op: "Minimum"
  input: "training/Adam/add_83"
  input: "training/Adam/Const_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_28"
  op: "Maximum"
  input: "training/Adam/clip_by_value_28/Minimum"
  input: "training/Adam/Const_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_28"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_84/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_84"
  op: "Add"
  input: "training/Adam/Sqrt_28"
  input: "training/Adam/add_84/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_28"
  op: "RealDiv"
  input: "training/Adam/mul_140"
  input: "training/Adam/add_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_85"
  op: "Sub"
  input: "conv1d_8/bias/read"
  input: "training/Adam/truediv_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_81"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/add_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_82"
  op: "Assign"
  input: "training/Adam/Variable_88"
  input: "training/Adam/add_83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_88"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_83"
  op: "Assign"
  input: "conv1d_8/bias"
  input: "training/Adam/sub_85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_8/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_141"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_28/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_86/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_86"
  op: "Sub"
  input: "training/Adam/sub_86/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_142"
  op: "Mul"
  input: "training/Adam/sub_86"
  input: "training/Adam/gradients/conv1d_10/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_85"
  op: "Add"
  input: "training/Adam/mul_141"
  input: "training/Adam/mul_142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_143"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_89/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_87/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_87"
  op: "Sub"
  input: "training/Adam/sub_87/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_28"
  op: "Square"
  input: "training/Adam/gradients/conv1d_10/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_144"
  op: "Mul"
  input: "training/Adam/sub_87"
  input: "training/Adam/Square_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_86"
  op: "Add"
  input: "training/Adam/mul_143"
  input: "training/Adam/mul_144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_145"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_58"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_59"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_29/Minimum"
  op: "Minimum"
  input: "training/Adam/add_86"
  input: "training/Adam/Const_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_29"
  op: "Maximum"
  input: "training/Adam/clip_by_value_29/Minimum"
  input: "training/Adam/Const_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_29"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_87/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_87"
  op: "Add"
  input: "training/Adam/Sqrt_29"
  input: "training/Adam/add_87/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_29"
  op: "RealDiv"
  input: "training/Adam/mul_145"
  input: "training/Adam/add_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_88"
  op: "Sub"
  input: "conv1d_10/kernel/read"
  input: "training/Adam/truediv_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_84"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/add_85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_85"
  op: "Assign"
  input: "training/Adam/Variable_89"
  input: "training/Adam/add_86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_89"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_86"
  op: "Assign"
  input: "conv1d_10/kernel"
  input: "training/Adam/sub_88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_146"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_29/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_89/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_89"
  op: "Sub"
  input: "training/Adam/sub_89/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_147"
  op: "Mul"
  input: "training/Adam/sub_89"
  input: "training/Adam/gradients/conv1d_10/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_88"
  op: "Add"
  input: "training/Adam/mul_146"
  input: "training/Adam/mul_147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_148"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_90/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_90/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_90"
  op: "Sub"
  input: "training/Adam/sub_90/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_29"
  op: "Square"
  input: "training/Adam/gradients/conv1d_10/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_149"
  op: "Mul"
  input: "training/Adam/sub_90"
  input: "training/Adam/Square_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_89"
  op: "Add"
  input: "training/Adam/mul_148"
  input: "training/Adam/mul_149"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_150"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_60"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_61"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_30/Minimum"
  op: "Minimum"
  input: "training/Adam/add_89"
  input: "training/Adam/Const_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_30"
  op: "Maximum"
  input: "training/Adam/clip_by_value_30/Minimum"
  input: "training/Adam/Const_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_30"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_90/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_90"
  op: "Add"
  input: "training/Adam/Sqrt_30"
  input: "training/Adam/add_90/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_30"
  op: "RealDiv"
  input: "training/Adam/mul_150"
  input: "training/Adam/add_90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_91"
  op: "Sub"
  input: "conv1d_10/bias/read"
  input: "training/Adam/truediv_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_87"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/add_88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_88"
  op: "Assign"
  input: "training/Adam/Variable_90"
  input: "training/Adam/add_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_90"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_89"
  op: "Assign"
  input: "conv1d_10/bias"
  input: "training/Adam/sub_91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_10/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_151"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_30/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_92/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_92"
  op: "Sub"
  input: "training/Adam/sub_92/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_152"
  op: "Mul"
  input: "training/Adam/sub_92"
  input: "training/Adam/gradients/conv1d_12/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_91"
  op: "Add"
  input: "training/Adam/mul_151"
  input: "training/Adam/mul_152"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_153"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_91/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_93/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_93"
  op: "Sub"
  input: "training/Adam/sub_93/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_30"
  op: "Square"
  input: "training/Adam/gradients/conv1d_12/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_154"
  op: "Mul"
  input: "training/Adam/sub_93"
  input: "training/Adam/Square_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_92"
  op: "Add"
  input: "training/Adam/mul_153"
  input: "training/Adam/mul_154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_155"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_62"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_63"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_31/Minimum"
  op: "Minimum"
  input: "training/Adam/add_92"
  input: "training/Adam/Const_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_31"
  op: "Maximum"
  input: "training/Adam/clip_by_value_31/Minimum"
  input: "training/Adam/Const_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_31"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_93/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_93"
  op: "Add"
  input: "training/Adam/Sqrt_31"
  input: "training/Adam/add_93/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_31"
  op: "RealDiv"
  input: "training/Adam/mul_155"
  input: "training/Adam/add_93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_94"
  op: "Sub"
  input: "conv1d_12/kernel/read"
  input: "training/Adam/truediv_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_90"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/add_91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_91"
  op: "Assign"
  input: "training/Adam/Variable_91"
  input: "training/Adam/add_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_91"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_92"
  op: "Assign"
  input: "conv1d_12/kernel"
  input: "training/Adam/sub_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_156"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_31/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_95/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_95"
  op: "Sub"
  input: "training/Adam/sub_95/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_157"
  op: "Mul"
  input: "training/Adam/sub_95"
  input: "training/Adam/gradients/conv1d_12/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_94"
  op: "Add"
  input: "training/Adam/mul_156"
  input: "training/Adam/mul_157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_158"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_92/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_96/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_96"
  op: "Sub"
  input: "training/Adam/sub_96/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_31"
  op: "Square"
  input: "training/Adam/gradients/conv1d_12/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_159"
  op: "Mul"
  input: "training/Adam/sub_96"
  input: "training/Adam/Square_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_95"
  op: "Add"
  input: "training/Adam/mul_158"
  input: "training/Adam/mul_159"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_160"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_64"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_65"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_32/Minimum"
  op: "Minimum"
  input: "training/Adam/add_95"
  input: "training/Adam/Const_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_32"
  op: "Maximum"
  input: "training/Adam/clip_by_value_32/Minimum"
  input: "training/Adam/Const_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_32"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_96/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_96"
  op: "Add"
  input: "training/Adam/Sqrt_32"
  input: "training/Adam/add_96/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_32"
  op: "RealDiv"
  input: "training/Adam/mul_160"
  input: "training/Adam/add_96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_97"
  op: "Sub"
  input: "conv1d_12/bias/read"
  input: "training/Adam/truediv_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_93"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/add_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_94"
  op: "Assign"
  input: "training/Adam/Variable_92"
  input: "training/Adam/add_95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_92"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_95"
  op: "Assign"
  input: "conv1d_12/bias"
  input: "training/Adam/sub_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_12/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_161"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_32/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_98/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_98"
  op: "Sub"
  input: "training/Adam/sub_98/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_162"
  op: "Mul"
  input: "training/Adam/sub_98"
  input: "training/Adam/gradients/conv1d_14/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_97"
  op: "Add"
  input: "training/Adam/mul_161"
  input: "training/Adam/mul_162"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_163"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_93/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_99/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_99"
  op: "Sub"
  input: "training/Adam/sub_99/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_32"
  op: "Square"
  input: "training/Adam/gradients/conv1d_14/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_164"
  op: "Mul"
  input: "training/Adam/sub_99"
  input: "training/Adam/Square_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_98"
  op: "Add"
  input: "training/Adam/mul_163"
  input: "training/Adam/mul_164"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_165"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_66"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_67"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_33/Minimum"
  op: "Minimum"
  input: "training/Adam/add_98"
  input: "training/Adam/Const_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_33"
  op: "Maximum"
  input: "training/Adam/clip_by_value_33/Minimum"
  input: "training/Adam/Const_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_33"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_99/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_99"
  op: "Add"
  input: "training/Adam/Sqrt_33"
  input: "training/Adam/add_99/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_33"
  op: "RealDiv"
  input: "training/Adam/mul_165"
  input: "training/Adam/add_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_100"
  op: "Sub"
  input: "conv1d_14/kernel/read"
  input: "training/Adam/truediv_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_96"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/add_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_97"
  op: "Assign"
  input: "training/Adam/Variable_93"
  input: "training/Adam/add_98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_93"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_98"
  op: "Assign"
  input: "conv1d_14/kernel"
  input: "training/Adam/sub_100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_166"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_33/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_101/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_101"
  op: "Sub"
  input: "training/Adam/sub_101/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_167"
  op: "Mul"
  input: "training/Adam/sub_101"
  input: "training/Adam/gradients/conv1d_14/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_100"
  op: "Add"
  input: "training/Adam/mul_166"
  input: "training/Adam/mul_167"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_168"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_94/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_102/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_102"
  op: "Sub"
  input: "training/Adam/sub_102/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_33"
  op: "Square"
  input: "training/Adam/gradients/conv1d_14/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_169"
  op: "Mul"
  input: "training/Adam/sub_102"
  input: "training/Adam/Square_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_101"
  op: "Add"
  input: "training/Adam/mul_168"
  input: "training/Adam/mul_169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_170"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_68"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_69"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_34/Minimum"
  op: "Minimum"
  input: "training/Adam/add_101"
  input: "training/Adam/Const_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_34"
  op: "Maximum"
  input: "training/Adam/clip_by_value_34/Minimum"
  input: "training/Adam/Const_68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_34"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_102/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_102"
  op: "Add"
  input: "training/Adam/Sqrt_34"
  input: "training/Adam/add_102/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_34"
  op: "RealDiv"
  input: "training/Adam/mul_170"
  input: "training/Adam/add_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_103"
  op: "Sub"
  input: "conv1d_14/bias/read"
  input: "training/Adam/truediv_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_99"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/add_100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_100"
  op: "Assign"
  input: "training/Adam/Variable_94"
  input: "training/Adam/add_101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_94"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_101"
  op: "Assign"
  input: "conv1d_14/bias"
  input: "training/Adam/sub_103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_14/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_171"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_34/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_104/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_104"
  op: "Sub"
  input: "training/Adam/sub_104/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_172"
  op: "Mul"
  input: "training/Adam/sub_104"
  input: "training/Adam/gradients/conv1d_16/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_103"
  op: "Add"
  input: "training/Adam/mul_171"
  input: "training/Adam/mul_172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_173"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_95/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_105/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_105"
  op: "Sub"
  input: "training/Adam/sub_105/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_34"
  op: "Square"
  input: "training/Adam/gradients/conv1d_16/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_174"
  op: "Mul"
  input: "training/Adam/sub_105"
  input: "training/Adam/Square_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_104"
  op: "Add"
  input: "training/Adam/mul_173"
  input: "training/Adam/mul_174"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_175"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_70"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_71"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_35/Minimum"
  op: "Minimum"
  input: "training/Adam/add_104"
  input: "training/Adam/Const_71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_35"
  op: "Maximum"
  input: "training/Adam/clip_by_value_35/Minimum"
  input: "training/Adam/Const_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_35"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_105/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_105"
  op: "Add"
  input: "training/Adam/Sqrt_35"
  input: "training/Adam/add_105/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_35"
  op: "RealDiv"
  input: "training/Adam/mul_175"
  input: "training/Adam/add_105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_106"
  op: "Sub"
  input: "conv1d_16/kernel/read"
  input: "training/Adam/truediv_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_102"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/add_103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_103"
  op: "Assign"
  input: "training/Adam/Variable_95"
  input: "training/Adam/add_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_95"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_104"
  op: "Assign"
  input: "conv1d_16/kernel"
  input: "training/Adam/sub_106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_176"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_35/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_107/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_107"
  op: "Sub"
  input: "training/Adam/sub_107/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_177"
  op: "Mul"
  input: "training/Adam/sub_107"
  input: "training/Adam/gradients/conv1d_16/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_106"
  op: "Add"
  input: "training/Adam/mul_176"
  input: "training/Adam/mul_177"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_178"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_96/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_108/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_108"
  op: "Sub"
  input: "training/Adam/sub_108/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_35"
  op: "Square"
  input: "training/Adam/gradients/conv1d_16/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_179"
  op: "Mul"
  input: "training/Adam/sub_108"
  input: "training/Adam/Square_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_107"
  op: "Add"
  input: "training/Adam/mul_178"
  input: "training/Adam/mul_179"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_180"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_72"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_73"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_36/Minimum"
  op: "Minimum"
  input: "training/Adam/add_107"
  input: "training/Adam/Const_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_36"
  op: "Maximum"
  input: "training/Adam/clip_by_value_36/Minimum"
  input: "training/Adam/Const_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_36"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_108/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_108"
  op: "Add"
  input: "training/Adam/Sqrt_36"
  input: "training/Adam/add_108/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_36"
  op: "RealDiv"
  input: "training/Adam/mul_180"
  input: "training/Adam/add_108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_109"
  op: "Sub"
  input: "conv1d_16/bias/read"
  input: "training/Adam/truediv_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_105"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/add_106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_106"
  op: "Assign"
  input: "training/Adam/Variable_96"
  input: "training/Adam/add_107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_96"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_107"
  op: "Assign"
  input: "conv1d_16/bias"
  input: "training/Adam/sub_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_16/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_181"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_36/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_110/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_110"
  op: "Sub"
  input: "training/Adam/sub_110/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_182"
  op: "Mul"
  input: "training/Adam/sub_110"
  input: "training/Adam/gradients/conv1d_18/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_109"
  op: "Add"
  input: "training/Adam/mul_181"
  input: "training/Adam/mul_182"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_183"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_97/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_111/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_111"
  op: "Sub"
  input: "training/Adam/sub_111/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_36"
  op: "Square"
  input: "training/Adam/gradients/conv1d_18/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_184"
  op: "Mul"
  input: "training/Adam/sub_111"
  input: "training/Adam/Square_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_110"
  op: "Add"
  input: "training/Adam/mul_183"
  input: "training/Adam/mul_184"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_185"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_74"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_75"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_37/Minimum"
  op: "Minimum"
  input: "training/Adam/add_110"
  input: "training/Adam/Const_75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_37"
  op: "Maximum"
  input: "training/Adam/clip_by_value_37/Minimum"
  input: "training/Adam/Const_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_37"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_111/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_111"
  op: "Add"
  input: "training/Adam/Sqrt_37"
  input: "training/Adam/add_111/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_37"
  op: "RealDiv"
  input: "training/Adam/mul_185"
  input: "training/Adam/add_111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_112"
  op: "Sub"
  input: "conv1d_18/kernel/read"
  input: "training/Adam/truediv_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_108"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/add_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_109"
  op: "Assign"
  input: "training/Adam/Variable_97"
  input: "training/Adam/add_110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_97"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_110"
  op: "Assign"
  input: "conv1d_18/kernel"
  input: "training/Adam/sub_112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_186"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_37/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_113/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_113"
  op: "Sub"
  input: "training/Adam/sub_113/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_187"
  op: "Mul"
  input: "training/Adam/sub_113"
  input: "training/Adam/gradients/conv1d_18/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_112"
  op: "Add"
  input: "training/Adam/mul_186"
  input: "training/Adam/mul_187"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_188"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_98/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_114/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_114"
  op: "Sub"
  input: "training/Adam/sub_114/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_37"
  op: "Square"
  input: "training/Adam/gradients/conv1d_18/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_189"
  op: "Mul"
  input: "training/Adam/sub_114"
  input: "training/Adam/Square_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_113"
  op: "Add"
  input: "training/Adam/mul_188"
  input: "training/Adam/mul_189"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_190"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_76"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_77"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_38/Minimum"
  op: "Minimum"
  input: "training/Adam/add_113"
  input: "training/Adam/Const_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_38"
  op: "Maximum"
  input: "training/Adam/clip_by_value_38/Minimum"
  input: "training/Adam/Const_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_38"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_114/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_114"
  op: "Add"
  input: "training/Adam/Sqrt_38"
  input: "training/Adam/add_114/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_38"
  op: "RealDiv"
  input: "training/Adam/mul_190"
  input: "training/Adam/add_114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_115"
  op: "Sub"
  input: "conv1d_18/bias/read"
  input: "training/Adam/truediv_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_111"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/add_112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_112"
  op: "Assign"
  input: "training/Adam/Variable_98"
  input: "training/Adam/add_113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_98"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_113"
  op: "Assign"
  input: "conv1d_18/bias"
  input: "training/Adam/sub_115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_18/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_191"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_38/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_116/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_116"
  op: "Sub"
  input: "training/Adam/sub_116/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_192"
  op: "Mul"
  input: "training/Adam/sub_116"
  input: "training/Adam/gradients/conv1d_20/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_115"
  op: "Add"
  input: "training/Adam/mul_191"
  input: "training/Adam/mul_192"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_193"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_99/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_117/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_117"
  op: "Sub"
  input: "training/Adam/sub_117/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_38"
  op: "Square"
  input: "training/Adam/gradients/conv1d_20/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_194"
  op: "Mul"
  input: "training/Adam/sub_117"
  input: "training/Adam/Square_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_116"
  op: "Add"
  input: "training/Adam/mul_193"
  input: "training/Adam/mul_194"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_195"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_78"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_79"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_39/Minimum"
  op: "Minimum"
  input: "training/Adam/add_116"
  input: "training/Adam/Const_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_39"
  op: "Maximum"
  input: "training/Adam/clip_by_value_39/Minimum"
  input: "training/Adam/Const_78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_39"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_117/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_117"
  op: "Add"
  input: "training/Adam/Sqrt_39"
  input: "training/Adam/add_117/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_39"
  op: "RealDiv"
  input: "training/Adam/mul_195"
  input: "training/Adam/add_117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_118"
  op: "Sub"
  input: "conv1d_20/kernel/read"
  input: "training/Adam/truediv_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_114"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/add_115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_115"
  op: "Assign"
  input: "training/Adam/Variable_99"
  input: "training/Adam/add_116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_99"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_116"
  op: "Assign"
  input: "conv1d_20/kernel"
  input: "training/Adam/sub_118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_196"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_39/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_119/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_119"
  op: "Sub"
  input: "training/Adam/sub_119/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_197"
  op: "Mul"
  input: "training/Adam/sub_119"
  input: "training/Adam/gradients/conv1d_20/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_118"
  op: "Add"
  input: "training/Adam/mul_196"
  input: "training/Adam/mul_197"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_198"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_100/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_120/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_120"
  op: "Sub"
  input: "training/Adam/sub_120/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_39"
  op: "Square"
  input: "training/Adam/gradients/conv1d_20/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_199"
  op: "Mul"
  input: "training/Adam/sub_120"
  input: "training/Adam/Square_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_119"
  op: "Add"
  input: "training/Adam/mul_198"
  input: "training/Adam/mul_199"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_200"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_80"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_81"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_40/Minimum"
  op: "Minimum"
  input: "training/Adam/add_119"
  input: "training/Adam/Const_81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_40"
  op: "Maximum"
  input: "training/Adam/clip_by_value_40/Minimum"
  input: "training/Adam/Const_80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_40"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_120/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_120"
  op: "Add"
  input: "training/Adam/Sqrt_40"
  input: "training/Adam/add_120/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_40"
  op: "RealDiv"
  input: "training/Adam/mul_200"
  input: "training/Adam/add_120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_121"
  op: "Sub"
  input: "conv1d_20/bias/read"
  input: "training/Adam/truediv_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_117"
  op: "Assign"
  input: "training/Adam/Variable_39"
  input: "training/Adam/add_118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_118"
  op: "Assign"
  input: "training/Adam/Variable_100"
  input: "training/Adam/add_119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_100"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_119"
  op: "Assign"
  input: "conv1d_20/bias"
  input: "training/Adam/sub_121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_20/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_201"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_40/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_122/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_122"
  op: "Sub"
  input: "training/Adam/sub_122/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_202"
  op: "Mul"
  input: "training/Adam/sub_122"
  input: "training/Adam/gradients/conv1d_22/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_121"
  op: "Add"
  input: "training/Adam/mul_201"
  input: "training/Adam/mul_202"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_203"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_101/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_123/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_123"
  op: "Sub"
  input: "training/Adam/sub_123/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_40"
  op: "Square"
  input: "training/Adam/gradients/conv1d_22/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_204"
  op: "Mul"
  input: "training/Adam/sub_123"
  input: "training/Adam/Square_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_122"
  op: "Add"
  input: "training/Adam/mul_203"
  input: "training/Adam/mul_204"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_205"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_82"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_83"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_41/Minimum"
  op: "Minimum"
  input: "training/Adam/add_122"
  input: "training/Adam/Const_83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_41"
  op: "Maximum"
  input: "training/Adam/clip_by_value_41/Minimum"
  input: "training/Adam/Const_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_41"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_123/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_123"
  op: "Add"
  input: "training/Adam/Sqrt_41"
  input: "training/Adam/add_123/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_41"
  op: "RealDiv"
  input: "training/Adam/mul_205"
  input: "training/Adam/add_123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_124"
  op: "Sub"
  input: "conv1d_22/kernel/read"
  input: "training/Adam/truediv_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_120"
  op: "Assign"
  input: "training/Adam/Variable_40"
  input: "training/Adam/add_121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_121"
  op: "Assign"
  input: "training/Adam/Variable_101"
  input: "training/Adam/add_122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_101"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_122"
  op: "Assign"
  input: "conv1d_22/kernel"
  input: "training/Adam/sub_124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_206"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_41/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_125/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_125"
  op: "Sub"
  input: "training/Adam/sub_125/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_207"
  op: "Mul"
  input: "training/Adam/sub_125"
  input: "training/Adam/gradients/conv1d_22/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_124"
  op: "Add"
  input: "training/Adam/mul_206"
  input: "training/Adam/mul_207"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_208"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_102/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_126/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_126"
  op: "Sub"
  input: "training/Adam/sub_126/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_41"
  op: "Square"
  input: "training/Adam/gradients/conv1d_22/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_209"
  op: "Mul"
  input: "training/Adam/sub_126"
  input: "training/Adam/Square_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_125"
  op: "Add"
  input: "training/Adam/mul_208"
  input: "training/Adam/mul_209"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_210"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_84"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_85"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_42/Minimum"
  op: "Minimum"
  input: "training/Adam/add_125"
  input: "training/Adam/Const_85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_42"
  op: "Maximum"
  input: "training/Adam/clip_by_value_42/Minimum"
  input: "training/Adam/Const_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_42"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_126/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_126"
  op: "Add"
  input: "training/Adam/Sqrt_42"
  input: "training/Adam/add_126/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_42"
  op: "RealDiv"
  input: "training/Adam/mul_210"
  input: "training/Adam/add_126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_127"
  op: "Sub"
  input: "conv1d_22/bias/read"
  input: "training/Adam/truediv_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_123"
  op: "Assign"
  input: "training/Adam/Variable_41"
  input: "training/Adam/add_124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_124"
  op: "Assign"
  input: "training/Adam/Variable_102"
  input: "training/Adam/add_125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_102"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_125"
  op: "Assign"
  input: "conv1d_22/bias"
  input: "training/Adam/sub_127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_22/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_211"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_42/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_128/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_128"
  op: "Sub"
  input: "training/Adam/sub_128/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_212"
  op: "Mul"
  input: "training/Adam/sub_128"
  input: "training/Adam/gradients/conv1d_23/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_127"
  op: "Add"
  input: "training/Adam/mul_211"
  input: "training/Adam/mul_212"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_213"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_103/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_129/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_129"
  op: "Sub"
  input: "training/Adam/sub_129/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_42"
  op: "Square"
  input: "training/Adam/gradients/conv1d_23/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_214"
  op: "Mul"
  input: "training/Adam/sub_129"
  input: "training/Adam/Square_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_128"
  op: "Add"
  input: "training/Adam/mul_213"
  input: "training/Adam/mul_214"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_215"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_86"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_87"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_43/Minimum"
  op: "Minimum"
  input: "training/Adam/add_128"
  input: "training/Adam/Const_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_43"
  op: "Maximum"
  input: "training/Adam/clip_by_value_43/Minimum"
  input: "training/Adam/Const_86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_43"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_129/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_129"
  op: "Add"
  input: "training/Adam/Sqrt_43"
  input: "training/Adam/add_129/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_43"
  op: "RealDiv"
  input: "training/Adam/mul_215"
  input: "training/Adam/add_129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_130"
  op: "Sub"
  input: "conv1d_23/kernel/read"
  input: "training/Adam/truediv_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_126"
  op: "Assign"
  input: "training/Adam/Variable_42"
  input: "training/Adam/add_127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_127"
  op: "Assign"
  input: "training/Adam/Variable_103"
  input: "training/Adam/add_128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_103"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_128"
  op: "Assign"
  input: "conv1d_23/kernel"
  input: "training/Adam/sub_130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_216"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_43/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_131/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_131"
  op: "Sub"
  input: "training/Adam/sub_131/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_217"
  op: "Mul"
  input: "training/Adam/sub_131"
  input: "training/Adam/gradients/conv1d_23/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_130"
  op: "Add"
  input: "training/Adam/mul_216"
  input: "training/Adam/mul_217"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_218"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_104/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_132/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_132"
  op: "Sub"
  input: "training/Adam/sub_132/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_43"
  op: "Square"
  input: "training/Adam/gradients/conv1d_23/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_219"
  op: "Mul"
  input: "training/Adam/sub_132"
  input: "training/Adam/Square_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_131"
  op: "Add"
  input: "training/Adam/mul_218"
  input: "training/Adam/mul_219"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_220"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_88"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_89"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_44/Minimum"
  op: "Minimum"
  input: "training/Adam/add_131"
  input: "training/Adam/Const_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_44"
  op: "Maximum"
  input: "training/Adam/clip_by_value_44/Minimum"
  input: "training/Adam/Const_88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_44"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_132/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_132"
  op: "Add"
  input: "training/Adam/Sqrt_44"
  input: "training/Adam/add_132/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_44"
  op: "RealDiv"
  input: "training/Adam/mul_220"
  input: "training/Adam/add_132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_133"
  op: "Sub"
  input: "conv1d_23/bias/read"
  input: "training/Adam/truediv_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_129"
  op: "Assign"
  input: "training/Adam/Variable_43"
  input: "training/Adam/add_130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_130"
  op: "Assign"
  input: "training/Adam/Variable_104"
  input: "training/Adam/add_131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_104"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_131"
  op: "Assign"
  input: "conv1d_23/bias"
  input: "training/Adam/sub_133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_23/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_221"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_44/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_134/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_134"
  op: "Sub"
  input: "training/Adam/sub_134/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_222"
  op: "Mul"
  input: "training/Adam/sub_134"
  input: "training/Adam/gradients/conv1d_24/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_133"
  op: "Add"
  input: "training/Adam/mul_221"
  input: "training/Adam/mul_222"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_223"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_105/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_135/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_135"
  op: "Sub"
  input: "training/Adam/sub_135/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_44"
  op: "Square"
  input: "training/Adam/gradients/conv1d_24/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_224"
  op: "Mul"
  input: "training/Adam/sub_135"
  input: "training/Adam/Square_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_134"
  op: "Add"
  input: "training/Adam/mul_223"
  input: "training/Adam/mul_224"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_225"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_90"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_91"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_45/Minimum"
  op: "Minimum"
  input: "training/Adam/add_134"
  input: "training/Adam/Const_91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_45"
  op: "Maximum"
  input: "training/Adam/clip_by_value_45/Minimum"
  input: "training/Adam/Const_90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_45"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_135/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_135"
  op: "Add"
  input: "training/Adam/Sqrt_45"
  input: "training/Adam/add_135/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_45"
  op: "RealDiv"
  input: "training/Adam/mul_225"
  input: "training/Adam/add_135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_136"
  op: "Sub"
  input: "conv1d_24/kernel/read"
  input: "training/Adam/truediv_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_132"
  op: "Assign"
  input: "training/Adam/Variable_44"
  input: "training/Adam/add_133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_133"
  op: "Assign"
  input: "training/Adam/Variable_105"
  input: "training/Adam/add_134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_105"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_134"
  op: "Assign"
  input: "conv1d_24/kernel"
  input: "training/Adam/sub_136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_226"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_45/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_137/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_137"
  op: "Sub"
  input: "training/Adam/sub_137/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_227"
  op: "Mul"
  input: "training/Adam/sub_137"
  input: "training/Adam/gradients/conv1d_24/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_136"
  op: "Add"
  input: "training/Adam/mul_226"
  input: "training/Adam/mul_227"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_228"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_106/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_138/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_138"
  op: "Sub"
  input: "training/Adam/sub_138/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_45"
  op: "Square"
  input: "training/Adam/gradients/conv1d_24/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_229"
  op: "Mul"
  input: "training/Adam/sub_138"
  input: "training/Adam/Square_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_137"
  op: "Add"
  input: "training/Adam/mul_228"
  input: "training/Adam/mul_229"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_230"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_92"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_93"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_46/Minimum"
  op: "Minimum"
  input: "training/Adam/add_137"
  input: "training/Adam/Const_93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_46"
  op: "Maximum"
  input: "training/Adam/clip_by_value_46/Minimum"
  input: "training/Adam/Const_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_46"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_138/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_138"
  op: "Add"
  input: "training/Adam/Sqrt_46"
  input: "training/Adam/add_138/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_46"
  op: "RealDiv"
  input: "training/Adam/mul_230"
  input: "training/Adam/add_138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_139"
  op: "Sub"
  input: "conv1d_24/bias/read"
  input: "training/Adam/truediv_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_135"
  op: "Assign"
  input: "training/Adam/Variable_45"
  input: "training/Adam/add_136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_136"
  op: "Assign"
  input: "training/Adam/Variable_106"
  input: "training/Adam/add_137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_106"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_137"
  op: "Assign"
  input: "conv1d_24/bias"
  input: "training/Adam/sub_139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_24/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_231"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_46/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_140/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_140"
  op: "Sub"
  input: "training/Adam/sub_140/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_232"
  op: "Mul"
  input: "training/Adam/sub_140"
  input: "training/Adam/gradients/conv1d_21/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_139"
  op: "Add"
  input: "training/Adam/mul_231"
  input: "training/Adam/mul_232"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_233"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_107/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_141/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_141"
  op: "Sub"
  input: "training/Adam/sub_141/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_46"
  op: "Square"
  input: "training/Adam/gradients/conv1d_21/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_234"
  op: "Mul"
  input: "training/Adam/sub_141"
  input: "training/Adam/Square_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_140"
  op: "Add"
  input: "training/Adam/mul_233"
  input: "training/Adam/mul_234"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_235"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_94"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_95"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_47/Minimum"
  op: "Minimum"
  input: "training/Adam/add_140"
  input: "training/Adam/Const_95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_47"
  op: "Maximum"
  input: "training/Adam/clip_by_value_47/Minimum"
  input: "training/Adam/Const_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_47"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_141/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_141"
  op: "Add"
  input: "training/Adam/Sqrt_47"
  input: "training/Adam/add_141/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_47"
  op: "RealDiv"
  input: "training/Adam/mul_235"
  input: "training/Adam/add_141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_142"
  op: "Sub"
  input: "conv1d_21/kernel/read"
  input: "training/Adam/truediv_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_138"
  op: "Assign"
  input: "training/Adam/Variable_46"
  input: "training/Adam/add_139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_139"
  op: "Assign"
  input: "training/Adam/Variable_107"
  input: "training/Adam/add_140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_107"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_140"
  op: "Assign"
  input: "conv1d_21/kernel"
  input: "training/Adam/sub_142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_236"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_47/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_143/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_143"
  op: "Sub"
  input: "training/Adam/sub_143/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_237"
  op: "Mul"
  input: "training/Adam/sub_143"
  input: "training/Adam/gradients/conv1d_21/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_142"
  op: "Add"
  input: "training/Adam/mul_236"
  input: "training/Adam/mul_237"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_238"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_108/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_144/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_144"
  op: "Sub"
  input: "training/Adam/sub_144/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_47"
  op: "Square"
  input: "training/Adam/gradients/conv1d_21/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_239"
  op: "Mul"
  input: "training/Adam/sub_144"
  input: "training/Adam/Square_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_143"
  op: "Add"
  input: "training/Adam/mul_238"
  input: "training/Adam/mul_239"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_240"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_96"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_97"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_48/Minimum"
  op: "Minimum"
  input: "training/Adam/add_143"
  input: "training/Adam/Const_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_48"
  op: "Maximum"
  input: "training/Adam/clip_by_value_48/Minimum"
  input: "training/Adam/Const_96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_48"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_144/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_144"
  op: "Add"
  input: "training/Adam/Sqrt_48"
  input: "training/Adam/add_144/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_48"
  op: "RealDiv"
  input: "training/Adam/mul_240"
  input: "training/Adam/add_144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_145"
  op: "Sub"
  input: "conv1d_21/bias/read"
  input: "training/Adam/truediv_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_141"
  op: "Assign"
  input: "training/Adam/Variable_47"
  input: "training/Adam/add_142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_142"
  op: "Assign"
  input: "training/Adam/Variable_108"
  input: "training/Adam/add_143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_108"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_143"
  op: "Assign"
  input: "conv1d_21/bias"
  input: "training/Adam/sub_145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_21/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_241"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_48/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_146/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_146"
  op: "Sub"
  input: "training/Adam/sub_146/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_242"
  op: "Mul"
  input: "training/Adam/sub_146"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_145"
  op: "Add"
  input: "training/Adam/mul_241"
  input: "training/Adam/mul_242"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_243"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_109/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_147/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_147"
  op: "Sub"
  input: "training/Adam/sub_147/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_48"
  op: "Square"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_244"
  op: "Mul"
  input: "training/Adam/sub_147"
  input: "training/Adam/Square_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_146"
  op: "Add"
  input: "training/Adam/mul_243"
  input: "training/Adam/mul_244"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_245"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_98"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_99"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_49/Minimum"
  op: "Minimum"
  input: "training/Adam/add_146"
  input: "training/Adam/Const_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_49"
  op: "Maximum"
  input: "training/Adam/clip_by_value_49/Minimum"
  input: "training/Adam/Const_98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_49"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_147/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_147"
  op: "Add"
  input: "training/Adam/Sqrt_49"
  input: "training/Adam/add_147/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_49"
  op: "RealDiv"
  input: "training/Adam/mul_245"
  input: "training/Adam/add_147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_148"
  op: "Sub"
  input: "lstm_1/kernel/read"
  input: "training/Adam/truediv_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_144"
  op: "Assign"
  input: "training/Adam/Variable_48"
  input: "training/Adam/add_145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_145"
  op: "Assign"
  input: "training/Adam/Variable_109"
  input: "training/Adam/add_146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_109"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_146"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "training/Adam/sub_148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_246"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_49/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_149/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_149"
  op: "Sub"
  input: "training/Adam/sub_149/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_247"
  op: "Mul"
  input: "training/Adam/sub_149"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_148"
  op: "Add"
  input: "training/Adam/mul_246"
  input: "training/Adam/mul_247"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_248"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_110/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_150/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_150"
  op: "Sub"
  input: "training/Adam/sub_150/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_49"
  op: "Square"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_249"
  op: "Mul"
  input: "training/Adam/sub_150"
  input: "training/Adam/Square_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_149"
  op: "Add"
  input: "training/Adam/mul_248"
  input: "training/Adam/mul_249"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_250"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_100"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_101"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_50/Minimum"
  op: "Minimum"
  input: "training/Adam/add_149"
  input: "training/Adam/Const_101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_50"
  op: "Maximum"
  input: "training/Adam/clip_by_value_50/Minimum"
  input: "training/Adam/Const_100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_50"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_150/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_150"
  op: "Add"
  input: "training/Adam/Sqrt_50"
  input: "training/Adam/add_150/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_50"
  op: "RealDiv"
  input: "training/Adam/mul_250"
  input: "training/Adam/add_150"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_151"
  op: "Sub"
  input: "lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_147"
  op: "Assign"
  input: "training/Adam/Variable_49"
  input: "training/Adam/add_148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_148"
  op: "Assign"
  input: "training/Adam/Variable_110"
  input: "training/Adam/add_149"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_110"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_149"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "training/Adam/sub_151"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_251"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_50/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_152/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_152"
  op: "Sub"
  input: "training/Adam/sub_152/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_252"
  op: "Mul"
  input: "training/Adam/sub_152"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_151"
  op: "Add"
  input: "training/Adam/mul_251"
  input: "training/Adam/mul_252"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_253"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_111/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_153/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_153"
  op: "Sub"
  input: "training/Adam/sub_153/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_50"
  op: "Square"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_254"
  op: "Mul"
  input: "training/Adam/sub_153"
  input: "training/Adam/Square_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_152"
  op: "Add"
  input: "training/Adam/mul_253"
  input: "training/Adam/mul_254"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_255"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_151"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_102"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_103"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_51/Minimum"
  op: "Minimum"
  input: "training/Adam/add_152"
  input: "training/Adam/Const_103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_51"
  op: "Maximum"
  input: "training/Adam/clip_by_value_51/Minimum"
  input: "training/Adam/Const_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_51"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_153/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_153"
  op: "Add"
  input: "training/Adam/Sqrt_51"
  input: "training/Adam/add_153/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_51"
  op: "RealDiv"
  input: "training/Adam/mul_255"
  input: "training/Adam/add_153"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_154"
  op: "Sub"
  input: "lstm_1/bias/read"
  input: "training/Adam/truediv_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_150"
  op: "Assign"
  input: "training/Adam/Variable_50"
  input: "training/Adam/add_151"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_151"
  op: "Assign"
  input: "training/Adam/Variable_111"
  input: "training/Adam/add_152"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_111"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_152"
  op: "Assign"
  input: "lstm_1/bias"
  input: "training/Adam/sub_154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_256"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_51/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_155/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_155"
  op: "Sub"
  input: "training/Adam/sub_155/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_257"
  op: "Mul"
  input: "training/Adam/sub_155"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_154"
  op: "Add"
  input: "training/Adam/mul_256"
  input: "training/Adam/mul_257"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_258"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_112/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_156/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_156"
  op: "Sub"
  input: "training/Adam/sub_156/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_51"
  op: "Square"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_259"
  op: "Mul"
  input: "training/Adam/sub_156"
  input: "training/Adam/Square_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_155"
  op: "Add"
  input: "training/Adam/mul_258"
  input: "training/Adam/mul_259"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_260"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_104"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_105"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_52/Minimum"
  op: "Minimum"
  input: "training/Adam/add_155"
  input: "training/Adam/Const_105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_52"
  op: "Maximum"
  input: "training/Adam/clip_by_value_52/Minimum"
  input: "training/Adam/Const_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_52"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_156/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_156"
  op: "Add"
  input: "training/Adam/Sqrt_52"
  input: "training/Adam/add_156/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_52"
  op: "RealDiv"
  input: "training/Adam/mul_260"
  input: "training/Adam/add_156"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_157"
  op: "Sub"
  input: "dense_1/kernel/read"
  input: "training/Adam/truediv_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_153"
  op: "Assign"
  input: "training/Adam/Variable_51"
  input: "training/Adam/add_154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_154"
  op: "Assign"
  input: "training/Adam/Variable_112"
  input: "training/Adam/add_155"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_112"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_155"
  op: "Assign"
  input: "dense_1/kernel"
  input: "training/Adam/sub_157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_261"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_52/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_158/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_158"
  op: "Sub"
  input: "training/Adam/sub_158/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_262"
  op: "Mul"
  input: "training/Adam/sub_158"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_157"
  op: "Add"
  input: "training/Adam/mul_261"
  input: "training/Adam/mul_262"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_263"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_113/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_159/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_159"
  op: "Sub"
  input: "training/Adam/sub_159/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_52"
  op: "Square"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_264"
  op: "Mul"
  input: "training/Adam/sub_159"
  input: "training/Adam/Square_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_158"
  op: "Add"
  input: "training/Adam/mul_263"
  input: "training/Adam/mul_264"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_265"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_106"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_107"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_53/Minimum"
  op: "Minimum"
  input: "training/Adam/add_158"
  input: "training/Adam/Const_107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_53"
  op: "Maximum"
  input: "training/Adam/clip_by_value_53/Minimum"
  input: "training/Adam/Const_106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_53"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_159/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_159"
  op: "Add"
  input: "training/Adam/Sqrt_53"
  input: "training/Adam/add_159/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_53"
  op: "RealDiv"
  input: "training/Adam/mul_265"
  input: "training/Adam/add_159"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_160"
  op: "Sub"
  input: "dense_1/bias/read"
  input: "training/Adam/truediv_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_156"
  op: "Assign"
  input: "training/Adam/Variable_52"
  input: "training/Adam/add_157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_157"
  op: "Assign"
  input: "training/Adam/Variable_113"
  input: "training/Adam/add_158"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_113"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_158"
  op: "Assign"
  input: "dense_1/bias"
  input: "training/Adam/sub_160"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_266"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_53/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_161/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_161"
  op: "Sub"
  input: "training/Adam/sub_161/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_267"
  op: "Mul"
  input: "training/Adam/sub_161"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_160"
  op: "Add"
  input: "training/Adam/mul_266"
  input: "training/Adam/mul_267"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_268"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_114/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_162/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_162"
  op: "Sub"
  input: "training/Adam/sub_162/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_53"
  op: "Square"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_269"
  op: "Mul"
  input: "training/Adam/sub_162"
  input: "training/Adam/Square_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_161"
  op: "Add"
  input: "training/Adam/mul_268"
  input: "training/Adam/mul_269"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_270"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_160"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_108"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_109"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_54/Minimum"
  op: "Minimum"
  input: "training/Adam/add_161"
  input: "training/Adam/Const_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_54"
  op: "Maximum"
  input: "training/Adam/clip_by_value_54/Minimum"
  input: "training/Adam/Const_108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_54"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_162/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_162"
  op: "Add"
  input: "training/Adam/Sqrt_54"
  input: "training/Adam/add_162/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_54"
  op: "RealDiv"
  input: "training/Adam/mul_270"
  input: "training/Adam/add_162"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_163"
  op: "Sub"
  input: "dense_2/kernel/read"
  input: "training/Adam/truediv_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_159"
  op: "Assign"
  input: "training/Adam/Variable_53"
  input: "training/Adam/add_160"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_160"
  op: "Assign"
  input: "training/Adam/Variable_114"
  input: "training/Adam/add_161"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_114"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_161"
  op: "Assign"
  input: "dense_2/kernel"
  input: "training/Adam/sub_163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_271"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_54/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_164/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_164"
  op: "Sub"
  input: "training/Adam/sub_164/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_272"
  op: "Mul"
  input: "training/Adam/sub_164"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_163"
  op: "Add"
  input: "training/Adam/mul_271"
  input: "training/Adam/mul_272"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_273"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_115/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_165/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_165"
  op: "Sub"
  input: "training/Adam/sub_165/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_54"
  op: "Square"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_274"
  op: "Mul"
  input: "training/Adam/sub_165"
  input: "training/Adam/Square_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_164"
  op: "Add"
  input: "training/Adam/mul_273"
  input: "training/Adam/mul_274"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_275"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_110"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_111"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_55/Minimum"
  op: "Minimum"
  input: "training/Adam/add_164"
  input: "training/Adam/Const_111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_55"
  op: "Maximum"
  input: "training/Adam/clip_by_value_55/Minimum"
  input: "training/Adam/Const_110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_55"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_165/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_165"
  op: "Add"
  input: "training/Adam/Sqrt_55"
  input: "training/Adam/add_165/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_55"
  op: "RealDiv"
  input: "training/Adam/mul_275"
  input: "training/Adam/add_165"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_166"
  op: "Sub"
  input: "dense_2/bias/read"
  input: "training/Adam/truediv_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_162"
  op: "Assign"
  input: "training/Adam/Variable_54"
  input: "training/Adam/add_163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_163"
  op: "Assign"
  input: "training/Adam/Variable_115"
  input: "training/Adam/add_164"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_115"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_164"
  op: "Assign"
  input: "dense_2/bias"
  input: "training/Adam/sub_166"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_276"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_55/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_167/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_167"
  op: "Sub"
  input: "training/Adam/sub_167/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_277"
  op: "Mul"
  input: "training/Adam/sub_167"
  input: "training/Adam/gradients/dense_3/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_166"
  op: "Add"
  input: "training/Adam/mul_276"
  input: "training/Adam/mul_277"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_278"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_116/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_168/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_168"
  op: "Sub"
  input: "training/Adam/sub_168/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_55"
  op: "Square"
  input: "training/Adam/gradients/dense_3/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_279"
  op: "Mul"
  input: "training/Adam/sub_168"
  input: "training/Adam/Square_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_167"
  op: "Add"
  input: "training/Adam/mul_278"
  input: "training/Adam/mul_279"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_280"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_166"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_112"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_113"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_56/Minimum"
  op: "Minimum"
  input: "training/Adam/add_167"
  input: "training/Adam/Const_113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_56"
  op: "Maximum"
  input: "training/Adam/clip_by_value_56/Minimum"
  input: "training/Adam/Const_112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_56"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_168/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_168"
  op: "Add"
  input: "training/Adam/Sqrt_56"
  input: "training/Adam/add_168/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_56"
  op: "RealDiv"
  input: "training/Adam/mul_280"
  input: "training/Adam/add_168"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_169"
  op: "Sub"
  input: "dense_3/kernel/read"
  input: "training/Adam/truediv_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_165"
  op: "Assign"
  input: "training/Adam/Variable_55"
  input: "training/Adam/add_166"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_166"
  op: "Assign"
  input: "training/Adam/Variable_116"
  input: "training/Adam/add_167"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_116"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_167"
  op: "Assign"
  input: "dense_3/kernel"
  input: "training/Adam/sub_169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_281"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_56/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_170/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_170"
  op: "Sub"
  input: "training/Adam/sub_170/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_282"
  op: "Mul"
  input: "training/Adam/sub_170"
  input: "training/Adam/gradients/dense_3/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_169"
  op: "Add"
  input: "training/Adam/mul_281"
  input: "training/Adam/mul_282"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_283"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_117/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_171/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_171"
  op: "Sub"
  input: "training/Adam/sub_171/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_56"
  op: "Square"
  input: "training/Adam/gradients/dense_3/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_284"
  op: "Mul"
  input: "training/Adam/sub_171"
  input: "training/Adam/Square_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_170"
  op: "Add"
  input: "training/Adam/mul_283"
  input: "training/Adam/mul_284"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_285"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_114"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_115"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_57/Minimum"
  op: "Minimum"
  input: "training/Adam/add_170"
  input: "training/Adam/Const_115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_57"
  op: "Maximum"
  input: "training/Adam/clip_by_value_57/Minimum"
  input: "training/Adam/Const_114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_57"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_171/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_171"
  op: "Add"
  input: "training/Adam/Sqrt_57"
  input: "training/Adam/add_171/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_57"
  op: "RealDiv"
  input: "training/Adam/mul_285"
  input: "training/Adam/add_171"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_172"
  op: "Sub"
  input: "dense_3/bias/read"
  input: "training/Adam/truediv_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_168"
  op: "Assign"
  input: "training/Adam/Variable_56"
  input: "training/Adam/add_169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_169"
  op: "Assign"
  input: "training/Adam/Variable_117"
  input: "training/Adam/add_170"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_117"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_170"
  op: "Assign"
  input: "dense_3/bias"
  input: "training/Adam/sub_172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_286"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_57/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_173/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_173"
  op: "Sub"
  input: "training/Adam/sub_173/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_287"
  op: "Mul"
  input: "training/Adam/sub_173"
  input: "training/Adam/gradients/dense_4/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_172"
  op: "Add"
  input: "training/Adam/mul_286"
  input: "training/Adam/mul_287"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_288"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_118/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_174/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_174"
  op: "Sub"
  input: "training/Adam/sub_174/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_57"
  op: "Square"
  input: "training/Adam/gradients/dense_4/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_289"
  op: "Mul"
  input: "training/Adam/sub_174"
  input: "training/Adam/Square_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_173"
  op: "Add"
  input: "training/Adam/mul_288"
  input: "training/Adam/mul_289"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_290"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_116"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_117"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_58/Minimum"
  op: "Minimum"
  input: "training/Adam/add_173"
  input: "training/Adam/Const_117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_58"
  op: "Maximum"
  input: "training/Adam/clip_by_value_58/Minimum"
  input: "training/Adam/Const_116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_58"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_174/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_174"
  op: "Add"
  input: "training/Adam/Sqrt_58"
  input: "training/Adam/add_174/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_58"
  op: "RealDiv"
  input: "training/Adam/mul_290"
  input: "training/Adam/add_174"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_175"
  op: "Sub"
  input: "dense_4/kernel/read"
  input: "training/Adam/truediv_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_171"
  op: "Assign"
  input: "training/Adam/Variable_57"
  input: "training/Adam/add_172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_172"
  op: "Assign"
  input: "training/Adam/Variable_118"
  input: "training/Adam/add_173"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_118"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_173"
  op: "Assign"
  input: "dense_4/kernel"
  input: "training/Adam/sub_175"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_291"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_58/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_176/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_176"
  op: "Sub"
  input: "training/Adam/sub_176/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_292"
  op: "Mul"
  input: "training/Adam/sub_176"
  input: "training/Adam/gradients/dense_4/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_175"
  op: "Add"
  input: "training/Adam/mul_291"
  input: "training/Adam/mul_292"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_293"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_119/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_177/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_177"
  op: "Sub"
  input: "training/Adam/sub_177/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_58"
  op: "Square"
  input: "training/Adam/gradients/dense_4/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_294"
  op: "Mul"
  input: "training/Adam/sub_177"
  input: "training/Adam/Square_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_176"
  op: "Add"
  input: "training/Adam/mul_293"
  input: "training/Adam/mul_294"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_295"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_175"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_118"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_119"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_59/Minimum"
  op: "Minimum"
  input: "training/Adam/add_176"
  input: "training/Adam/Const_119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_59"
  op: "Maximum"
  input: "training/Adam/clip_by_value_59/Minimum"
  input: "training/Adam/Const_118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_59"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_177/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_177"
  op: "Add"
  input: "training/Adam/Sqrt_59"
  input: "training/Adam/add_177/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_59"
  op: "RealDiv"
  input: "training/Adam/mul_295"
  input: "training/Adam/add_177"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_178"
  op: "Sub"
  input: "dense_4/bias/read"
  input: "training/Adam/truediv_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_174"
  op: "Assign"
  input: "training/Adam/Variable_58"
  input: "training/Adam/add_175"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_175"
  op: "Assign"
  input: "training/Adam/Variable_119"
  input: "training/Adam/add_176"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_119"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_176"
  op: "Assign"
  input: "dense_4/bias"
  input: "training/Adam/sub_178"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_296"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_59/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_179/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_179"
  op: "Sub"
  input: "training/Adam/sub_179/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_297"
  op: "Mul"
  input: "training/Adam/sub_179"
  input: "training/Adam/gradients/output/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_178"
  op: "Add"
  input: "training/Adam/mul_296"
  input: "training/Adam/mul_297"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_298"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_120/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_180/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_180"
  op: "Sub"
  input: "training/Adam/sub_180/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_59"
  op: "Square"
  input: "training/Adam/gradients/output/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_299"
  op: "Mul"
  input: "training/Adam/sub_180"
  input: "training/Adam/Square_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_179"
  op: "Add"
  input: "training/Adam/mul_298"
  input: "training/Adam/mul_299"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_300"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_178"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_120"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_121"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_60/Minimum"
  op: "Minimum"
  input: "training/Adam/add_179"
  input: "training/Adam/Const_121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_60"
  op: "Maximum"
  input: "training/Adam/clip_by_value_60/Minimum"
  input: "training/Adam/Const_120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_60"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_180/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_180"
  op: "Add"
  input: "training/Adam/Sqrt_60"
  input: "training/Adam/add_180/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_60"
  op: "RealDiv"
  input: "training/Adam/mul_300"
  input: "training/Adam/add_180"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_181"
  op: "Sub"
  input: "output/kernel/read"
  input: "training/Adam/truediv_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_177"
  op: "Assign"
  input: "training/Adam/Variable_59"
  input: "training/Adam/add_178"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_178"
  op: "Assign"
  input: "training/Adam/Variable_120"
  input: "training/Adam/add_179"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_120"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_179"
  op: "Assign"
  input: "output/kernel"
  input: "training/Adam/sub_181"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_301"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_60/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_182/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_182"
  op: "Sub"
  input: "training/Adam/sub_182/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_302"
  op: "Mul"
  input: "training/Adam/sub_182"
  input: "training/Adam/gradients/output/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_181"
  op: "Add"
  input: "training/Adam/mul_301"
  input: "training/Adam/mul_302"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_303"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_121/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_183/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_183"
  op: "Sub"
  input: "training/Adam/sub_183/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_60"
  op: "Square"
  input: "training/Adam/gradients/output/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_304"
  op: "Mul"
  input: "training/Adam/sub_183"
  input: "training/Adam/Square_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_182"
  op: "Add"
  input: "training/Adam/mul_303"
  input: "training/Adam/mul_304"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_305"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_181"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_122"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_123"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_61/Minimum"
  op: "Minimum"
  input: "training/Adam/add_182"
  input: "training/Adam/Const_123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_61"
  op: "Maximum"
  input: "training/Adam/clip_by_value_61/Minimum"
  input: "training/Adam/Const_122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_61"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_183/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_183"
  op: "Add"
  input: "training/Adam/Sqrt_61"
  input: "training/Adam/add_183/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_61"
  op: "RealDiv"
  input: "training/Adam/mul_305"
  input: "training/Adam/add_183"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_184"
  op: "Sub"
  input: "output/bias/read"
  input: "training/Adam/truediv_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_180"
  op: "Assign"
  input: "training/Adam/Variable_60"
  input: "training/Adam/add_181"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_181"
  op: "Assign"
  input: "training/Adam/Variable_121"
  input: "training/Adam/add_182"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_121"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_182"
  op: "Assign"
  input: "output/bias"
  input: "training/Adam/sub_184"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@output/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
  input: "^training/Adam/Assign"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_100"
  input: "^training/Adam/Assign_101"
  input: "^training/Adam/Assign_102"
  input: "^training/Adam/Assign_103"
  input: "^training/Adam/Assign_104"
  input: "^training/Adam/Assign_105"
  input: "^training/Adam/Assign_106"
  input: "^training/Adam/Assign_107"
  input: "^training/Adam/Assign_108"
  input: "^training/Adam/Assign_109"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_110"
  input: "^training/Adam/Assign_111"
  input: "^training/Adam/Assign_112"
  input: "^training/Adam/Assign_113"
  input: "^training/Adam/Assign_114"
  input: "^training/Adam/Assign_115"
  input: "^training/Adam/Assign_116"
  input: "^training/Adam/Assign_117"
  input: "^training/Adam/Assign_118"
  input: "^training/Adam/Assign_119"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_120"
  input: "^training/Adam/Assign_121"
  input: "^training/Adam/Assign_122"
  input: "^training/Adam/Assign_123"
  input: "^training/Adam/Assign_124"
  input: "^training/Adam/Assign_125"
  input: "^training/Adam/Assign_126"
  input: "^training/Adam/Assign_127"
  input: "^training/Adam/Assign_128"
  input: "^training/Adam/Assign_129"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_130"
  input: "^training/Adam/Assign_131"
  input: "^training/Adam/Assign_132"
  input: "^training/Adam/Assign_133"
  input: "^training/Adam/Assign_134"
  input: "^training/Adam/Assign_135"
  input: "^training/Adam/Assign_136"
  input: "^training/Adam/Assign_137"
  input: "^training/Adam/Assign_138"
  input: "^training/Adam/Assign_139"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_140"
  input: "^training/Adam/Assign_141"
  input: "^training/Adam/Assign_142"
  input: "^training/Adam/Assign_143"
  input: "^training/Adam/Assign_144"
  input: "^training/Adam/Assign_145"
  input: "^training/Adam/Assign_146"
  input: "^training/Adam/Assign_147"
  input: "^training/Adam/Assign_148"
  input: "^training/Adam/Assign_149"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_150"
  input: "^training/Adam/Assign_151"
  input: "^training/Adam/Assign_152"
  input: "^training/Adam/Assign_153"
  input: "^training/Adam/Assign_154"
  input: "^training/Adam/Assign_155"
  input: "^training/Adam/Assign_156"
  input: "^training/Adam/Assign_157"
  input: "^training/Adam/Assign_158"
  input: "^training/Adam/Assign_159"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_160"
  input: "^training/Adam/Assign_161"
  input: "^training/Adam/Assign_162"
  input: "^training/Adam/Assign_163"
  input: "^training/Adam/Assign_164"
  input: "^training/Adam/Assign_165"
  input: "^training/Adam/Assign_166"
  input: "^training/Adam/Assign_167"
  input: "^training/Adam/Assign_168"
  input: "^training/Adam/Assign_169"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_170"
  input: "^training/Adam/Assign_171"
  input: "^training/Adam/Assign_172"
  input: "^training/Adam/Assign_173"
  input: "^training/Adam/Assign_174"
  input: "^training/Adam/Assign_175"
  input: "^training/Adam/Assign_176"
  input: "^training/Adam/Assign_177"
  input: "^training/Adam/Assign_178"
  input: "^training/Adam/Assign_179"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_180"
  input: "^training/Adam/Assign_181"
  input: "^training/Adam/Assign_182"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_22"
  input: "^training/Adam/Assign_23"
  input: "^training/Adam/Assign_24"
  input: "^training/Adam/Assign_25"
  input: "^training/Adam/Assign_26"
  input: "^training/Adam/Assign_27"
  input: "^training/Adam/Assign_28"
  input: "^training/Adam/Assign_29"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_30"
  input: "^training/Adam/Assign_31"
  input: "^training/Adam/Assign_32"
  input: "^training/Adam/Assign_33"
  input: "^training/Adam/Assign_34"
  input: "^training/Adam/Assign_35"
  input: "^training/Adam/Assign_36"
  input: "^training/Adam/Assign_37"
  input: "^training/Adam/Assign_38"
  input: "^training/Adam/Assign_39"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_40"
  input: "^training/Adam/Assign_41"
  input: "^training/Adam/Assign_42"
  input: "^training/Adam/Assign_43"
  input: "^training/Adam/Assign_44"
  input: "^training/Adam/Assign_45"
  input: "^training/Adam/Assign_46"
  input: "^training/Adam/Assign_47"
  input: "^training/Adam/Assign_48"
  input: "^training/Adam/Assign_49"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_50"
  input: "^training/Adam/Assign_51"
  input: "^training/Adam/Assign_52"
  input: "^training/Adam/Assign_53"
  input: "^training/Adam/Assign_54"
  input: "^training/Adam/Assign_55"
  input: "^training/Adam/Assign_56"
  input: "^training/Adam/Assign_57"
  input: "^training/Adam/Assign_58"
  input: "^training/Adam/Assign_59"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_60"
  input: "^training/Adam/Assign_61"
  input: "^training/Adam/Assign_62"
  input: "^training/Adam/Assign_63"
  input: "^training/Adam/Assign_64"
  input: "^training/Adam/Assign_65"
  input: "^training/Adam/Assign_66"
  input: "^training/Adam/Assign_67"
  input: "^training/Adam/Assign_68"
  input: "^training/Adam/Assign_69"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_70"
  input: "^training/Adam/Assign_71"
  input: "^training/Adam/Assign_72"
  input: "^training/Adam/Assign_73"
  input: "^training/Adam/Assign_74"
  input: "^training/Adam/Assign_75"
  input: "^training/Adam/Assign_76"
  input: "^training/Adam/Assign_77"
  input: "^training/Adam/Assign_78"
  input: "^training/Adam/Assign_79"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_80"
  input: "^training/Adam/Assign_81"
  input: "^training/Adam/Assign_82"
  input: "^training/Adam/Assign_83"
  input: "^training/Adam/Assign_84"
  input: "^training/Adam/Assign_85"
  input: "^training/Adam/Assign_86"
  input: "^training/Adam/Assign_87"
  input: "^training/Adam/Assign_88"
  input: "^training/Adam/Assign_89"
  input: "^training/Adam/Assign_9"
  input: "^training/Adam/Assign_90"
  input: "^training/Adam/Assign_91"
  input: "^training/Adam/Assign_92"
  input: "^training/Adam/Assign_93"
  input: "^training/Adam/Assign_94"
  input: "^training/Adam/Assign_95"
  input: "^training/Adam/Assign_96"
  input: "^training/Adam/Assign_97"
  input: "^training/Adam/Assign_98"
  input: "^training/Adam/Assign_99"
}
node {
  name: "IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_80"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_81"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_82"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_83"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_84"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_85"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_86"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_87"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_88"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_22"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_89"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_23"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_90"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_24"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_91"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_25"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_92"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_26"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_93"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_27"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_94"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_28"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_95"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_29"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_96"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_30"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_97"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_31"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_98"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_32"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_99"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_33"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_100"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_34"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_101"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_35"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_102"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_36"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_103"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_37"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_104"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_38"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_105"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_39"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_106"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_40"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_107"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_41"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_108"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_42"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_109"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_43"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_110"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_44"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_111"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_45"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_112"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_46"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_113"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_47"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_114"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_48"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_115"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_49"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_116"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_50"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_117"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_51"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_118"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_52"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_119"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_53"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_120"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_54"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_121"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_55"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_122"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_56"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_123"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_57"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_124"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_58"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_125"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_59"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_126"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_60"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_127"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_61"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_128"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_62"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_129"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_63"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_63"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_130"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_64"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_64"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_131"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_65"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_65"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_132"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_66"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_66"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_133"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_67"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_67"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_134"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_68"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_68"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_135"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_69"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_69"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_136"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_70"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_70"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_137"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_71"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_71"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_138"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_72"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_72"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_139"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_73"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_73"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_140"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_74"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_74"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_141"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_75"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_75"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_142"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_76"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_76"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_143"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_77"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_77"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_144"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_78"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_78"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_145"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_79"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_79"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_146"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_80"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_80"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_147"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_81"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_81"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_148"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_82"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_82"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_149"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_83"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_83"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_150"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_84"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_84"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_151"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_85"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_85"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_152"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_86"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_86"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_153"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_87"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_87"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_154"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_88"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_88"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_155"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_89"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_89"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_156"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_90"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_90"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_157"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_91"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_91"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_158"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_92"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_92"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_159"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_93"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_93"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_160"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_94"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_94"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_161"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_95"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_95"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_162"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_96"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_96"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_163"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_97"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_97"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_164"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_98"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_98"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_165"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_99"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_99"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_166"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_100"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_100"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_167"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_101"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_101"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_168"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_102"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_102"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_169"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_103"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_103"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_170"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_104"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_104"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_171"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_105"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_105"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_172"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_106"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_106"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_173"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_107"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_107"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_174"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_108"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_108"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_175"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_109"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_109"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_176"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_110"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_110"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_177"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_111"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_111"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_178"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_112"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_112"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_179"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_113"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_113"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_180"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_114"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_114"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_181"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_115"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_115"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_182"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_116"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_116"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_183"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_117"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_117"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_184"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_118"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_118"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_185"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_119"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_119"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_186"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_120"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_120"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_187"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_121"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_121"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_188"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_122"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_122"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_189"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_123"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_123"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_190"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_124"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_124"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_191"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_125"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_125"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_192"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_126"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_126"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_193"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_127"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_127"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_194"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_128"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_128"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_195"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_129"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_129"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_196"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_130"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_130"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_197"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_131"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_131"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_198"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_132"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_132"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_199"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_133"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_133"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_200"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_134"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_134"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_201"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_135"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_135"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_202"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_136"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_136"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_203"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_137"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_137"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_204"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_138"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_138"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_205"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_139"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_139"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_206"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_140"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_140"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_207"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_141"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_141"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_208"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_142"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_142"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_209"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_143"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_143"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_210"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_144"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_144"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_211"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_145"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_145"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_212"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_146"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_146"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_213"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_147"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_147"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_214"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_148"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_148"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_215"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_149"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_149"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_216"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_150"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_150"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_217"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_151"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_151"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_218"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_152"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_152"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_219"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_153"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_153"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_220"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_154"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_154"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_221"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_155"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_155"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_222"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_156"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_156"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_223"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_157"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_157"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_224"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_158"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_158"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_225"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_159"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_159"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_226"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_160"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_160"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_227"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_161"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_161"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_228"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_162"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_162"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_229"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_163"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_163"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_230"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_164"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_164"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_231"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_165"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_165"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_232"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_166"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_166"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_233"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_167"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_167"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_234"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_168"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_168"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_235"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_169"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_169"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_236"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_170"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_170"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_237"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_171"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_171"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_238"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_172"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_172"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_239"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_173"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_173"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_240"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_174"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_174"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_241"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_175"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_175"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_242"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_176"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_176"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_243"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_177"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_177"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_244"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_178"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_178"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_245"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_179"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_179"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_246"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_180"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_180"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_247"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_181"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_181"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_248"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_182"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_182"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_100/Assign"
  input: "^training/Adam/Variable_101/Assign"
  input: "^training/Adam/Variable_102/Assign"
  input: "^training/Adam/Variable_103/Assign"
  input: "^training/Adam/Variable_104/Assign"
  input: "^training/Adam/Variable_105/Assign"
  input: "^training/Adam/Variable_106/Assign"
  input: "^training/Adam/Variable_107/Assign"
  input: "^training/Adam/Variable_108/Assign"
  input: "^training/Adam/Variable_109/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_110/Assign"
  input: "^training/Adam/Variable_111/Assign"
  input: "^training/Adam/Variable_112/Assign"
  input: "^training/Adam/Variable_113/Assign"
  input: "^training/Adam/Variable_114/Assign"
  input: "^training/Adam/Variable_115/Assign"
  input: "^training/Adam/Variable_116/Assign"
  input: "^training/Adam/Variable_117/Assign"
  input: "^training/Adam/Variable_118/Assign"
  input: "^training/Adam/Variable_119/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_120/Assign"
  input: "^training/Adam/Variable_121/Assign"
  input: "^training/Adam/Variable_122/Assign"
  input: "^training/Adam/Variable_123/Assign"
  input: "^training/Adam/Variable_124/Assign"
  input: "^training/Adam/Variable_125/Assign"
  input: "^training/Adam/Variable_126/Assign"
  input: "^training/Adam/Variable_127/Assign"
  input: "^training/Adam/Variable_128/Assign"
  input: "^training/Adam/Variable_129/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_130/Assign"
  input: "^training/Adam/Variable_131/Assign"
  input: "^training/Adam/Variable_132/Assign"
  input: "^training/Adam/Variable_133/Assign"
  input: "^training/Adam/Variable_134/Assign"
  input: "^training/Adam/Variable_135/Assign"
  input: "^training/Adam/Variable_136/Assign"
  input: "^training/Adam/Variable_137/Assign"
  input: "^training/Adam/Variable_138/Assign"
  input: "^training/Adam/Variable_139/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_140/Assign"
  input: "^training/Adam/Variable_141/Assign"
  input: "^training/Adam/Variable_142/Assign"
  input: "^training/Adam/Variable_143/Assign"
  input: "^training/Adam/Variable_144/Assign"
  input: "^training/Adam/Variable_145/Assign"
  input: "^training/Adam/Variable_146/Assign"
  input: "^training/Adam/Variable_147/Assign"
  input: "^training/Adam/Variable_148/Assign"
  input: "^training/Adam/Variable_149/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_150/Assign"
  input: "^training/Adam/Variable_151/Assign"
  input: "^training/Adam/Variable_152/Assign"
  input: "^training/Adam/Variable_153/Assign"
  input: "^training/Adam/Variable_154/Assign"
  input: "^training/Adam/Variable_155/Assign"
  input: "^training/Adam/Variable_156/Assign"
  input: "^training/Adam/Variable_157/Assign"
  input: "^training/Adam/Variable_158/Assign"
  input: "^training/Adam/Variable_159/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_160/Assign"
  input: "^training/Adam/Variable_161/Assign"
  input: "^training/Adam/Variable_162/Assign"
  input: "^training/Adam/Variable_163/Assign"
  input: "^training/Adam/Variable_164/Assign"
  input: "^training/Adam/Variable_165/Assign"
  input: "^training/Adam/Variable_166/Assign"
  input: "^training/Adam/Variable_167/Assign"
  input: "^training/Adam/Variable_168/Assign"
  input: "^training/Adam/Variable_169/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_170/Assign"
  input: "^training/Adam/Variable_171/Assign"
  input: "^training/Adam/Variable_172/Assign"
  input: "^training/Adam/Variable_173/Assign"
  input: "^training/Adam/Variable_174/Assign"
  input: "^training/Adam/Variable_175/Assign"
  input: "^training/Adam/Variable_176/Assign"
  input: "^training/Adam/Variable_177/Assign"
  input: "^training/Adam/Variable_178/Assign"
  input: "^training/Adam/Variable_179/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_180/Assign"
  input: "^training/Adam/Variable_181/Assign"
  input: "^training/Adam/Variable_182/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_21/Assign"
  input: "^training/Adam/Variable_22/Assign"
  input: "^training/Adam/Variable_23/Assign"
  input: "^training/Adam/Variable_24/Assign"
  input: "^training/Adam/Variable_25/Assign"
  input: "^training/Adam/Variable_26/Assign"
  input: "^training/Adam/Variable_27/Assign"
  input: "^training/Adam/Variable_28/Assign"
  input: "^training/Adam/Variable_29/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_30/Assign"
  input: "^training/Adam/Variable_31/Assign"
  input: "^training/Adam/Variable_32/Assign"
  input: "^training/Adam/Variable_33/Assign"
  input: "^training/Adam/Variable_34/Assign"
  input: "^training/Adam/Variable_35/Assign"
  input: "^training/Adam/Variable_36/Assign"
  input: "^training/Adam/Variable_37/Assign"
  input: "^training/Adam/Variable_38/Assign"
  input: "^training/Adam/Variable_39/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_40/Assign"
  input: "^training/Adam/Variable_41/Assign"
  input: "^training/Adam/Variable_42/Assign"
  input: "^training/Adam/Variable_43/Assign"
  input: "^training/Adam/Variable_44/Assign"
  input: "^training/Adam/Variable_45/Assign"
  input: "^training/Adam/Variable_46/Assign"
  input: "^training/Adam/Variable_47/Assign"
  input: "^training/Adam/Variable_48/Assign"
  input: "^training/Adam/Variable_49/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_50/Assign"
  input: "^training/Adam/Variable_51/Assign"
  input: "^training/Adam/Variable_52/Assign"
  input: "^training/Adam/Variable_53/Assign"
  input: "^training/Adam/Variable_54/Assign"
  input: "^training/Adam/Variable_55/Assign"
  input: "^training/Adam/Variable_56/Assign"
  input: "^training/Adam/Variable_57/Assign"
  input: "^training/Adam/Variable_58/Assign"
  input: "^training/Adam/Variable_59/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_60/Assign"
  input: "^training/Adam/Variable_61/Assign"
  input: "^training/Adam/Variable_62/Assign"
  input: "^training/Adam/Variable_63/Assign"
  input: "^training/Adam/Variable_64/Assign"
  input: "^training/Adam/Variable_65/Assign"
  input: "^training/Adam/Variable_66/Assign"
  input: "^training/Adam/Variable_67/Assign"
  input: "^training/Adam/Variable_68/Assign"
  input: "^training/Adam/Variable_69/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_70/Assign"
  input: "^training/Adam/Variable_71/Assign"
  input: "^training/Adam/Variable_72/Assign"
  input: "^training/Adam/Variable_73/Assign"
  input: "^training/Adam/Variable_74/Assign"
  input: "^training/Adam/Variable_75/Assign"
  input: "^training/Adam/Variable_76/Assign"
  input: "^training/Adam/Variable_77/Assign"
  input: "^training/Adam/Variable_78/Assign"
  input: "^training/Adam/Variable_79/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_80/Assign"
  input: "^training/Adam/Variable_81/Assign"
  input: "^training/Adam/Variable_82/Assign"
  input: "^training/Adam/Variable_83/Assign"
  input: "^training/Adam/Variable_84/Assign"
  input: "^training/Adam/Variable_85/Assign"
  input: "^training/Adam/Variable_86/Assign"
  input: "^training/Adam/Variable_87/Assign"
  input: "^training/Adam/Variable_88/Assign"
  input: "^training/Adam/Variable_89/Assign"
  input: "^training/Adam/Variable_9/Assign"
  input: "^training/Adam/Variable_90/Assign"
  input: "^training/Adam/Variable_91/Assign"
  input: "^training/Adam/Variable_92/Assign"
  input: "^training/Adam/Variable_93/Assign"
  input: "^training/Adam/Variable_94/Assign"
  input: "^training/Adam/Variable_95/Assign"
  input: "^training/Adam/Variable_96/Assign"
  input: "^training/Adam/Variable_97/Assign"
  input: "^training/Adam/Variable_98/Assign"
  input: "^training/Adam/Variable_99/Assign"
}
node {
  name: "Placeholder_61"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "Assign_61"
  op: "Assign"
  input: "Adam/iterations"
  input: "Placeholder_61"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_62"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_62"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "Placeholder_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_63"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_63"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "Placeholder_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_64"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_64"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "Placeholder_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_65"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_65"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "Placeholder_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_66"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_66"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "Placeholder_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_67"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_67"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "Placeholder_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_68"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_68"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "Placeholder_68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_69"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_69"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "Placeholder_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_70"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_70"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "Placeholder_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_71"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_71"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "Placeholder_71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_72"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_72"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "Placeholder_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_73"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_73"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "Placeholder_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_74"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_74"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "Placeholder_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_75"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_75"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "Placeholder_75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_76"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_76"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "Placeholder_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_77"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_77"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "Placeholder_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_78"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_78"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "Placeholder_78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_79"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_79"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "Placeholder_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_80"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_80"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "Placeholder_80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_81"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_81"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "Placeholder_81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_82"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_82"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "Placeholder_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_83"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_83"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "Placeholder_83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_84"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_84"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "Placeholder_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_85"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_85"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "Placeholder_85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_86"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_86"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "Placeholder_86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_87"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_87"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "Placeholder_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_88"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_88"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "Placeholder_88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_89"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_89"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "Placeholder_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_90"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_90"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "Placeholder_90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_91"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_91"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "Placeholder_91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_92"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_92"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "Placeholder_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_93"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_93"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "Placeholder_93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_94"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_94"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "Placeholder_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_95"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_95"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "Placeholder_95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_96"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_96"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "Placeholder_96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_97"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_97"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "Placeholder_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_98"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_98"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "Placeholder_98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_99"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_99"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "Placeholder_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_100"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_100"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "Placeholder_100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_101"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_101"
  op: "Assign"
  input: "training/Adam/Variable_39"
  input: "Placeholder_101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_102"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_102"
  op: "Assign"
  input: "training/Adam/Variable_40"
  input: "Placeholder_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_103"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_103"
  op: "Assign"
  input: "training/Adam/Variable_41"
  input: "Placeholder_103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_104"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_104"
  op: "Assign"
  input: "training/Adam/Variable_42"
  input: "Placeholder_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_105"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_105"
  op: "Assign"
  input: "training/Adam/Variable_43"
  input: "Placeholder_105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_106"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_106"
  op: "Assign"
  input: "training/Adam/Variable_44"
  input: "Placeholder_106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_107"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_107"
  op: "Assign"
  input: "training/Adam/Variable_45"
  input: "Placeholder_107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_108"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_108"
  op: "Assign"
  input: "training/Adam/Variable_46"
  input: "Placeholder_108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_109"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_109"
  op: "Assign"
  input: "training/Adam/Variable_47"
  input: "Placeholder_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_110"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_110"
  op: "Assign"
  input: "training/Adam/Variable_48"
  input: "Placeholder_110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_111"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_111"
  op: "Assign"
  input: "training/Adam/Variable_49"
  input: "Placeholder_111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_112"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_112"
  op: "Assign"
  input: "training/Adam/Variable_50"
  input: "Placeholder_112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_113"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_113"
  op: "Assign"
  input: "training/Adam/Variable_51"
  input: "Placeholder_113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_114"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_114"
  op: "Assign"
  input: "training/Adam/Variable_52"
  input: "Placeholder_114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_115"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "Assign_115"
  op: "Assign"
  input: "training/Adam/Variable_53"
  input: "Placeholder_115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_116"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "Assign_116"
  op: "Assign"
  input: "training/Adam/Variable_54"
  input: "Placeholder_116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_117"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_117"
  op: "Assign"
  input: "training/Adam/Variable_55"
  input: "Placeholder_117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_118"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_118"
  op: "Assign"
  input: "training/Adam/Variable_56"
  input: "Placeholder_118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_119"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
}
node {
  name: "Assign_119"
  op: "Assign"
  input: "training/Adam/Variable_57"
  input: "Placeholder_119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_120"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
}
node {
  name: "Assign_120"
  op: "Assign"
  input: "training/Adam/Variable_58"
  input: "Placeholder_120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_121"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 8
        }
      }
    }
  }
}
node {
  name: "Assign_121"
  op: "Assign"
  input: "training/Adam/Variable_59"
  input: "Placeholder_121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_122"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
}
node {
  name: "Assign_122"
  op: "Assign"
  input: "training/Adam/Variable_60"
  input: "Placeholder_122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_123"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_123"
  op: "Assign"
  input: "training/Adam/Variable_61"
  input: "Placeholder_123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_124"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_124"
  op: "Assign"
  input: "training/Adam/Variable_62"
  input: "Placeholder_124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_125"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_125"
  op: "Assign"
  input: "training/Adam/Variable_63"
  input: "Placeholder_125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_63"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_126"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_126"
  op: "Assign"
  input: "training/Adam/Variable_64"
  input: "Placeholder_126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_64"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_127"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_127"
  op: "Assign"
  input: "training/Adam/Variable_65"
  input: "Placeholder_127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_65"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_128"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_128"
  op: "Assign"
  input: "training/Adam/Variable_66"
  input: "Placeholder_128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_66"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_129"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_129"
  op: "Assign"
  input: "training/Adam/Variable_67"
  input: "Placeholder_129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_67"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_130"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_130"
  op: "Assign"
  input: "training/Adam/Variable_68"
  input: "Placeholder_130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_68"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_131"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_131"
  op: "Assign"
  input: "training/Adam/Variable_69"
  input: "Placeholder_131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_69"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_132"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_132"
  op: "Assign"
  input: "training/Adam/Variable_70"
  input: "Placeholder_132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_70"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_133"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_133"
  op: "Assign"
  input: "training/Adam/Variable_71"
  input: "Placeholder_133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_71"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_134"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_134"
  op: "Assign"
  input: "training/Adam/Variable_72"
  input: "Placeholder_134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_72"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_135"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_135"
  op: "Assign"
  input: "training/Adam/Variable_73"
  input: "Placeholder_135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_73"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_136"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_136"
  op: "Assign"
  input: "training/Adam/Variable_74"
  input: "Placeholder_136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_74"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_137"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_137"
  op: "Assign"
  input: "training/Adam/Variable_75"
  input: "Placeholder_137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_75"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_138"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_138"
  op: "Assign"
  input: "training/Adam/Variable_76"
  input: "Placeholder_138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_76"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_139"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_139"
  op: "Assign"
  input: "training/Adam/Variable_77"
  input: "Placeholder_139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_77"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_140"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_140"
  op: "Assign"
  input: "training/Adam/Variable_78"
  input: "Placeholder_140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_78"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_141"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_141"
  op: "Assign"
  input: "training/Adam/Variable_79"
  input: "Placeholder_141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_79"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_142"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_142"
  op: "Assign"
  input: "training/Adam/Variable_80"
  input: "Placeholder_142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_80"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_143"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_143"
  op: "Assign"
  input: "training/Adam/Variable_81"
  input: "Placeholder_143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_81"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_144"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_144"
  op: "Assign"
  input: "training/Adam/Variable_82"
  input: "Placeholder_144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_82"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_145"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_145"
  op: "Assign"
  input: "training/Adam/Variable_83"
  input: "Placeholder_145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_83"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_146"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_146"
  op: "Assign"
  input: "training/Adam/Variable_84"
  input: "Placeholder_146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_84"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_147"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_147"
  op: "Assign"
  input: "training/Adam/Variable_85"
  input: "Placeholder_147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_85"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_148"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_148"
  op: "Assign"
  input: "training/Adam/Variable_86"
  input: "Placeholder_148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_86"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_149"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_149"
  op: "Assign"
  input: "training/Adam/Variable_87"
  input: "Placeholder_149"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_87"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_150"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_150"
  op: "Assign"
  input: "training/Adam/Variable_88"
  input: "Placeholder_150"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_88"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_151"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_151"
  op: "Assign"
  input: "training/Adam/Variable_89"
  input: "Placeholder_151"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_89"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_152"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_152"
  op: "Assign"
  input: "training/Adam/Variable_90"
  input: "Placeholder_152"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_90"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_153"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_153"
  op: "Assign"
  input: "training/Adam/Variable_91"
  input: "Placeholder_153"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_91"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_154"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_154"
  op: "Assign"
  input: "training/Adam/Variable_92"
  input: "Placeholder_154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_92"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_155"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_155"
  op: "Assign"
  input: "training/Adam/Variable_93"
  input: "Placeholder_155"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_93"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_156"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_156"
  op: "Assign"
  input: "training/Adam/Variable_94"
  input: "Placeholder_156"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_94"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_157"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_157"
  op: "Assign"
  input: "training/Adam/Variable_95"
  input: "Placeholder_157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_95"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_158"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_158"
  op: "Assign"
  input: "training/Adam/Variable_96"
  input: "Placeholder_158"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_96"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_159"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_159"
  op: "Assign"
  input: "training/Adam/Variable_97"
  input: "Placeholder_159"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_97"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_160"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_160"
  op: "Assign"
  input: "training/Adam/Variable_98"
  input: "Placeholder_160"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_98"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_161"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_161"
  op: "Assign"
  input: "training/Adam/Variable_99"
  input: "Placeholder_161"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_99"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_162"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_162"
  op: "Assign"
  input: "training/Adam/Variable_100"
  input: "Placeholder_162"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_100"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_163"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_163"
  op: "Assign"
  input: "training/Adam/Variable_101"
  input: "Placeholder_163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_101"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_164"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_164"
  op: "Assign"
  input: "training/Adam/Variable_102"
  input: "Placeholder_164"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_102"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_165"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_165"
  op: "Assign"
  input: "training/Adam/Variable_103"
  input: "Placeholder_165"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_103"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_166"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_166"
  op: "Assign"
  input: "training/Adam/Variable_104"
  input: "Placeholder_166"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_104"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_167"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_167"
  op: "Assign"
  input: "training/Adam/Variable_105"
  input: "Placeholder_167"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_105"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_168"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_168"
  op: "Assign"
  input: "training/Adam/Variable_106"
  input: "Placeholder_168"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_106"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_169"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_169"
  op: "Assign"
  input: "training/Adam/Variable_107"
  input: "Placeholder_169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_107"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_170"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_170"
  op: "Assign"
  input: "training/Adam/Variable_108"
  input: "Placeholder_170"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_108"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_171"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 224
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_171"
  op: "Assign"
  input: "training/Adam/Variable_109"
  input: "Placeholder_171"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_109"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_172"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_172"
  op: "Assign"
  input: "training/Adam/Variable_110"
  input: "Placeholder_172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_110"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_173"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_173"
  op: "Assign"
  input: "training/Adam/Variable_111"
  input: "Placeholder_173"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_111"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_174"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_174"
  op: "Assign"
  input: "training/Adam/Variable_112"
  input: "Placeholder_174"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_112"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_175"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "Assign_175"
  op: "Assign"
  input: "training/Adam/Variable_113"
  input: "Placeholder_175"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_113"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_176"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "Assign_176"
  op: "Assign"
  input: "training/Adam/Variable_114"
  input: "Placeholder_176"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_114"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_177"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "Assign_177"
  op: "Assign"
  input: "training/Adam/Variable_115"
  input: "Placeholder_177"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_115"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_178"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_178"
  op: "Assign"
  input: "training/Adam/Variable_116"
  input: "Placeholder_178"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_116"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_179"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "Assign_179"
  op: "Assign"
  input: "training/Adam/Variable_117"
  input: "Placeholder_179"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_117"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_180"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
}
node {
  name: "Assign_180"
  op: "Assign"
  input: "training/Adam/Variable_118"
  input: "Placeholder_180"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_118"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_181"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
}
node {
  name: "Assign_181"
  op: "Assign"
  input: "training/Adam/Variable_119"
  input: "Placeholder_181"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_119"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_182"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 8
        }
      }
    }
  }
}
node {
  name: "Assign_182"
  op: "Assign"
  input: "training/Adam/Variable_120"
  input: "Placeholder_182"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_120"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_183"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
}
node {
  name: "Assign_183"
  op: "Assign"
  input: "training/Adam/Variable_121"
  input: "Placeholder_183"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_121"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_184"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_184"
  op: "Assign"
  input: "training/Adam/Variable_122"
  input: "Placeholder_184"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_122"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_185"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_185"
  op: "Assign"
  input: "training/Adam/Variable_123"
  input: "Placeholder_185"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_123"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_186"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_186"
  op: "Assign"
  input: "training/Adam/Variable_124"
  input: "Placeholder_186"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_124"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_187"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_187"
  op: "Assign"
  input: "training/Adam/Variable_125"
  input: "Placeholder_187"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_125"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_188"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_188"
  op: "Assign"
  input: "training/Adam/Variable_126"
  input: "Placeholder_188"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_126"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_189"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_189"
  op: "Assign"
  input: "training/Adam/Variable_127"
  input: "Placeholder_189"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_127"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_190"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_190"
  op: "Assign"
  input: "training/Adam/Variable_128"
  input: "Placeholder_190"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_128"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_191"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_191"
  op: "Assign"
  input: "training/Adam/Variable_129"
  input: "Placeholder_191"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_129"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_192"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_192"
  op: "Assign"
  input: "training/Adam/Variable_130"
  input: "Placeholder_192"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_130"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_193"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_193"
  op: "Assign"
  input: "training/Adam/Variable_131"
  input: "Placeholder_193"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_131"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_194"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_194"
  op: "Assign"
  input: "training/Adam/Variable_132"
  input: "Placeholder_194"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_132"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_195"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_195"
  op: "Assign"
  input: "training/Adam/Variable_133"
  input: "Placeholder_195"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_133"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_196"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_196"
  op: "Assign"
  input: "training/Adam/Variable_134"
  input: "Placeholder_196"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_134"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_197"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_197"
  op: "Assign"
  input: "training/Adam/Variable_135"
  input: "Placeholder_197"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_135"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_198"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_198"
  op: "Assign"
  input: "training/Adam/Variable_136"
  input: "Placeholder_198"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_136"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_199"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_199"
  op: "Assign"
  input: "training/Adam/Variable_137"
  input: "Placeholder_199"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_137"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_200"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_200"
  op: "Assign"
  input: "training/Adam/Variable_138"
  input: "Placeholder_200"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_138"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_201"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_201"
  op: "Assign"
  input: "training/Adam/Variable_139"
  input: "Placeholder_201"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_139"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_202"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_202"
  op: "Assign"
  input: "training/Adam/Variable_140"
  input: "Placeholder_202"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_140"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_203"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_203"
  op: "Assign"
  input: "training/Adam/Variable_141"
  input: "Placeholder_203"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_141"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_204"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_204"
  op: "Assign"
  input: "training/Adam/Variable_142"
  input: "Placeholder_204"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_142"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_205"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_205"
  op: "Assign"
  input: "training/Adam/Variable_143"
  input: "Placeholder_205"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_143"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_206"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_206"
  op: "Assign"
  input: "training/Adam/Variable_144"
  input: "Placeholder_206"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_144"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_207"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_207"
  op: "Assign"
  input: "training/Adam/Variable_145"
  input: "Placeholder_207"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_145"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_208"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_208"
  op: "Assign"
  input: "training/Adam/Variable_146"
  input: "Placeholder_208"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_146"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_209"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_209"
  op: "Assign"
  input: "training/Adam/Variable_147"
  input: "Placeholder_209"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_147"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_210"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_210"
  op: "Assign"
  input: "training/Adam/Variable_148"
  input: "Placeholder_210"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_148"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_211"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_211"
  op: "Assign"
  input: "training/Adam/Variable_149"
  input: "Placeholder_211"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_149"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_212"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_212"
  op: "Assign"
  input: "training/Adam/Variable_150"
  input: "Placeholder_212"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_150"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_213"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_213"
  op: "Assign"
  input: "training/Adam/Variable_151"
  input: "Placeholder_213"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_151"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_214"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_214"
  op: "Assign"
  input: "training/Adam/Variable_152"
  input: "Placeholder_214"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_152"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_215"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_215"
  op: "Assign"
  input: "training/Adam/Variable_153"
  input: "Placeholder_215"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_153"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_216"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_216"
  op: "Assign"
  input: "training/Adam/Variable_154"
  input: "Placeholder_216"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_154"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_217"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_217"
  op: "Assign"
  input: "training/Adam/Variable_155"
  input: "Placeholder_217"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_155"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_218"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_218"
  op: "Assign"
  input: "training/Adam/Variable_156"
  input: "Placeholder_218"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_156"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_219"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_219"
  op: "Assign"
  input: "training/Adam/Variable_157"
  input: "Placeholder_219"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_157"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_220"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_220"
  op: "Assign"
  input: "training/Adam/Variable_158"
  input: "Placeholder_220"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_158"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_221"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_221"
  op: "Assign"
  input: "training/Adam/Variable_159"
  input: "Placeholder_221"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_159"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_222"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_222"
  op: "Assign"
  input: "training/Adam/Variable_160"
  input: "Placeholder_222"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_160"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_223"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_223"
  op: "Assign"
  input: "training/Adam/Variable_161"
  input: "Placeholder_223"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_161"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_224"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_224"
  op: "Assign"
  input: "training/Adam/Variable_162"
  input: "Placeholder_224"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_162"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_225"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_225"
  op: "Assign"
  input: "training/Adam/Variable_163"
  input: "Placeholder_225"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_163"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_226"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_226"
  op: "Assign"
  input: "training/Adam/Variable_164"
  input: "Placeholder_226"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_164"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_227"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_227"
  op: "Assign"
  input: "training/Adam/Variable_165"
  input: "Placeholder_227"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_165"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_228"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_228"
  op: "Assign"
  input: "training/Adam/Variable_166"
  input: "Placeholder_228"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_166"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_229"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_229"
  op: "Assign"
  input: "training/Adam/Variable_167"
  input: "Placeholder_229"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_167"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_230"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_230"
  op: "Assign"
  input: "training/Adam/Variable_168"
  input: "Placeholder_230"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_168"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_231"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_231"
  op: "Assign"
  input: "training/Adam/Variable_169"
  input: "Placeholder_231"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_169"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_232"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_232"
  op: "Assign"
  input: "training/Adam/Variable_170"
  input: "Placeholder_232"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_170"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_233"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_233"
  op: "Assign"
  input: "training/Adam/Variable_171"
  input: "Placeholder_233"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_171"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_234"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_234"
  op: "Assign"
  input: "training/Adam/Variable_172"
  input: "Placeholder_234"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_172"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_235"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_235"
  op: "Assign"
  input: "training/Adam/Variable_173"
  input: "Placeholder_235"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_173"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_236"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_236"
  op: "Assign"
  input: "training/Adam/Variable_174"
  input: "Placeholder_236"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_174"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_237"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_237"
  op: "Assign"
  input: "training/Adam/Variable_175"
  input: "Placeholder_237"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_175"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_238"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_238"
  op: "Assign"
  input: "training/Adam/Variable_176"
  input: "Placeholder_238"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_176"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_239"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_239"
  op: "Assign"
  input: "training/Adam/Variable_177"
  input: "Placeholder_239"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_177"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_240"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_240"
  op: "Assign"
  input: "training/Adam/Variable_178"
  input: "Placeholder_240"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_178"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_241"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_241"
  op: "Assign"
  input: "training/Adam/Variable_179"
  input: "Placeholder_241"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_179"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_242"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_242"
  op: "Assign"
  input: "training/Adam/Variable_180"
  input: "Placeholder_242"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_180"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_243"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_243"
  op: "Assign"
  input: "training/Adam/Variable_181"
  input: "Placeholder_243"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_181"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_244"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_244"
  op: "Assign"
  input: "training/Adam/Variable_182"
  input: "Placeholder_244"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_182"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "output/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 26
}
